#pragma once
#ifndef SRC_RESTRICTED_EXTRAS_QCUSTOMPLOTQT6C_LIBQCUSTOMPLOT_H
#define SRC_RESTRICTED_EXTRAS_QCUSTOMPLOTQT6C_LIBQCUSTOMPLOT_H

#include <stdbool.h>
#include <stddef.h>

#include "../libqttypedefs.h"

#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#include "../qtlibc.h"

/// https://www.qcustomplot.com/documentation/namespaceQCP.html

/// [Qt documentation](https://www.qcustomplot.com/documentation/namespaceQCP.html)
///
/// @param param1 enum QCP__ExportPen
const QMetaObject* q_cp_get_enum_meta_object(int32_t param1);

/// [Qt documentation](https://www.qcustomplot.com/documentation/namespaceQCP.html)
///
/// Caller is responsible for freeing the returned memory
///
/// @param param1 enum QCP__ExportPen
const char* q_cp_get_enum_name(int32_t param1);

/// [Qt documentation](https://www.qcustomplot.com/documentation/namespaceQCP.html)
///
/// @param param1 enum QCP__ResolutionUnit
const QMetaObject* q_cp_get_enum_meta_object2(int32_t param1);

/// [Qt documentation](https://www.qcustomplot.com/documentation/namespaceQCP.html)
///
/// Caller is responsible for freeing the returned memory
///
/// @param param1 enum QCP__ResolutionUnit
const char* q_cp_get_enum_name2(int32_t param1);

/// [Qt documentation](https://www.qcustomplot.com/documentation/namespaceQCP.html)
///
/// @param param1 enum QCP__SignDomain
const QMetaObject* q_cp_get_enum_meta_object3(int32_t param1);

/// [Qt documentation](https://www.qcustomplot.com/documentation/namespaceQCP.html)
///
/// Caller is responsible for freeing the returned memory
///
/// @param param1 enum QCP__SignDomain
const char* q_cp_get_enum_name3(int32_t param1);

/// [Qt documentation](https://www.qcustomplot.com/documentation/namespaceQCP.html)
///
/// @param param1 enum QCP__MarginSide
const QMetaObject* q_cp_get_enum_meta_object4(int32_t param1);

/// [Qt documentation](https://www.qcustomplot.com/documentation/namespaceQCP.html)
///
/// Caller is responsible for freeing the returned memory
///
/// @param param1 enum QCP__MarginSide
const char* q_cp_get_enum_name4(int32_t param1);

/// [Qt documentation](https://www.qcustomplot.com/documentation/namespaceQCP.html)
///
/// @param param1 flag of enum QCP__MarginSide
const QMetaObject* q_cp_get_enum_meta_object5(int32_t param1);

/// [Qt documentation](https://www.qcustomplot.com/documentation/namespaceQCP.html)
///
/// Caller is responsible for freeing the returned memory
///
/// @param param1 flag of enum QCP__MarginSide
const char* q_cp_get_enum_name5(int32_t param1);

/// [Qt documentation](https://www.qcustomplot.com/documentation/namespaceQCP.html)
///
/// @param param1 enum QCP__AntialiasedElement
const QMetaObject* q_cp_get_enum_meta_object6(int32_t param1);

/// [Qt documentation](https://www.qcustomplot.com/documentation/namespaceQCP.html)
///
/// Caller is responsible for freeing the returned memory
///
/// @param param1 enum QCP__AntialiasedElement
const char* q_cp_get_enum_name6(int32_t param1);

/// [Qt documentation](https://www.qcustomplot.com/documentation/namespaceQCP.html)
///
/// @param param1 flag of enum QCP__AntialiasedElement
const QMetaObject* q_cp_get_enum_meta_object7(int32_t param1);

/// [Qt documentation](https://www.qcustomplot.com/documentation/namespaceQCP.html)
///
/// Caller is responsible for freeing the returned memory
///
/// @param param1 flag of enum QCP__AntialiasedElement
const char* q_cp_get_enum_name7(int32_t param1);

/// [Qt documentation](https://www.qcustomplot.com/documentation/namespaceQCP.html)
///
/// @param param1 enum QCP__PlottingHint
const QMetaObject* q_cp_get_enum_meta_object8(int32_t param1);

/// [Qt documentation](https://www.qcustomplot.com/documentation/namespaceQCP.html)
///
/// Caller is responsible for freeing the returned memory
///
/// @param param1 enum QCP__PlottingHint
const char* q_cp_get_enum_name8(int32_t param1);

/// [Qt documentation](https://www.qcustomplot.com/documentation/namespaceQCP.html)
///
/// @param param1 flag of enum QCP__PlottingHint
const QMetaObject* q_cp_get_enum_meta_object9(int32_t param1);

/// [Qt documentation](https://www.qcustomplot.com/documentation/namespaceQCP.html)
///
/// Caller is responsible for freeing the returned memory
///
/// @param param1 flag of enum QCP__PlottingHint
const char* q_cp_get_enum_name9(int32_t param1);

/// [Qt documentation](https://www.qcustomplot.com/documentation/namespaceQCP.html)
///
/// @param param1 enum QCP__Interaction
const QMetaObject* q_cp_get_enum_meta_object10(int32_t param1);

/// [Qt documentation](https://www.qcustomplot.com/documentation/namespaceQCP.html)
///
/// Caller is responsible for freeing the returned memory
///
/// @param param1 enum QCP__Interaction
const char* q_cp_get_enum_name10(int32_t param1);

/// [Qt documentation](https://www.qcustomplot.com/documentation/namespaceQCP.html)
///
/// @param param1 flag of enum QCP__Interaction
const QMetaObject* q_cp_get_enum_meta_object11(int32_t param1);

/// [Qt documentation](https://www.qcustomplot.com/documentation/namespaceQCP.html)
///
/// Caller is responsible for freeing the returned memory
///
/// @param param1 flag of enum QCP__Interaction
const char* q_cp_get_enum_name11(int32_t param1);

/// [Qt documentation](https://www.qcustomplot.com/documentation/namespaceQCP.html)
///
/// @param param1 enum QCP__SelectionRectMode
const QMetaObject* q_cp_get_enum_meta_object12(int32_t param1);

/// [Qt documentation](https://www.qcustomplot.com/documentation/namespaceQCP.html)
///
/// Caller is responsible for freeing the returned memory
///
/// @param param1 enum QCP__SelectionRectMode
const char* q_cp_get_enum_name12(int32_t param1);

/// [Qt documentation](https://www.qcustomplot.com/documentation/namespaceQCP.html)
///
/// @param param1 enum QCP__SelectionType
const QMetaObject* q_cp_get_enum_meta_object13(int32_t param1);

/// [Qt documentation](https://www.qcustomplot.com/documentation/namespaceQCP.html)
///
/// Caller is responsible for freeing the returned memory
///
/// @param param1 enum QCP__SelectionType
const char* q_cp_get_enum_name13(int32_t param1);

/// [Qt documentation](https://www.qcustomplot.com/documentation/namespaceQCP.html)
///
/// @param param1 double
bool q_cp_is_invalid_data(double param1);

/// [Qt documentation](https://www.qcustomplot.com/documentation/namespaceQCP.html)
///
/// @param param1 double
/// @param param2 double
bool q_cp_is_invalid_data2(double param1, double param2);

/// [Qt documentation](https://www.qcustomplot.com/documentation/namespaceQCP.html)
///
/// @param param1 QMargins*
/// @param param2 enum QCP__MarginSide
/// @param param3 int
void q_cp_set_margin_value(void* param1, int32_t param2, int param3);

/// [Qt documentation](https://www.qcustomplot.com/documentation/namespaceQCP.html)
///
/// @param param1 QMargins*
/// @param param2 enum QCP__MarginSide
int32_t q_cp_get_margin_value(void* param1, int32_t param2);

/// https://www.qcustomplot.com/documentation/classQCPVector2D.html

/// q_cpvector2d_new constructs a new QCPVector2D object.
///
/// @param other QCPVector2D*
QCPVector2D* q_cpvector2d_new(void* other);

/// q_cpvector2d_new2 constructs a new QCPVector2D object and invalidates the source QCPVector2D object.
///
/// @param other QCPVector2D*
QCPVector2D* q_cpvector2d_new2(void* other);

/// q_cpvector2d_new3 constructs a new QCPVector2D object.
///
QCPVector2D* q_cpvector2d_new3();

/// q_cpvector2d_new4 constructs a new QCPVector2D object.
///
/// @param x double
/// @param y double
QCPVector2D* q_cpvector2d_new4(double x, double y);

/// q_cpvector2d_new5 constructs a new QCPVector2D object.
///
/// @param point QPoint*
QCPVector2D* q_cpvector2d_new5(void* point);

/// q_cpvector2d_new6 constructs a new QCPVector2D object.
///
/// @param point QPointF*
QCPVector2D* q_cpvector2d_new6(void* point);

/// q_cpvector2d_new7 constructs a new QCPVector2D object.
///
/// @param param1 QCPVector2D*
QCPVector2D* q_cpvector2d_new7(void* param1);

/// q_cpvector2d_copy_assign shallow copies `other` into `self`.
///
/// @param self QCPVector2D*
/// @param other QCPVector2D*
void q_cpvector2d_copy_assign(void* self, void* other);

/// q_cpvector2d_move_assign moves `other` into `self` and invalidates `other`.
///
/// @param self QCPVector2D*
/// @param other QCPVector2D*
void q_cpvector2d_move_assign(void* self, void* other);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPVector2D.html)
///
/// @param self QCPVector2D*
double q_cpvector2d_x(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPVector2D.html)
///
/// @param self QCPVector2D*
double q_cpvector2d_y(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPVector2D.html)
///
/// @param self QCPVector2D*
double* q_cpvector2d_rx(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPVector2D.html)
///
/// @param self QCPVector2D*
double* q_cpvector2d_ry(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPVector2D.html)
///
/// @param self QCPVector2D*
/// @param x double
void q_cpvector2d_set_x(void* self, double x);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPVector2D.html)
///
/// @param self QCPVector2D*
/// @param y double
void q_cpvector2d_set_y(void* self, double y);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPVector2D.html)
///
/// @param self QCPVector2D*
double q_cpvector2d_length(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPVector2D.html)
///
/// @param self QCPVector2D*
double q_cpvector2d_length_squared(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPVector2D.html)
///
/// @param self QCPVector2D*
double q_cpvector2d_angle(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPVector2D.html)
///
/// @param self QCPVector2D*
QPoint* q_cpvector2d_to_point(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPVector2D.html)
///
/// @param self QCPVector2D*
QPointF* q_cpvector2d_to_point_f(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPVector2D.html)
///
/// @param self QCPVector2D*
bool q_cpvector2d_is_null(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPVector2D.html)
///
/// @param self QCPVector2D*
void q_cpvector2d_normalize(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPVector2D.html)
///
/// @param self QCPVector2D*
QCPVector2D* q_cpvector2d_normalized(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPVector2D.html)
///
/// @param self QCPVector2D*
QCPVector2D* q_cpvector2d_perpendicular(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPVector2D.html)
///
/// @param self QCPVector2D*
/// @param vec QCPVector2D*
double q_cpvector2d_dot(void* self, void* vec);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPVector2D.html)
///
/// @param self QCPVector2D*
/// @param start QCPVector2D*
/// @param end QCPVector2D*
double q_cpvector2d_distance_squared_to_line(void* self, void* start, void* end);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPVector2D.html)
///
/// @param self QCPVector2D*
/// @param line QLineF*
double q_cpvector2d_distance_squared_to_line2(void* self, void* line);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPVector2D.html)
///
/// @param self QCPVector2D*
/// @param base QCPVector2D*
/// @param direction QCPVector2D*
double q_cpvector2d_distance_to_straight_line(void* self, void* base, void* direction);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPVector2D.html)
///
/// @param self QCPVector2D*
/// @param factor double
QCPVector2D* q_cpvector2d_operator_multiply_assign(void* self, double factor);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPVector2D.html)
///
/// @param self QCPVector2D*
/// @param divisor double
QCPVector2D* q_cpvector2d_operator_divide_assign(void* self, double divisor);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPVector2D.html)
///
/// @param self QCPVector2D*
/// @param vector QCPVector2D*
QCPVector2D* q_cpvector2d_operator_plus_assign(void* self, void* vector);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPVector2D.html)
///
/// @param self QCPVector2D*
/// @param vector QCPVector2D*
QCPVector2D* q_cpvector2d_operator_minus_assign(void* self, void* vector);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPVector2D.html)
///
/// Delete this object from C++ memory.
///
/// @param self QCPVector2D*
void q_cpvector2d_delete(void* self);

/// https://www.qcustomplot.com/documentation/classQCPPainter.html

/// q_cppainter_new constructs a new QCPPainter object.
///
QCPPainter* q_cppainter_new();

/// q_cppainter_new2 constructs a new QCPPainter object.
///
/// @param device QPaintDevice*
QCPPainter* q_cppainter_new2(void* device);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPainter.html)
///
/// @param self QCPPainter*
bool q_cppainter_antialiasing(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPainter.html)
///
/// @param self QCPPainter*
///
/// @return flag of enum QCPPainter__PainterMode
int32_t q_cppainter_modes(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPainter.html)
///
/// @param self QCPPainter*
/// @param enabled bool
void q_cppainter_set_antialiasing(void* self, bool enabled);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPainter.html)
///
/// @param self QCPPainter*
/// @param mode enum QCPPainter__PainterMode
void q_cppainter_set_mode(void* self, int32_t mode);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPainter.html)
///
/// @param self QCPPainter*
/// @param modes flag of enum QCPPainter__PainterMode
void q_cppainter_set_modes(void* self, int32_t modes);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPainter.html)
///
/// @param self QCPPainter*
/// @param device QPaintDevice*
bool q_cppainter_begin(void* self, void* device);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPainter.html)
///
/// @param self QCPPainter*
/// @param pen QPen*
void q_cppainter_set_pen(void* self, void* pen);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPainter.html)
///
/// @param self QCPPainter*
/// @param color QColor*
void q_cppainter_set_pen2(void* self, void* color);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPainter.html)
///
/// @param self QCPPainter*
/// @param penStyle enum Qt__PenStyle
void q_cppainter_set_pen3(void* self, int32_t penStyle);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPainter.html)
///
/// @param self QCPPainter*
/// @param line QLineF*
void q_cppainter_draw_line(void* self, void* line);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPainter.html)
///
/// @param self QCPPainter*
/// @param p1 QPointF*
/// @param p2 QPointF*
void q_cppainter_draw_line2(void* self, void* p1, void* p2);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPainter.html)
///
/// @param self QCPPainter*
void q_cppainter_save(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPainter.html)
///
/// @param self QCPPainter*
void q_cppainter_restore(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPainter.html)
///
/// @param self QCPPainter*
void q_cppainter_make_non_cosmetic(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPainter.html)
///
/// @param self QCPPainter*
/// @param mode enum QCPPainter__PainterMode
/// @param enabled bool
void q_cppainter_set_mode2(void* self, int32_t mode, bool enabled);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#device)
///
/// @param self QCPPainter*
QPaintDevice* q_cppainter_device(void* self);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#end)
///
/// @param self QCPPainter*
bool q_cppainter_end(void* self);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#isActive)
///
/// @param self QCPPainter*
bool q_cppainter_is_active(void* self);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#setCompositionMode)
///
/// @param self QCPPainter*
/// @param mode enum QPainter__CompositionMode
void q_cppainter_set_composition_mode(void* self, int32_t mode);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#compositionMode)
///
/// @param self QCPPainter*
///
/// @return enum QPainter__CompositionMode
int32_t q_cppainter_composition_mode(void* self);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#font)
///
/// @param self QCPPainter*
const QFont* q_cppainter_font(void* self);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#setFont)
///
/// @param self QCPPainter*
/// @param f QFont*
void q_cppainter_set_font(void* self, void* f);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#fontMetrics)
///
/// @param self QCPPainter*
QFontMetrics* q_cppainter_font_metrics(void* self);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#fontInfo)
///
/// @param self QCPPainter*
QFontInfo* q_cppainter_font_info(void* self);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#pen)
///
/// @param self QCPPainter*
const QPen* q_cppainter_pen(void* self);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#setBrush)
///
/// @param self QCPPainter*
/// @param brush QBrush*
void q_cppainter_set_brush(void* self, void* brush);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#setBrush)
///
/// @param self QCPPainter*
/// @param style enum Qt__BrushStyle
void q_cppainter_set_brush2(void* self, int32_t style);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#brush)
///
/// @param self QCPPainter*
const QBrush* q_cppainter_brush(void* self);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#setBackgroundMode)
///
/// @param self QCPPainter*
/// @param mode enum Qt__BGMode
void q_cppainter_set_background_mode(void* self, int32_t mode);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#backgroundMode)
///
/// @param self QCPPainter*
///
/// @return enum Qt__BGMode
int32_t q_cppainter_background_mode(void* self);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#brushOrigin)
///
/// @param self QCPPainter*
QPoint* q_cppainter_brush_origin(void* self);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#setBrushOrigin)
///
/// @param self QCPPainter*
/// @param x int
/// @param y int
void q_cppainter_set_brush_origin(void* self, int x, int y);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#setBrushOrigin)
///
/// @param self QCPPainter*
/// @param brushOrigin QPoint*
void q_cppainter_set_brush_origin2(void* self, void* brushOrigin);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#setBrushOrigin)
///
/// @param self QCPPainter*
/// @param brushOrigin QPointF*
void q_cppainter_set_brush_origin3(void* self, void* brushOrigin);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#setBackground)
///
/// @param self QCPPainter*
/// @param bg QBrush*
void q_cppainter_set_background(void* self, void* bg);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#background)
///
/// @param self QCPPainter*
const QBrush* q_cppainter_background(void* self);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#opacity)
///
/// @param self QCPPainter*
double q_cppainter_opacity(void* self);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#setOpacity)
///
/// @param self QCPPainter*
/// @param opacity double
void q_cppainter_set_opacity(void* self, double opacity);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#clipRegion)
///
/// @param self QCPPainter*
QRegion* q_cppainter_clip_region(void* self);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#clipPath)
///
/// @param self QCPPainter*
QPainterPath* q_cppainter_clip_path(void* self);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#setClipRect)
///
/// @param self QCPPainter*
/// @param param1 QRectF*
void q_cppainter_set_clip_rect(void* self, void* param1);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#setClipRect)
///
/// @param self QCPPainter*
/// @param param1 QRect*
void q_cppainter_set_clip_rect2(void* self, void* param1);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#setClipRect)
///
/// @param self QCPPainter*
/// @param x int
/// @param y int
/// @param w int
/// @param h int
void q_cppainter_set_clip_rect3(void* self, int x, int y, int w, int h);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#setClipRegion)
///
/// @param self QCPPainter*
/// @param param1 QRegion*
void q_cppainter_set_clip_region(void* self, void* param1);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#setClipPath)
///
/// @param self QCPPainter*
/// @param path QPainterPath*
void q_cppainter_set_clip_path(void* self, void* path);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#setClipping)
///
/// @param self QCPPainter*
/// @param enable bool
void q_cppainter_set_clipping(void* self, bool enable);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#hasClipping)
///
/// @param self QCPPainter*
bool q_cppainter_has_clipping(void* self);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#clipBoundingRect)
///
/// @param self QCPPainter*
QRectF* q_cppainter_clip_bounding_rect(void* self);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#setTransform)
///
/// @param self QCPPainter*
/// @param transform QTransform*
void q_cppainter_set_transform(void* self, void* transform);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#transform)
///
/// @param self QCPPainter*
const QTransform* q_cppainter_transform(void* self);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#deviceTransform)
///
/// @param self QCPPainter*
const QTransform* q_cppainter_device_transform(void* self);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#resetTransform)
///
/// @param self QCPPainter*
void q_cppainter_reset_transform(void* self);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#setWorldTransform)
///
/// @param self QCPPainter*
/// @param matrix QTransform*
void q_cppainter_set_world_transform(void* self, void* matrix);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#worldTransform)
///
/// @param self QCPPainter*
const QTransform* q_cppainter_world_transform(void* self);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#combinedTransform)
///
/// @param self QCPPainter*
QTransform* q_cppainter_combined_transform(void* self);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#setWorldMatrixEnabled)
///
/// @param self QCPPainter*
/// @param enabled bool
void q_cppainter_set_world_matrix_enabled(void* self, bool enabled);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#worldMatrixEnabled)
///
/// @param self QCPPainter*
bool q_cppainter_world_matrix_enabled(void* self);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#scale)
///
/// @param self QCPPainter*
/// @param sx double
/// @param sy double
void q_cppainter_scale(void* self, double sx, double sy);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#shear)
///
/// @param self QCPPainter*
/// @param sh double
/// @param sv double
void q_cppainter_shear(void* self, double sh, double sv);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#rotate)
///
/// @param self QCPPainter*
/// @param a double
void q_cppainter_rotate(void* self, double a);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#translate)
///
/// @param self QCPPainter*
/// @param offset QPointF*
void q_cppainter_translate(void* self, void* offset);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#translate)
///
/// @param self QCPPainter*
/// @param offset QPoint*
void q_cppainter_translate2(void* self, void* offset);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#translate)
///
/// @param self QCPPainter*
/// @param dx double
/// @param dy double
void q_cppainter_translate3(void* self, double dx, double dy);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#window)
///
/// @param self QCPPainter*
QRect* q_cppainter_window(void* self);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#setWindow)
///
/// @param self QCPPainter*
/// @param window QRect*
void q_cppainter_set_window(void* self, void* window);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#setWindow)
///
/// @param self QCPPainter*
/// @param x int
/// @param y int
/// @param w int
/// @param h int
void q_cppainter_set_window2(void* self, int x, int y, int w, int h);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#viewport)
///
/// @param self QCPPainter*
QRect* q_cppainter_viewport(void* self);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#setViewport)
///
/// @param self QCPPainter*
/// @param viewport QRect*
void q_cppainter_set_viewport(void* self, void* viewport);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#setViewport)
///
/// @param self QCPPainter*
/// @param x int
/// @param y int
/// @param w int
/// @param h int
void q_cppainter_set_viewport2(void* self, int x, int y, int w, int h);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#setViewTransformEnabled)
///
/// @param self QCPPainter*
/// @param enable bool
void q_cppainter_set_view_transform_enabled(void* self, bool enable);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#viewTransformEnabled)
///
/// @param self QCPPainter*
bool q_cppainter_view_transform_enabled(void* self);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#strokePath)
///
/// @param self QCPPainter*
/// @param path QPainterPath*
/// @param pen QPen*
void q_cppainter_stroke_path(void* self, void* path, void* pen);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#fillPath)
///
/// @param self QCPPainter*
/// @param path QPainterPath*
/// @param brush QBrush*
void q_cppainter_fill_path(void* self, void* path, void* brush);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawPath)
///
/// @param self QCPPainter*
/// @param path QPainterPath*
void q_cppainter_draw_path(void* self, void* path);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawPoint)
///
/// @param self QCPPainter*
/// @param pt QPointF*
void q_cppainter_draw_point(void* self, void* pt);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawPoint)
///
/// @param self QCPPainter*
/// @param p QPoint*
void q_cppainter_draw_point2(void* self, void* p);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawPoint)
///
/// @param self QCPPainter*
/// @param x int
/// @param y int
void q_cppainter_draw_point3(void* self, int x, int y);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawPoints)
///
/// @param self QCPPainter*
/// @param points QPointF*
/// @param pointCount int
void q_cppainter_draw_points(void* self, void* points, int pointCount);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawPoints)
///
/// @param self QCPPainter*
/// @param points QPoint*
/// @param pointCount int
void q_cppainter_draw_points3(void* self, void* points, int pointCount);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawLine)
///
/// @param self QCPPainter*
/// @param x1 int
/// @param y1 int
/// @param x2 int
/// @param y2 int
void q_cppainter_draw_line3(void* self, int x1, int y1, int x2, int y2);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawLine)
///
/// @param self QCPPainter*
/// @param p1 QPoint*
/// @param p2 QPoint*
void q_cppainter_draw_line4(void* self, void* p1, void* p2);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawLine)
///
/// @param self QCPPainter*
/// @param p1 QPointF*
/// @param p2 QPointF*
void q_cppainter_draw_line5(void* self, void* p1, void* p2);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawLines)
///
/// @param self QCPPainter*
/// @param lines QLineF*
/// @param lineCount int
void q_cppainter_draw_lines(void* self, void* lines, int lineCount);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawLines)
///
/// @param self QCPPainter*
/// @param lines libqt_list /* of QLineF* */
void q_cppainter_draw_lines2(void* self, libqt_list lines);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawLines)
///
/// @param self QCPPainter*
/// @param pointPairs QPointF*
/// @param lineCount int
void q_cppainter_draw_lines3(void* self, void* pointPairs, int lineCount);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawLines)
///
/// @param self QCPPainter*
/// @param pointPairs libqt_list /* of QPointF* */
void q_cppainter_draw_lines4(void* self, libqt_list pointPairs);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawLines)
///
/// @param self QCPPainter*
/// @param lines QLine*
/// @param lineCount int
void q_cppainter_draw_lines5(void* self, void* lines, int lineCount);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawLines)
///
/// @param self QCPPainter*
/// @param lines libqt_list /* of QLine* */
void q_cppainter_draw_lines6(void* self, libqt_list lines);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawLines)
///
/// @param self QCPPainter*
/// @param pointPairs QPoint*
/// @param lineCount int
void q_cppainter_draw_lines7(void* self, void* pointPairs, int lineCount);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawLines)
///
/// @param self QCPPainter*
/// @param pointPairs libqt_list /* of QPoint* */
void q_cppainter_draw_lines8(void* self, libqt_list pointPairs);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawRect)
///
/// @param self QCPPainter*
/// @param rect QRectF*
void q_cppainter_draw_rect(void* self, void* rect);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawRect)
///
/// @param self QCPPainter*
/// @param x1 int
/// @param y1 int
/// @param w int
/// @param h int
void q_cppainter_draw_rect2(void* self, int x1, int y1, int w, int h);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawRect)
///
/// @param self QCPPainter*
/// @param rect QRect*
void q_cppainter_draw_rect3(void* self, void* rect);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawRects)
///
/// @param self QCPPainter*
/// @param rects QRectF*
/// @param rectCount int
void q_cppainter_draw_rects(void* self, void* rects, int rectCount);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawRects)
///
/// @param self QCPPainter*
/// @param rectangles libqt_list /* of QRectF* */
void q_cppainter_draw_rects2(void* self, libqt_list rectangles);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawRects)
///
/// @param self QCPPainter*
/// @param rects QRect*
/// @param rectCount int
void q_cppainter_draw_rects3(void* self, void* rects, int rectCount);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawRects)
///
/// @param self QCPPainter*
/// @param rectangles libqt_list /* of QRect* */
void q_cppainter_draw_rects4(void* self, libqt_list rectangles);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawEllipse)
///
/// @param self QCPPainter*
/// @param r QRectF*
void q_cppainter_draw_ellipse(void* self, void* r);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawEllipse)
///
/// @param self QCPPainter*
/// @param r QRect*
void q_cppainter_draw_ellipse2(void* self, void* r);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawEllipse)
///
/// @param self QCPPainter*
/// @param x int
/// @param y int
/// @param w int
/// @param h int
void q_cppainter_draw_ellipse3(void* self, int x, int y, int w, int h);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawEllipse)
///
/// @param self QCPPainter*
/// @param center QPointF*
/// @param rx double
/// @param ry double
void q_cppainter_draw_ellipse4(void* self, void* center, double rx, double ry);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawEllipse)
///
/// @param self QCPPainter*
/// @param center QPoint*
/// @param rx int
/// @param ry int
void q_cppainter_draw_ellipse5(void* self, void* center, int rx, int ry);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawPolyline)
///
/// @param self QCPPainter*
/// @param points QPointF*
/// @param pointCount int
void q_cppainter_draw_polyline(void* self, void* points, int pointCount);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawPolyline)
///
/// @param self QCPPainter*
/// @param points QPoint*
/// @param pointCount int
void q_cppainter_draw_polyline3(void* self, void* points, int pointCount);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawPolygon)
///
/// @param self QCPPainter*
/// @param points QPointF*
/// @param pointCount int
void q_cppainter_draw_polygon(void* self, void* points, int pointCount);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawPolygon)
///
/// @param self QCPPainter*
/// @param points QPoint*
/// @param pointCount int
void q_cppainter_draw_polygon3(void* self, void* points, int pointCount);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawConvexPolygon)
///
/// @param self QCPPainter*
/// @param points QPointF*
/// @param pointCount int
void q_cppainter_draw_convex_polygon(void* self, void* points, int pointCount);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawConvexPolygon)
///
/// @param self QCPPainter*
/// @param points QPoint*
/// @param pointCount int
void q_cppainter_draw_convex_polygon3(void* self, void* points, int pointCount);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawArc)
///
/// @param self QCPPainter*
/// @param rect QRectF*
/// @param a int
/// @param alen int
void q_cppainter_draw_arc(void* self, void* rect, int a, int alen);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawArc)
///
/// @param self QCPPainter*
/// @param param1 QRect*
/// @param a int
/// @param alen int
void q_cppainter_draw_arc2(void* self, void* param1, int a, int alen);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawArc)
///
/// @param self QCPPainter*
/// @param x int
/// @param y int
/// @param w int
/// @param h int
/// @param a int
/// @param alen int
void q_cppainter_draw_arc3(void* self, int x, int y, int w, int h, int a, int alen);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawPie)
///
/// @param self QCPPainter*
/// @param rect QRectF*
/// @param a int
/// @param alen int
void q_cppainter_draw_pie(void* self, void* rect, int a, int alen);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawPie)
///
/// @param self QCPPainter*
/// @param x int
/// @param y int
/// @param w int
/// @param h int
/// @param a int
/// @param alen int
void q_cppainter_draw_pie2(void* self, int x, int y, int w, int h, int a, int alen);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawPie)
///
/// @param self QCPPainter*
/// @param param1 QRect*
/// @param a int
/// @param alen int
void q_cppainter_draw_pie3(void* self, void* param1, int a, int alen);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawChord)
///
/// @param self QCPPainter*
/// @param rect QRectF*
/// @param a int
/// @param alen int
void q_cppainter_draw_chord(void* self, void* rect, int a, int alen);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawChord)
///
/// @param self QCPPainter*
/// @param x int
/// @param y int
/// @param w int
/// @param h int
/// @param a int
/// @param alen int
void q_cppainter_draw_chord2(void* self, int x, int y, int w, int h, int a, int alen);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawChord)
///
/// @param self QCPPainter*
/// @param param1 QRect*
/// @param a int
/// @param alen int
void q_cppainter_draw_chord3(void* self, void* param1, int a, int alen);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawRoundedRect)
///
/// @param self QCPPainter*
/// @param rect QRectF*
/// @param xRadius double
/// @param yRadius double
void q_cppainter_draw_rounded_rect(void* self, void* rect, double xRadius, double yRadius);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawRoundedRect)
///
/// @param self QCPPainter*
/// @param x int
/// @param y int
/// @param w int
/// @param h int
/// @param xRadius double
/// @param yRadius double
void q_cppainter_draw_rounded_rect2(void* self, int x, int y, int w, int h, double xRadius, double yRadius);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawRoundedRect)
///
/// @param self QCPPainter*
/// @param rect QRect*
/// @param xRadius double
/// @param yRadius double
void q_cppainter_draw_rounded_rect3(void* self, void* rect, double xRadius, double yRadius);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawTiledPixmap)
///
/// @param self QCPPainter*
/// @param rect QRectF*
/// @param pm QPixmap*
void q_cppainter_draw_tiled_pixmap(void* self, void* rect, void* pm);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawTiledPixmap)
///
/// @param self QCPPainter*
/// @param x int
/// @param y int
/// @param w int
/// @param h int
/// @param param5 QPixmap*
void q_cppainter_draw_tiled_pixmap2(void* self, int x, int y, int w, int h, void* param5);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawTiledPixmap)
///
/// @param self QCPPainter*
/// @param param1 QRect*
/// @param param2 QPixmap*
void q_cppainter_draw_tiled_pixmap3(void* self, void* param1, void* param2);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawPicture)
///
/// @param self QCPPainter*
/// @param p QPointF*
/// @param picture QPicture*
void q_cppainter_draw_picture(void* self, void* p, void* picture);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawPicture)
///
/// @param self QCPPainter*
/// @param x int
/// @param y int
/// @param picture QPicture*
void q_cppainter_draw_picture2(void* self, int x, int y, void* picture);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawPicture)
///
/// @param self QCPPainter*
/// @param p QPoint*
/// @param picture QPicture*
void q_cppainter_draw_picture3(void* self, void* p, void* picture);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawPixmap)
///
/// @param self QCPPainter*
/// @param targetRect QRectF*
/// @param pixmap QPixmap*
/// @param sourceRect QRectF*
void q_cppainter_draw_pixmap(void* self, void* targetRect, void* pixmap, void* sourceRect);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawPixmap)
///
/// @param self QCPPainter*
/// @param targetRect QRect*
/// @param pixmap QPixmap*
/// @param sourceRect QRect*
void q_cppainter_draw_pixmap2(void* self, void* targetRect, void* pixmap, void* sourceRect);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawPixmap)
///
/// @param self QCPPainter*
/// @param x int
/// @param y int
/// @param w int
/// @param h int
/// @param pm QPixmap*
/// @param sx int
/// @param sy int
/// @param sw int
/// @param sh int
void q_cppainter_draw_pixmap3(void* self, int x, int y, int w, int h, void* pm, int sx, int sy, int sw, int sh);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawPixmap)
///
/// @param self QCPPainter*
/// @param x int
/// @param y int
/// @param pm QPixmap*
/// @param sx int
/// @param sy int
/// @param sw int
/// @param sh int
void q_cppainter_draw_pixmap4(void* self, int x, int y, void* pm, int sx, int sy, int sw, int sh);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawPixmap)
///
/// @param self QCPPainter*
/// @param p QPointF*
/// @param pm QPixmap*
/// @param sr QRectF*
void q_cppainter_draw_pixmap5(void* self, void* p, void* pm, void* sr);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawPixmap)
///
/// @param self QCPPainter*
/// @param p QPoint*
/// @param pm QPixmap*
/// @param sr QRect*
void q_cppainter_draw_pixmap6(void* self, void* p, void* pm, void* sr);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawPixmap)
///
/// @param self QCPPainter*
/// @param p QPointF*
/// @param pm QPixmap*
void q_cppainter_draw_pixmap7(void* self, void* p, void* pm);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawPixmap)
///
/// @param self QCPPainter*
/// @param p QPoint*
/// @param pm QPixmap*
void q_cppainter_draw_pixmap8(void* self, void* p, void* pm);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawPixmap)
///
/// @param self QCPPainter*
/// @param x int
/// @param y int
/// @param pm QPixmap*
void q_cppainter_draw_pixmap9(void* self, int x, int y, void* pm);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawPixmap)
///
/// @param self QCPPainter*
/// @param r QRect*
/// @param pm QPixmap*
void q_cppainter_draw_pixmap10(void* self, void* r, void* pm);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawPixmap)
///
/// @param self QCPPainter*
/// @param x int
/// @param y int
/// @param w int
/// @param h int
/// @param pm QPixmap*
void q_cppainter_draw_pixmap11(void* self, int x, int y, int w, int h, void* pm);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawPixmapFragments)
///
/// @param self QCPPainter*
/// @param fragments QPainter__PixmapFragment*
/// @param fragmentCount int
/// @param pixmap QPixmap*
void q_cppainter_draw_pixmap_fragments(void* self, void* fragments, int fragmentCount, void* pixmap);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawImage)
///
/// @param self QCPPainter*
/// @param targetRect QRectF*
/// @param image QImage*
/// @param sourceRect QRectF*
void q_cppainter_draw_image(void* self, void* targetRect, void* image, void* sourceRect);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawImage)
///
/// @param self QCPPainter*
/// @param targetRect QRect*
/// @param image QImage*
/// @param sourceRect QRect*
void q_cppainter_draw_image2(void* self, void* targetRect, void* image, void* sourceRect);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawImage)
///
/// @param self QCPPainter*
/// @param p QPointF*
/// @param image QImage*
/// @param sr QRectF*
void q_cppainter_draw_image3(void* self, void* p, void* image, void* sr);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawImage)
///
/// @param self QCPPainter*
/// @param p QPoint*
/// @param image QImage*
/// @param sr QRect*
void q_cppainter_draw_image4(void* self, void* p, void* image, void* sr);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawImage)
///
/// @param self QCPPainter*
/// @param r QRectF*
/// @param image QImage*
void q_cppainter_draw_image5(void* self, void* r, void* image);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawImage)
///
/// @param self QCPPainter*
/// @param r QRect*
/// @param image QImage*
void q_cppainter_draw_image6(void* self, void* r, void* image);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawImage)
///
/// @param self QCPPainter*
/// @param p QPointF*
/// @param image QImage*
void q_cppainter_draw_image7(void* self, void* p, void* image);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawImage)
///
/// @param self QCPPainter*
/// @param p QPoint*
/// @param image QImage*
void q_cppainter_draw_image8(void* self, void* p, void* image);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawImage)
///
/// @param self QCPPainter*
/// @param x int
/// @param y int
/// @param image QImage*
void q_cppainter_draw_image9(void* self, int x, int y, void* image);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#setLayoutDirection)
///
/// @param self QCPPainter*
/// @param direction enum Qt__LayoutDirection
void q_cppainter_set_layout_direction(void* self, int32_t direction);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#layoutDirection)
///
/// @param self QCPPainter*
///
/// @return enum Qt__LayoutDirection
int32_t q_cppainter_layout_direction(void* self);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawGlyphRun)
///
/// @param self QCPPainter*
/// @param position QPointF*
/// @param glyphRun QGlyphRun*
void q_cppainter_draw_glyph_run(void* self, void* position, void* glyphRun);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawStaticText)
///
/// @param self QCPPainter*
/// @param topLeftPosition QPointF*
/// @param staticText QStaticText*
void q_cppainter_draw_static_text(void* self, void* topLeftPosition, void* staticText);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawStaticText)
///
/// @param self QCPPainter*
/// @param topLeftPosition QPoint*
/// @param staticText QStaticText*
void q_cppainter_draw_static_text2(void* self, void* topLeftPosition, void* staticText);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawStaticText)
///
/// @param self QCPPainter*
/// @param left int
/// @param top int
/// @param staticText QStaticText*
void q_cppainter_draw_static_text3(void* self, int left, int top, void* staticText);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawText)
///
/// @param self QCPPainter*
/// @param p QPointF*
/// @param s const char*
void q_cppainter_draw_text(void* self, void* p, const char* s);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawText)
///
/// @param self QCPPainter*
/// @param p QPoint*
/// @param s const char*
void q_cppainter_draw_text2(void* self, void* p, const char* s);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawText)
///
/// @param self QCPPainter*
/// @param x int
/// @param y int
/// @param s const char*
void q_cppainter_draw_text3(void* self, int x, int y, const char* s);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawText)
///
/// @param self QCPPainter*
/// @param p QPointF*
/// @param str const char*
/// @param tf int
/// @param justificationPadding int
void q_cppainter_draw_text4(void* self, void* p, const char* str, int tf, int justificationPadding);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawText)
///
/// @param self QCPPainter*
/// @param r QRectF*
/// @param flags int
/// @param text const char*
void q_cppainter_draw_text5(void* self, void* r, int flags, const char* text);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawText)
///
/// @param self QCPPainter*
/// @param r QRect*
/// @param flags int
/// @param text const char*
void q_cppainter_draw_text6(void* self, void* r, int flags, const char* text);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawText)
///
/// @param self QCPPainter*
/// @param x int
/// @param y int
/// @param w int
/// @param h int
/// @param flags int
/// @param text const char*
void q_cppainter_draw_text7(void* self, int x, int y, int w, int h, int flags, const char* text);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawText)
///
/// @param self QCPPainter*
/// @param r QRectF*
/// @param text const char*
void q_cppainter_draw_text8(void* self, void* r, const char* text);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#boundingRect)
///
/// @param self QCPPainter*
/// @param rect QRectF*
/// @param flags int
/// @param text const char*
QRectF* q_cppainter_bounding_rect(void* self, void* rect, int flags, const char* text);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#boundingRect)
///
/// @param self QCPPainter*
/// @param rect QRect*
/// @param flags int
/// @param text const char*
QRect* q_cppainter_bounding_rect2(void* self, void* rect, int flags, const char* text);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#boundingRect)
///
/// @param self QCPPainter*
/// @param x int
/// @param y int
/// @param w int
/// @param h int
/// @param flags int
/// @param text const char*
QRect* q_cppainter_bounding_rect3(void* self, int x, int y, int w, int h, int flags, const char* text);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#boundingRect)
///
/// @param self QCPPainter*
/// @param rect QRectF*
/// @param text const char*
QRectF* q_cppainter_bounding_rect4(void* self, void* rect, const char* text);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawTextItem)
///
/// @param self QCPPainter*
/// @param p QPointF*
/// @param ti QTextItem*
void q_cppainter_draw_text_item(void* self, void* p, void* ti);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawTextItem)
///
/// @param self QCPPainter*
/// @param x int
/// @param y int
/// @param ti QTextItem*
void q_cppainter_draw_text_item2(void* self, int x, int y, void* ti);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawTextItem)
///
/// @param self QCPPainter*
/// @param p QPoint*
/// @param ti QTextItem*
void q_cppainter_draw_text_item3(void* self, void* p, void* ti);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#fillRect)
///
/// @param self QCPPainter*
/// @param param1 QRectF*
/// @param param2 QBrush*
void q_cppainter_fill_rect(void* self, void* param1, void* param2);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#fillRect)
///
/// @param self QCPPainter*
/// @param x int
/// @param y int
/// @param w int
/// @param h int
/// @param param5 QBrush*
void q_cppainter_fill_rect2(void* self, int x, int y, int w, int h, void* param5);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#fillRect)
///
/// @param self QCPPainter*
/// @param param1 QRect*
/// @param param2 QBrush*
void q_cppainter_fill_rect3(void* self, void* param1, void* param2);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#fillRect)
///
/// @param self QCPPainter*
/// @param param1 QRectF*
/// @param color QColor*
void q_cppainter_fill_rect4(void* self, void* param1, void* color);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#fillRect)
///
/// @param self QCPPainter*
/// @param x int
/// @param y int
/// @param w int
/// @param h int
/// @param color QColor*
void q_cppainter_fill_rect5(void* self, int x, int y, int w, int h, void* color);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#fillRect)
///
/// @param self QCPPainter*
/// @param param1 QRect*
/// @param color QColor*
void q_cppainter_fill_rect6(void* self, void* param1, void* color);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#fillRect)
///
/// @param self QCPPainter*
/// @param x int
/// @param y int
/// @param w int
/// @param h int
/// @param c enum Qt__GlobalColor
void q_cppainter_fill_rect7(void* self, int x, int y, int w, int h, int32_t c);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#fillRect)
///
/// @param self QCPPainter*
/// @param r QRect*
/// @param c enum Qt__GlobalColor
void q_cppainter_fill_rect8(void* self, void* r, int32_t c);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#fillRect)
///
/// @param self QCPPainter*
/// @param r QRectF*
/// @param c enum Qt__GlobalColor
void q_cppainter_fill_rect9(void* self, void* r, int32_t c);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#fillRect)
///
/// @param self QCPPainter*
/// @param x int
/// @param y int
/// @param w int
/// @param h int
/// @param style enum Qt__BrushStyle
void q_cppainter_fill_rect10(void* self, int x, int y, int w, int h, int32_t style);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#fillRect)
///
/// @param self QCPPainter*
/// @param r QRect*
/// @param style enum Qt__BrushStyle
void q_cppainter_fill_rect11(void* self, void* r, int32_t style);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#fillRect)
///
/// @param self QCPPainter*
/// @param r QRectF*
/// @param style enum Qt__BrushStyle
void q_cppainter_fill_rect12(void* self, void* r, int32_t style);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#fillRect)
///
/// @param self QCPPainter*
/// @param x int
/// @param y int
/// @param w int
/// @param h int
/// @param preset enum QGradient__Preset
void q_cppainter_fill_rect13(void* self, int x, int y, int w, int h, int32_t preset);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#fillRect)
///
/// @param self QCPPainter*
/// @param r QRect*
/// @param preset enum QGradient__Preset
void q_cppainter_fill_rect14(void* self, void* r, int32_t preset);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#fillRect)
///
/// @param self QCPPainter*
/// @param r QRectF*
/// @param preset enum QGradient__Preset
void q_cppainter_fill_rect15(void* self, void* r, int32_t preset);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#eraseRect)
///
/// @param self QCPPainter*
/// @param param1 QRectF*
void q_cppainter_erase_rect(void* self, void* param1);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#eraseRect)
///
/// @param self QCPPainter*
/// @param x int
/// @param y int
/// @param w int
/// @param h int
void q_cppainter_erase_rect2(void* self, int x, int y, int w, int h);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#eraseRect)
///
/// @param self QCPPainter*
/// @param param1 QRect*
void q_cppainter_erase_rect3(void* self, void* param1);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#setRenderHint)
///
/// @param self QCPPainter*
/// @param hint enum QPainter__RenderHint
void q_cppainter_set_render_hint(void* self, int32_t hint);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#setRenderHints)
///
/// @param self QCPPainter*
/// @param hints flag of enum QPainter__RenderHint
void q_cppainter_set_render_hints(void* self, int32_t hints);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#renderHints)
///
/// @param self QCPPainter*
///
/// @return flag of enum QPainter__RenderHint
int32_t q_cppainter_render_hints(void* self);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#testRenderHint)
///
/// @param self QCPPainter*
/// @param hint enum QPainter__RenderHint
bool q_cppainter_test_render_hint(void* self, int32_t hint);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#paintEngine)
///
/// @param self QCPPainter*
QPaintEngine* q_cppainter_paint_engine(void* self);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#beginNativePainting)
///
/// @param self QCPPainter*
void q_cppainter_begin_native_painting(void* self);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#endNativePainting)
///
/// @param self QCPPainter*
void q_cppainter_end_native_painting(void* self);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#setClipRect)
///
/// @param self QCPPainter*
/// @param param1 QRectF*
/// @param op enum Qt__ClipOperation
void q_cppainter_set_clip_rect22(void* self, void* param1, int32_t op);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#setClipRect)
///
/// @param self QCPPainter*
/// @param param1 QRect*
/// @param op enum Qt__ClipOperation
void q_cppainter_set_clip_rect23(void* self, void* param1, int32_t op);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#setClipRect)
///
/// @param self QCPPainter*
/// @param x int
/// @param y int
/// @param w int
/// @param h int
/// @param op enum Qt__ClipOperation
void q_cppainter_set_clip_rect5(void* self, int x, int y, int w, int h, int32_t op);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#setClipRegion)
///
/// @param self QCPPainter*
/// @param param1 QRegion*
/// @param op enum Qt__ClipOperation
void q_cppainter_set_clip_region2(void* self, void* param1, int32_t op);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#setClipPath)
///
/// @param self QCPPainter*
/// @param path QPainterPath*
/// @param op enum Qt__ClipOperation
void q_cppainter_set_clip_path2(void* self, void* path, int32_t op);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#setTransform)
///
/// @param self QCPPainter*
/// @param transform QTransform*
/// @param combine bool
void q_cppainter_set_transform2(void* self, void* transform, bool combine);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#setWorldTransform)
///
/// @param self QCPPainter*
/// @param matrix QTransform*
/// @param combine bool
void q_cppainter_set_world_transform2(void* self, void* matrix, bool combine);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawPolygon)
///
/// @param self QCPPainter*
/// @param points QPointF*
/// @param pointCount int
/// @param fillRule enum Qt__FillRule
void q_cppainter_draw_polygon32(void* self, void* points, int pointCount, int32_t fillRule);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawPolygon)
///
/// @param self QCPPainter*
/// @param points QPoint*
/// @param pointCount int
/// @param fillRule enum Qt__FillRule
void q_cppainter_draw_polygon33(void* self, void* points, int pointCount, int32_t fillRule);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawRoundedRect)
///
/// @param self QCPPainter*
/// @param rect QRectF*
/// @param xRadius double
/// @param yRadius double
/// @param mode enum Qt__SizeMode
void q_cppainter_draw_rounded_rect4(void* self, void* rect, double xRadius, double yRadius, int32_t mode);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawRoundedRect)
///
/// @param self QCPPainter*
/// @param x int
/// @param y int
/// @param w int
/// @param h int
/// @param xRadius double
/// @param yRadius double
/// @param mode enum Qt__SizeMode
void q_cppainter_draw_rounded_rect7(void* self, int x, int y, int w, int h, double xRadius, double yRadius, int32_t mode);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawRoundedRect)
///
/// @param self QCPPainter*
/// @param rect QRect*
/// @param xRadius double
/// @param yRadius double
/// @param mode enum Qt__SizeMode
void q_cppainter_draw_rounded_rect42(void* self, void* rect, double xRadius, double yRadius, int32_t mode);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawTiledPixmap)
///
/// @param self QCPPainter*
/// @param rect QRectF*
/// @param pm QPixmap*
/// @param offset QPointF*
void q_cppainter_draw_tiled_pixmap32(void* self, void* rect, void* pm, void* offset);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawTiledPixmap)
///
/// @param self QCPPainter*
/// @param x int
/// @param y int
/// @param w int
/// @param h int
/// @param param5 QPixmap*
/// @param sx int
void q_cppainter_draw_tiled_pixmap6(void* self, int x, int y, int w, int h, void* param5, int sx);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawTiledPixmap)
///
/// @param self QCPPainter*
/// @param x int
/// @param y int
/// @param w int
/// @param h int
/// @param param5 QPixmap*
/// @param sx int
/// @param sy int
void q_cppainter_draw_tiled_pixmap7(void* self, int x, int y, int w, int h, void* param5, int sx, int sy);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawTiledPixmap)
///
/// @param self QCPPainter*
/// @param param1 QRect*
/// @param param2 QPixmap*
/// @param param3 QPoint*
void q_cppainter_draw_tiled_pixmap33(void* self, void* param1, void* param2, void* param3);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawPixmapFragments)
///
/// @param self QCPPainter*
/// @param fragments QPainter__PixmapFragment*
/// @param fragmentCount int
/// @param pixmap QPixmap*
/// @param hints flag of enum QPainter__PixmapFragmentHint
void q_cppainter_draw_pixmap_fragments4(void* self, void* fragments, int fragmentCount, void* pixmap, int32_t hints);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawImage)
///
/// @param self QCPPainter*
/// @param targetRect QRectF*
/// @param image QImage*
/// @param sourceRect QRectF*
/// @param flags flag of enum Qt__ImageConversionFlag
void q_cppainter_draw_image42(void* self, void* targetRect, void* image, void* sourceRect, int32_t flags);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawImage)
///
/// @param self QCPPainter*
/// @param targetRect QRect*
/// @param image QImage*
/// @param sourceRect QRect*
/// @param flags flag of enum Qt__ImageConversionFlag
void q_cppainter_draw_image43(void* self, void* targetRect, void* image, void* sourceRect, int32_t flags);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawImage)
///
/// @param self QCPPainter*
/// @param p QPointF*
/// @param image QImage*
/// @param sr QRectF*
/// @param flags flag of enum Qt__ImageConversionFlag
void q_cppainter_draw_image44(void* self, void* p, void* image, void* sr, int32_t flags);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawImage)
///
/// @param self QCPPainter*
/// @param p QPoint*
/// @param image QImage*
/// @param sr QRect*
/// @param flags flag of enum Qt__ImageConversionFlag
void q_cppainter_draw_image45(void* self, void* p, void* image, void* sr, int32_t flags);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawImage)
///
/// @param self QCPPainter*
/// @param x int
/// @param y int
/// @param image QImage*
/// @param sx int
void q_cppainter_draw_image46(void* self, int x, int y, void* image, int sx);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawImage)
///
/// @param self QCPPainter*
/// @param x int
/// @param y int
/// @param image QImage*
/// @param sx int
/// @param sy int
void q_cppainter_draw_image52(void* self, int x, int y, void* image, int sx, int sy);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawImage)
///
/// @param self QCPPainter*
/// @param x int
/// @param y int
/// @param image QImage*
/// @param sx int
/// @param sy int
/// @param sw int
void q_cppainter_draw_image62(void* self, int x, int y, void* image, int sx, int sy, int sw);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawImage)
///
/// @param self QCPPainter*
/// @param x int
/// @param y int
/// @param image QImage*
/// @param sx int
/// @param sy int
/// @param sw int
/// @param sh int
void q_cppainter_draw_image72(void* self, int x, int y, void* image, int sx, int sy, int sw, int sh);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawImage)
///
/// @param self QCPPainter*
/// @param x int
/// @param y int
/// @param image QImage*
/// @param sx int
/// @param sy int
/// @param sw int
/// @param sh int
/// @param flags flag of enum Qt__ImageConversionFlag
void q_cppainter_draw_image82(void* self, int x, int y, void* image, int sx, int sy, int sw, int sh, int32_t flags);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawText)
///
/// @param self QCPPainter*
/// @param r QRectF*
/// @param flags int
/// @param text const char*
/// @param br QRectF*
void q_cppainter_draw_text42(void* self, void* r, int flags, const char* text, void* br);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawText)
///
/// @param self QCPPainter*
/// @param r QRect*
/// @param flags int
/// @param text const char*
/// @param br QRect*
void q_cppainter_draw_text43(void* self, void* r, int flags, const char* text, void* br);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawText)
///
/// @param self QCPPainter*
/// @param x int
/// @param y int
/// @param w int
/// @param h int
/// @param flags int
/// @param text const char*
/// @param br QRect*
void q_cppainter_draw_text72(void* self, int x, int y, int w, int h, int flags, const char* text, void* br);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#drawText)
///
/// @param self QCPPainter*
/// @param r QRectF*
/// @param text const char*
/// @param o QTextOption*
void q_cppainter_draw_text32(void* self, void* r, const char* text, void* o);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#boundingRect)
///
/// @param self QCPPainter*
/// @param rect QRectF*
/// @param text const char*
/// @param o QTextOption*
QRectF* q_cppainter_bounding_rect32(void* self, void* rect, const char* text, void* o);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#setRenderHint)
///
/// @param self QCPPainter*
/// @param hint enum QPainter__RenderHint
/// @param on bool
void q_cppainter_set_render_hint2(void* self, int32_t hint, bool on);

/// Inherited from QPainter
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpainter.html#setRenderHints)
///
/// @param self QCPPainter*
/// @param hints flag of enum QPainter__RenderHint
/// @param on bool
void q_cppainter_set_render_hints2(void* self, int32_t hints, bool on);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPainter.html)
///
/// Delete this object from C++ memory.
///
/// @param self QCPPainter*
void q_cppainter_delete(void* self);

/// https://www.qcustomplot.com/documentation/classQCPAbstractPaintBuffer.html

/// q_cpabstractpaintbuffer_new constructs a new QCPAbstractPaintBuffer object.
///
/// @param size QSize*
/// @param devicePixelRatio double
QCPAbstractPaintBuffer* q_cpabstractpaintbuffer_new(void* size, double devicePixelRatio);

/// q_cpabstractpaintbuffer_new2 constructs a new QCPAbstractPaintBuffer object.
///
/// @param param1 QCPAbstractPaintBuffer*
QCPAbstractPaintBuffer* q_cpabstractpaintbuffer_new2(void* param1);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPaintBuffer.html)
///
/// @param self QCPAbstractPaintBuffer*
QSize* q_cpabstractpaintbuffer_size(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPaintBuffer.html)
///
/// @param self QCPAbstractPaintBuffer*
bool q_cpabstractpaintbuffer_invalidated(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPaintBuffer.html)
///
/// @param self QCPAbstractPaintBuffer*
double q_cpabstractpaintbuffer_device_pixel_ratio(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPaintBuffer.html)
///
/// @param self QCPAbstractPaintBuffer*
/// @param size QSize*
void q_cpabstractpaintbuffer_set_size(void* self, void* size);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPaintBuffer.html)
///
/// @param self QCPAbstractPaintBuffer*
void q_cpabstractpaintbuffer_set_invalidated(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPaintBuffer.html)
///
/// @param self QCPAbstractPaintBuffer*
/// @param ratio double
void q_cpabstractpaintbuffer_set_device_pixel_ratio(void* self, double ratio);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPaintBuffer.html)
///
/// @param self QCPAbstractPaintBuffer*
QCPPainter* q_cpabstractpaintbuffer_start_painting(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPaintBuffer.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPAbstractPaintBuffer*
/// @param callback QCPPainter* func()
void q_cpabstractpaintbuffer_on_start_painting(void* self, QCPPainter* (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPaintBuffer.html)
///
/// Base class method implementation
///
/// @param self QCPAbstractPaintBuffer*
QCPPainter* q_cpabstractpaintbuffer_qbase_start_painting(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPaintBuffer.html)
///
/// @param self QCPAbstractPaintBuffer*
void q_cpabstractpaintbuffer_done_painting(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPaintBuffer.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPAbstractPaintBuffer*
/// @param callback void func()
void q_cpabstractpaintbuffer_on_done_painting(void* self, void (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPaintBuffer.html)
///
/// Base class method implementation
///
/// @param self QCPAbstractPaintBuffer*
void q_cpabstractpaintbuffer_qbase_done_painting(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPaintBuffer.html)
///
/// @param self QCPAbstractPaintBuffer*
/// @param painter QCPPainter*
void q_cpabstractpaintbuffer_draw(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPaintBuffer.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPAbstractPaintBuffer*
/// @param callback void func(QCPAbstractPaintBuffer* self, QCPPainter* painter)
void q_cpabstractpaintbuffer_on_draw(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPaintBuffer.html)
///
/// Base class method implementation
///
/// @param self QCPAbstractPaintBuffer*
/// @param painter QCPPainter*
void q_cpabstractpaintbuffer_qbase_draw(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPaintBuffer.html)
///
/// @param self QCPAbstractPaintBuffer*
/// @param color QColor*
void q_cpabstractpaintbuffer_clear(void* self, void* color);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPaintBuffer.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPAbstractPaintBuffer*
/// @param callback void func(QCPAbstractPaintBuffer* self, QColor* color)
void q_cpabstractpaintbuffer_on_clear(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPaintBuffer.html)
///
/// Base class method implementation
///
/// @param self QCPAbstractPaintBuffer*
/// @param color QColor*
void q_cpabstractpaintbuffer_qbase_clear(void* self, void* color);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPaintBuffer.html)
///
/// @param self QCPAbstractPaintBuffer*
void q_cpabstractpaintbuffer_reallocate_buffer(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPaintBuffer.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPAbstractPaintBuffer*
/// @param callback void func()
void q_cpabstractpaintbuffer_on_reallocate_buffer(void* self, void (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPaintBuffer.html)
///
/// Base class method implementation
///
/// @param self QCPAbstractPaintBuffer*
void q_cpabstractpaintbuffer_qbase_reallocate_buffer(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPaintBuffer.html)
///
/// @param self QCPAbstractPaintBuffer*
/// @param param1 QCPAbstractPaintBuffer*
void q_cpabstractpaintbuffer_operator_assign(void* self, void* param1);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPaintBuffer.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPAbstractPaintBuffer*
/// @param callback void func(QCPAbstractPaintBuffer* self, QCPAbstractPaintBuffer* param1)
void q_cpabstractpaintbuffer_on_operator_assign(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPaintBuffer.html)
///
/// Base class method implementation
///
/// @param self QCPAbstractPaintBuffer*
/// @param param1 QCPAbstractPaintBuffer*
void q_cpabstractpaintbuffer_qbase_operator_assign(void* self, void* param1);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPaintBuffer.html)
///
/// @param self QCPAbstractPaintBuffer*
/// @param invalidated bool
void q_cpabstractpaintbuffer_set_invalidated1(void* self, bool invalidated);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPaintBuffer.html)
///
/// Delete this object from C++ memory.
///
/// @param self QCPAbstractPaintBuffer*
void q_cpabstractpaintbuffer_delete(void* self);

/// https://www.qcustomplot.com/documentation/classQCPPaintBufferPixmap.html

/// q_cppaintbufferpixmap_new constructs a new QCPPaintBufferPixmap object.
///
/// @param size QSize*
/// @param devicePixelRatio double
QCPPaintBufferPixmap* q_cppaintbufferpixmap_new(void* size, double devicePixelRatio);

/// q_cppaintbufferpixmap_new2 constructs a new QCPPaintBufferPixmap object.
///
/// @param param1 QCPPaintBufferPixmap*
QCPPaintBufferPixmap* q_cppaintbufferpixmap_new2(void* param1);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPaintBufferPixmap.html)
///
/// @param self QCPPaintBufferPixmap*
QCPPainter* q_cppaintbufferpixmap_start_painting(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPaintBufferPixmap.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPPaintBufferPixmap*
/// @param callback QCPPainter* func()
void q_cppaintbufferpixmap_on_start_painting(void* self, QCPPainter* (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPaintBufferPixmap.html)
///
/// Base class method implementation
///
/// @param self QCPPaintBufferPixmap*
QCPPainter* q_cppaintbufferpixmap_qbase_start_painting(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPaintBufferPixmap.html)
///
/// @param self QCPPaintBufferPixmap*
/// @param painter QCPPainter*
void q_cppaintbufferpixmap_draw(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPaintBufferPixmap.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPPaintBufferPixmap*
/// @param callback void func(QCPPaintBufferPixmap* self, QCPPainter* painter)
void q_cppaintbufferpixmap_on_draw(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPaintBufferPixmap.html)
///
/// Base class method implementation
///
/// @param self QCPPaintBufferPixmap*
/// @param painter QCPPainter*
void q_cppaintbufferpixmap_qbase_draw(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPaintBufferPixmap.html)
///
/// @param self QCPPaintBufferPixmap*
/// @param color QColor*
void q_cppaintbufferpixmap_clear(void* self, void* color);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPaintBufferPixmap.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPPaintBufferPixmap*
/// @param callback void func(QCPPaintBufferPixmap* self, QColor* color)
void q_cppaintbufferpixmap_on_clear(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPaintBufferPixmap.html)
///
/// Base class method implementation
///
/// @param self QCPPaintBufferPixmap*
/// @param color QColor*
void q_cppaintbufferpixmap_qbase_clear(void* self, void* color);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPaintBufferPixmap.html)
///
/// @param self QCPPaintBufferPixmap*
void q_cppaintbufferpixmap_reallocate_buffer(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPaintBufferPixmap.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPPaintBufferPixmap*
/// @param callback void func()
void q_cppaintbufferpixmap_on_reallocate_buffer(void* self, void (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPaintBufferPixmap.html)
///
/// Base class method implementation
///
/// @param self QCPPaintBufferPixmap*
void q_cppaintbufferpixmap_qbase_reallocate_buffer(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPaintBufferPixmap.html)
///
/// @param self QCPPaintBufferPixmap*
/// @param param1 QCPPaintBufferPixmap*
void q_cppaintbufferpixmap_operator_assign(void* self, void* param1);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPaintBufferPixmap.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPPaintBufferPixmap*
/// @param callback void func(QCPPaintBufferPixmap* self, QCPPaintBufferPixmap* param1)
void q_cppaintbufferpixmap_on_operator_assign(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPaintBufferPixmap.html)
///
/// Base class method implementation
///
/// @param self QCPPaintBufferPixmap*
/// @param param1 QCPPaintBufferPixmap*
void q_cppaintbufferpixmap_qbase_operator_assign(void* self, void* param1);

/// Inherited from QCPAbstractPaintBuffer
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPaintBuffer.html)
///
/// @param self QCPPaintBufferPixmap*
QSize* q_cppaintbufferpixmap_size(void* self);

/// Inherited from QCPAbstractPaintBuffer
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPaintBuffer.html)
///
/// @param self QCPPaintBufferPixmap*
bool q_cppaintbufferpixmap_invalidated(void* self);

/// Inherited from QCPAbstractPaintBuffer
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPaintBuffer.html)
///
/// @param self QCPPaintBufferPixmap*
double q_cppaintbufferpixmap_device_pixel_ratio(void* self);

/// Inherited from QCPAbstractPaintBuffer
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPaintBuffer.html)
///
/// @param self QCPPaintBufferPixmap*
/// @param size QSize*
void q_cppaintbufferpixmap_set_size(void* self, void* size);

/// Inherited from QCPAbstractPaintBuffer
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPaintBuffer.html)
///
/// @param self QCPPaintBufferPixmap*
void q_cppaintbufferpixmap_set_invalidated(void* self);

/// Inherited from QCPAbstractPaintBuffer
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPaintBuffer.html)
///
/// @param self QCPPaintBufferPixmap*
/// @param ratio double
void q_cppaintbufferpixmap_set_device_pixel_ratio(void* self, double ratio);

/// Inherited from QCPAbstractPaintBuffer
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPaintBuffer.html)
///
/// @param self QCPPaintBufferPixmap*
/// @param invalidated bool
void q_cppaintbufferpixmap_set_invalidated1(void* self, bool invalidated);

/// Inherited from QCPAbstractPaintBuffer
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPaintBuffer.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPaintBufferPixmap*
void q_cppaintbufferpixmap_done_painting(void* self);

/// Inherited from QCPAbstractPaintBuffer
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPaintBuffer.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPaintBufferPixmap*
void q_cppaintbufferpixmap_qbase_done_painting(void* self);

/// Inherited from QCPAbstractPaintBuffer
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPaintBuffer.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPaintBufferPixmap*
/// @param callback void func()
void q_cppaintbufferpixmap_on_done_painting(void* self, void (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPaintBufferPixmap.html)
///
/// Delete this object from C++ memory.
///
/// @param self QCPPaintBufferPixmap*
void q_cppaintbufferpixmap_delete(void* self);

/// https://www.qcustomplot.com/documentation/classQCPLayer.html

/// q_cplayer_new constructs a new QCPLayer object.
///
/// @param parentPlot QCustomPlot*
/// @param layerName const char*
QCPLayer* q_cplayer_new(void* parentPlot, const char* layerName);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#metaObject)
///
/// @param self QCPLayer*
const QMetaObject* q_cplayer_meta_object(void* self);

/// @param self QCPLayer*
/// @param param1 const char*
void* q_cplayer_metacast(void* self, const char* param1);

/// @param self QCPLayer*
/// @param param1 enum QMetaObject__Call
/// @param param2 int
/// @param param3 void*
int32_t q_cplayer_metacall(void* self, int32_t param1, int param2, void* param3);

/// Allows for overriding the related default method
///
/// @param self QCPLayer*
/// @param callback int32_t func(QCPLayer* self, enum QMetaObject__Call param1, int param2, void* param3)
void q_cplayer_on_metacall(void* self, int32_t (*callback)(void*, int32_t, int, void*));

/// Base class method implementation
///
/// @param self QCPLayer*
/// @param param1 enum QMetaObject__Call
/// @param param2 int
/// @param param3 void*
int32_t q_cplayer_qbase_metacall(void* self, int32_t param1, int param2, void* param3);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
const char* q_cplayer_tr(const char* s);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayer.html)
///
/// @param self QCPLayer*
QCustomPlot* q_cplayer_parent_plot(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayer.html)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPLayer*
const char* q_cplayer_name(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayer.html)
///
/// @param self QCPLayer*
int32_t q_cplayer_index(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayer.html)
///
/// @param self QCPLayer*
libqt_list /* of QCPLayerable* */ q_cplayer_children(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayer.html)
///
/// @param self QCPLayer*
bool q_cplayer_visible(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayer.html)
///
/// @param self QCPLayer*
///
/// @return enum QCPLayer__LayerMode
int32_t q_cplayer_mode(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayer.html)
///
/// @param self QCPLayer*
/// @param visible bool
void q_cplayer_set_visible(void* self, bool visible);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayer.html)
///
/// @param self QCPLayer*
/// @param mode enum QCPLayer__LayerMode
void q_cplayer_set_mode(void* self, int32_t mode);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayer.html)
///
/// @param self QCPLayer*
void q_cplayer_replot(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayer.html)
///
/// @param self QCPLayer*
/// @param painter QCPPainter*
void q_cplayer_draw(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayer.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPLayer*
/// @param callback void func(QCPLayer* self, QCPPainter* painter)
void q_cplayer_on_draw(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayer.html)
///
/// Base class method implementation
///
/// @param self QCPLayer*
/// @param painter QCPPainter*
void q_cplayer_qbase_draw(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayer.html)
///
/// @param self QCPLayer*
void q_cplayer_draw_to_paint_buffer(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayer.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPLayer*
/// @param callback void func()
void q_cplayer_on_draw_to_paint_buffer(void* self, void (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayer.html)
///
/// Base class method implementation
///
/// @param self QCPLayer*
void q_cplayer_qbase_draw_to_paint_buffer(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayer.html)
///
/// @param self QCPLayer*
/// @param layerable QCPLayerable*
/// @param prepend bool
void q_cplayer_add_child(void* self, void* layerable, bool prepend);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayer.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPLayer*
/// @param callback void func(QCPLayer* self, QCPLayerable* layerable, bool prepend)
void q_cplayer_on_add_child(void* self, void (*callback)(void*, void*, bool));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayer.html)
///
/// Base class method implementation
///
/// @param self QCPLayer*
/// @param layerable QCPLayerable*
/// @param prepend bool
void q_cplayer_qbase_add_child(void* self, void* layerable, bool prepend);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayer.html)
///
/// @param self QCPLayer*
/// @param layerable QCPLayerable*
void q_cplayer_remove_child(void* self, void* layerable);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayer.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPLayer*
/// @param callback void func(QCPLayer* self, QCPLayerable* layerable)
void q_cplayer_on_remove_child(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayer.html)
///
/// Base class method implementation
///
/// @param self QCPLayer*
/// @param layerable QCPLayerable*
void q_cplayer_qbase_remove_child(void* self, void* layerable);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
/// @param c const char*
const char* q_cplayer_tr2(const char* s, const char* c);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
/// @param c const char*
/// @param n int
const char* q_cplayer_tr3(const char* s, const char* c, int n);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#objectName)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPLayer*
const char* q_cplayer_object_name(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setObjectName)
///
/// @param self QCPLayer*
/// @param name char*
void q_cplayer_set_object_name(void* self, char* name);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isWidgetType)
///
/// @param self QCPLayer*
bool q_cplayer_is_widget_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isWindowType)
///
/// @param self QCPLayer*
bool q_cplayer_is_window_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isQuickItemType)
///
/// @param self QCPLayer*
bool q_cplayer_is_quick_item_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#signalsBlocked)
///
/// @param self QCPLayer*
bool q_cplayer_signals_blocked(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#blockSignals)
///
/// @param self QCPLayer*
/// @param b bool
bool q_cplayer_block_signals(void* self, bool b);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#thread)
///
/// @param self QCPLayer*
QThread* q_cplayer_thread(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#moveToThread)
///
/// @param self QCPLayer*
/// @param thread QThread*
bool q_cplayer_move_to_thread(void* self, void* thread);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#startTimer)
///
/// @param self QCPLayer*
/// @param interval int
int32_t q_cplayer_start_timer(void* self, int interval);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#killTimer)
///
/// @param self QCPLayer*
/// @param id int
void q_cplayer_kill_timer(void* self, int id);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#killTimer)
///
/// @param self QCPLayer*
/// @param id enum Qt__TimerId
void q_cplayer_kill_timer2(void* self, int32_t id);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setParent)
///
/// @param self QCPLayer*
/// @param parent QObject*
void q_cplayer_set_parent(void* self, void* parent);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#installEventFilter)
///
/// @param self QCPLayer*
/// @param filterObj QObject*
void q_cplayer_install_event_filter(void* self, void* filterObj);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#removeEventFilter)
///
/// @param self QCPLayer*
/// @param obj QObject*
void q_cplayer_remove_event_filter(void* self, void* obj);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param method QMetaMethod*
QMetaObject__Connection* q_cplayer_connect(void* sender, void* signal, void* receiver, void* method);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param self QCPLayer*
/// @param sender QObject*
/// @param signal const char*
/// @param member const char*
QMetaObject__Connection* q_cplayer_connect2(void* self, void* sender, const char* signal, const char* member);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param member QMetaMethod*
bool q_cplayer_disconnect(void* sender, void* signal, void* receiver, void* member);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnect)
///
/// @param param1 QMetaObject__Connection*
bool q_cplayer_disconnect2(void* param1);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dumpObjectTree)
///
/// @param self QCPLayer*
void q_cplayer_dump_object_tree(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dumpObjectInfo)
///
/// @param self QCPLayer*
void q_cplayer_dump_object_info(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setProperty)
///
/// @param self QCPLayer*
/// @param name const char*
/// @param value QVariant*
bool q_cplayer_set_property(void* self, const char* name, void* value);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#property)
///
/// @param self QCPLayer*
/// @param name const char*
QVariant* q_cplayer_property(void* self, const char* name);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dynamicPropertyNames)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPLayer*
const char** q_cplayer_dynamic_property_names(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#bindingStorage)
///
/// @param self QCPLayer*
QBindingStorage* q_cplayer_binding_storage(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#bindingStorage)
///
/// @param self QCPLayer*
const QBindingStorage* q_cplayer_binding_storage2(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPLayer*
void q_cplayer_destroyed(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPLayer*
/// @param callback void func(QCPLayer* self)
void q_cplayer_on_destroyed(void* self, void (*callback)(void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#parent)
///
/// @param self QCPLayer*
QObject* q_cplayer_parent(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#inherits)
///
/// @param self QCPLayer*
/// @param classname const char*
bool q_cplayer_inherits(void* self, const char* classname);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#deleteLater)
///
/// @param self QCPLayer*
void q_cplayer_delete_later(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#moveToThread)
///
/// @param self QCPLayer*
/// @param thread QThread*
/// @param param2 Disambiguated_t*
bool q_cplayer_move_to_thread2(void* self, void* thread, void* param2);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#startTimer)
///
/// @param self QCPLayer*
/// @param interval int
/// @param timerType enum Qt__TimerType
int32_t q_cplayer_start_timer22(void* self, int interval, int32_t timerType);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param method QMetaMethod*
/// @param type enum Qt__ConnectionType
QMetaObject__Connection* q_cplayer_connect5(void* sender, void* signal, void* receiver, void* method, int32_t type);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param self QCPLayer*
/// @param sender QObject*
/// @param signal const char*
/// @param member const char*
/// @param type enum Qt__ConnectionType
QMetaObject__Connection* q_cplayer_connect4(void* self, void* sender, const char* signal, const char* member, int32_t type);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPLayer*
/// @param param1 QObject*
void q_cplayer_destroyed1(void* self, void* param1);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPLayer*
/// @param callback void func(QCPLayer* self, QObject* param1)
void q_cplayer_on_destroyed1(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayer*
/// @param event QEvent*
bool q_cplayer_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayer*
/// @param event QEvent*
bool q_cplayer_qbase_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayer*
/// @param callback bool func(QCPLayer* self, QEvent* event)
void q_cplayer_on_event(void* self, bool (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayer*
/// @param watched QObject*
/// @param event QEvent*
bool q_cplayer_event_filter(void* self, void* watched, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayer*
/// @param watched QObject*
/// @param event QEvent*
bool q_cplayer_qbase_event_filter(void* self, void* watched, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayer*
/// @param callback bool func(QCPLayer* self, QObject* watched, QEvent* event)
void q_cplayer_on_event_filter(void* self, bool (*callback)(void*, void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayer*
/// @param event QTimerEvent*
void q_cplayer_timer_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayer*
/// @param event QTimerEvent*
void q_cplayer_qbase_timer_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayer*
/// @param callback void func(QCPLayer* self, QTimerEvent* event)
void q_cplayer_on_timer_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayer*
/// @param event QChildEvent*
void q_cplayer_child_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayer*
/// @param event QChildEvent*
void q_cplayer_qbase_child_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayer*
/// @param callback void func(QCPLayer* self, QChildEvent* event)
void q_cplayer_on_child_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayer*
/// @param event QEvent*
void q_cplayer_custom_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayer*
/// @param event QEvent*
void q_cplayer_qbase_custom_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayer*
/// @param callback void func(QCPLayer* self, QEvent* event)
void q_cplayer_on_custom_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayer*
/// @param signal QMetaMethod*
void q_cplayer_connect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayer*
/// @param signal QMetaMethod*
void q_cplayer_qbase_connect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayer*
/// @param callback void func(QCPLayer* self, QMetaMethod* signal)
void q_cplayer_on_connect_notify(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayer*
/// @param signal QMetaMethod*
void q_cplayer_disconnect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayer*
/// @param signal QMetaMethod*
void q_cplayer_qbase_disconnect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayer*
/// @param callback void func(QCPLayer* self, QMetaMethod* signal)
void q_cplayer_on_disconnect_notify(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayer*
QObject* q_cplayer_sender(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayer*
QObject* q_cplayer_qbase_sender(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayer*
/// @param callback QObject* func()
void q_cplayer_on_sender(void* self, QObject* (*callback)());

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayer*
int32_t q_cplayer_sender_signal_index(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayer*
int32_t q_cplayer_qbase_sender_signal_index(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayer*
/// @param callback int32_t func()
void q_cplayer_on_sender_signal_index(void* self, int32_t (*callback)());

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayer*
/// @param signal const char*
int32_t q_cplayer_receivers(void* self, const char* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayer*
/// @param signal const char*
int32_t q_cplayer_qbase_receivers(void* self, const char* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayer*
/// @param callback int32_t func(QCPLayer* self, const char* signal)
void q_cplayer_on_receivers(void* self, int32_t (*callback)(void*, const char*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayer*
/// @param signal QMetaMethod*
bool q_cplayer_is_signal_connected(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayer*
/// @param signal QMetaMethod*
bool q_cplayer_qbase_is_signal_connected(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayer*
/// @param callback bool func(QCPLayer* self, QMetaMethod* signal)
void q_cplayer_on_is_signal_connected(void* self, bool (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#objectNameChanged)
///
/// Wrapper to allow calling private signal
///
/// @param self QCPLayer*
/// @param callback void func(QCPLayer* self, const char* objectName)
void q_cplayer_on_object_name_changed(void* self, void (*callback)(void*, const char*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayer.html)
///
/// Delete this object from C++ memory.
///
/// @param self QCPLayer*
void q_cplayer_delete(void* self);

/// https://www.qcustomplot.com/documentation/classQCPLayerable.html

/// q_cplayerable_new constructs a new QCPLayerable object.
///
/// @param plot QCustomPlot*
QCPLayerable* q_cplayerable_new(void* plot);

/// q_cplayerable_new2 constructs a new QCPLayerable object.
///
/// @param plot QCustomPlot*
/// @param targetLayer const char*
QCPLayerable* q_cplayerable_new2(void* plot, const char* targetLayer);

/// q_cplayerable_new3 constructs a new QCPLayerable object.
///
/// @param plot QCustomPlot*
/// @param targetLayer const char*
/// @param parentLayerable QCPLayerable*
QCPLayerable* q_cplayerable_new3(void* plot, const char* targetLayer, void* parentLayerable);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#metaObject)
///
/// @param self QCPLayerable*
const QMetaObject* q_cplayerable_meta_object(void* self);

/// @param self QCPLayerable*
/// @param param1 const char*
void* q_cplayerable_metacast(void* self, const char* param1);

/// @param self QCPLayerable*
/// @param param1 enum QMetaObject__Call
/// @param param2 int
/// @param param3 void*
int32_t q_cplayerable_metacall(void* self, int32_t param1, int param2, void* param3);

/// Allows for overriding the related default method
///
/// @param self QCPLayerable*
/// @param callback int32_t func(QCPLayerable* self, enum QMetaObject__Call param1, int param2, void* param3)
void q_cplayerable_on_metacall(void* self, int32_t (*callback)(void*, int32_t, int, void*));

/// Base class method implementation
///
/// @param self QCPLayerable*
/// @param param1 enum QMetaObject__Call
/// @param param2 int
/// @param param3 void*
int32_t q_cplayerable_qbase_metacall(void* self, int32_t param1, int param2, void* param3);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
const char* q_cplayerable_tr(const char* s);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPLayerable*
bool q_cplayerable_visible(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPLayerable*
QCustomPlot* q_cplayerable_parent_plot(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPLayerable*
QCPLayerable* q_cplayerable_parent_layerable(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPLayerable*
QCPLayer* q_cplayerable_layer(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPLayerable*
bool q_cplayerable_antialiased(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPLayerable*
/// @param on bool
void q_cplayerable_set_visible(void* self, bool on);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPLayerable*
/// @param layer QCPLayer*
bool q_cplayerable_set_layer(void* self, void* layer);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPLayerable*
/// @param layerName const char*
bool q_cplayerable_set_layer2(void* self, const char* layerName);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPLayerable*
/// @param enabled bool
void q_cplayerable_set_antialiased(void* self, bool enabled);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPLayerable*
/// @param pos QPointF*
/// @param onlySelectable bool
/// @param details QVariant*
double q_cplayerable_select_test(void* self, void* pos, bool onlySelectable, void* details);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPLayerable*
/// @param callback double func(QCPLayerable* self, QPointF* pos, bool onlySelectable, QVariant* details)
void q_cplayerable_on_select_test(void* self, double (*callback)(void*, void*, bool, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Base class method implementation
///
/// @param self QCPLayerable*
/// @param pos QPointF*
/// @param onlySelectable bool
/// @param details QVariant*
double q_cplayerable_qbase_select_test(void* self, void* pos, bool onlySelectable, void* details);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPLayerable*
bool q_cplayerable_real_visibility(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPLayerable*
/// @param newLayer QCPLayer*
void q_cplayerable_layer_changed(void* self, void* newLayer);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPLayerable*
/// @param callback void func(QCPLayerable* self, QCPLayer* newLayer)
void q_cplayerable_on_layer_changed(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPLayerable*
/// @param parentPlot QCustomPlot*
void q_cplayerable_parent_plot_initialized(void* self, void* parentPlot);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPLayerable*
/// @param callback void func(QCPLayerable* self, QCustomPlot* parentPlot)
void q_cplayerable_on_parent_plot_initialized(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Base class method implementation
///
/// @param self QCPLayerable*
/// @param parentPlot QCustomPlot*
void q_cplayerable_qbase_parent_plot_initialized(void* self, void* parentPlot);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPLayerable*
///
/// @return enum QCP__Interaction
int32_t q_cplayerable_selection_category(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPLayerable*
/// @param callback int32_t func()
void q_cplayerable_on_selection_category(void* self, int32_t (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Base class method implementation
///
/// @param self QCPLayerable*
///
/// @return enum QCP__Interaction
int32_t q_cplayerable_qbase_selection_category(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPLayerable*
QRect* q_cplayerable_clip_rect(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPLayerable*
/// @param callback QRect* func()
void q_cplayerable_on_clip_rect(void* self, QRect* (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Base class method implementation
///
/// @param self QCPLayerable*
QRect* q_cplayerable_qbase_clip_rect(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPLayerable*
/// @param painter QCPPainter*
void q_cplayerable_apply_default_antialiasing_hint(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPLayerable*
/// @param callback void func(QCPLayerable* self, QCPPainter* painter)
void q_cplayerable_on_apply_default_antialiasing_hint(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Base class method implementation
///
/// @param self QCPLayerable*
/// @param painter QCPPainter*
void q_cplayerable_qbase_apply_default_antialiasing_hint(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPLayerable*
/// @param painter QCPPainter*
void q_cplayerable_draw(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPLayerable*
/// @param callback void func(QCPLayerable* self, QCPPainter* painter)
void q_cplayerable_on_draw(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Base class method implementation
///
/// @param self QCPLayerable*
/// @param painter QCPPainter*
void q_cplayerable_qbase_draw(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPLayerable*
/// @param event QMouseEvent*
/// @param additive bool
/// @param details QVariant*
/// @param selectionStateChanged bool*
void q_cplayerable_select_event(void* self, void* event, bool additive, void* details, bool* selectionStateChanged);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPLayerable*
/// @param callback void func(QCPLayerable* self, QMouseEvent* event, bool additive, QVariant* details, bool* selectionStateChanged)
void q_cplayerable_on_select_event(void* self, void (*callback)(void*, void*, bool, void*, bool*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Base class method implementation
///
/// @param self QCPLayerable*
/// @param event QMouseEvent*
/// @param additive bool
/// @param details QVariant*
/// @param selectionStateChanged bool*
void q_cplayerable_qbase_select_event(void* self, void* event, bool additive, void* details, bool* selectionStateChanged);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPLayerable*
/// @param selectionStateChanged bool*
void q_cplayerable_deselect_event(void* self, bool* selectionStateChanged);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPLayerable*
/// @param callback void func(QCPLayerable* self, bool* selectionStateChanged)
void q_cplayerable_on_deselect_event(void* self, void (*callback)(void*, bool*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Base class method implementation
///
/// @param self QCPLayerable*
/// @param selectionStateChanged bool*
void q_cplayerable_qbase_deselect_event(void* self, bool* selectionStateChanged);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPLayerable*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cplayerable_mouse_press_event(void* self, void* event, void* details);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPLayerable*
/// @param callback void func(QCPLayerable* self, QMouseEvent* event, QVariant* details)
void q_cplayerable_on_mouse_press_event(void* self, void (*callback)(void*, void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Base class method implementation
///
/// @param self QCPLayerable*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cplayerable_qbase_mouse_press_event(void* self, void* event, void* details);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPLayerable*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cplayerable_mouse_move_event(void* self, void* event, void* startPos);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPLayerable*
/// @param callback void func(QCPLayerable* self, QMouseEvent* event, QPointF* startPos)
void q_cplayerable_on_mouse_move_event(void* self, void (*callback)(void*, void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Base class method implementation
///
/// @param self QCPLayerable*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cplayerable_qbase_mouse_move_event(void* self, void* event, void* startPos);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPLayerable*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cplayerable_mouse_release_event(void* self, void* event, void* startPos);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPLayerable*
/// @param callback void func(QCPLayerable* self, QMouseEvent* event, QPointF* startPos)
void q_cplayerable_on_mouse_release_event(void* self, void (*callback)(void*, void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Base class method implementation
///
/// @param self QCPLayerable*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cplayerable_qbase_mouse_release_event(void* self, void* event, void* startPos);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPLayerable*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cplayerable_mouse_double_click_event(void* self, void* event, void* details);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPLayerable*
/// @param callback void func(QCPLayerable* self, QMouseEvent* event, QVariant* details)
void q_cplayerable_on_mouse_double_click_event(void* self, void (*callback)(void*, void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Base class method implementation
///
/// @param self QCPLayerable*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cplayerable_qbase_mouse_double_click_event(void* self, void* event, void* details);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPLayerable*
/// @param event QWheelEvent*
void q_cplayerable_wheel_event(void* self, void* event);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPLayerable*
/// @param callback void func(QCPLayerable* self, QWheelEvent* event)
void q_cplayerable_on_wheel_event(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Base class method implementation
///
/// @param self QCPLayerable*
/// @param event QWheelEvent*
void q_cplayerable_qbase_wheel_event(void* self, void* event);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPLayerable*
/// @param parentPlot QCustomPlot*
void q_cplayerable_initialize_parent_plot(void* self, void* parentPlot);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPLayerable*
/// @param callback void func(QCPLayerable* self, QCustomPlot* parentPlot)
void q_cplayerable_on_initialize_parent_plot(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Base class method implementation
///
/// @param self QCPLayerable*
/// @param parentPlot QCustomPlot*
void q_cplayerable_qbase_initialize_parent_plot(void* self, void* parentPlot);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPLayerable*
/// @param parentLayerable QCPLayerable*
void q_cplayerable_set_parent_layerable(void* self, void* parentLayerable);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPLayerable*
/// @param callback void func(QCPLayerable* self, QCPLayerable* parentLayerable)
void q_cplayerable_on_set_parent_layerable(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Base class method implementation
///
/// @param self QCPLayerable*
/// @param parentLayerable QCPLayerable*
void q_cplayerable_qbase_set_parent_layerable(void* self, void* parentLayerable);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPLayerable*
/// @param layer QCPLayer*
/// @param prepend bool
bool q_cplayerable_move_to_layer(void* self, void* layer, bool prepend);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPLayerable*
/// @param callback bool func(QCPLayerable* self, QCPLayer* layer, bool prepend)
void q_cplayerable_on_move_to_layer(void* self, bool (*callback)(void*, void*, bool));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Base class method implementation
///
/// @param self QCPLayerable*
/// @param layer QCPLayer*
/// @param prepend bool
bool q_cplayerable_qbase_move_to_layer(void* self, void* layer, bool prepend);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPLayerable*
/// @param painter QCPPainter*
/// @param localAntialiased bool
/// @param overrideElement enum QCP__AntialiasedElement
void q_cplayerable_apply_antialiasing_hint(void* self, void* painter, bool localAntialiased, int32_t overrideElement);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPLayerable*
/// @param callback void func(QCPLayerable* self, QCPPainter* painter, bool localAntialiased, enum QCP__AntialiasedElement overrideElement)
void q_cplayerable_on_apply_antialiasing_hint(void* self, void (*callback)(void*, void*, bool, int32_t));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Base class method implementation
///
/// @param self QCPLayerable*
/// @param painter QCPPainter*
/// @param localAntialiased bool
/// @param overrideElement enum QCP__AntialiasedElement
void q_cplayerable_qbase_apply_antialiasing_hint(void* self, void* painter, bool localAntialiased, int32_t overrideElement);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
/// @param c const char*
const char* q_cplayerable_tr2(const char* s, const char* c);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
/// @param c const char*
/// @param n int
const char* q_cplayerable_tr3(const char* s, const char* c, int n);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#objectName)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPLayerable*
const char* q_cplayerable_object_name(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setObjectName)
///
/// @param self QCPLayerable*
/// @param name char*
void q_cplayerable_set_object_name(void* self, char* name);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isWidgetType)
///
/// @param self QCPLayerable*
bool q_cplayerable_is_widget_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isWindowType)
///
/// @param self QCPLayerable*
bool q_cplayerable_is_window_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isQuickItemType)
///
/// @param self QCPLayerable*
bool q_cplayerable_is_quick_item_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#signalsBlocked)
///
/// @param self QCPLayerable*
bool q_cplayerable_signals_blocked(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#blockSignals)
///
/// @param self QCPLayerable*
/// @param b bool
bool q_cplayerable_block_signals(void* self, bool b);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#thread)
///
/// @param self QCPLayerable*
QThread* q_cplayerable_thread(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#moveToThread)
///
/// @param self QCPLayerable*
/// @param thread QThread*
bool q_cplayerable_move_to_thread(void* self, void* thread);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#startTimer)
///
/// @param self QCPLayerable*
/// @param interval int
int32_t q_cplayerable_start_timer(void* self, int interval);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#killTimer)
///
/// @param self QCPLayerable*
/// @param id int
void q_cplayerable_kill_timer(void* self, int id);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#killTimer)
///
/// @param self QCPLayerable*
/// @param id enum Qt__TimerId
void q_cplayerable_kill_timer2(void* self, int32_t id);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#children)
///
/// @param self QCPLayerable*
libqt_list /* of QObject* */ q_cplayerable_children(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setParent)
///
/// @param self QCPLayerable*
/// @param parent QObject*
void q_cplayerable_set_parent(void* self, void* parent);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#installEventFilter)
///
/// @param self QCPLayerable*
/// @param filterObj QObject*
void q_cplayerable_install_event_filter(void* self, void* filterObj);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#removeEventFilter)
///
/// @param self QCPLayerable*
/// @param obj QObject*
void q_cplayerable_remove_event_filter(void* self, void* obj);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param method QMetaMethod*
QMetaObject__Connection* q_cplayerable_connect(void* sender, void* signal, void* receiver, void* method);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param self QCPLayerable*
/// @param sender QObject*
/// @param signal const char*
/// @param member const char*
QMetaObject__Connection* q_cplayerable_connect2(void* self, void* sender, const char* signal, const char* member);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param member QMetaMethod*
bool q_cplayerable_disconnect(void* sender, void* signal, void* receiver, void* member);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnect)
///
/// @param param1 QMetaObject__Connection*
bool q_cplayerable_disconnect2(void* param1);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dumpObjectTree)
///
/// @param self QCPLayerable*
void q_cplayerable_dump_object_tree(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dumpObjectInfo)
///
/// @param self QCPLayerable*
void q_cplayerable_dump_object_info(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setProperty)
///
/// @param self QCPLayerable*
/// @param name const char*
/// @param value QVariant*
bool q_cplayerable_set_property(void* self, const char* name, void* value);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#property)
///
/// @param self QCPLayerable*
/// @param name const char*
QVariant* q_cplayerable_property(void* self, const char* name);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dynamicPropertyNames)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPLayerable*
const char** q_cplayerable_dynamic_property_names(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#bindingStorage)
///
/// @param self QCPLayerable*
QBindingStorage* q_cplayerable_binding_storage(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#bindingStorage)
///
/// @param self QCPLayerable*
const QBindingStorage* q_cplayerable_binding_storage2(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPLayerable*
void q_cplayerable_destroyed(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPLayerable*
/// @param callback void func(QCPLayerable* self)
void q_cplayerable_on_destroyed(void* self, void (*callback)(void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#parent)
///
/// @param self QCPLayerable*
QObject* q_cplayerable_parent(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#inherits)
///
/// @param self QCPLayerable*
/// @param classname const char*
bool q_cplayerable_inherits(void* self, const char* classname);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#deleteLater)
///
/// @param self QCPLayerable*
void q_cplayerable_delete_later(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#moveToThread)
///
/// @param self QCPLayerable*
/// @param thread QThread*
/// @param param2 Disambiguated_t*
bool q_cplayerable_move_to_thread2(void* self, void* thread, void* param2);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#startTimer)
///
/// @param self QCPLayerable*
/// @param interval int
/// @param timerType enum Qt__TimerType
int32_t q_cplayerable_start_timer22(void* self, int interval, int32_t timerType);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param method QMetaMethod*
/// @param type enum Qt__ConnectionType
QMetaObject__Connection* q_cplayerable_connect5(void* sender, void* signal, void* receiver, void* method, int32_t type);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param self QCPLayerable*
/// @param sender QObject*
/// @param signal const char*
/// @param member const char*
/// @param type enum Qt__ConnectionType
QMetaObject__Connection* q_cplayerable_connect4(void* self, void* sender, const char* signal, const char* member, int32_t type);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPLayerable*
/// @param param1 QObject*
void q_cplayerable_destroyed1(void* self, void* param1);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPLayerable*
/// @param callback void func(QCPLayerable* self, QObject* param1)
void q_cplayerable_on_destroyed1(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayerable*
/// @param event QEvent*
bool q_cplayerable_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayerable*
/// @param event QEvent*
bool q_cplayerable_qbase_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayerable*
/// @param callback bool func(QCPLayerable* self, QEvent* event)
void q_cplayerable_on_event(void* self, bool (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayerable*
/// @param watched QObject*
/// @param event QEvent*
bool q_cplayerable_event_filter(void* self, void* watched, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayerable*
/// @param watched QObject*
/// @param event QEvent*
bool q_cplayerable_qbase_event_filter(void* self, void* watched, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayerable*
/// @param callback bool func(QCPLayerable* self, QObject* watched, QEvent* event)
void q_cplayerable_on_event_filter(void* self, bool (*callback)(void*, void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayerable*
/// @param event QTimerEvent*
void q_cplayerable_timer_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayerable*
/// @param event QTimerEvent*
void q_cplayerable_qbase_timer_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayerable*
/// @param callback void func(QCPLayerable* self, QTimerEvent* event)
void q_cplayerable_on_timer_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayerable*
/// @param event QChildEvent*
void q_cplayerable_child_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayerable*
/// @param event QChildEvent*
void q_cplayerable_qbase_child_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayerable*
/// @param callback void func(QCPLayerable* self, QChildEvent* event)
void q_cplayerable_on_child_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayerable*
/// @param event QEvent*
void q_cplayerable_custom_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayerable*
/// @param event QEvent*
void q_cplayerable_qbase_custom_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayerable*
/// @param callback void func(QCPLayerable* self, QEvent* event)
void q_cplayerable_on_custom_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayerable*
/// @param signal QMetaMethod*
void q_cplayerable_connect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayerable*
/// @param signal QMetaMethod*
void q_cplayerable_qbase_connect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayerable*
/// @param callback void func(QCPLayerable* self, QMetaMethod* signal)
void q_cplayerable_on_connect_notify(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayerable*
/// @param signal QMetaMethod*
void q_cplayerable_disconnect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayerable*
/// @param signal QMetaMethod*
void q_cplayerable_qbase_disconnect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayerable*
/// @param callback void func(QCPLayerable* self, QMetaMethod* signal)
void q_cplayerable_on_disconnect_notify(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayerable*
QObject* q_cplayerable_sender(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayerable*
QObject* q_cplayerable_qbase_sender(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayerable*
/// @param callback QObject* func()
void q_cplayerable_on_sender(void* self, QObject* (*callback)());

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayerable*
int32_t q_cplayerable_sender_signal_index(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayerable*
int32_t q_cplayerable_qbase_sender_signal_index(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayerable*
/// @param callback int32_t func()
void q_cplayerable_on_sender_signal_index(void* self, int32_t (*callback)());

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayerable*
/// @param signal const char*
int32_t q_cplayerable_receivers(void* self, const char* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayerable*
/// @param signal const char*
int32_t q_cplayerable_qbase_receivers(void* self, const char* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayerable*
/// @param callback int32_t func(QCPLayerable* self, const char* signal)
void q_cplayerable_on_receivers(void* self, int32_t (*callback)(void*, const char*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayerable*
/// @param signal QMetaMethod*
bool q_cplayerable_is_signal_connected(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayerable*
/// @param signal QMetaMethod*
bool q_cplayerable_qbase_is_signal_connected(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayerable*
/// @param callback bool func(QCPLayerable* self, QMetaMethod* signal)
void q_cplayerable_on_is_signal_connected(void* self, bool (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#objectNameChanged)
///
/// Wrapper to allow calling private signal
///
/// @param self QCPLayerable*
/// @param callback void func(QCPLayerable* self, const char* objectName)
void q_cplayerable_on_object_name_changed(void* self, void (*callback)(void*, const char*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Delete this object from C++ memory.
///
/// @param self QCPLayerable*
void q_cplayerable_delete(void* self);

/// https://www.qcustomplot.com/documentation/classQCPRange.html

/// q_cprange_new constructs a new QCPRange object.
///
/// @param other QCPRange*
QCPRange* q_cprange_new(void* other);

/// q_cprange_new2 constructs a new QCPRange object and invalidates the source QCPRange object.
///
/// @param other QCPRange*
QCPRange* q_cprange_new2(void* other);

/// q_cprange_new3 constructs a new QCPRange object.
///
QCPRange* q_cprange_new3();

/// q_cprange_new4 constructs a new QCPRange object.
///
/// @param lower double
/// @param upper double
QCPRange* q_cprange_new4(double lower, double upper);

/// q_cprange_new5 constructs a new QCPRange object.
///
/// @param param1 QCPRange*
QCPRange* q_cprange_new5(void* param1);

/// q_cprange_copy_assign shallow copies `other` into `self`.
///
/// @param self QCPRange*
/// @param other QCPRange*
void q_cprange_copy_assign(void* self, void* other);

/// q_cprange_move_assign moves `other` into `self` and invalidates `other`.
///
/// @param self QCPRange*
/// @param other QCPRange*
void q_cprange_move_assign(void* self, void* other);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPRange.html)
///
/// @param self QCPRange*
double q_cprange_lower(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPRange.html)
///
/// @param self QCPRange*
/// @param lower double
void q_cprange_set_lower(void* self, double lower);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPRange.html)
///
/// @param self QCPRange*
double q_cprange_upper(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPRange.html)
///
/// @param self QCPRange*
/// @param upper double
void q_cprange_set_upper(void* self, double upper);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPRange.html)
///
/// @param self QCPRange*
/// @param other QCPRange*
bool q_cprange_operator_equal(void* self, void* other);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPRange.html)
///
/// @param self QCPRange*
/// @param other QCPRange*
bool q_cprange_operator_not_equal(void* self, void* other);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPRange.html)
///
/// @param self QCPRange*
/// @param value double*
QCPRange* q_cprange_operator_plus_assign(void* self, double* value);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPRange.html)
///
/// @param self QCPRange*
/// @param value double*
QCPRange* q_cprange_operator_minus_assign(void* self, double* value);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPRange.html)
///
/// @param self QCPRange*
/// @param value double*
QCPRange* q_cprange_operator_multiply_assign(void* self, double* value);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPRange.html)
///
/// @param self QCPRange*
/// @param value double*
QCPRange* q_cprange_operator_divide_assign(void* self, double* value);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPRange.html)
///
/// @param self QCPRange*
double q_cprange_size(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPRange.html)
///
/// @param self QCPRange*
double q_cprange_center(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPRange.html)
///
/// @param self QCPRange*
void q_cprange_normalize(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPRange.html)
///
/// @param self QCPRange*
/// @param otherRange QCPRange*
void q_cprange_expand(void* self, void* otherRange);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPRange.html)
///
/// @param self QCPRange*
/// @param includeCoord double
void q_cprange_expand2(void* self, double includeCoord);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPRange.html)
///
/// @param self QCPRange*
/// @param otherRange QCPRange*
QCPRange* q_cprange_expanded(void* self, void* otherRange);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPRange.html)
///
/// @param self QCPRange*
/// @param includeCoord double
QCPRange* q_cprange_expanded2(void* self, double includeCoord);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPRange.html)
///
/// @param self QCPRange*
/// @param lowerBound double
/// @param upperBound double
QCPRange* q_cprange_bounded(void* self, double lowerBound, double upperBound);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPRange.html)
///
/// @param self QCPRange*
QCPRange* q_cprange_sanitized_for_log_scale(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPRange.html)
///
/// @param self QCPRange*
QCPRange* q_cprange_sanitized_for_lin_scale(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPRange.html)
///
/// @param self QCPRange*
/// @param value double
bool q_cprange_contains(void* self, double value);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPRange.html)
///
/// @param lower double
/// @param upper double
bool q_cprange_valid_range(double lower, double upper);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPRange.html)
///
/// @param range QCPRange*
bool q_cprange_valid_range2(void* range);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPRange.html)
///
/// Delete this object from C++ memory.
///
/// @param self QCPRange*
void q_cprange_delete(void* self);

/// https://www.qcustomplot.com/documentation/classQCPDataRange.html

/// q_cpdatarange_new constructs a new QCPDataRange object.
///
/// @param other QCPDataRange*
QCPDataRange* q_cpdatarange_new(void* other);

/// q_cpdatarange_new2 constructs a new QCPDataRange object and invalidates the source QCPDataRange object.
///
/// @param other QCPDataRange*
QCPDataRange* q_cpdatarange_new2(void* other);

/// q_cpdatarange_new3 constructs a new QCPDataRange object.
///
QCPDataRange* q_cpdatarange_new3();

/// q_cpdatarange_new4 constructs a new QCPDataRange object.
///
/// @param begin int
/// @param end int
QCPDataRange* q_cpdatarange_new4(int begin, int end);

/// q_cpdatarange_new5 constructs a new QCPDataRange object.
///
/// @param param1 QCPDataRange*
QCPDataRange* q_cpdatarange_new5(void* param1);

/// q_cpdatarange_copy_assign shallow copies `other` into `self`.
///
/// @param self QCPDataRange*
/// @param other QCPDataRange*
void q_cpdatarange_copy_assign(void* self, void* other);

/// q_cpdatarange_move_assign moves `other` into `self` and invalidates `other`.
///
/// @param self QCPDataRange*
/// @param other QCPDataRange*
void q_cpdatarange_move_assign(void* self, void* other);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPDataRange.html)
///
/// @param self QCPDataRange*
/// @param other QCPDataRange*
bool q_cpdatarange_operator_equal(void* self, void* other);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPDataRange.html)
///
/// @param self QCPDataRange*
/// @param other QCPDataRange*
bool q_cpdatarange_operator_not_equal(void* self, void* other);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPDataRange.html)
///
/// @param self QCPDataRange*
int32_t q_cpdatarange_begin(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPDataRange.html)
///
/// @param self QCPDataRange*
int32_t q_cpdatarange_end(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPDataRange.html)
///
/// @param self QCPDataRange*
int32_t q_cpdatarange_size(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPDataRange.html)
///
/// @param self QCPDataRange*
int32_t q_cpdatarange_length(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPDataRange.html)
///
/// @param self QCPDataRange*
/// @param begin int
void q_cpdatarange_set_begin(void* self, int begin);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPDataRange.html)
///
/// @param self QCPDataRange*
/// @param end int
void q_cpdatarange_set_end(void* self, int end);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPDataRange.html)
///
/// @param self QCPDataRange*
bool q_cpdatarange_is_valid(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPDataRange.html)
///
/// @param self QCPDataRange*
bool q_cpdatarange_is_empty(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPDataRange.html)
///
/// @param self QCPDataRange*
/// @param other QCPDataRange*
QCPDataRange* q_cpdatarange_bounded(void* self, void* other);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPDataRange.html)
///
/// @param self QCPDataRange*
/// @param other QCPDataRange*
QCPDataRange* q_cpdatarange_expanded(void* self, void* other);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPDataRange.html)
///
/// @param self QCPDataRange*
/// @param other QCPDataRange*
QCPDataRange* q_cpdatarange_intersection(void* self, void* other);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPDataRange.html)
///
/// @param self QCPDataRange*
/// @param changeBegin int
/// @param changeEnd int
QCPDataRange* q_cpdatarange_adjusted(void* self, int changeBegin, int changeEnd);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPDataRange.html)
///
/// @param self QCPDataRange*
/// @param other QCPDataRange*
bool q_cpdatarange_intersects(void* self, void* other);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPDataRange.html)
///
/// @param self QCPDataRange*
/// @param other QCPDataRange*
bool q_cpdatarange_contains(void* self, void* other);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPDataRange.html)
///
/// Delete this object from C++ memory.
///
/// @param self QCPDataRange*
void q_cpdatarange_delete(void* self);

/// https://www.qcustomplot.com/documentation/classQCPDataSelection.html

/// q_cpdataselection_new constructs a new QCPDataSelection object.
///
QCPDataSelection* q_cpdataselection_new();

/// q_cpdataselection_new2 constructs a new QCPDataSelection object.
///
/// @param range QCPDataRange*
QCPDataSelection* q_cpdataselection_new2(void* range);

/// q_cpdataselection_new3 constructs a new QCPDataSelection object.
///
/// @param param1 QCPDataSelection*
QCPDataSelection* q_cpdataselection_new3(void* param1);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPDataSelection.html)
///
/// @param self QCPDataSelection*
/// @param other QCPDataSelection*
bool q_cpdataselection_operator_equal(void* self, void* other);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPDataSelection.html)
///
/// @param self QCPDataSelection*
/// @param other QCPDataSelection*
bool q_cpdataselection_operator_not_equal(void* self, void* other);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPDataSelection.html)
///
/// @param self QCPDataSelection*
/// @param other QCPDataSelection*
QCPDataSelection* q_cpdataselection_operator_plus_assign(void* self, void* other);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPDataSelection.html)
///
/// @param self QCPDataSelection*
/// @param other QCPDataRange*
QCPDataSelection* q_cpdataselection_operator_plus_assign2(void* self, void* other);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPDataSelection.html)
///
/// @param self QCPDataSelection*
/// @param other QCPDataSelection*
QCPDataSelection* q_cpdataselection_operator_minus_assign(void* self, void* other);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPDataSelection.html)
///
/// @param self QCPDataSelection*
/// @param other QCPDataRange*
QCPDataSelection* q_cpdataselection_operator_minus_assign2(void* self, void* other);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPDataSelection.html)
///
/// @param self QCPDataSelection*
int32_t q_cpdataselection_data_range_count(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPDataSelection.html)
///
/// @param self QCPDataSelection*
int32_t q_cpdataselection_data_point_count(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPDataSelection.html)
///
/// @param self QCPDataSelection*
QCPDataRange* q_cpdataselection_data_range(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPDataSelection.html)
///
/// @param self QCPDataSelection*
libqt_list /* of QCPDataRange* */ q_cpdataselection_data_ranges(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPDataSelection.html)
///
/// @param self QCPDataSelection*
QCPDataRange* q_cpdataselection_span(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPDataSelection.html)
///
/// @param self QCPDataSelection*
/// @param dataRange QCPDataRange*
void q_cpdataselection_add_data_range(void* self, void* dataRange);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPDataSelection.html)
///
/// @param self QCPDataSelection*
void q_cpdataselection_clear(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPDataSelection.html)
///
/// @param self QCPDataSelection*
bool q_cpdataselection_is_empty(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPDataSelection.html)
///
/// @param self QCPDataSelection*
void q_cpdataselection_simplify(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPDataSelection.html)
///
/// @param self QCPDataSelection*
/// @param type enum QCP__SelectionType
void q_cpdataselection_enforce_type(void* self, int32_t type);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPDataSelection.html)
///
/// @param self QCPDataSelection*
/// @param other QCPDataSelection*
bool q_cpdataselection_contains(void* self, void* other);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPDataSelection.html)
///
/// @param self QCPDataSelection*
/// @param other QCPDataRange*
QCPDataSelection* q_cpdataselection_intersection(void* self, void* other);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPDataSelection.html)
///
/// @param self QCPDataSelection*
/// @param other QCPDataSelection*
QCPDataSelection* q_cpdataselection_intersection2(void* self, void* other);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPDataSelection.html)
///
/// @param self QCPDataSelection*
/// @param outerRange QCPDataRange*
QCPDataSelection* q_cpdataselection_inverse(void* self, void* outerRange);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPDataSelection.html)
///
/// @param self QCPDataSelection*
/// @param index int
QCPDataRange* q_cpdataselection_data_range1(void* self, int index);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPDataSelection.html)
///
/// @param self QCPDataSelection*
/// @param dataRange QCPDataRange*
/// @param simplify bool
void q_cpdataselection_add_data_range2(void* self, void* dataRange, bool simplify);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPDataSelection.html)
///
/// Delete this object from C++ memory.
///
/// @param self QCPDataSelection*
void q_cpdataselection_delete(void* self);

/// https://www.qcustomplot.com/documentation/classQCPSelectionRect.html

/// q_cpselectionrect_new constructs a new QCPSelectionRect object.
///
/// @param parentPlot QCustomPlot*
QCPSelectionRect* q_cpselectionrect_new(void* parentPlot);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#metaObject)
///
/// @param self QCPSelectionRect*
const QMetaObject* q_cpselectionrect_meta_object(void* self);

/// @param self QCPSelectionRect*
/// @param param1 const char*
void* q_cpselectionrect_metacast(void* self, const char* param1);

/// @param self QCPSelectionRect*
/// @param param1 enum QMetaObject__Call
/// @param param2 int
/// @param param3 void*
int32_t q_cpselectionrect_metacall(void* self, int32_t param1, int param2, void* param3);

/// Allows for overriding the related default method
///
/// @param self QCPSelectionRect*
/// @param callback int32_t func(QCPSelectionRect* self, enum QMetaObject__Call param1, int param2, void* param3)
void q_cpselectionrect_on_metacall(void* self, int32_t (*callback)(void*, int32_t, int, void*));

/// Base class method implementation
///
/// @param self QCPSelectionRect*
/// @param param1 enum QMetaObject__Call
/// @param param2 int
/// @param param3 void*
int32_t q_cpselectionrect_qbase_metacall(void* self, int32_t param1, int param2, void* param3);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
const char* q_cpselectionrect_tr(const char* s);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPSelectionRect.html)
///
/// @param self QCPSelectionRect*
QRect* q_cpselectionrect_rect(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPSelectionRect.html)
///
/// @param self QCPSelectionRect*
/// @param axis QCPAxis*
QCPRange* q_cpselectionrect_range(void* self, void* axis);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPSelectionRect.html)
///
/// @param self QCPSelectionRect*
QPen* q_cpselectionrect_pen(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPSelectionRect.html)
///
/// @param self QCPSelectionRect*
QBrush* q_cpselectionrect_brush(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPSelectionRect.html)
///
/// @param self QCPSelectionRect*
bool q_cpselectionrect_is_active(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPSelectionRect.html)
///
/// @param self QCPSelectionRect*
/// @param pen QPen*
void q_cpselectionrect_set_pen(void* self, void* pen);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPSelectionRect.html)
///
/// @param self QCPSelectionRect*
/// @param brush QBrush*
void q_cpselectionrect_set_brush(void* self, void* brush);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPSelectionRect.html)
///
/// @param self QCPSelectionRect*
void q_cpselectionrect_cancel(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPSelectionRect.html)
///
/// @param self QCPSelectionRect*
/// @param event QMouseEvent*
void q_cpselectionrect_started(void* self, void* event);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPSelectionRect.html)
///
/// @param self QCPSelectionRect*
/// @param callback void func(QCPSelectionRect* self, QMouseEvent* event)
void q_cpselectionrect_on_started(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPSelectionRect.html)
///
/// @param self QCPSelectionRect*
/// @param rect QRect*
/// @param event QMouseEvent*
void q_cpselectionrect_changed(void* self, void* rect, void* event);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPSelectionRect.html)
///
/// @param self QCPSelectionRect*
/// @param callback void func(QCPSelectionRect* self, QRect* rect, QMouseEvent* event)
void q_cpselectionrect_on_changed(void* self, void (*callback)(void*, void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPSelectionRect.html)
///
/// @param self QCPSelectionRect*
/// @param rect QRect*
/// @param event QInputEvent*
void q_cpselectionrect_canceled(void* self, void* rect, void* event);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPSelectionRect.html)
///
/// @param self QCPSelectionRect*
/// @param callback void func(QCPSelectionRect* self, QRect* rect, QInputEvent* event)
void q_cpselectionrect_on_canceled(void* self, void (*callback)(void*, void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPSelectionRect.html)
///
/// @param self QCPSelectionRect*
/// @param rect QRect*
/// @param event QMouseEvent*
void q_cpselectionrect_accepted(void* self, void* rect, void* event);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPSelectionRect.html)
///
/// @param self QCPSelectionRect*
/// @param callback void func(QCPSelectionRect* self, QRect* rect, QMouseEvent* event)
void q_cpselectionrect_on_accepted(void* self, void (*callback)(void*, void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPSelectionRect.html)
///
/// @param self QCPSelectionRect*
/// @param event QMouseEvent*
void q_cpselectionrect_start_selection(void* self, void* event);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPSelectionRect.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPSelectionRect*
/// @param callback void func(QCPSelectionRect* self, QMouseEvent* event)
void q_cpselectionrect_on_start_selection(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPSelectionRect.html)
///
/// Base class method implementation
///
/// @param self QCPSelectionRect*
/// @param event QMouseEvent*
void q_cpselectionrect_qbase_start_selection(void* self, void* event);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPSelectionRect.html)
///
/// @param self QCPSelectionRect*
/// @param event QMouseEvent*
void q_cpselectionrect_move_selection(void* self, void* event);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPSelectionRect.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPSelectionRect*
/// @param callback void func(QCPSelectionRect* self, QMouseEvent* event)
void q_cpselectionrect_on_move_selection(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPSelectionRect.html)
///
/// Base class method implementation
///
/// @param self QCPSelectionRect*
/// @param event QMouseEvent*
void q_cpselectionrect_qbase_move_selection(void* self, void* event);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPSelectionRect.html)
///
/// @param self QCPSelectionRect*
/// @param event QMouseEvent*
void q_cpselectionrect_end_selection(void* self, void* event);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPSelectionRect.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPSelectionRect*
/// @param callback void func(QCPSelectionRect* self, QMouseEvent* event)
void q_cpselectionrect_on_end_selection(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPSelectionRect.html)
///
/// Base class method implementation
///
/// @param self QCPSelectionRect*
/// @param event QMouseEvent*
void q_cpselectionrect_qbase_end_selection(void* self, void* event);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPSelectionRect.html)
///
/// @param self QCPSelectionRect*
/// @param event QKeyEvent*
void q_cpselectionrect_key_press_event(void* self, void* event);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPSelectionRect.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPSelectionRect*
/// @param callback void func(QCPSelectionRect* self, QKeyEvent* event)
void q_cpselectionrect_on_key_press_event(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPSelectionRect.html)
///
/// Base class method implementation
///
/// @param self QCPSelectionRect*
/// @param event QKeyEvent*
void q_cpselectionrect_qbase_key_press_event(void* self, void* event);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPSelectionRect.html)
///
/// @param self QCPSelectionRect*
/// @param painter QCPPainter*
void q_cpselectionrect_apply_default_antialiasing_hint(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPSelectionRect.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPSelectionRect*
/// @param callback void func(QCPSelectionRect* self, QCPPainter* painter)
void q_cpselectionrect_on_apply_default_antialiasing_hint(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPSelectionRect.html)
///
/// Base class method implementation
///
/// @param self QCPSelectionRect*
/// @param painter QCPPainter*
void q_cpselectionrect_qbase_apply_default_antialiasing_hint(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPSelectionRect.html)
///
/// @param self QCPSelectionRect*
/// @param painter QCPPainter*
void q_cpselectionrect_draw(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPSelectionRect.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPSelectionRect*
/// @param callback void func(QCPSelectionRect* self, QCPPainter* painter)
void q_cpselectionrect_on_draw(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPSelectionRect.html)
///
/// Base class method implementation
///
/// @param self QCPSelectionRect*
/// @param painter QCPPainter*
void q_cpselectionrect_qbase_draw(void* self, void* painter);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
/// @param c const char*
const char* q_cpselectionrect_tr2(const char* s, const char* c);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
/// @param c const char*
/// @param n int
const char* q_cpselectionrect_tr3(const char* s, const char* c, int n);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPSelectionRect*
bool q_cpselectionrect_visible(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPSelectionRect*
QCustomPlot* q_cpselectionrect_parent_plot(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPSelectionRect*
QCPLayerable* q_cpselectionrect_parent_layerable(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPSelectionRect*
QCPLayer* q_cpselectionrect_layer(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPSelectionRect*
bool q_cpselectionrect_antialiased(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPSelectionRect*
/// @param on bool
void q_cpselectionrect_set_visible(void* self, bool on);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPSelectionRect*
/// @param layer QCPLayer*
bool q_cpselectionrect_set_layer(void* self, void* layer);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPSelectionRect*
/// @param layerName const char*
bool q_cpselectionrect_set_layer2(void* self, const char* layerName);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPSelectionRect*
/// @param enabled bool
void q_cpselectionrect_set_antialiased(void* self, bool enabled);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPSelectionRect*
bool q_cpselectionrect_real_visibility(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPSelectionRect*
/// @param newLayer QCPLayer*
void q_cpselectionrect_layer_changed(void* self, void* newLayer);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPSelectionRect*
/// @param callback void func(QCPSelectionRect* self, QCPLayer* newLayer)
void q_cpselectionrect_on_layer_changed(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#objectName)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPSelectionRect*
const char* q_cpselectionrect_object_name(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setObjectName)
///
/// @param self QCPSelectionRect*
/// @param name char*
void q_cpselectionrect_set_object_name(void* self, char* name);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isWidgetType)
///
/// @param self QCPSelectionRect*
bool q_cpselectionrect_is_widget_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isWindowType)
///
/// @param self QCPSelectionRect*
bool q_cpselectionrect_is_window_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isQuickItemType)
///
/// @param self QCPSelectionRect*
bool q_cpselectionrect_is_quick_item_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#signalsBlocked)
///
/// @param self QCPSelectionRect*
bool q_cpselectionrect_signals_blocked(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#blockSignals)
///
/// @param self QCPSelectionRect*
/// @param b bool
bool q_cpselectionrect_block_signals(void* self, bool b);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#thread)
///
/// @param self QCPSelectionRect*
QThread* q_cpselectionrect_thread(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#moveToThread)
///
/// @param self QCPSelectionRect*
/// @param thread QThread*
bool q_cpselectionrect_move_to_thread(void* self, void* thread);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#startTimer)
///
/// @param self QCPSelectionRect*
/// @param interval int
int32_t q_cpselectionrect_start_timer(void* self, int interval);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#killTimer)
///
/// @param self QCPSelectionRect*
/// @param id int
void q_cpselectionrect_kill_timer(void* self, int id);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#killTimer)
///
/// @param self QCPSelectionRect*
/// @param id enum Qt__TimerId
void q_cpselectionrect_kill_timer2(void* self, int32_t id);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#children)
///
/// @param self QCPSelectionRect*
libqt_list /* of QObject* */ q_cpselectionrect_children(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setParent)
///
/// @param self QCPSelectionRect*
/// @param parent QObject*
void q_cpselectionrect_set_parent(void* self, void* parent);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#installEventFilter)
///
/// @param self QCPSelectionRect*
/// @param filterObj QObject*
void q_cpselectionrect_install_event_filter(void* self, void* filterObj);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#removeEventFilter)
///
/// @param self QCPSelectionRect*
/// @param obj QObject*
void q_cpselectionrect_remove_event_filter(void* self, void* obj);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param method QMetaMethod*
QMetaObject__Connection* q_cpselectionrect_connect(void* sender, void* signal, void* receiver, void* method);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param self QCPSelectionRect*
/// @param sender QObject*
/// @param signal const char*
/// @param member const char*
QMetaObject__Connection* q_cpselectionrect_connect2(void* self, void* sender, const char* signal, const char* member);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param member QMetaMethod*
bool q_cpselectionrect_disconnect(void* sender, void* signal, void* receiver, void* member);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnect)
///
/// @param param1 QMetaObject__Connection*
bool q_cpselectionrect_disconnect2(void* param1);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dumpObjectTree)
///
/// @param self QCPSelectionRect*
void q_cpselectionrect_dump_object_tree(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dumpObjectInfo)
///
/// @param self QCPSelectionRect*
void q_cpselectionrect_dump_object_info(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setProperty)
///
/// @param self QCPSelectionRect*
/// @param name const char*
/// @param value QVariant*
bool q_cpselectionrect_set_property(void* self, const char* name, void* value);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#property)
///
/// @param self QCPSelectionRect*
/// @param name const char*
QVariant* q_cpselectionrect_property(void* self, const char* name);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dynamicPropertyNames)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPSelectionRect*
const char** q_cpselectionrect_dynamic_property_names(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#bindingStorage)
///
/// @param self QCPSelectionRect*
QBindingStorage* q_cpselectionrect_binding_storage(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#bindingStorage)
///
/// @param self QCPSelectionRect*
const QBindingStorage* q_cpselectionrect_binding_storage2(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPSelectionRect*
void q_cpselectionrect_destroyed(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPSelectionRect*
/// @param callback void func(QCPSelectionRect* self)
void q_cpselectionrect_on_destroyed(void* self, void (*callback)(void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#parent)
///
/// @param self QCPSelectionRect*
QObject* q_cpselectionrect_parent(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#inherits)
///
/// @param self QCPSelectionRect*
/// @param classname const char*
bool q_cpselectionrect_inherits(void* self, const char* classname);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#deleteLater)
///
/// @param self QCPSelectionRect*
void q_cpselectionrect_delete_later(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#moveToThread)
///
/// @param self QCPSelectionRect*
/// @param thread QThread*
/// @param param2 Disambiguated_t*
bool q_cpselectionrect_move_to_thread2(void* self, void* thread, void* param2);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#startTimer)
///
/// @param self QCPSelectionRect*
/// @param interval int
/// @param timerType enum Qt__TimerType
int32_t q_cpselectionrect_start_timer22(void* self, int interval, int32_t timerType);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param method QMetaMethod*
/// @param type enum Qt__ConnectionType
QMetaObject__Connection* q_cpselectionrect_connect5(void* sender, void* signal, void* receiver, void* method, int32_t type);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param self QCPSelectionRect*
/// @param sender QObject*
/// @param signal const char*
/// @param member const char*
/// @param type enum Qt__ConnectionType
QMetaObject__Connection* q_cpselectionrect_connect4(void* self, void* sender, const char* signal, const char* member, int32_t type);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPSelectionRect*
/// @param param1 QObject*
void q_cpselectionrect_destroyed1(void* self, void* param1);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPSelectionRect*
/// @param callback void func(QCPSelectionRect* self, QObject* param1)
void q_cpselectionrect_on_destroyed1(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPSelectionRect*
/// @param pos QPointF*
/// @param onlySelectable bool
/// @param details QVariant*
double q_cpselectionrect_select_test(void* self, void* pos, bool onlySelectable, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPSelectionRect*
/// @param pos QPointF*
/// @param onlySelectable bool
/// @param details QVariant*
double q_cpselectionrect_qbase_select_test(void* self, void* pos, bool onlySelectable, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPSelectionRect*
/// @param callback double func(QCPSelectionRect* self, QPointF* pos, bool onlySelectable, QVariant* details)
void q_cpselectionrect_on_select_test(void* self, double (*callback)(void*, void*, bool, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPSelectionRect*
/// @param parentPlot QCustomPlot*
void q_cpselectionrect_parent_plot_initialized(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPSelectionRect*
/// @param parentPlot QCustomPlot*
void q_cpselectionrect_qbase_parent_plot_initialized(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPSelectionRect*
/// @param callback void func(QCPSelectionRect* self, QCustomPlot* parentPlot)
void q_cpselectionrect_on_parent_plot_initialized(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPSelectionRect*
///
/// @return enum QCP__Interaction
int32_t q_cpselectionrect_selection_category(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPSelectionRect*
///
/// @return enum QCP__Interaction
int32_t q_cpselectionrect_qbase_selection_category(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPSelectionRect*
/// @param callback int32_t func()
void q_cpselectionrect_on_selection_category(void* self, int32_t (*callback)());

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPSelectionRect*
QRect* q_cpselectionrect_clip_rect(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPSelectionRect*
QRect* q_cpselectionrect_qbase_clip_rect(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPSelectionRect*
/// @param callback QRect* func()
void q_cpselectionrect_on_clip_rect(void* self, QRect* (*callback)());

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPSelectionRect*
/// @param event QMouseEvent*
/// @param additive bool
/// @param details QVariant*
/// @param selectionStateChanged bool*
void q_cpselectionrect_select_event(void* self, void* event, bool additive, void* details, bool* selectionStateChanged);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPSelectionRect*
/// @param event QMouseEvent*
/// @param additive bool
/// @param details QVariant*
/// @param selectionStateChanged bool*
void q_cpselectionrect_qbase_select_event(void* self, void* event, bool additive, void* details, bool* selectionStateChanged);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPSelectionRect*
/// @param callback void func(QCPSelectionRect* self, QMouseEvent* event, bool additive, QVariant* details, bool* selectionStateChanged)
void q_cpselectionrect_on_select_event(void* self, void (*callback)(void*, void*, bool, void*, bool*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPSelectionRect*
/// @param selectionStateChanged bool*
void q_cpselectionrect_deselect_event(void* self, bool* selectionStateChanged);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPSelectionRect*
/// @param selectionStateChanged bool*
void q_cpselectionrect_qbase_deselect_event(void* self, bool* selectionStateChanged);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPSelectionRect*
/// @param callback void func(QCPSelectionRect* self, bool* selectionStateChanged)
void q_cpselectionrect_on_deselect_event(void* self, void (*callback)(void*, bool*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPSelectionRect*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cpselectionrect_mouse_press_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPSelectionRect*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cpselectionrect_qbase_mouse_press_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPSelectionRect*
/// @param callback void func(QCPSelectionRect* self, QMouseEvent* event, QVariant* details)
void q_cpselectionrect_on_mouse_press_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPSelectionRect*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cpselectionrect_mouse_move_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPSelectionRect*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cpselectionrect_qbase_mouse_move_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPSelectionRect*
/// @param callback void func(QCPSelectionRect* self, QMouseEvent* event, QPointF* startPos)
void q_cpselectionrect_on_mouse_move_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPSelectionRect*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cpselectionrect_mouse_release_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPSelectionRect*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cpselectionrect_qbase_mouse_release_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPSelectionRect*
/// @param callback void func(QCPSelectionRect* self, QMouseEvent* event, QPointF* startPos)
void q_cpselectionrect_on_mouse_release_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPSelectionRect*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cpselectionrect_mouse_double_click_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPSelectionRect*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cpselectionrect_qbase_mouse_double_click_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPSelectionRect*
/// @param callback void func(QCPSelectionRect* self, QMouseEvent* event, QVariant* details)
void q_cpselectionrect_on_mouse_double_click_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPSelectionRect*
/// @param event QWheelEvent*
void q_cpselectionrect_wheel_event(void* self, void* event);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPSelectionRect*
/// @param event QWheelEvent*
void q_cpselectionrect_qbase_wheel_event(void* self, void* event);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPSelectionRect*
/// @param callback void func(QCPSelectionRect* self, QWheelEvent* event)
void q_cpselectionrect_on_wheel_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPSelectionRect*
/// @param event QEvent*
bool q_cpselectionrect_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPSelectionRect*
/// @param event QEvent*
bool q_cpselectionrect_qbase_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPSelectionRect*
/// @param callback bool func(QCPSelectionRect* self, QEvent* event)
void q_cpselectionrect_on_event(void* self, bool (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPSelectionRect*
/// @param watched QObject*
/// @param event QEvent*
bool q_cpselectionrect_event_filter(void* self, void* watched, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPSelectionRect*
/// @param watched QObject*
/// @param event QEvent*
bool q_cpselectionrect_qbase_event_filter(void* self, void* watched, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPSelectionRect*
/// @param callback bool func(QCPSelectionRect* self, QObject* watched, QEvent* event)
void q_cpselectionrect_on_event_filter(void* self, bool (*callback)(void*, void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPSelectionRect*
/// @param event QTimerEvent*
void q_cpselectionrect_timer_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPSelectionRect*
/// @param event QTimerEvent*
void q_cpselectionrect_qbase_timer_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPSelectionRect*
/// @param callback void func(QCPSelectionRect* self, QTimerEvent* event)
void q_cpselectionrect_on_timer_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPSelectionRect*
/// @param event QChildEvent*
void q_cpselectionrect_child_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPSelectionRect*
/// @param event QChildEvent*
void q_cpselectionrect_qbase_child_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPSelectionRect*
/// @param callback void func(QCPSelectionRect* self, QChildEvent* event)
void q_cpselectionrect_on_child_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPSelectionRect*
/// @param event QEvent*
void q_cpselectionrect_custom_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPSelectionRect*
/// @param event QEvent*
void q_cpselectionrect_qbase_custom_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPSelectionRect*
/// @param callback void func(QCPSelectionRect* self, QEvent* event)
void q_cpselectionrect_on_custom_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPSelectionRect*
/// @param signal QMetaMethod*
void q_cpselectionrect_connect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPSelectionRect*
/// @param signal QMetaMethod*
void q_cpselectionrect_qbase_connect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPSelectionRect*
/// @param callback void func(QCPSelectionRect* self, QMetaMethod* signal)
void q_cpselectionrect_on_connect_notify(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPSelectionRect*
/// @param signal QMetaMethod*
void q_cpselectionrect_disconnect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPSelectionRect*
/// @param signal QMetaMethod*
void q_cpselectionrect_qbase_disconnect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPSelectionRect*
/// @param callback void func(QCPSelectionRect* self, QMetaMethod* signal)
void q_cpselectionrect_on_disconnect_notify(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPSelectionRect*
/// @param parentPlot QCustomPlot*
void q_cpselectionrect_initialize_parent_plot(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPSelectionRect*
/// @param parentPlot QCustomPlot*
void q_cpselectionrect_qbase_initialize_parent_plot(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPSelectionRect*
/// @param callback void func(QCPSelectionRect* self, QCustomPlot* parentPlot)
void q_cpselectionrect_on_initialize_parent_plot(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPSelectionRect*
/// @param parentLayerable QCPLayerable*
void q_cpselectionrect_set_parent_layerable(void* self, void* parentLayerable);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPSelectionRect*
/// @param parentLayerable QCPLayerable*
void q_cpselectionrect_qbase_set_parent_layerable(void* self, void* parentLayerable);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPSelectionRect*
/// @param callback void func(QCPSelectionRect* self, QCPLayerable* parentLayerable)
void q_cpselectionrect_on_set_parent_layerable(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPSelectionRect*
/// @param layer QCPLayer*
/// @param prepend bool
bool q_cpselectionrect_move_to_layer(void* self, void* layer, bool prepend);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPSelectionRect*
/// @param layer QCPLayer*
/// @param prepend bool
bool q_cpselectionrect_qbase_move_to_layer(void* self, void* layer, bool prepend);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPSelectionRect*
/// @param callback bool func(QCPSelectionRect* self, QCPLayer* layer, bool prepend)
void q_cpselectionrect_on_move_to_layer(void* self, bool (*callback)(void*, void*, bool));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPSelectionRect*
/// @param painter QCPPainter*
/// @param localAntialiased bool
/// @param overrideElement enum QCP__AntialiasedElement
void q_cpselectionrect_apply_antialiasing_hint(void* self, void* painter, bool localAntialiased, int32_t overrideElement);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPSelectionRect*
/// @param painter QCPPainter*
/// @param localAntialiased bool
/// @param overrideElement enum QCP__AntialiasedElement
void q_cpselectionrect_qbase_apply_antialiasing_hint(void* self, void* painter, bool localAntialiased, int32_t overrideElement);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPSelectionRect*
/// @param callback void func(QCPSelectionRect* self, QCPPainter* painter, bool localAntialiased, enum QCP__AntialiasedElement overrideElement)
void q_cpselectionrect_on_apply_antialiasing_hint(void* self, void (*callback)(void*, void*, bool, int32_t));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPSelectionRect*
QObject* q_cpselectionrect_sender(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPSelectionRect*
QObject* q_cpselectionrect_qbase_sender(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPSelectionRect*
/// @param callback QObject* func()
void q_cpselectionrect_on_sender(void* self, QObject* (*callback)());

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPSelectionRect*
int32_t q_cpselectionrect_sender_signal_index(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPSelectionRect*
int32_t q_cpselectionrect_qbase_sender_signal_index(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPSelectionRect*
/// @param callback int32_t func()
void q_cpselectionrect_on_sender_signal_index(void* self, int32_t (*callback)());

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPSelectionRect*
/// @param signal const char*
int32_t q_cpselectionrect_receivers(void* self, const char* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPSelectionRect*
/// @param signal const char*
int32_t q_cpselectionrect_qbase_receivers(void* self, const char* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPSelectionRect*
/// @param callback int32_t func(QCPSelectionRect* self, const char* signal)
void q_cpselectionrect_on_receivers(void* self, int32_t (*callback)(void*, const char*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPSelectionRect*
/// @param signal QMetaMethod*
bool q_cpselectionrect_is_signal_connected(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPSelectionRect*
/// @param signal QMetaMethod*
bool q_cpselectionrect_qbase_is_signal_connected(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPSelectionRect*
/// @param callback bool func(QCPSelectionRect* self, QMetaMethod* signal)
void q_cpselectionrect_on_is_signal_connected(void* self, bool (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#objectNameChanged)
///
/// Wrapper to allow calling private signal
///
/// @param self QCPSelectionRect*
/// @param callback void func(QCPSelectionRect* self, const char* objectName)
void q_cpselectionrect_on_object_name_changed(void* self, void (*callback)(void*, const char*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPSelectionRect.html)
///
/// Delete this object from C++ memory.
///
/// @param self QCPSelectionRect*
void q_cpselectionrect_delete(void* self);

/// https://www.qcustomplot.com/documentation/classQCPMarginGroup.html

/// q_cpmargingroup_new constructs a new QCPMarginGroup object.
///
/// @param parentPlot QCustomPlot*
QCPMarginGroup* q_cpmargingroup_new(void* parentPlot);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#metaObject)
///
/// @param self QCPMarginGroup*
const QMetaObject* q_cpmargingroup_meta_object(void* self);

/// @param self QCPMarginGroup*
/// @param param1 const char*
void* q_cpmargingroup_metacast(void* self, const char* param1);

/// @param self QCPMarginGroup*
/// @param param1 enum QMetaObject__Call
/// @param param2 int
/// @param param3 void*
int32_t q_cpmargingroup_metacall(void* self, int32_t param1, int param2, void* param3);

/// Allows for overriding the related default method
///
/// @param self QCPMarginGroup*
/// @param callback int32_t func(QCPMarginGroup* self, enum QMetaObject__Call param1, int param2, void* param3)
void q_cpmargingroup_on_metacall(void* self, int32_t (*callback)(void*, int32_t, int, void*));

/// Base class method implementation
///
/// @param self QCPMarginGroup*
/// @param param1 enum QMetaObject__Call
/// @param param2 int
/// @param param3 void*
int32_t q_cpmargingroup_qbase_metacall(void* self, int32_t param1, int param2, void* param3);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
const char* q_cpmargingroup_tr(const char* s);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPMarginGroup.html)
///
/// @param self QCPMarginGroup*
/// @param side enum QCP__MarginSide
libqt_list /* of QCPLayoutElement* */ q_cpmargingroup_elements(void* self, int32_t side);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPMarginGroup.html)
///
/// @param self QCPMarginGroup*
bool q_cpmargingroup_is_empty(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPMarginGroup.html)
///
/// @param self QCPMarginGroup*
void q_cpmargingroup_clear(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPMarginGroup.html)
///
/// @param self QCPMarginGroup*
/// @param side enum QCP__MarginSide
int32_t q_cpmargingroup_common_margin(void* self, int32_t side);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPMarginGroup.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPMarginGroup*
/// @param callback int32_t func(QCPMarginGroup* self, enum QCP__MarginSide side)
void q_cpmargingroup_on_common_margin(void* self, int32_t (*callback)(void*, int32_t));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPMarginGroup.html)
///
/// Base class method implementation
///
/// @param self QCPMarginGroup*
/// @param side enum QCP__MarginSide
int32_t q_cpmargingroup_qbase_common_margin(void* self, int32_t side);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPMarginGroup.html)
///
/// @param self QCPMarginGroup*
/// @param side enum QCP__MarginSide
/// @param element QCPLayoutElement*
void q_cpmargingroup_add_child(void* self, int32_t side, void* element);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPMarginGroup.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPMarginGroup*
/// @param callback void func(QCPMarginGroup* self, enum QCP__MarginSide side, QCPLayoutElement* element)
void q_cpmargingroup_on_add_child(void* self, void (*callback)(void*, int32_t, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPMarginGroup.html)
///
/// Base class method implementation
///
/// @param self QCPMarginGroup*
/// @param side enum QCP__MarginSide
/// @param element QCPLayoutElement*
void q_cpmargingroup_qbase_add_child(void* self, int32_t side, void* element);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPMarginGroup.html)
///
/// @param self QCPMarginGroup*
/// @param side enum QCP__MarginSide
/// @param element QCPLayoutElement*
void q_cpmargingroup_remove_child(void* self, int32_t side, void* element);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPMarginGroup.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPMarginGroup*
/// @param callback void func(QCPMarginGroup* self, enum QCP__MarginSide side, QCPLayoutElement* element)
void q_cpmargingroup_on_remove_child(void* self, void (*callback)(void*, int32_t, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPMarginGroup.html)
///
/// Base class method implementation
///
/// @param self QCPMarginGroup*
/// @param side enum QCP__MarginSide
/// @param element QCPLayoutElement*
void q_cpmargingroup_qbase_remove_child(void* self, int32_t side, void* element);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
/// @param c const char*
const char* q_cpmargingroup_tr2(const char* s, const char* c);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
/// @param c const char*
/// @param n int
const char* q_cpmargingroup_tr3(const char* s, const char* c, int n);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#objectName)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPMarginGroup*
const char* q_cpmargingroup_object_name(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setObjectName)
///
/// @param self QCPMarginGroup*
/// @param name char*
void q_cpmargingroup_set_object_name(void* self, char* name);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isWidgetType)
///
/// @param self QCPMarginGroup*
bool q_cpmargingroup_is_widget_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isWindowType)
///
/// @param self QCPMarginGroup*
bool q_cpmargingroup_is_window_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isQuickItemType)
///
/// @param self QCPMarginGroup*
bool q_cpmargingroup_is_quick_item_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#signalsBlocked)
///
/// @param self QCPMarginGroup*
bool q_cpmargingroup_signals_blocked(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#blockSignals)
///
/// @param self QCPMarginGroup*
/// @param b bool
bool q_cpmargingroup_block_signals(void* self, bool b);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#thread)
///
/// @param self QCPMarginGroup*
QThread* q_cpmargingroup_thread(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#moveToThread)
///
/// @param self QCPMarginGroup*
/// @param thread QThread*
bool q_cpmargingroup_move_to_thread(void* self, void* thread);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#startTimer)
///
/// @param self QCPMarginGroup*
/// @param interval int
int32_t q_cpmargingroup_start_timer(void* self, int interval);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#killTimer)
///
/// @param self QCPMarginGroup*
/// @param id int
void q_cpmargingroup_kill_timer(void* self, int id);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#killTimer)
///
/// @param self QCPMarginGroup*
/// @param id enum Qt__TimerId
void q_cpmargingroup_kill_timer2(void* self, int32_t id);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#children)
///
/// @param self QCPMarginGroup*
libqt_list /* of QObject* */ q_cpmargingroup_children(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setParent)
///
/// @param self QCPMarginGroup*
/// @param parent QObject*
void q_cpmargingroup_set_parent(void* self, void* parent);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#installEventFilter)
///
/// @param self QCPMarginGroup*
/// @param filterObj QObject*
void q_cpmargingroup_install_event_filter(void* self, void* filterObj);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#removeEventFilter)
///
/// @param self QCPMarginGroup*
/// @param obj QObject*
void q_cpmargingroup_remove_event_filter(void* self, void* obj);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param method QMetaMethod*
QMetaObject__Connection* q_cpmargingroup_connect(void* sender, void* signal, void* receiver, void* method);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param self QCPMarginGroup*
/// @param sender QObject*
/// @param signal const char*
/// @param member const char*
QMetaObject__Connection* q_cpmargingroup_connect2(void* self, void* sender, const char* signal, const char* member);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param member QMetaMethod*
bool q_cpmargingroup_disconnect(void* sender, void* signal, void* receiver, void* member);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnect)
///
/// @param param1 QMetaObject__Connection*
bool q_cpmargingroup_disconnect2(void* param1);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dumpObjectTree)
///
/// @param self QCPMarginGroup*
void q_cpmargingroup_dump_object_tree(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dumpObjectInfo)
///
/// @param self QCPMarginGroup*
void q_cpmargingroup_dump_object_info(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setProperty)
///
/// @param self QCPMarginGroup*
/// @param name const char*
/// @param value QVariant*
bool q_cpmargingroup_set_property(void* self, const char* name, void* value);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#property)
///
/// @param self QCPMarginGroup*
/// @param name const char*
QVariant* q_cpmargingroup_property(void* self, const char* name);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dynamicPropertyNames)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPMarginGroup*
const char** q_cpmargingroup_dynamic_property_names(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#bindingStorage)
///
/// @param self QCPMarginGroup*
QBindingStorage* q_cpmargingroup_binding_storage(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#bindingStorage)
///
/// @param self QCPMarginGroup*
const QBindingStorage* q_cpmargingroup_binding_storage2(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPMarginGroup*
void q_cpmargingroup_destroyed(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPMarginGroup*
/// @param callback void func(QCPMarginGroup* self)
void q_cpmargingroup_on_destroyed(void* self, void (*callback)(void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#parent)
///
/// @param self QCPMarginGroup*
QObject* q_cpmargingroup_parent(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#inherits)
///
/// @param self QCPMarginGroup*
/// @param classname const char*
bool q_cpmargingroup_inherits(void* self, const char* classname);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#deleteLater)
///
/// @param self QCPMarginGroup*
void q_cpmargingroup_delete_later(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#moveToThread)
///
/// @param self QCPMarginGroup*
/// @param thread QThread*
/// @param param2 Disambiguated_t*
bool q_cpmargingroup_move_to_thread2(void* self, void* thread, void* param2);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#startTimer)
///
/// @param self QCPMarginGroup*
/// @param interval int
/// @param timerType enum Qt__TimerType
int32_t q_cpmargingroup_start_timer22(void* self, int interval, int32_t timerType);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param method QMetaMethod*
/// @param type enum Qt__ConnectionType
QMetaObject__Connection* q_cpmargingroup_connect5(void* sender, void* signal, void* receiver, void* method, int32_t type);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param self QCPMarginGroup*
/// @param sender QObject*
/// @param signal const char*
/// @param member const char*
/// @param type enum Qt__ConnectionType
QMetaObject__Connection* q_cpmargingroup_connect4(void* self, void* sender, const char* signal, const char* member, int32_t type);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPMarginGroup*
/// @param param1 QObject*
void q_cpmargingroup_destroyed1(void* self, void* param1);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPMarginGroup*
/// @param callback void func(QCPMarginGroup* self, QObject* param1)
void q_cpmargingroup_on_destroyed1(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPMarginGroup*
/// @param event QEvent*
bool q_cpmargingroup_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPMarginGroup*
/// @param event QEvent*
bool q_cpmargingroup_qbase_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPMarginGroup*
/// @param callback bool func(QCPMarginGroup* self, QEvent* event)
void q_cpmargingroup_on_event(void* self, bool (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPMarginGroup*
/// @param watched QObject*
/// @param event QEvent*
bool q_cpmargingroup_event_filter(void* self, void* watched, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPMarginGroup*
/// @param watched QObject*
/// @param event QEvent*
bool q_cpmargingroup_qbase_event_filter(void* self, void* watched, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPMarginGroup*
/// @param callback bool func(QCPMarginGroup* self, QObject* watched, QEvent* event)
void q_cpmargingroup_on_event_filter(void* self, bool (*callback)(void*, void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPMarginGroup*
/// @param event QTimerEvent*
void q_cpmargingroup_timer_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPMarginGroup*
/// @param event QTimerEvent*
void q_cpmargingroup_qbase_timer_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPMarginGroup*
/// @param callback void func(QCPMarginGroup* self, QTimerEvent* event)
void q_cpmargingroup_on_timer_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPMarginGroup*
/// @param event QChildEvent*
void q_cpmargingroup_child_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPMarginGroup*
/// @param event QChildEvent*
void q_cpmargingroup_qbase_child_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPMarginGroup*
/// @param callback void func(QCPMarginGroup* self, QChildEvent* event)
void q_cpmargingroup_on_child_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPMarginGroup*
/// @param event QEvent*
void q_cpmargingroup_custom_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPMarginGroup*
/// @param event QEvent*
void q_cpmargingroup_qbase_custom_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPMarginGroup*
/// @param callback void func(QCPMarginGroup* self, QEvent* event)
void q_cpmargingroup_on_custom_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPMarginGroup*
/// @param signal QMetaMethod*
void q_cpmargingroup_connect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPMarginGroup*
/// @param signal QMetaMethod*
void q_cpmargingroup_qbase_connect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPMarginGroup*
/// @param callback void func(QCPMarginGroup* self, QMetaMethod* signal)
void q_cpmargingroup_on_connect_notify(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPMarginGroup*
/// @param signal QMetaMethod*
void q_cpmargingroup_disconnect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPMarginGroup*
/// @param signal QMetaMethod*
void q_cpmargingroup_qbase_disconnect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPMarginGroup*
/// @param callback void func(QCPMarginGroup* self, QMetaMethod* signal)
void q_cpmargingroup_on_disconnect_notify(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPMarginGroup*
QObject* q_cpmargingroup_sender(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPMarginGroup*
QObject* q_cpmargingroup_qbase_sender(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPMarginGroup*
/// @param callback QObject* func()
void q_cpmargingroup_on_sender(void* self, QObject* (*callback)());

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPMarginGroup*
int32_t q_cpmargingroup_sender_signal_index(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPMarginGroup*
int32_t q_cpmargingroup_qbase_sender_signal_index(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPMarginGroup*
/// @param callback int32_t func()
void q_cpmargingroup_on_sender_signal_index(void* self, int32_t (*callback)());

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPMarginGroup*
/// @param signal const char*
int32_t q_cpmargingroup_receivers(void* self, const char* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPMarginGroup*
/// @param signal const char*
int32_t q_cpmargingroup_qbase_receivers(void* self, const char* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPMarginGroup*
/// @param callback int32_t func(QCPMarginGroup* self, const char* signal)
void q_cpmargingroup_on_receivers(void* self, int32_t (*callback)(void*, const char*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPMarginGroup*
/// @param signal QMetaMethod*
bool q_cpmargingroup_is_signal_connected(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPMarginGroup*
/// @param signal QMetaMethod*
bool q_cpmargingroup_qbase_is_signal_connected(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPMarginGroup*
/// @param callback bool func(QCPMarginGroup* self, QMetaMethod* signal)
void q_cpmargingroup_on_is_signal_connected(void* self, bool (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#objectNameChanged)
///
/// Wrapper to allow calling private signal
///
/// @param self QCPMarginGroup*
/// @param callback void func(QCPMarginGroup* self, const char* objectName)
void q_cpmargingroup_on_object_name_changed(void* self, void (*callback)(void*, const char*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPMarginGroup.html)
///
/// Delete this object from C++ memory.
///
/// @param self QCPMarginGroup*
void q_cpmargingroup_delete(void* self);

/// https://www.qcustomplot.com/documentation/classQCPLayoutElement.html

/// q_cplayoutelement_new constructs a new QCPLayoutElement object.
///
QCPLayoutElement* q_cplayoutelement_new();

/// q_cplayoutelement_new2 constructs a new QCPLayoutElement object.
///
/// @param parentPlot QCustomPlot*
QCPLayoutElement* q_cplayoutelement_new2(void* parentPlot);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#metaObject)
///
/// @param self QCPLayoutElement*
const QMetaObject* q_cplayoutelement_meta_object(void* self);

/// @param self QCPLayoutElement*
/// @param param1 const char*
void* q_cplayoutelement_metacast(void* self, const char* param1);

/// @param self QCPLayoutElement*
/// @param param1 enum QMetaObject__Call
/// @param param2 int
/// @param param3 void*
int32_t q_cplayoutelement_metacall(void* self, int32_t param1, int param2, void* param3);

/// Allows for overriding the related default method
///
/// @param self QCPLayoutElement*
/// @param callback int32_t func(QCPLayoutElement* self, enum QMetaObject__Call param1, int param2, void* param3)
void q_cplayoutelement_on_metacall(void* self, int32_t (*callback)(void*, int32_t, int, void*));

/// Base class method implementation
///
/// @param self QCPLayoutElement*
/// @param param1 enum QMetaObject__Call
/// @param param2 int
/// @param param3 void*
int32_t q_cplayoutelement_qbase_metacall(void* self, int32_t param1, int param2, void* param3);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
const char* q_cplayoutelement_tr(const char* s);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLayoutElement*
QCPLayout* q_cplayoutelement_layout(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLayoutElement*
QRect* q_cplayoutelement_rect(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLayoutElement*
QRect* q_cplayoutelement_outer_rect(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLayoutElement*
QMargins* q_cplayoutelement_margins(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLayoutElement*
QMargins* q_cplayoutelement_minimum_margins(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLayoutElement*
///
/// @return flag of enum QCP__MarginSide
int32_t q_cplayoutelement_auto_margins(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLayoutElement*
QSize* q_cplayoutelement_minimum_size(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLayoutElement*
QSize* q_cplayoutelement_maximum_size(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLayoutElement*
///
/// @return enum QCPLayoutElement__SizeConstraintRect
int32_t q_cplayoutelement_size_constraint_rect(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLayoutElement*
/// @param side enum QCP__MarginSide
QCPMarginGroup* q_cplayoutelement_margin_group(void* self, int32_t side);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLayoutElement*
libqt_map /* of int32_t to QCPMarginGroup* */ q_cplayoutelement_margin_groups(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLayoutElement*
/// @param rect QRect*
void q_cplayoutelement_set_outer_rect(void* self, void* rect);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLayoutElement*
/// @param margins QMargins*
void q_cplayoutelement_set_margins(void* self, void* margins);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLayoutElement*
/// @param margins QMargins*
void q_cplayoutelement_set_minimum_margins(void* self, void* margins);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLayoutElement*
/// @param sides flag of enum QCP__MarginSide
void q_cplayoutelement_set_auto_margins(void* self, int32_t sides);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLayoutElement*
/// @param size QSize*
void q_cplayoutelement_set_minimum_size(void* self, void* size);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLayoutElement*
/// @param width int
/// @param height int
void q_cplayoutelement_set_minimum_size2(void* self, int width, int height);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLayoutElement*
/// @param size QSize*
void q_cplayoutelement_set_maximum_size(void* self, void* size);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLayoutElement*
/// @param width int
/// @param height int
void q_cplayoutelement_set_maximum_size2(void* self, int width, int height);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLayoutElement*
/// @param constraintRect enum QCPLayoutElement__SizeConstraintRect
void q_cplayoutelement_set_size_constraint_rect(void* self, int32_t constraintRect);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLayoutElement*
/// @param sides flag of enum QCP__MarginSide
/// @param group QCPMarginGroup*
void q_cplayoutelement_set_margin_group(void* self, int32_t sides, void* group);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLayoutElement*
/// @param phase enum QCPLayoutElement__UpdatePhase
void q_cplayoutelement_update(void* self, int32_t phase);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPLayoutElement*
/// @param callback void func(QCPLayoutElement* self, enum QCPLayoutElement__UpdatePhase phase)
void q_cplayoutelement_on_update(void* self, void (*callback)(void*, int32_t));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Base class method implementation
///
/// @param self QCPLayoutElement*
/// @param phase enum QCPLayoutElement__UpdatePhase
void q_cplayoutelement_qbase_update(void* self, int32_t phase);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLayoutElement*
QSize* q_cplayoutelement_minimum_outer_size_hint(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPLayoutElement*
/// @param callback QSize* func()
void q_cplayoutelement_on_minimum_outer_size_hint(void* self, QSize* (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Base class method implementation
///
/// @param self QCPLayoutElement*
QSize* q_cplayoutelement_qbase_minimum_outer_size_hint(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLayoutElement*
QSize* q_cplayoutelement_maximum_outer_size_hint(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPLayoutElement*
/// @param callback QSize* func()
void q_cplayoutelement_on_maximum_outer_size_hint(void* self, QSize* (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Base class method implementation
///
/// @param self QCPLayoutElement*
QSize* q_cplayoutelement_qbase_maximum_outer_size_hint(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLayoutElement*
/// @param recursive bool
libqt_list /* of QCPLayoutElement* */ q_cplayoutelement_elements(void* self, bool recursive);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPLayoutElement*
/// @param callback QCPLayoutElement** func(QCPLayoutElement* self, bool recursive)
void q_cplayoutelement_on_elements(void* self, QCPLayoutElement** (*callback)(void*, bool));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Base class method implementation
///
/// @param self QCPLayoutElement*
/// @param recursive bool
libqt_list /* of QCPLayoutElement* */ q_cplayoutelement_qbase_elements(void* self, bool recursive);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLayoutElement*
/// @param pos QPointF*
/// @param onlySelectable bool
/// @param details QVariant*
double q_cplayoutelement_select_test(void* self, void* pos, bool onlySelectable, void* details);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPLayoutElement*
/// @param callback double func(QCPLayoutElement* self, QPointF* pos, bool onlySelectable, QVariant* details)
void q_cplayoutelement_on_select_test(void* self, double (*callback)(void*, void*, bool, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Base class method implementation
///
/// @param self QCPLayoutElement*
/// @param pos QPointF*
/// @param onlySelectable bool
/// @param details QVariant*
double q_cplayoutelement_qbase_select_test(void* self, void* pos, bool onlySelectable, void* details);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLayoutElement*
/// @param side enum QCP__MarginSide
int32_t q_cplayoutelement_calculate_auto_margin(void* self, int32_t side);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPLayoutElement*
/// @param callback int32_t func(QCPLayoutElement* self, enum QCP__MarginSide side)
void q_cplayoutelement_on_calculate_auto_margin(void* self, int32_t (*callback)(void*, int32_t));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Base class method implementation
///
/// @param self QCPLayoutElement*
/// @param side enum QCP__MarginSide
int32_t q_cplayoutelement_qbase_calculate_auto_margin(void* self, int32_t side);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLayoutElement*
void q_cplayoutelement_layout_changed(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPLayoutElement*
/// @param callback void func()
void q_cplayoutelement_on_layout_changed(void* self, void (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Base class method implementation
///
/// @param self QCPLayoutElement*
void q_cplayoutelement_qbase_layout_changed(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLayoutElement*
/// @param painter QCPPainter*
void q_cplayoutelement_apply_default_antialiasing_hint(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPLayoutElement*
/// @param callback void func(QCPLayoutElement* self, QCPPainter* painter)
void q_cplayoutelement_on_apply_default_antialiasing_hint(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Base class method implementation
///
/// @param self QCPLayoutElement*
/// @param painter QCPPainter*
void q_cplayoutelement_qbase_apply_default_antialiasing_hint(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLayoutElement*
/// @param painter QCPPainter*
void q_cplayoutelement_draw(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPLayoutElement*
/// @param callback void func(QCPLayoutElement* self, QCPPainter* painter)
void q_cplayoutelement_on_draw(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Base class method implementation
///
/// @param self QCPLayoutElement*
/// @param painter QCPPainter*
void q_cplayoutelement_qbase_draw(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLayoutElement*
/// @param parentPlot QCustomPlot*
void q_cplayoutelement_parent_plot_initialized(void* self, void* parentPlot);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPLayoutElement*
/// @param callback void func(QCPLayoutElement* self, QCustomPlot* parentPlot)
void q_cplayoutelement_on_parent_plot_initialized(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Base class method implementation
///
/// @param self QCPLayoutElement*
/// @param parentPlot QCustomPlot*
void q_cplayoutelement_qbase_parent_plot_initialized(void* self, void* parentPlot);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
/// @param c const char*
const char* q_cplayoutelement_tr2(const char* s, const char* c);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
/// @param c const char*
/// @param n int
const char* q_cplayoutelement_tr3(const char* s, const char* c, int n);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPLayoutElement*
bool q_cplayoutelement_visible(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPLayoutElement*
QCustomPlot* q_cplayoutelement_parent_plot(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPLayoutElement*
QCPLayerable* q_cplayoutelement_parent_layerable(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPLayoutElement*
QCPLayer* q_cplayoutelement_layer(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPLayoutElement*
bool q_cplayoutelement_antialiased(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPLayoutElement*
/// @param on bool
void q_cplayoutelement_set_visible(void* self, bool on);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPLayoutElement*
/// @param layer QCPLayer*
bool q_cplayoutelement_set_layer(void* self, void* layer);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPLayoutElement*
/// @param layerName const char*
bool q_cplayoutelement_set_layer2(void* self, const char* layerName);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPLayoutElement*
/// @param enabled bool
void q_cplayoutelement_set_antialiased(void* self, bool enabled);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPLayoutElement*
bool q_cplayoutelement_real_visibility(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPLayoutElement*
/// @param newLayer QCPLayer*
void q_cplayoutelement_layer_changed(void* self, void* newLayer);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPLayoutElement*
/// @param callback void func(QCPLayoutElement* self, QCPLayer* newLayer)
void q_cplayoutelement_on_layer_changed(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#objectName)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPLayoutElement*
const char* q_cplayoutelement_object_name(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setObjectName)
///
/// @param self QCPLayoutElement*
/// @param name char*
void q_cplayoutelement_set_object_name(void* self, char* name);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isWidgetType)
///
/// @param self QCPLayoutElement*
bool q_cplayoutelement_is_widget_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isWindowType)
///
/// @param self QCPLayoutElement*
bool q_cplayoutelement_is_window_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isQuickItemType)
///
/// @param self QCPLayoutElement*
bool q_cplayoutelement_is_quick_item_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#signalsBlocked)
///
/// @param self QCPLayoutElement*
bool q_cplayoutelement_signals_blocked(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#blockSignals)
///
/// @param self QCPLayoutElement*
/// @param b bool
bool q_cplayoutelement_block_signals(void* self, bool b);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#thread)
///
/// @param self QCPLayoutElement*
QThread* q_cplayoutelement_thread(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#moveToThread)
///
/// @param self QCPLayoutElement*
/// @param thread QThread*
bool q_cplayoutelement_move_to_thread(void* self, void* thread);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#startTimer)
///
/// @param self QCPLayoutElement*
/// @param interval int
int32_t q_cplayoutelement_start_timer(void* self, int interval);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#killTimer)
///
/// @param self QCPLayoutElement*
/// @param id int
void q_cplayoutelement_kill_timer(void* self, int id);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#killTimer)
///
/// @param self QCPLayoutElement*
/// @param id enum Qt__TimerId
void q_cplayoutelement_kill_timer2(void* self, int32_t id);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#children)
///
/// @param self QCPLayoutElement*
libqt_list /* of QObject* */ q_cplayoutelement_children(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setParent)
///
/// @param self QCPLayoutElement*
/// @param parent QObject*
void q_cplayoutelement_set_parent(void* self, void* parent);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#installEventFilter)
///
/// @param self QCPLayoutElement*
/// @param filterObj QObject*
void q_cplayoutelement_install_event_filter(void* self, void* filterObj);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#removeEventFilter)
///
/// @param self QCPLayoutElement*
/// @param obj QObject*
void q_cplayoutelement_remove_event_filter(void* self, void* obj);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param method QMetaMethod*
QMetaObject__Connection* q_cplayoutelement_connect(void* sender, void* signal, void* receiver, void* method);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param self QCPLayoutElement*
/// @param sender QObject*
/// @param signal const char*
/// @param member const char*
QMetaObject__Connection* q_cplayoutelement_connect2(void* self, void* sender, const char* signal, const char* member);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param member QMetaMethod*
bool q_cplayoutelement_disconnect(void* sender, void* signal, void* receiver, void* member);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnect)
///
/// @param param1 QMetaObject__Connection*
bool q_cplayoutelement_disconnect2(void* param1);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dumpObjectTree)
///
/// @param self QCPLayoutElement*
void q_cplayoutelement_dump_object_tree(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dumpObjectInfo)
///
/// @param self QCPLayoutElement*
void q_cplayoutelement_dump_object_info(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setProperty)
///
/// @param self QCPLayoutElement*
/// @param name const char*
/// @param value QVariant*
bool q_cplayoutelement_set_property(void* self, const char* name, void* value);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#property)
///
/// @param self QCPLayoutElement*
/// @param name const char*
QVariant* q_cplayoutelement_property(void* self, const char* name);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dynamicPropertyNames)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPLayoutElement*
const char** q_cplayoutelement_dynamic_property_names(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#bindingStorage)
///
/// @param self QCPLayoutElement*
QBindingStorage* q_cplayoutelement_binding_storage(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#bindingStorage)
///
/// @param self QCPLayoutElement*
const QBindingStorage* q_cplayoutelement_binding_storage2(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPLayoutElement*
void q_cplayoutelement_destroyed(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPLayoutElement*
/// @param callback void func(QCPLayoutElement* self)
void q_cplayoutelement_on_destroyed(void* self, void (*callback)(void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#parent)
///
/// @param self QCPLayoutElement*
QObject* q_cplayoutelement_parent(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#inherits)
///
/// @param self QCPLayoutElement*
/// @param classname const char*
bool q_cplayoutelement_inherits(void* self, const char* classname);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#deleteLater)
///
/// @param self QCPLayoutElement*
void q_cplayoutelement_delete_later(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#moveToThread)
///
/// @param self QCPLayoutElement*
/// @param thread QThread*
/// @param param2 Disambiguated_t*
bool q_cplayoutelement_move_to_thread2(void* self, void* thread, void* param2);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#startTimer)
///
/// @param self QCPLayoutElement*
/// @param interval int
/// @param timerType enum Qt__TimerType
int32_t q_cplayoutelement_start_timer22(void* self, int interval, int32_t timerType);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param method QMetaMethod*
/// @param type enum Qt__ConnectionType
QMetaObject__Connection* q_cplayoutelement_connect5(void* sender, void* signal, void* receiver, void* method, int32_t type);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param self QCPLayoutElement*
/// @param sender QObject*
/// @param signal const char*
/// @param member const char*
/// @param type enum Qt__ConnectionType
QMetaObject__Connection* q_cplayoutelement_connect4(void* self, void* sender, const char* signal, const char* member, int32_t type);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPLayoutElement*
/// @param param1 QObject*
void q_cplayoutelement_destroyed1(void* self, void* param1);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPLayoutElement*
/// @param callback void func(QCPLayoutElement* self, QObject* param1)
void q_cplayoutelement_on_destroyed1(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayoutElement*
///
/// @return enum QCP__Interaction
int32_t q_cplayoutelement_selection_category(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayoutElement*
///
/// @return enum QCP__Interaction
int32_t q_cplayoutelement_qbase_selection_category(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayoutElement*
/// @param callback int32_t func()
void q_cplayoutelement_on_selection_category(void* self, int32_t (*callback)());

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayoutElement*
QRect* q_cplayoutelement_clip_rect(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayoutElement*
QRect* q_cplayoutelement_qbase_clip_rect(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayoutElement*
/// @param callback QRect* func()
void q_cplayoutelement_on_clip_rect(void* self, QRect* (*callback)());

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayoutElement*
/// @param event QMouseEvent*
/// @param additive bool
/// @param details QVariant*
/// @param selectionStateChanged bool*
void q_cplayoutelement_select_event(void* self, void* event, bool additive, void* details, bool* selectionStateChanged);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayoutElement*
/// @param event QMouseEvent*
/// @param additive bool
/// @param details QVariant*
/// @param selectionStateChanged bool*
void q_cplayoutelement_qbase_select_event(void* self, void* event, bool additive, void* details, bool* selectionStateChanged);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayoutElement*
/// @param callback void func(QCPLayoutElement* self, QMouseEvent* event, bool additive, QVariant* details, bool* selectionStateChanged)
void q_cplayoutelement_on_select_event(void* self, void (*callback)(void*, void*, bool, void*, bool*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayoutElement*
/// @param selectionStateChanged bool*
void q_cplayoutelement_deselect_event(void* self, bool* selectionStateChanged);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayoutElement*
/// @param selectionStateChanged bool*
void q_cplayoutelement_qbase_deselect_event(void* self, bool* selectionStateChanged);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayoutElement*
/// @param callback void func(QCPLayoutElement* self, bool* selectionStateChanged)
void q_cplayoutelement_on_deselect_event(void* self, void (*callback)(void*, bool*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayoutElement*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cplayoutelement_mouse_press_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayoutElement*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cplayoutelement_qbase_mouse_press_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayoutElement*
/// @param callback void func(QCPLayoutElement* self, QMouseEvent* event, QVariant* details)
void q_cplayoutelement_on_mouse_press_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayoutElement*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cplayoutelement_mouse_move_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayoutElement*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cplayoutelement_qbase_mouse_move_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayoutElement*
/// @param callback void func(QCPLayoutElement* self, QMouseEvent* event, QPointF* startPos)
void q_cplayoutelement_on_mouse_move_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayoutElement*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cplayoutelement_mouse_release_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayoutElement*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cplayoutelement_qbase_mouse_release_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayoutElement*
/// @param callback void func(QCPLayoutElement* self, QMouseEvent* event, QPointF* startPos)
void q_cplayoutelement_on_mouse_release_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayoutElement*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cplayoutelement_mouse_double_click_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayoutElement*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cplayoutelement_qbase_mouse_double_click_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayoutElement*
/// @param callback void func(QCPLayoutElement* self, QMouseEvent* event, QVariant* details)
void q_cplayoutelement_on_mouse_double_click_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayoutElement*
/// @param event QWheelEvent*
void q_cplayoutelement_wheel_event(void* self, void* event);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayoutElement*
/// @param event QWheelEvent*
void q_cplayoutelement_qbase_wheel_event(void* self, void* event);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayoutElement*
/// @param callback void func(QCPLayoutElement* self, QWheelEvent* event)
void q_cplayoutelement_on_wheel_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayoutElement*
/// @param event QEvent*
bool q_cplayoutelement_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayoutElement*
/// @param event QEvent*
bool q_cplayoutelement_qbase_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayoutElement*
/// @param callback bool func(QCPLayoutElement* self, QEvent* event)
void q_cplayoutelement_on_event(void* self, bool (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayoutElement*
/// @param watched QObject*
/// @param event QEvent*
bool q_cplayoutelement_event_filter(void* self, void* watched, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayoutElement*
/// @param watched QObject*
/// @param event QEvent*
bool q_cplayoutelement_qbase_event_filter(void* self, void* watched, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayoutElement*
/// @param callback bool func(QCPLayoutElement* self, QObject* watched, QEvent* event)
void q_cplayoutelement_on_event_filter(void* self, bool (*callback)(void*, void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayoutElement*
/// @param event QTimerEvent*
void q_cplayoutelement_timer_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayoutElement*
/// @param event QTimerEvent*
void q_cplayoutelement_qbase_timer_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayoutElement*
/// @param callback void func(QCPLayoutElement* self, QTimerEvent* event)
void q_cplayoutelement_on_timer_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayoutElement*
/// @param event QChildEvent*
void q_cplayoutelement_child_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayoutElement*
/// @param event QChildEvent*
void q_cplayoutelement_qbase_child_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayoutElement*
/// @param callback void func(QCPLayoutElement* self, QChildEvent* event)
void q_cplayoutelement_on_child_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayoutElement*
/// @param event QEvent*
void q_cplayoutelement_custom_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayoutElement*
/// @param event QEvent*
void q_cplayoutelement_qbase_custom_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayoutElement*
/// @param callback void func(QCPLayoutElement* self, QEvent* event)
void q_cplayoutelement_on_custom_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayoutElement*
/// @param signal QMetaMethod*
void q_cplayoutelement_connect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayoutElement*
/// @param signal QMetaMethod*
void q_cplayoutelement_qbase_connect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayoutElement*
/// @param callback void func(QCPLayoutElement* self, QMetaMethod* signal)
void q_cplayoutelement_on_connect_notify(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayoutElement*
/// @param signal QMetaMethod*
void q_cplayoutelement_disconnect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayoutElement*
/// @param signal QMetaMethod*
void q_cplayoutelement_qbase_disconnect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayoutElement*
/// @param callback void func(QCPLayoutElement* self, QMetaMethod* signal)
void q_cplayoutelement_on_disconnect_notify(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayoutElement*
/// @param parentPlot QCustomPlot*
void q_cplayoutelement_initialize_parent_plot(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayoutElement*
/// @param parentPlot QCustomPlot*
void q_cplayoutelement_qbase_initialize_parent_plot(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayoutElement*
/// @param callback void func(QCPLayoutElement* self, QCustomPlot* parentPlot)
void q_cplayoutelement_on_initialize_parent_plot(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayoutElement*
/// @param parentLayerable QCPLayerable*
void q_cplayoutelement_set_parent_layerable(void* self, void* parentLayerable);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayoutElement*
/// @param parentLayerable QCPLayerable*
void q_cplayoutelement_qbase_set_parent_layerable(void* self, void* parentLayerable);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayoutElement*
/// @param callback void func(QCPLayoutElement* self, QCPLayerable* parentLayerable)
void q_cplayoutelement_on_set_parent_layerable(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayoutElement*
/// @param layer QCPLayer*
/// @param prepend bool
bool q_cplayoutelement_move_to_layer(void* self, void* layer, bool prepend);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayoutElement*
/// @param layer QCPLayer*
/// @param prepend bool
bool q_cplayoutelement_qbase_move_to_layer(void* self, void* layer, bool prepend);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayoutElement*
/// @param callback bool func(QCPLayoutElement* self, QCPLayer* layer, bool prepend)
void q_cplayoutelement_on_move_to_layer(void* self, bool (*callback)(void*, void*, bool));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayoutElement*
/// @param painter QCPPainter*
/// @param localAntialiased bool
/// @param overrideElement enum QCP__AntialiasedElement
void q_cplayoutelement_apply_antialiasing_hint(void* self, void* painter, bool localAntialiased, int32_t overrideElement);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayoutElement*
/// @param painter QCPPainter*
/// @param localAntialiased bool
/// @param overrideElement enum QCP__AntialiasedElement
void q_cplayoutelement_qbase_apply_antialiasing_hint(void* self, void* painter, bool localAntialiased, int32_t overrideElement);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayoutElement*
/// @param callback void func(QCPLayoutElement* self, QCPPainter* painter, bool localAntialiased, enum QCP__AntialiasedElement overrideElement)
void q_cplayoutelement_on_apply_antialiasing_hint(void* self, void (*callback)(void*, void*, bool, int32_t));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayoutElement*
QObject* q_cplayoutelement_sender(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayoutElement*
QObject* q_cplayoutelement_qbase_sender(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayoutElement*
/// @param callback QObject* func()
void q_cplayoutelement_on_sender(void* self, QObject* (*callback)());

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayoutElement*
int32_t q_cplayoutelement_sender_signal_index(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayoutElement*
int32_t q_cplayoutelement_qbase_sender_signal_index(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayoutElement*
/// @param callback int32_t func()
void q_cplayoutelement_on_sender_signal_index(void* self, int32_t (*callback)());

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayoutElement*
/// @param signal const char*
int32_t q_cplayoutelement_receivers(void* self, const char* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayoutElement*
/// @param signal const char*
int32_t q_cplayoutelement_qbase_receivers(void* self, const char* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayoutElement*
/// @param callback int32_t func(QCPLayoutElement* self, const char* signal)
void q_cplayoutelement_on_receivers(void* self, int32_t (*callback)(void*, const char*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayoutElement*
/// @param signal QMetaMethod*
bool q_cplayoutelement_is_signal_connected(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayoutElement*
/// @param signal QMetaMethod*
bool q_cplayoutelement_qbase_is_signal_connected(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayoutElement*
/// @param callback bool func(QCPLayoutElement* self, QMetaMethod* signal)
void q_cplayoutelement_on_is_signal_connected(void* self, bool (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#objectNameChanged)
///
/// Wrapper to allow calling private signal
///
/// @param self QCPLayoutElement*
/// @param callback void func(QCPLayoutElement* self, const char* objectName)
void q_cplayoutelement_on_object_name_changed(void* self, void (*callback)(void*, const char*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Delete this object from C++ memory.
///
/// @param self QCPLayoutElement*
void q_cplayoutelement_delete(void* self);

/// https://www.qcustomplot.com/documentation/classQCPLayout.html

/// q_cplayout_new constructs a new QCPLayout object.
///
QCPLayout* q_cplayout_new();

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#metaObject)
///
/// @param self QCPLayout*
const QMetaObject* q_cplayout_meta_object(void* self);

/// @param self QCPLayout*
/// @param param1 const char*
void* q_cplayout_metacast(void* self, const char* param1);

/// @param self QCPLayout*
/// @param param1 enum QMetaObject__Call
/// @param param2 int
/// @param param3 void*
int32_t q_cplayout_metacall(void* self, int32_t param1, int param2, void* param3);

/// Allows for overriding the related default method
///
/// @param self QCPLayout*
/// @param callback int32_t func(QCPLayout* self, enum QMetaObject__Call param1, int param2, void* param3)
void q_cplayout_on_metacall(void* self, int32_t (*callback)(void*, int32_t, int, void*));

/// Base class method implementation
///
/// @param self QCPLayout*
/// @param param1 enum QMetaObject__Call
/// @param param2 int
/// @param param3 void*
int32_t q_cplayout_qbase_metacall(void* self, int32_t param1, int param2, void* param3);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
const char* q_cplayout_tr(const char* s);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayout.html)
///
/// @param self QCPLayout*
/// @param phase enum QCPLayoutElement__UpdatePhase
void q_cplayout_update(void* self, int32_t phase);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayout.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPLayout*
/// @param callback void func(QCPLayout* self, enum QCPLayoutElement__UpdatePhase phase)
void q_cplayout_on_update(void* self, void (*callback)(void*, int32_t));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayout.html)
///
/// Base class method implementation
///
/// @param self QCPLayout*
/// @param phase enum QCPLayoutElement__UpdatePhase
void q_cplayout_qbase_update(void* self, int32_t phase);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayout.html)
///
/// @param self QCPLayout*
/// @param recursive bool
libqt_list /* of QCPLayoutElement* */ q_cplayout_elements(void* self, bool recursive);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayout.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPLayout*
/// @param callback QCPLayoutElement** func(QCPLayout* self, bool recursive)
void q_cplayout_on_elements(void* self, QCPLayoutElement** (*callback)(void*, bool));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayout.html)
///
/// Base class method implementation
///
/// @param self QCPLayout*
/// @param recursive bool
libqt_list /* of QCPLayoutElement* */ q_cplayout_qbase_elements(void* self, bool recursive);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayout.html)
///
/// @param self QCPLayout*
int32_t q_cplayout_element_count(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayout.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPLayout*
/// @param callback int32_t func()
void q_cplayout_on_element_count(void* self, int32_t (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayout.html)
///
/// Base class method implementation
///
/// @param self QCPLayout*
int32_t q_cplayout_qbase_element_count(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayout.html)
///
/// @param self QCPLayout*
/// @param index int
QCPLayoutElement* q_cplayout_element_at(void* self, int index);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayout.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPLayout*
/// @param callback QCPLayoutElement* func(QCPLayout* self, int index)
void q_cplayout_on_element_at(void* self, QCPLayoutElement* (*callback)(void*, int));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayout.html)
///
/// Base class method implementation
///
/// @param self QCPLayout*
/// @param index int
QCPLayoutElement* q_cplayout_qbase_element_at(void* self, int index);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayout.html)
///
/// @param self QCPLayout*
/// @param index int
QCPLayoutElement* q_cplayout_take_at(void* self, int index);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayout.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPLayout*
/// @param callback QCPLayoutElement* func(QCPLayout* self, int index)
void q_cplayout_on_take_at(void* self, QCPLayoutElement* (*callback)(void*, int));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayout.html)
///
/// Base class method implementation
///
/// @param self QCPLayout*
/// @param index int
QCPLayoutElement* q_cplayout_qbase_take_at(void* self, int index);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayout.html)
///
/// @param self QCPLayout*
/// @param element QCPLayoutElement*
bool q_cplayout_take(void* self, void* element);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayout.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPLayout*
/// @param callback bool func(QCPLayout* self, QCPLayoutElement* element)
void q_cplayout_on_take(void* self, bool (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayout.html)
///
/// Base class method implementation
///
/// @param self QCPLayout*
/// @param element QCPLayoutElement*
bool q_cplayout_qbase_take(void* self, void* element);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayout.html)
///
/// @param self QCPLayout*
void q_cplayout_simplify(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayout.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPLayout*
/// @param callback void func()
void q_cplayout_on_simplify(void* self, void (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayout.html)
///
/// Base class method implementation
///
/// @param self QCPLayout*
void q_cplayout_qbase_simplify(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayout.html)
///
/// @param self QCPLayout*
/// @param index int
bool q_cplayout_remove_at(void* self, int index);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayout.html)
///
/// @param self QCPLayout*
/// @param element QCPLayoutElement*
bool q_cplayout_remove(void* self, void* element);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayout.html)
///
/// @param self QCPLayout*
void q_cplayout_clear(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayout.html)
///
/// @param self QCPLayout*
void q_cplayout_update_layout(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayout.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPLayout*
/// @param callback void func()
void q_cplayout_on_update_layout(void* self, void (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayout.html)
///
/// Base class method implementation
///
/// @param self QCPLayout*
void q_cplayout_qbase_update_layout(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayout.html)
///
/// @param self QCPLayout*
void q_cplayout_size_constraints_changed(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayout.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPLayout*
/// @param callback void func()
void q_cplayout_on_size_constraints_changed(void* self, void (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayout.html)
///
/// Base class method implementation
///
/// @param self QCPLayout*
void q_cplayout_qbase_size_constraints_changed(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayout.html)
///
/// @param self QCPLayout*
/// @param el QCPLayoutElement*
void q_cplayout_adopt_element(void* self, void* el);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayout.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPLayout*
/// @param callback void func(QCPLayout* self, QCPLayoutElement* el)
void q_cplayout_on_adopt_element(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayout.html)
///
/// Base class method implementation
///
/// @param self QCPLayout*
/// @param el QCPLayoutElement*
void q_cplayout_qbase_adopt_element(void* self, void* el);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayout.html)
///
/// @param self QCPLayout*
/// @param el QCPLayoutElement*
void q_cplayout_release_element(void* self, void* el);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayout.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPLayout*
/// @param callback void func(QCPLayout* self, QCPLayoutElement* el)
void q_cplayout_on_release_element(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayout.html)
///
/// Base class method implementation
///
/// @param self QCPLayout*
/// @param el QCPLayoutElement*
void q_cplayout_qbase_release_element(void* self, void* el);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayout.html)
///
/// @param self QCPLayout*
/// @param maxSizes libqt_list /* of int */
/// @param minSizes libqt_list /* of int */
/// @param stretchFactors libqt_list /* of double */
/// @param totalSize int
libqt_list /* of int */ q_cplayout_get_section_sizes(void* self, libqt_list maxSizes, libqt_list minSizes, libqt_list stretchFactors, int totalSize);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayout.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPLayout*
/// @param callback int* func(QCPLayout* self, int* /* of int */, int* /* of int */, libqt_list /* of double */ /* of double */, int totalSize)
void q_cplayout_on_get_section_sizes(void* self, int* (*callback)(void*, int*, int*, libqt_list, int));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayout.html)
///
/// Base class method implementation
///
/// @param self QCPLayout*
/// @param maxSizes libqt_list /* of int */
/// @param minSizes libqt_list /* of int */
/// @param stretchFactors libqt_list /* of double */
/// @param totalSize int
libqt_list /* of int */ q_cplayout_qbase_get_section_sizes(void* self, libqt_list maxSizes, libqt_list minSizes, libqt_list stretchFactors, int totalSize);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
/// @param c const char*
const char* q_cplayout_tr2(const char* s, const char* c);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
/// @param c const char*
/// @param n int
const char* q_cplayout_tr3(const char* s, const char* c, int n);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLayout*
QCPLayout* q_cplayout_layout(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLayout*
QRect* q_cplayout_rect(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLayout*
QRect* q_cplayout_outer_rect(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLayout*
QMargins* q_cplayout_margins(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLayout*
QMargins* q_cplayout_minimum_margins(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLayout*
///
/// @return flag of enum QCP__MarginSide
int32_t q_cplayout_auto_margins(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLayout*
QSize* q_cplayout_minimum_size(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLayout*
QSize* q_cplayout_maximum_size(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLayout*
///
/// @return enum QCPLayoutElement__SizeConstraintRect
int32_t q_cplayout_size_constraint_rect(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLayout*
/// @param side enum QCP__MarginSide
QCPMarginGroup* q_cplayout_margin_group(void* self, int32_t side);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLayout*
libqt_map /* of int32_t to QCPMarginGroup* */ q_cplayout_margin_groups(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLayout*
/// @param rect QRect*
void q_cplayout_set_outer_rect(void* self, void* rect);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLayout*
/// @param margins QMargins*
void q_cplayout_set_margins(void* self, void* margins);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLayout*
/// @param margins QMargins*
void q_cplayout_set_minimum_margins(void* self, void* margins);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLayout*
/// @param sides flag of enum QCP__MarginSide
void q_cplayout_set_auto_margins(void* self, int32_t sides);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLayout*
/// @param size QSize*
void q_cplayout_set_minimum_size(void* self, void* size);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLayout*
/// @param width int
/// @param height int
void q_cplayout_set_minimum_size2(void* self, int width, int height);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLayout*
/// @param size QSize*
void q_cplayout_set_maximum_size(void* self, void* size);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLayout*
/// @param width int
/// @param height int
void q_cplayout_set_maximum_size2(void* self, int width, int height);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLayout*
/// @param constraintRect enum QCPLayoutElement__SizeConstraintRect
void q_cplayout_set_size_constraint_rect(void* self, int32_t constraintRect);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLayout*
/// @param sides flag of enum QCP__MarginSide
/// @param group QCPMarginGroup*
void q_cplayout_set_margin_group(void* self, int32_t sides, void* group);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPLayout*
bool q_cplayout_visible(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPLayout*
QCustomPlot* q_cplayout_parent_plot(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPLayout*
QCPLayerable* q_cplayout_parent_layerable(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPLayout*
QCPLayer* q_cplayout_layer(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPLayout*
bool q_cplayout_antialiased(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPLayout*
/// @param on bool
void q_cplayout_set_visible(void* self, bool on);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPLayout*
/// @param layer QCPLayer*
bool q_cplayout_set_layer(void* self, void* layer);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPLayout*
/// @param layerName const char*
bool q_cplayout_set_layer2(void* self, const char* layerName);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPLayout*
/// @param enabled bool
void q_cplayout_set_antialiased(void* self, bool enabled);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPLayout*
bool q_cplayout_real_visibility(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPLayout*
/// @param newLayer QCPLayer*
void q_cplayout_layer_changed(void* self, void* newLayer);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPLayout*
/// @param callback void func(QCPLayout* self, QCPLayer* newLayer)
void q_cplayout_on_layer_changed(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#objectName)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPLayout*
const char* q_cplayout_object_name(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setObjectName)
///
/// @param self QCPLayout*
/// @param name char*
void q_cplayout_set_object_name(void* self, char* name);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isWidgetType)
///
/// @param self QCPLayout*
bool q_cplayout_is_widget_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isWindowType)
///
/// @param self QCPLayout*
bool q_cplayout_is_window_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isQuickItemType)
///
/// @param self QCPLayout*
bool q_cplayout_is_quick_item_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#signalsBlocked)
///
/// @param self QCPLayout*
bool q_cplayout_signals_blocked(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#blockSignals)
///
/// @param self QCPLayout*
/// @param b bool
bool q_cplayout_block_signals(void* self, bool b);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#thread)
///
/// @param self QCPLayout*
QThread* q_cplayout_thread(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#moveToThread)
///
/// @param self QCPLayout*
/// @param thread QThread*
bool q_cplayout_move_to_thread(void* self, void* thread);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#startTimer)
///
/// @param self QCPLayout*
/// @param interval int
int32_t q_cplayout_start_timer(void* self, int interval);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#killTimer)
///
/// @param self QCPLayout*
/// @param id int
void q_cplayout_kill_timer(void* self, int id);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#killTimer)
///
/// @param self QCPLayout*
/// @param id enum Qt__TimerId
void q_cplayout_kill_timer2(void* self, int32_t id);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#children)
///
/// @param self QCPLayout*
libqt_list /* of QObject* */ q_cplayout_children(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setParent)
///
/// @param self QCPLayout*
/// @param parent QObject*
void q_cplayout_set_parent(void* self, void* parent);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#installEventFilter)
///
/// @param self QCPLayout*
/// @param filterObj QObject*
void q_cplayout_install_event_filter(void* self, void* filterObj);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#removeEventFilter)
///
/// @param self QCPLayout*
/// @param obj QObject*
void q_cplayout_remove_event_filter(void* self, void* obj);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param method QMetaMethod*
QMetaObject__Connection* q_cplayout_connect(void* sender, void* signal, void* receiver, void* method);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param self QCPLayout*
/// @param sender QObject*
/// @param signal const char*
/// @param member const char*
QMetaObject__Connection* q_cplayout_connect2(void* self, void* sender, const char* signal, const char* member);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param member QMetaMethod*
bool q_cplayout_disconnect(void* sender, void* signal, void* receiver, void* member);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnect)
///
/// @param param1 QMetaObject__Connection*
bool q_cplayout_disconnect2(void* param1);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dumpObjectTree)
///
/// @param self QCPLayout*
void q_cplayout_dump_object_tree(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dumpObjectInfo)
///
/// @param self QCPLayout*
void q_cplayout_dump_object_info(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setProperty)
///
/// @param self QCPLayout*
/// @param name const char*
/// @param value QVariant*
bool q_cplayout_set_property(void* self, const char* name, void* value);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#property)
///
/// @param self QCPLayout*
/// @param name const char*
QVariant* q_cplayout_property(void* self, const char* name);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dynamicPropertyNames)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPLayout*
const char** q_cplayout_dynamic_property_names(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#bindingStorage)
///
/// @param self QCPLayout*
QBindingStorage* q_cplayout_binding_storage(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#bindingStorage)
///
/// @param self QCPLayout*
const QBindingStorage* q_cplayout_binding_storage2(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPLayout*
void q_cplayout_destroyed(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPLayout*
/// @param callback void func(QCPLayout* self)
void q_cplayout_on_destroyed(void* self, void (*callback)(void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#parent)
///
/// @param self QCPLayout*
QObject* q_cplayout_parent(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#inherits)
///
/// @param self QCPLayout*
/// @param classname const char*
bool q_cplayout_inherits(void* self, const char* classname);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#deleteLater)
///
/// @param self QCPLayout*
void q_cplayout_delete_later(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#moveToThread)
///
/// @param self QCPLayout*
/// @param thread QThread*
/// @param param2 Disambiguated_t*
bool q_cplayout_move_to_thread2(void* self, void* thread, void* param2);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#startTimer)
///
/// @param self QCPLayout*
/// @param interval int
/// @param timerType enum Qt__TimerType
int32_t q_cplayout_start_timer22(void* self, int interval, int32_t timerType);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param method QMetaMethod*
/// @param type enum Qt__ConnectionType
QMetaObject__Connection* q_cplayout_connect5(void* sender, void* signal, void* receiver, void* method, int32_t type);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param self QCPLayout*
/// @param sender QObject*
/// @param signal const char*
/// @param member const char*
/// @param type enum Qt__ConnectionType
QMetaObject__Connection* q_cplayout_connect4(void* self, void* sender, const char* signal, const char* member, int32_t type);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPLayout*
/// @param param1 QObject*
void q_cplayout_destroyed1(void* self, void* param1);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPLayout*
/// @param callback void func(QCPLayout* self, QObject* param1)
void q_cplayout_on_destroyed1(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayout*
QSize* q_cplayout_minimum_outer_size_hint(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayout*
QSize* q_cplayout_qbase_minimum_outer_size_hint(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayout*
/// @param callback QSize* func()
void q_cplayout_on_minimum_outer_size_hint(void* self, QSize* (*callback)());

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayout*
QSize* q_cplayout_maximum_outer_size_hint(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayout*
QSize* q_cplayout_qbase_maximum_outer_size_hint(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayout*
/// @param callback QSize* func()
void q_cplayout_on_maximum_outer_size_hint(void* self, QSize* (*callback)());

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayout*
/// @param pos QPointF*
/// @param onlySelectable bool
/// @param details QVariant*
double q_cplayout_select_test(void* self, void* pos, bool onlySelectable, void* details);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayout*
/// @param pos QPointF*
/// @param onlySelectable bool
/// @param details QVariant*
double q_cplayout_qbase_select_test(void* self, void* pos, bool onlySelectable, void* details);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayout*
/// @param callback double func(QCPLayout* self, QPointF* pos, bool onlySelectable, QVariant* details)
void q_cplayout_on_select_test(void* self, double (*callback)(void*, void*, bool, void*));

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayout*
/// @param side enum QCP__MarginSide
int32_t q_cplayout_calculate_auto_margin(void* self, int32_t side);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayout*
/// @param side enum QCP__MarginSide
int32_t q_cplayout_qbase_calculate_auto_margin(void* self, int32_t side);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayout*
/// @param callback int32_t func(QCPLayout* self, enum QCP__MarginSide side)
void q_cplayout_on_calculate_auto_margin(void* self, int32_t (*callback)(void*, int32_t));

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayout*
void q_cplayout_layout_changed(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayout*
void q_cplayout_qbase_layout_changed(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayout*
/// @param callback void func()
void q_cplayout_on_layout_changed(void* self, void (*callback)());

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayout*
/// @param painter QCPPainter*
void q_cplayout_apply_default_antialiasing_hint(void* self, void* painter);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayout*
/// @param painter QCPPainter*
void q_cplayout_qbase_apply_default_antialiasing_hint(void* self, void* painter);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayout*
/// @param callback void func(QCPLayout* self, QCPPainter* painter)
void q_cplayout_on_apply_default_antialiasing_hint(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayout*
/// @param painter QCPPainter*
void q_cplayout_draw(void* self, void* painter);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayout*
/// @param painter QCPPainter*
void q_cplayout_qbase_draw(void* self, void* painter);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayout*
/// @param callback void func(QCPLayout* self, QCPPainter* painter)
void q_cplayout_on_draw(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayout*
/// @param parentPlot QCustomPlot*
void q_cplayout_parent_plot_initialized(void* self, void* parentPlot);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayout*
/// @param parentPlot QCustomPlot*
void q_cplayout_qbase_parent_plot_initialized(void* self, void* parentPlot);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayout*
/// @param callback void func(QCPLayout* self, QCustomPlot* parentPlot)
void q_cplayout_on_parent_plot_initialized(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayout*
///
/// @return enum QCP__Interaction
int32_t q_cplayout_selection_category(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayout*
///
/// @return enum QCP__Interaction
int32_t q_cplayout_qbase_selection_category(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayout*
/// @param callback int32_t func()
void q_cplayout_on_selection_category(void* self, int32_t (*callback)());

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayout*
QRect* q_cplayout_clip_rect(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayout*
QRect* q_cplayout_qbase_clip_rect(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayout*
/// @param callback QRect* func()
void q_cplayout_on_clip_rect(void* self, QRect* (*callback)());

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayout*
/// @param event QMouseEvent*
/// @param additive bool
/// @param details QVariant*
/// @param selectionStateChanged bool*
void q_cplayout_select_event(void* self, void* event, bool additive, void* details, bool* selectionStateChanged);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayout*
/// @param event QMouseEvent*
/// @param additive bool
/// @param details QVariant*
/// @param selectionStateChanged bool*
void q_cplayout_qbase_select_event(void* self, void* event, bool additive, void* details, bool* selectionStateChanged);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayout*
/// @param callback void func(QCPLayout* self, QMouseEvent* event, bool additive, QVariant* details, bool* selectionStateChanged)
void q_cplayout_on_select_event(void* self, void (*callback)(void*, void*, bool, void*, bool*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayout*
/// @param selectionStateChanged bool*
void q_cplayout_deselect_event(void* self, bool* selectionStateChanged);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayout*
/// @param selectionStateChanged bool*
void q_cplayout_qbase_deselect_event(void* self, bool* selectionStateChanged);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayout*
/// @param callback void func(QCPLayout* self, bool* selectionStateChanged)
void q_cplayout_on_deselect_event(void* self, void (*callback)(void*, bool*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayout*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cplayout_mouse_press_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayout*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cplayout_qbase_mouse_press_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayout*
/// @param callback void func(QCPLayout* self, QMouseEvent* event, QVariant* details)
void q_cplayout_on_mouse_press_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayout*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cplayout_mouse_move_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayout*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cplayout_qbase_mouse_move_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayout*
/// @param callback void func(QCPLayout* self, QMouseEvent* event, QPointF* startPos)
void q_cplayout_on_mouse_move_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayout*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cplayout_mouse_release_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayout*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cplayout_qbase_mouse_release_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayout*
/// @param callback void func(QCPLayout* self, QMouseEvent* event, QPointF* startPos)
void q_cplayout_on_mouse_release_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayout*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cplayout_mouse_double_click_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayout*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cplayout_qbase_mouse_double_click_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayout*
/// @param callback void func(QCPLayout* self, QMouseEvent* event, QVariant* details)
void q_cplayout_on_mouse_double_click_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayout*
/// @param event QWheelEvent*
void q_cplayout_wheel_event(void* self, void* event);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayout*
/// @param event QWheelEvent*
void q_cplayout_qbase_wheel_event(void* self, void* event);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayout*
/// @param callback void func(QCPLayout* self, QWheelEvent* event)
void q_cplayout_on_wheel_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayout*
/// @param event QEvent*
bool q_cplayout_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayout*
/// @param event QEvent*
bool q_cplayout_qbase_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayout*
/// @param callback bool func(QCPLayout* self, QEvent* event)
void q_cplayout_on_event(void* self, bool (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayout*
/// @param watched QObject*
/// @param event QEvent*
bool q_cplayout_event_filter(void* self, void* watched, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayout*
/// @param watched QObject*
/// @param event QEvent*
bool q_cplayout_qbase_event_filter(void* self, void* watched, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayout*
/// @param callback bool func(QCPLayout* self, QObject* watched, QEvent* event)
void q_cplayout_on_event_filter(void* self, bool (*callback)(void*, void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayout*
/// @param event QTimerEvent*
void q_cplayout_timer_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayout*
/// @param event QTimerEvent*
void q_cplayout_qbase_timer_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayout*
/// @param callback void func(QCPLayout* self, QTimerEvent* event)
void q_cplayout_on_timer_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayout*
/// @param event QChildEvent*
void q_cplayout_child_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayout*
/// @param event QChildEvent*
void q_cplayout_qbase_child_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayout*
/// @param callback void func(QCPLayout* self, QChildEvent* event)
void q_cplayout_on_child_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayout*
/// @param event QEvent*
void q_cplayout_custom_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayout*
/// @param event QEvent*
void q_cplayout_qbase_custom_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayout*
/// @param callback void func(QCPLayout* self, QEvent* event)
void q_cplayout_on_custom_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayout*
/// @param signal QMetaMethod*
void q_cplayout_connect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayout*
/// @param signal QMetaMethod*
void q_cplayout_qbase_connect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayout*
/// @param callback void func(QCPLayout* self, QMetaMethod* signal)
void q_cplayout_on_connect_notify(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayout*
/// @param signal QMetaMethod*
void q_cplayout_disconnect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayout*
/// @param signal QMetaMethod*
void q_cplayout_qbase_disconnect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayout*
/// @param callback void func(QCPLayout* self, QMetaMethod* signal)
void q_cplayout_on_disconnect_notify(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayout*
/// @param parentPlot QCustomPlot*
void q_cplayout_initialize_parent_plot(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayout*
/// @param parentPlot QCustomPlot*
void q_cplayout_qbase_initialize_parent_plot(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayout*
/// @param callback void func(QCPLayout* self, QCustomPlot* parentPlot)
void q_cplayout_on_initialize_parent_plot(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayout*
/// @param parentLayerable QCPLayerable*
void q_cplayout_set_parent_layerable(void* self, void* parentLayerable);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayout*
/// @param parentLayerable QCPLayerable*
void q_cplayout_qbase_set_parent_layerable(void* self, void* parentLayerable);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayout*
/// @param callback void func(QCPLayout* self, QCPLayerable* parentLayerable)
void q_cplayout_on_set_parent_layerable(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayout*
/// @param layer QCPLayer*
/// @param prepend bool
bool q_cplayout_move_to_layer(void* self, void* layer, bool prepend);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayout*
/// @param layer QCPLayer*
/// @param prepend bool
bool q_cplayout_qbase_move_to_layer(void* self, void* layer, bool prepend);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayout*
/// @param callback bool func(QCPLayout* self, QCPLayer* layer, bool prepend)
void q_cplayout_on_move_to_layer(void* self, bool (*callback)(void*, void*, bool));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayout*
/// @param painter QCPPainter*
/// @param localAntialiased bool
/// @param overrideElement enum QCP__AntialiasedElement
void q_cplayout_apply_antialiasing_hint(void* self, void* painter, bool localAntialiased, int32_t overrideElement);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayout*
/// @param painter QCPPainter*
/// @param localAntialiased bool
/// @param overrideElement enum QCP__AntialiasedElement
void q_cplayout_qbase_apply_antialiasing_hint(void* self, void* painter, bool localAntialiased, int32_t overrideElement);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayout*
/// @param callback void func(QCPLayout* self, QCPPainter* painter, bool localAntialiased, enum QCP__AntialiasedElement overrideElement)
void q_cplayout_on_apply_antialiasing_hint(void* self, void (*callback)(void*, void*, bool, int32_t));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayout*
QObject* q_cplayout_sender(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayout*
QObject* q_cplayout_qbase_sender(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayout*
/// @param callback QObject* func()
void q_cplayout_on_sender(void* self, QObject* (*callback)());

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayout*
int32_t q_cplayout_sender_signal_index(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayout*
int32_t q_cplayout_qbase_sender_signal_index(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayout*
/// @param callback int32_t func()
void q_cplayout_on_sender_signal_index(void* self, int32_t (*callback)());

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayout*
/// @param signal const char*
int32_t q_cplayout_receivers(void* self, const char* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayout*
/// @param signal const char*
int32_t q_cplayout_qbase_receivers(void* self, const char* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayout*
/// @param callback int32_t func(QCPLayout* self, const char* signal)
void q_cplayout_on_receivers(void* self, int32_t (*callback)(void*, const char*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayout*
/// @param signal QMetaMethod*
bool q_cplayout_is_signal_connected(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayout*
/// @param signal QMetaMethod*
bool q_cplayout_qbase_is_signal_connected(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayout*
/// @param callback bool func(QCPLayout* self, QMetaMethod* signal)
void q_cplayout_on_is_signal_connected(void* self, bool (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#objectNameChanged)
///
/// Wrapper to allow calling private signal
///
/// @param self QCPLayout*
/// @param callback void func(QCPLayout* self, const char* objectName)
void q_cplayout_on_object_name_changed(void* self, void (*callback)(void*, const char*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayout.html)
///
/// Delete this object from C++ memory.
///
/// @param self QCPLayout*
void q_cplayout_delete(void* self);

/// https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html

/// q_cplayoutgrid_new constructs a new QCPLayoutGrid object.
///
QCPLayoutGrid* q_cplayoutgrid_new();

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#metaObject)
///
/// @param self QCPLayoutGrid*
const QMetaObject* q_cplayoutgrid_meta_object(void* self);

/// @param self QCPLayoutGrid*
/// @param param1 const char*
void* q_cplayoutgrid_metacast(void* self, const char* param1);

/// @param self QCPLayoutGrid*
/// @param param1 enum QMetaObject__Call
/// @param param2 int
/// @param param3 void*
int32_t q_cplayoutgrid_metacall(void* self, int32_t param1, int param2, void* param3);

/// Allows for overriding the related default method
///
/// @param self QCPLayoutGrid*
/// @param callback int32_t func(QCPLayoutGrid* self, enum QMetaObject__Call param1, int param2, void* param3)
void q_cplayoutgrid_on_metacall(void* self, int32_t (*callback)(void*, int32_t, int, void*));

/// Base class method implementation
///
/// @param self QCPLayoutGrid*
/// @param param1 enum QMetaObject__Call
/// @param param2 int
/// @param param3 void*
int32_t q_cplayoutgrid_qbase_metacall(void* self, int32_t param1, int param2, void* param3);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
const char* q_cplayoutgrid_tr(const char* s);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// @param self QCPLayoutGrid*
int32_t q_cplayoutgrid_row_count(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// @param self QCPLayoutGrid*
int32_t q_cplayoutgrid_column_count(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// @param self QCPLayoutGrid*
libqt_list /* of double */ q_cplayoutgrid_column_stretch_factors(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// @param self QCPLayoutGrid*
libqt_list /* of double */ q_cplayoutgrid_row_stretch_factors(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// @param self QCPLayoutGrid*
int32_t q_cplayoutgrid_column_spacing(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// @param self QCPLayoutGrid*
int32_t q_cplayoutgrid_row_spacing(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// @param self QCPLayoutGrid*
int32_t q_cplayoutgrid_wrap(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// @param self QCPLayoutGrid*
///
/// @return enum QCPLayoutGrid__FillOrder
int32_t q_cplayoutgrid_fill_order(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// @param self QCPLayoutGrid*
/// @param column int
/// @param factor double
void q_cplayoutgrid_set_column_stretch_factor(void* self, int column, double factor);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// @param self QCPLayoutGrid*
/// @param factors libqt_list /* of double */
void q_cplayoutgrid_set_column_stretch_factors(void* self, libqt_list factors);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// @param self QCPLayoutGrid*
/// @param row int
/// @param factor double
void q_cplayoutgrid_set_row_stretch_factor(void* self, int row, double factor);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// @param self QCPLayoutGrid*
/// @param factors libqt_list /* of double */
void q_cplayoutgrid_set_row_stretch_factors(void* self, libqt_list factors);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// @param self QCPLayoutGrid*
/// @param pixels int
void q_cplayoutgrid_set_column_spacing(void* self, int pixels);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// @param self QCPLayoutGrid*
/// @param pixels int
void q_cplayoutgrid_set_row_spacing(void* self, int pixels);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// @param self QCPLayoutGrid*
/// @param count int
void q_cplayoutgrid_set_wrap(void* self, int count);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// @param self QCPLayoutGrid*
/// @param order enum QCPLayoutGrid__FillOrder
void q_cplayoutgrid_set_fill_order(void* self, int32_t order);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// @param self QCPLayoutGrid*
void q_cplayoutgrid_update_layout(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPLayoutGrid*
/// @param callback void func()
void q_cplayoutgrid_on_update_layout(void* self, void (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// Base class method implementation
///
/// @param self QCPLayoutGrid*
void q_cplayoutgrid_qbase_update_layout(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// @param self QCPLayoutGrid*
int32_t q_cplayoutgrid_element_count(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPLayoutGrid*
/// @param callback int32_t func()
void q_cplayoutgrid_on_element_count(void* self, int32_t (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// Base class method implementation
///
/// @param self QCPLayoutGrid*
int32_t q_cplayoutgrid_qbase_element_count(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// @param self QCPLayoutGrid*
/// @param index int
QCPLayoutElement* q_cplayoutgrid_element_at(void* self, int index);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPLayoutGrid*
/// @param callback QCPLayoutElement* func(QCPLayoutGrid* self, int index)
void q_cplayoutgrid_on_element_at(void* self, QCPLayoutElement* (*callback)(void*, int));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// Base class method implementation
///
/// @param self QCPLayoutGrid*
/// @param index int
QCPLayoutElement* q_cplayoutgrid_qbase_element_at(void* self, int index);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// @param self QCPLayoutGrid*
/// @param index int
QCPLayoutElement* q_cplayoutgrid_take_at(void* self, int index);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPLayoutGrid*
/// @param callback QCPLayoutElement* func(QCPLayoutGrid* self, int index)
void q_cplayoutgrid_on_take_at(void* self, QCPLayoutElement* (*callback)(void*, int));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// Base class method implementation
///
/// @param self QCPLayoutGrid*
/// @param index int
QCPLayoutElement* q_cplayoutgrid_qbase_take_at(void* self, int index);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// @param self QCPLayoutGrid*
/// @param element QCPLayoutElement*
bool q_cplayoutgrid_take(void* self, void* element);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPLayoutGrid*
/// @param callback bool func(QCPLayoutGrid* self, QCPLayoutElement* element)
void q_cplayoutgrid_on_take(void* self, bool (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// Base class method implementation
///
/// @param self QCPLayoutGrid*
/// @param element QCPLayoutElement*
bool q_cplayoutgrid_qbase_take(void* self, void* element);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// @param self QCPLayoutGrid*
/// @param recursive bool
libqt_list /* of QCPLayoutElement* */ q_cplayoutgrid_elements(void* self, bool recursive);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPLayoutGrid*
/// @param callback QCPLayoutElement** func(QCPLayoutGrid* self, bool recursive)
void q_cplayoutgrid_on_elements(void* self, QCPLayoutElement** (*callback)(void*, bool));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// Base class method implementation
///
/// @param self QCPLayoutGrid*
/// @param recursive bool
libqt_list /* of QCPLayoutElement* */ q_cplayoutgrid_qbase_elements(void* self, bool recursive);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// @param self QCPLayoutGrid*
void q_cplayoutgrid_simplify(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPLayoutGrid*
/// @param callback void func()
void q_cplayoutgrid_on_simplify(void* self, void (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// Base class method implementation
///
/// @param self QCPLayoutGrid*
void q_cplayoutgrid_qbase_simplify(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// @param self QCPLayoutGrid*
QSize* q_cplayoutgrid_minimum_outer_size_hint(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPLayoutGrid*
/// @param callback QSize* func()
void q_cplayoutgrid_on_minimum_outer_size_hint(void* self, QSize* (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// Base class method implementation
///
/// @param self QCPLayoutGrid*
QSize* q_cplayoutgrid_qbase_minimum_outer_size_hint(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// @param self QCPLayoutGrid*
QSize* q_cplayoutgrid_maximum_outer_size_hint(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPLayoutGrid*
/// @param callback QSize* func()
void q_cplayoutgrid_on_maximum_outer_size_hint(void* self, QSize* (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// Base class method implementation
///
/// @param self QCPLayoutGrid*
QSize* q_cplayoutgrid_qbase_maximum_outer_size_hint(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// @param self QCPLayoutGrid*
/// @param row int
/// @param column int
QCPLayoutElement* q_cplayoutgrid_element(void* self, int row, int column);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// @param self QCPLayoutGrid*
/// @param row int
/// @param column int
/// @param element QCPLayoutElement*
bool q_cplayoutgrid_add_element(void* self, int row, int column, void* element);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// @param self QCPLayoutGrid*
/// @param element QCPLayoutElement*
bool q_cplayoutgrid_add_element2(void* self, void* element);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// @param self QCPLayoutGrid*
/// @param row int
/// @param column int
bool q_cplayoutgrid_has_element(void* self, int row, int column);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// @param self QCPLayoutGrid*
/// @param newRowCount int
/// @param newColumnCount int
void q_cplayoutgrid_expand_to(void* self, int newRowCount, int newColumnCount);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// @param self QCPLayoutGrid*
/// @param newIndex int
void q_cplayoutgrid_insert_row(void* self, int newIndex);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// @param self QCPLayoutGrid*
/// @param newIndex int
void q_cplayoutgrid_insert_column(void* self, int newIndex);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// @param self QCPLayoutGrid*
/// @param row int
/// @param column int
int32_t q_cplayoutgrid_row_col_to_index(void* self, int row, int column);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// @param self QCPLayoutGrid*
/// @param index int
/// @param row int*
/// @param column int*
void q_cplayoutgrid_index_to_row_col(void* self, int index, int* row, int* column);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// @param self QCPLayoutGrid*
/// @param minColWidths libqt_list /* of int */
/// @param minRowHeights libqt_list /* of int */
void q_cplayoutgrid_get_minimum_row_col_sizes(void* self, libqt_list minColWidths, libqt_list minRowHeights);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPLayoutGrid*
/// @param callback void func(QCPLayoutGrid* self, int* /* of int */, int* /* of int */)
void q_cplayoutgrid_on_get_minimum_row_col_sizes(void* self, void (*callback)(void*, int*, int*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// Base class method implementation
///
/// @param self QCPLayoutGrid*
/// @param minColWidths libqt_list /* of int */
/// @param minRowHeights libqt_list /* of int */
void q_cplayoutgrid_qbase_get_minimum_row_col_sizes(void* self, libqt_list minColWidths, libqt_list minRowHeights);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// @param self QCPLayoutGrid*
/// @param maxColWidths libqt_list /* of int */
/// @param maxRowHeights libqt_list /* of int */
void q_cplayoutgrid_get_maximum_row_col_sizes(void* self, libqt_list maxColWidths, libqt_list maxRowHeights);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPLayoutGrid*
/// @param callback void func(QCPLayoutGrid* self, int* /* of int */, int* /* of int */)
void q_cplayoutgrid_on_get_maximum_row_col_sizes(void* self, void (*callback)(void*, int*, int*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// Base class method implementation
///
/// @param self QCPLayoutGrid*
/// @param maxColWidths libqt_list /* of int */
/// @param maxRowHeights libqt_list /* of int */
void q_cplayoutgrid_qbase_get_maximum_row_col_sizes(void* self, libqt_list maxColWidths, libqt_list maxRowHeights);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
/// @param c const char*
const char* q_cplayoutgrid_tr2(const char* s, const char* c);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
/// @param c const char*
/// @param n int
const char* q_cplayoutgrid_tr3(const char* s, const char* c, int n);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// @param self QCPLayoutGrid*
/// @param order enum QCPLayoutGrid__FillOrder
/// @param rearrange bool
void q_cplayoutgrid_set_fill_order2(void* self, int32_t order, bool rearrange);

/// Inherited from QCPLayout
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayout.html)
///
/// @param self QCPLayoutGrid*
/// @param index int
bool q_cplayoutgrid_remove_at(void* self, int index);

/// Inherited from QCPLayout
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayout.html)
///
/// @param self QCPLayoutGrid*
/// @param element QCPLayoutElement*
bool q_cplayoutgrid_remove(void* self, void* element);

/// Inherited from QCPLayout
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayout.html)
///
/// @param self QCPLayoutGrid*
void q_cplayoutgrid_clear(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLayoutGrid*
QCPLayout* q_cplayoutgrid_layout(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLayoutGrid*
QRect* q_cplayoutgrid_rect(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLayoutGrid*
QRect* q_cplayoutgrid_outer_rect(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLayoutGrid*
QMargins* q_cplayoutgrid_margins(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLayoutGrid*
QMargins* q_cplayoutgrid_minimum_margins(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLayoutGrid*
///
/// @return flag of enum QCP__MarginSide
int32_t q_cplayoutgrid_auto_margins(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLayoutGrid*
QSize* q_cplayoutgrid_minimum_size(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLayoutGrid*
QSize* q_cplayoutgrid_maximum_size(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLayoutGrid*
///
/// @return enum QCPLayoutElement__SizeConstraintRect
int32_t q_cplayoutgrid_size_constraint_rect(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLayoutGrid*
/// @param side enum QCP__MarginSide
QCPMarginGroup* q_cplayoutgrid_margin_group(void* self, int32_t side);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLayoutGrid*
libqt_map /* of int32_t to QCPMarginGroup* */ q_cplayoutgrid_margin_groups(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLayoutGrid*
/// @param rect QRect*
void q_cplayoutgrid_set_outer_rect(void* self, void* rect);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLayoutGrid*
/// @param margins QMargins*
void q_cplayoutgrid_set_margins(void* self, void* margins);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLayoutGrid*
/// @param margins QMargins*
void q_cplayoutgrid_set_minimum_margins(void* self, void* margins);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLayoutGrid*
/// @param sides flag of enum QCP__MarginSide
void q_cplayoutgrid_set_auto_margins(void* self, int32_t sides);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLayoutGrid*
/// @param size QSize*
void q_cplayoutgrid_set_minimum_size(void* self, void* size);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLayoutGrid*
/// @param width int
/// @param height int
void q_cplayoutgrid_set_minimum_size2(void* self, int width, int height);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLayoutGrid*
/// @param size QSize*
void q_cplayoutgrid_set_maximum_size(void* self, void* size);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLayoutGrid*
/// @param width int
/// @param height int
void q_cplayoutgrid_set_maximum_size2(void* self, int width, int height);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLayoutGrid*
/// @param constraintRect enum QCPLayoutElement__SizeConstraintRect
void q_cplayoutgrid_set_size_constraint_rect(void* self, int32_t constraintRect);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLayoutGrid*
/// @param sides flag of enum QCP__MarginSide
/// @param group QCPMarginGroup*
void q_cplayoutgrid_set_margin_group(void* self, int32_t sides, void* group);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPLayoutGrid*
bool q_cplayoutgrid_visible(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPLayoutGrid*
QCustomPlot* q_cplayoutgrid_parent_plot(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPLayoutGrid*
QCPLayerable* q_cplayoutgrid_parent_layerable(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPLayoutGrid*
QCPLayer* q_cplayoutgrid_layer(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPLayoutGrid*
bool q_cplayoutgrid_antialiased(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPLayoutGrid*
/// @param on bool
void q_cplayoutgrid_set_visible(void* self, bool on);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPLayoutGrid*
/// @param layer QCPLayer*
bool q_cplayoutgrid_set_layer(void* self, void* layer);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPLayoutGrid*
/// @param layerName const char*
bool q_cplayoutgrid_set_layer2(void* self, const char* layerName);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPLayoutGrid*
/// @param enabled bool
void q_cplayoutgrid_set_antialiased(void* self, bool enabled);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPLayoutGrid*
bool q_cplayoutgrid_real_visibility(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPLayoutGrid*
/// @param newLayer QCPLayer*
void q_cplayoutgrid_layer_changed(void* self, void* newLayer);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPLayoutGrid*
/// @param callback void func(QCPLayoutGrid* self, QCPLayer* newLayer)
void q_cplayoutgrid_on_layer_changed(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#objectName)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPLayoutGrid*
const char* q_cplayoutgrid_object_name(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setObjectName)
///
/// @param self QCPLayoutGrid*
/// @param name char*
void q_cplayoutgrid_set_object_name(void* self, char* name);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isWidgetType)
///
/// @param self QCPLayoutGrid*
bool q_cplayoutgrid_is_widget_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isWindowType)
///
/// @param self QCPLayoutGrid*
bool q_cplayoutgrid_is_window_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isQuickItemType)
///
/// @param self QCPLayoutGrid*
bool q_cplayoutgrid_is_quick_item_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#signalsBlocked)
///
/// @param self QCPLayoutGrid*
bool q_cplayoutgrid_signals_blocked(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#blockSignals)
///
/// @param self QCPLayoutGrid*
/// @param b bool
bool q_cplayoutgrid_block_signals(void* self, bool b);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#thread)
///
/// @param self QCPLayoutGrid*
QThread* q_cplayoutgrid_thread(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#moveToThread)
///
/// @param self QCPLayoutGrid*
/// @param thread QThread*
bool q_cplayoutgrid_move_to_thread(void* self, void* thread);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#startTimer)
///
/// @param self QCPLayoutGrid*
/// @param interval int
int32_t q_cplayoutgrid_start_timer(void* self, int interval);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#killTimer)
///
/// @param self QCPLayoutGrid*
/// @param id int
void q_cplayoutgrid_kill_timer(void* self, int id);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#killTimer)
///
/// @param self QCPLayoutGrid*
/// @param id enum Qt__TimerId
void q_cplayoutgrid_kill_timer2(void* self, int32_t id);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#children)
///
/// @param self QCPLayoutGrid*
libqt_list /* of QObject* */ q_cplayoutgrid_children(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setParent)
///
/// @param self QCPLayoutGrid*
/// @param parent QObject*
void q_cplayoutgrid_set_parent(void* self, void* parent);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#installEventFilter)
///
/// @param self QCPLayoutGrid*
/// @param filterObj QObject*
void q_cplayoutgrid_install_event_filter(void* self, void* filterObj);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#removeEventFilter)
///
/// @param self QCPLayoutGrid*
/// @param obj QObject*
void q_cplayoutgrid_remove_event_filter(void* self, void* obj);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param method QMetaMethod*
QMetaObject__Connection* q_cplayoutgrid_connect(void* sender, void* signal, void* receiver, void* method);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param self QCPLayoutGrid*
/// @param sender QObject*
/// @param signal const char*
/// @param member const char*
QMetaObject__Connection* q_cplayoutgrid_connect2(void* self, void* sender, const char* signal, const char* member);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param member QMetaMethod*
bool q_cplayoutgrid_disconnect(void* sender, void* signal, void* receiver, void* member);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnect)
///
/// @param param1 QMetaObject__Connection*
bool q_cplayoutgrid_disconnect2(void* param1);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dumpObjectTree)
///
/// @param self QCPLayoutGrid*
void q_cplayoutgrid_dump_object_tree(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dumpObjectInfo)
///
/// @param self QCPLayoutGrid*
void q_cplayoutgrid_dump_object_info(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setProperty)
///
/// @param self QCPLayoutGrid*
/// @param name const char*
/// @param value QVariant*
bool q_cplayoutgrid_set_property(void* self, const char* name, void* value);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#property)
///
/// @param self QCPLayoutGrid*
/// @param name const char*
QVariant* q_cplayoutgrid_property(void* self, const char* name);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dynamicPropertyNames)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPLayoutGrid*
const char** q_cplayoutgrid_dynamic_property_names(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#bindingStorage)
///
/// @param self QCPLayoutGrid*
QBindingStorage* q_cplayoutgrid_binding_storage(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#bindingStorage)
///
/// @param self QCPLayoutGrid*
const QBindingStorage* q_cplayoutgrid_binding_storage2(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPLayoutGrid*
void q_cplayoutgrid_destroyed(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPLayoutGrid*
/// @param callback void func(QCPLayoutGrid* self)
void q_cplayoutgrid_on_destroyed(void* self, void (*callback)(void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#parent)
///
/// @param self QCPLayoutGrid*
QObject* q_cplayoutgrid_parent(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#inherits)
///
/// @param self QCPLayoutGrid*
/// @param classname const char*
bool q_cplayoutgrid_inherits(void* self, const char* classname);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#deleteLater)
///
/// @param self QCPLayoutGrid*
void q_cplayoutgrid_delete_later(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#moveToThread)
///
/// @param self QCPLayoutGrid*
/// @param thread QThread*
/// @param param2 Disambiguated_t*
bool q_cplayoutgrid_move_to_thread2(void* self, void* thread, void* param2);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#startTimer)
///
/// @param self QCPLayoutGrid*
/// @param interval int
/// @param timerType enum Qt__TimerType
int32_t q_cplayoutgrid_start_timer22(void* self, int interval, int32_t timerType);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param method QMetaMethod*
/// @param type enum Qt__ConnectionType
QMetaObject__Connection* q_cplayoutgrid_connect5(void* sender, void* signal, void* receiver, void* method, int32_t type);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param self QCPLayoutGrid*
/// @param sender QObject*
/// @param signal const char*
/// @param member const char*
/// @param type enum Qt__ConnectionType
QMetaObject__Connection* q_cplayoutgrid_connect4(void* self, void* sender, const char* signal, const char* member, int32_t type);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPLayoutGrid*
/// @param param1 QObject*
void q_cplayoutgrid_destroyed1(void* self, void* param1);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPLayoutGrid*
/// @param callback void func(QCPLayoutGrid* self, QObject* param1)
void q_cplayoutgrid_on_destroyed1(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayout
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayout.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayoutGrid*
/// @param phase enum QCPLayoutElement__UpdatePhase
void q_cplayoutgrid_update(void* self, int32_t phase);

/// Inherited from QCPLayout
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayout.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayoutGrid*
/// @param phase enum QCPLayoutElement__UpdatePhase
void q_cplayoutgrid_qbase_update(void* self, int32_t phase);

/// Inherited from QCPLayout
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayout.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayoutGrid*
/// @param callback void func(QCPLayoutGrid* self, enum QCPLayoutElement__UpdatePhase phase)
void q_cplayoutgrid_on_update(void* self, void (*callback)(void*, int32_t));

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayoutGrid*
/// @param pos QPointF*
/// @param onlySelectable bool
/// @param details QVariant*
double q_cplayoutgrid_select_test(void* self, void* pos, bool onlySelectable, void* details);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayoutGrid*
/// @param pos QPointF*
/// @param onlySelectable bool
/// @param details QVariant*
double q_cplayoutgrid_qbase_select_test(void* self, void* pos, bool onlySelectable, void* details);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayoutGrid*
/// @param callback double func(QCPLayoutGrid* self, QPointF* pos, bool onlySelectable, QVariant* details)
void q_cplayoutgrid_on_select_test(void* self, double (*callback)(void*, void*, bool, void*));

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayoutGrid*
/// @param side enum QCP__MarginSide
int32_t q_cplayoutgrid_calculate_auto_margin(void* self, int32_t side);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayoutGrid*
/// @param side enum QCP__MarginSide
int32_t q_cplayoutgrid_qbase_calculate_auto_margin(void* self, int32_t side);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayoutGrid*
/// @param callback int32_t func(QCPLayoutGrid* self, enum QCP__MarginSide side)
void q_cplayoutgrid_on_calculate_auto_margin(void* self, int32_t (*callback)(void*, int32_t));

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayoutGrid*
void q_cplayoutgrid_layout_changed(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayoutGrid*
void q_cplayoutgrid_qbase_layout_changed(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayoutGrid*
/// @param callback void func()
void q_cplayoutgrid_on_layout_changed(void* self, void (*callback)());

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayoutGrid*
/// @param painter QCPPainter*
void q_cplayoutgrid_apply_default_antialiasing_hint(void* self, void* painter);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayoutGrid*
/// @param painter QCPPainter*
void q_cplayoutgrid_qbase_apply_default_antialiasing_hint(void* self, void* painter);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayoutGrid*
/// @param callback void func(QCPLayoutGrid* self, QCPPainter* painter)
void q_cplayoutgrid_on_apply_default_antialiasing_hint(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayoutGrid*
/// @param painter QCPPainter*
void q_cplayoutgrid_draw(void* self, void* painter);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayoutGrid*
/// @param painter QCPPainter*
void q_cplayoutgrid_qbase_draw(void* self, void* painter);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayoutGrid*
/// @param callback void func(QCPLayoutGrid* self, QCPPainter* painter)
void q_cplayoutgrid_on_draw(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayoutGrid*
/// @param parentPlot QCustomPlot*
void q_cplayoutgrid_parent_plot_initialized(void* self, void* parentPlot);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayoutGrid*
/// @param parentPlot QCustomPlot*
void q_cplayoutgrid_qbase_parent_plot_initialized(void* self, void* parentPlot);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayoutGrid*
/// @param callback void func(QCPLayoutGrid* self, QCustomPlot* parentPlot)
void q_cplayoutgrid_on_parent_plot_initialized(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayoutGrid*
///
/// @return enum QCP__Interaction
int32_t q_cplayoutgrid_selection_category(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayoutGrid*
///
/// @return enum QCP__Interaction
int32_t q_cplayoutgrid_qbase_selection_category(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayoutGrid*
/// @param callback int32_t func()
void q_cplayoutgrid_on_selection_category(void* self, int32_t (*callback)());

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayoutGrid*
QRect* q_cplayoutgrid_clip_rect(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayoutGrid*
QRect* q_cplayoutgrid_qbase_clip_rect(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayoutGrid*
/// @param callback QRect* func()
void q_cplayoutgrid_on_clip_rect(void* self, QRect* (*callback)());

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayoutGrid*
/// @param event QMouseEvent*
/// @param additive bool
/// @param details QVariant*
/// @param selectionStateChanged bool*
void q_cplayoutgrid_select_event(void* self, void* event, bool additive, void* details, bool* selectionStateChanged);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayoutGrid*
/// @param event QMouseEvent*
/// @param additive bool
/// @param details QVariant*
/// @param selectionStateChanged bool*
void q_cplayoutgrid_qbase_select_event(void* self, void* event, bool additive, void* details, bool* selectionStateChanged);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayoutGrid*
/// @param callback void func(QCPLayoutGrid* self, QMouseEvent* event, bool additive, QVariant* details, bool* selectionStateChanged)
void q_cplayoutgrid_on_select_event(void* self, void (*callback)(void*, void*, bool, void*, bool*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayoutGrid*
/// @param selectionStateChanged bool*
void q_cplayoutgrid_deselect_event(void* self, bool* selectionStateChanged);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayoutGrid*
/// @param selectionStateChanged bool*
void q_cplayoutgrid_qbase_deselect_event(void* self, bool* selectionStateChanged);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayoutGrid*
/// @param callback void func(QCPLayoutGrid* self, bool* selectionStateChanged)
void q_cplayoutgrid_on_deselect_event(void* self, void (*callback)(void*, bool*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayoutGrid*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cplayoutgrid_mouse_press_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayoutGrid*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cplayoutgrid_qbase_mouse_press_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayoutGrid*
/// @param callback void func(QCPLayoutGrid* self, QMouseEvent* event, QVariant* details)
void q_cplayoutgrid_on_mouse_press_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayoutGrid*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cplayoutgrid_mouse_move_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayoutGrid*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cplayoutgrid_qbase_mouse_move_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayoutGrid*
/// @param callback void func(QCPLayoutGrid* self, QMouseEvent* event, QPointF* startPos)
void q_cplayoutgrid_on_mouse_move_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayoutGrid*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cplayoutgrid_mouse_release_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayoutGrid*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cplayoutgrid_qbase_mouse_release_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayoutGrid*
/// @param callback void func(QCPLayoutGrid* self, QMouseEvent* event, QPointF* startPos)
void q_cplayoutgrid_on_mouse_release_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayoutGrid*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cplayoutgrid_mouse_double_click_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayoutGrid*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cplayoutgrid_qbase_mouse_double_click_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayoutGrid*
/// @param callback void func(QCPLayoutGrid* self, QMouseEvent* event, QVariant* details)
void q_cplayoutgrid_on_mouse_double_click_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayoutGrid*
/// @param event QWheelEvent*
void q_cplayoutgrid_wheel_event(void* self, void* event);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayoutGrid*
/// @param event QWheelEvent*
void q_cplayoutgrid_qbase_wheel_event(void* self, void* event);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayoutGrid*
/// @param callback void func(QCPLayoutGrid* self, QWheelEvent* event)
void q_cplayoutgrid_on_wheel_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayoutGrid*
/// @param event QEvent*
bool q_cplayoutgrid_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayoutGrid*
/// @param event QEvent*
bool q_cplayoutgrid_qbase_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayoutGrid*
/// @param callback bool func(QCPLayoutGrid* self, QEvent* event)
void q_cplayoutgrid_on_event(void* self, bool (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayoutGrid*
/// @param watched QObject*
/// @param event QEvent*
bool q_cplayoutgrid_event_filter(void* self, void* watched, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayoutGrid*
/// @param watched QObject*
/// @param event QEvent*
bool q_cplayoutgrid_qbase_event_filter(void* self, void* watched, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayoutGrid*
/// @param callback bool func(QCPLayoutGrid* self, QObject* watched, QEvent* event)
void q_cplayoutgrid_on_event_filter(void* self, bool (*callback)(void*, void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayoutGrid*
/// @param event QTimerEvent*
void q_cplayoutgrid_timer_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayoutGrid*
/// @param event QTimerEvent*
void q_cplayoutgrid_qbase_timer_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayoutGrid*
/// @param callback void func(QCPLayoutGrid* self, QTimerEvent* event)
void q_cplayoutgrid_on_timer_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayoutGrid*
/// @param event QChildEvent*
void q_cplayoutgrid_child_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayoutGrid*
/// @param event QChildEvent*
void q_cplayoutgrid_qbase_child_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayoutGrid*
/// @param callback void func(QCPLayoutGrid* self, QChildEvent* event)
void q_cplayoutgrid_on_child_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayoutGrid*
/// @param event QEvent*
void q_cplayoutgrid_custom_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayoutGrid*
/// @param event QEvent*
void q_cplayoutgrid_qbase_custom_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayoutGrid*
/// @param callback void func(QCPLayoutGrid* self, QEvent* event)
void q_cplayoutgrid_on_custom_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayoutGrid*
/// @param signal QMetaMethod*
void q_cplayoutgrid_connect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayoutGrid*
/// @param signal QMetaMethod*
void q_cplayoutgrid_qbase_connect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayoutGrid*
/// @param callback void func(QCPLayoutGrid* self, QMetaMethod* signal)
void q_cplayoutgrid_on_connect_notify(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayoutGrid*
/// @param signal QMetaMethod*
void q_cplayoutgrid_disconnect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayoutGrid*
/// @param signal QMetaMethod*
void q_cplayoutgrid_qbase_disconnect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayoutGrid*
/// @param callback void func(QCPLayoutGrid* self, QMetaMethod* signal)
void q_cplayoutgrid_on_disconnect_notify(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayout
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayout.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayoutGrid*
void q_cplayoutgrid_size_constraints_changed(void* self);

/// Inherited from QCPLayout
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayout.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayoutGrid*
void q_cplayoutgrid_qbase_size_constraints_changed(void* self);

/// Inherited from QCPLayout
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayout.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayoutGrid*
/// @param callback void func()
void q_cplayoutgrid_on_size_constraints_changed(void* self, void (*callback)());

/// Inherited from QCPLayout
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayout.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayoutGrid*
/// @param el QCPLayoutElement*
void q_cplayoutgrid_adopt_element(void* self, void* el);

/// Inherited from QCPLayout
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayout.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayoutGrid*
/// @param el QCPLayoutElement*
void q_cplayoutgrid_qbase_adopt_element(void* self, void* el);

/// Inherited from QCPLayout
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayout.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayoutGrid*
/// @param callback void func(QCPLayoutGrid* self, QCPLayoutElement* el)
void q_cplayoutgrid_on_adopt_element(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayout
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayout.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayoutGrid*
/// @param el QCPLayoutElement*
void q_cplayoutgrid_release_element(void* self, void* el);

/// Inherited from QCPLayout
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayout.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayoutGrid*
/// @param el QCPLayoutElement*
void q_cplayoutgrid_qbase_release_element(void* self, void* el);

/// Inherited from QCPLayout
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayout.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayoutGrid*
/// @param callback void func(QCPLayoutGrid* self, QCPLayoutElement* el)
void q_cplayoutgrid_on_release_element(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayout
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayout.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayoutGrid*
/// @param maxSizes libqt_list /* of int */
/// @param minSizes libqt_list /* of int */
/// @param stretchFactors libqt_list /* of double */
/// @param totalSize int
libqt_list /* of int */ q_cplayoutgrid_get_section_sizes(void* self, libqt_list maxSizes, libqt_list minSizes, libqt_list stretchFactors, int totalSize);

/// Inherited from QCPLayout
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayout.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayoutGrid*
/// @param maxSizes libqt_list /* of int */
/// @param minSizes libqt_list /* of int */
/// @param stretchFactors libqt_list /* of double */
/// @param totalSize int
libqt_list /* of int */ q_cplayoutgrid_qbase_get_section_sizes(void* self, libqt_list maxSizes, libqt_list minSizes, libqt_list stretchFactors, int totalSize);

/// Inherited from QCPLayout
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayout.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayoutGrid*
/// @param callback int* func(QCPLayoutGrid* self, int* /* of int */, int* /* of int */, libqt_list /* of double */ /* of double */, int totalSize)
void q_cplayoutgrid_on_get_section_sizes(void* self, int* (*callback)(void*, int*, int*, libqt_list, int));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayoutGrid*
/// @param parentPlot QCustomPlot*
void q_cplayoutgrid_initialize_parent_plot(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayoutGrid*
/// @param parentPlot QCustomPlot*
void q_cplayoutgrid_qbase_initialize_parent_plot(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayoutGrid*
/// @param callback void func(QCPLayoutGrid* self, QCustomPlot* parentPlot)
void q_cplayoutgrid_on_initialize_parent_plot(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayoutGrid*
/// @param parentLayerable QCPLayerable*
void q_cplayoutgrid_set_parent_layerable(void* self, void* parentLayerable);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayoutGrid*
/// @param parentLayerable QCPLayerable*
void q_cplayoutgrid_qbase_set_parent_layerable(void* self, void* parentLayerable);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayoutGrid*
/// @param callback void func(QCPLayoutGrid* self, QCPLayerable* parentLayerable)
void q_cplayoutgrid_on_set_parent_layerable(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayoutGrid*
/// @param layer QCPLayer*
/// @param prepend bool
bool q_cplayoutgrid_move_to_layer(void* self, void* layer, bool prepend);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayoutGrid*
/// @param layer QCPLayer*
/// @param prepend bool
bool q_cplayoutgrid_qbase_move_to_layer(void* self, void* layer, bool prepend);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayoutGrid*
/// @param callback bool func(QCPLayoutGrid* self, QCPLayer* layer, bool prepend)
void q_cplayoutgrid_on_move_to_layer(void* self, bool (*callback)(void*, void*, bool));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayoutGrid*
/// @param painter QCPPainter*
/// @param localAntialiased bool
/// @param overrideElement enum QCP__AntialiasedElement
void q_cplayoutgrid_apply_antialiasing_hint(void* self, void* painter, bool localAntialiased, int32_t overrideElement);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayoutGrid*
/// @param painter QCPPainter*
/// @param localAntialiased bool
/// @param overrideElement enum QCP__AntialiasedElement
void q_cplayoutgrid_qbase_apply_antialiasing_hint(void* self, void* painter, bool localAntialiased, int32_t overrideElement);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayoutGrid*
/// @param callback void func(QCPLayoutGrid* self, QCPPainter* painter, bool localAntialiased, enum QCP__AntialiasedElement overrideElement)
void q_cplayoutgrid_on_apply_antialiasing_hint(void* self, void (*callback)(void*, void*, bool, int32_t));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayoutGrid*
QObject* q_cplayoutgrid_sender(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayoutGrid*
QObject* q_cplayoutgrid_qbase_sender(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayoutGrid*
/// @param callback QObject* func()
void q_cplayoutgrid_on_sender(void* self, QObject* (*callback)());

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayoutGrid*
int32_t q_cplayoutgrid_sender_signal_index(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayoutGrid*
int32_t q_cplayoutgrid_qbase_sender_signal_index(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayoutGrid*
/// @param callback int32_t func()
void q_cplayoutgrid_on_sender_signal_index(void* self, int32_t (*callback)());

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayoutGrid*
/// @param signal const char*
int32_t q_cplayoutgrid_receivers(void* self, const char* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayoutGrid*
/// @param signal const char*
int32_t q_cplayoutgrid_qbase_receivers(void* self, const char* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayoutGrid*
/// @param callback int32_t func(QCPLayoutGrid* self, const char* signal)
void q_cplayoutgrid_on_receivers(void* self, int32_t (*callback)(void*, const char*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayoutGrid*
/// @param signal QMetaMethod*
bool q_cplayoutgrid_is_signal_connected(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayoutGrid*
/// @param signal QMetaMethod*
bool q_cplayoutgrid_qbase_is_signal_connected(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayoutGrid*
/// @param callback bool func(QCPLayoutGrid* self, QMetaMethod* signal)
void q_cplayoutgrid_on_is_signal_connected(void* self, bool (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#objectNameChanged)
///
/// Wrapper to allow calling private signal
///
/// @param self QCPLayoutGrid*
/// @param callback void func(QCPLayoutGrid* self, const char* objectName)
void q_cplayoutgrid_on_object_name_changed(void* self, void (*callback)(void*, const char*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// Delete this object from C++ memory.
///
/// @param self QCPLayoutGrid*
void q_cplayoutgrid_delete(void* self);

/// https://www.qcustomplot.com/documentation/classQCPLayoutInset.html

/// q_cplayoutinset_new constructs a new QCPLayoutInset object.
///
QCPLayoutInset* q_cplayoutinset_new();

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#metaObject)
///
/// @param self QCPLayoutInset*
const QMetaObject* q_cplayoutinset_meta_object(void* self);

/// @param self QCPLayoutInset*
/// @param param1 const char*
void* q_cplayoutinset_metacast(void* self, const char* param1);

/// @param self QCPLayoutInset*
/// @param param1 enum QMetaObject__Call
/// @param param2 int
/// @param param3 void*
int32_t q_cplayoutinset_metacall(void* self, int32_t param1, int param2, void* param3);

/// Allows for overriding the related default method
///
/// @param self QCPLayoutInset*
/// @param callback int32_t func(QCPLayoutInset* self, enum QMetaObject__Call param1, int param2, void* param3)
void q_cplayoutinset_on_metacall(void* self, int32_t (*callback)(void*, int32_t, int, void*));

/// Base class method implementation
///
/// @param self QCPLayoutInset*
/// @param param1 enum QMetaObject__Call
/// @param param2 int
/// @param param3 void*
int32_t q_cplayoutinset_qbase_metacall(void* self, int32_t param1, int param2, void* param3);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
const char* q_cplayoutinset_tr(const char* s);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutInset.html)
///
/// @param self QCPLayoutInset*
/// @param index int
///
/// @return enum QCPLayoutInset__InsetPlacement
int32_t q_cplayoutinset_inset_placement(void* self, int index);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutInset.html)
///
/// @param self QCPLayoutInset*
/// @param index int
///
/// @return flag of enum Qt__AlignmentFlag
int32_t q_cplayoutinset_inset_alignment(void* self, int index);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutInset.html)
///
/// @param self QCPLayoutInset*
/// @param index int
QRectF* q_cplayoutinset_inset_rect(void* self, int index);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutInset.html)
///
/// @param self QCPLayoutInset*
/// @param index int
/// @param placement enum QCPLayoutInset__InsetPlacement
void q_cplayoutinset_set_inset_placement(void* self, int index, int32_t placement);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutInset.html)
///
/// @param self QCPLayoutInset*
/// @param index int
/// @param alignment flag of enum Qt__AlignmentFlag
void q_cplayoutinset_set_inset_alignment(void* self, int index, int32_t alignment);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutInset.html)
///
/// @param self QCPLayoutInset*
/// @param index int
/// @param rect QRectF*
void q_cplayoutinset_set_inset_rect(void* self, int index, void* rect);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutInset.html)
///
/// @param self QCPLayoutInset*
void q_cplayoutinset_update_layout(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutInset.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPLayoutInset*
/// @param callback void func()
void q_cplayoutinset_on_update_layout(void* self, void (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutInset.html)
///
/// Base class method implementation
///
/// @param self QCPLayoutInset*
void q_cplayoutinset_qbase_update_layout(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutInset.html)
///
/// @param self QCPLayoutInset*
int32_t q_cplayoutinset_element_count(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutInset.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPLayoutInset*
/// @param callback int32_t func()
void q_cplayoutinset_on_element_count(void* self, int32_t (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutInset.html)
///
/// Base class method implementation
///
/// @param self QCPLayoutInset*
int32_t q_cplayoutinset_qbase_element_count(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutInset.html)
///
/// @param self QCPLayoutInset*
/// @param index int
QCPLayoutElement* q_cplayoutinset_element_at(void* self, int index);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutInset.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPLayoutInset*
/// @param callback QCPLayoutElement* func(QCPLayoutInset* self, int index)
void q_cplayoutinset_on_element_at(void* self, QCPLayoutElement* (*callback)(void*, int));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutInset.html)
///
/// Base class method implementation
///
/// @param self QCPLayoutInset*
/// @param index int
QCPLayoutElement* q_cplayoutinset_qbase_element_at(void* self, int index);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutInset.html)
///
/// @param self QCPLayoutInset*
/// @param index int
QCPLayoutElement* q_cplayoutinset_take_at(void* self, int index);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutInset.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPLayoutInset*
/// @param callback QCPLayoutElement* func(QCPLayoutInset* self, int index)
void q_cplayoutinset_on_take_at(void* self, QCPLayoutElement* (*callback)(void*, int));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutInset.html)
///
/// Base class method implementation
///
/// @param self QCPLayoutInset*
/// @param index int
QCPLayoutElement* q_cplayoutinset_qbase_take_at(void* self, int index);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutInset.html)
///
/// @param self QCPLayoutInset*
/// @param element QCPLayoutElement*
bool q_cplayoutinset_take(void* self, void* element);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutInset.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPLayoutInset*
/// @param callback bool func(QCPLayoutInset* self, QCPLayoutElement* element)
void q_cplayoutinset_on_take(void* self, bool (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutInset.html)
///
/// Base class method implementation
///
/// @param self QCPLayoutInset*
/// @param element QCPLayoutElement*
bool q_cplayoutinset_qbase_take(void* self, void* element);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutInset.html)
///
/// @param self QCPLayoutInset*
void q_cplayoutinset_simplify(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutInset.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPLayoutInset*
/// @param callback void func()
void q_cplayoutinset_on_simplify(void* self, void (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutInset.html)
///
/// Base class method implementation
///
/// @param self QCPLayoutInset*
void q_cplayoutinset_qbase_simplify(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutInset.html)
///
/// @param self QCPLayoutInset*
/// @param pos QPointF*
/// @param onlySelectable bool
/// @param details QVariant*
double q_cplayoutinset_select_test(void* self, void* pos, bool onlySelectable, void* details);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutInset.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPLayoutInset*
/// @param callback double func(QCPLayoutInset* self, QPointF* pos, bool onlySelectable, QVariant* details)
void q_cplayoutinset_on_select_test(void* self, double (*callback)(void*, void*, bool, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutInset.html)
///
/// Base class method implementation
///
/// @param self QCPLayoutInset*
/// @param pos QPointF*
/// @param onlySelectable bool
/// @param details QVariant*
double q_cplayoutinset_qbase_select_test(void* self, void* pos, bool onlySelectable, void* details);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutInset.html)
///
/// @param self QCPLayoutInset*
/// @param element QCPLayoutElement*
/// @param alignment flag of enum Qt__AlignmentFlag
void q_cplayoutinset_add_element(void* self, void* element, int32_t alignment);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutInset.html)
///
/// @param self QCPLayoutInset*
/// @param element QCPLayoutElement*
/// @param rect QRectF*
void q_cplayoutinset_add_element2(void* self, void* element, void* rect);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
/// @param c const char*
const char* q_cplayoutinset_tr2(const char* s, const char* c);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
/// @param c const char*
/// @param n int
const char* q_cplayoutinset_tr3(const char* s, const char* c, int n);

/// Inherited from QCPLayout
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayout.html)
///
/// @param self QCPLayoutInset*
/// @param index int
bool q_cplayoutinset_remove_at(void* self, int index);

/// Inherited from QCPLayout
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayout.html)
///
/// @param self QCPLayoutInset*
/// @param element QCPLayoutElement*
bool q_cplayoutinset_remove(void* self, void* element);

/// Inherited from QCPLayout
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayout.html)
///
/// @param self QCPLayoutInset*
void q_cplayoutinset_clear(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLayoutInset*
QCPLayout* q_cplayoutinset_layout(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLayoutInset*
QRect* q_cplayoutinset_rect(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLayoutInset*
QRect* q_cplayoutinset_outer_rect(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLayoutInset*
QMargins* q_cplayoutinset_margins(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLayoutInset*
QMargins* q_cplayoutinset_minimum_margins(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLayoutInset*
///
/// @return flag of enum QCP__MarginSide
int32_t q_cplayoutinset_auto_margins(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLayoutInset*
QSize* q_cplayoutinset_minimum_size(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLayoutInset*
QSize* q_cplayoutinset_maximum_size(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLayoutInset*
///
/// @return enum QCPLayoutElement__SizeConstraintRect
int32_t q_cplayoutinset_size_constraint_rect(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLayoutInset*
/// @param side enum QCP__MarginSide
QCPMarginGroup* q_cplayoutinset_margin_group(void* self, int32_t side);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLayoutInset*
libqt_map /* of int32_t to QCPMarginGroup* */ q_cplayoutinset_margin_groups(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLayoutInset*
/// @param rect QRect*
void q_cplayoutinset_set_outer_rect(void* self, void* rect);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLayoutInset*
/// @param margins QMargins*
void q_cplayoutinset_set_margins(void* self, void* margins);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLayoutInset*
/// @param margins QMargins*
void q_cplayoutinset_set_minimum_margins(void* self, void* margins);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLayoutInset*
/// @param sides flag of enum QCP__MarginSide
void q_cplayoutinset_set_auto_margins(void* self, int32_t sides);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLayoutInset*
/// @param size QSize*
void q_cplayoutinset_set_minimum_size(void* self, void* size);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLayoutInset*
/// @param width int
/// @param height int
void q_cplayoutinset_set_minimum_size2(void* self, int width, int height);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLayoutInset*
/// @param size QSize*
void q_cplayoutinset_set_maximum_size(void* self, void* size);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLayoutInset*
/// @param width int
/// @param height int
void q_cplayoutinset_set_maximum_size2(void* self, int width, int height);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLayoutInset*
/// @param constraintRect enum QCPLayoutElement__SizeConstraintRect
void q_cplayoutinset_set_size_constraint_rect(void* self, int32_t constraintRect);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLayoutInset*
/// @param sides flag of enum QCP__MarginSide
/// @param group QCPMarginGroup*
void q_cplayoutinset_set_margin_group(void* self, int32_t sides, void* group);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPLayoutInset*
bool q_cplayoutinset_visible(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPLayoutInset*
QCustomPlot* q_cplayoutinset_parent_plot(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPLayoutInset*
QCPLayerable* q_cplayoutinset_parent_layerable(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPLayoutInset*
QCPLayer* q_cplayoutinset_layer(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPLayoutInset*
bool q_cplayoutinset_antialiased(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPLayoutInset*
/// @param on bool
void q_cplayoutinset_set_visible(void* self, bool on);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPLayoutInset*
/// @param layer QCPLayer*
bool q_cplayoutinset_set_layer(void* self, void* layer);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPLayoutInset*
/// @param layerName const char*
bool q_cplayoutinset_set_layer2(void* self, const char* layerName);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPLayoutInset*
/// @param enabled bool
void q_cplayoutinset_set_antialiased(void* self, bool enabled);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPLayoutInset*
bool q_cplayoutinset_real_visibility(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPLayoutInset*
/// @param newLayer QCPLayer*
void q_cplayoutinset_layer_changed(void* self, void* newLayer);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPLayoutInset*
/// @param callback void func(QCPLayoutInset* self, QCPLayer* newLayer)
void q_cplayoutinset_on_layer_changed(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#objectName)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPLayoutInset*
const char* q_cplayoutinset_object_name(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setObjectName)
///
/// @param self QCPLayoutInset*
/// @param name char*
void q_cplayoutinset_set_object_name(void* self, char* name);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isWidgetType)
///
/// @param self QCPLayoutInset*
bool q_cplayoutinset_is_widget_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isWindowType)
///
/// @param self QCPLayoutInset*
bool q_cplayoutinset_is_window_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isQuickItemType)
///
/// @param self QCPLayoutInset*
bool q_cplayoutinset_is_quick_item_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#signalsBlocked)
///
/// @param self QCPLayoutInset*
bool q_cplayoutinset_signals_blocked(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#blockSignals)
///
/// @param self QCPLayoutInset*
/// @param b bool
bool q_cplayoutinset_block_signals(void* self, bool b);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#thread)
///
/// @param self QCPLayoutInset*
QThread* q_cplayoutinset_thread(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#moveToThread)
///
/// @param self QCPLayoutInset*
/// @param thread QThread*
bool q_cplayoutinset_move_to_thread(void* self, void* thread);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#startTimer)
///
/// @param self QCPLayoutInset*
/// @param interval int
int32_t q_cplayoutinset_start_timer(void* self, int interval);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#killTimer)
///
/// @param self QCPLayoutInset*
/// @param id int
void q_cplayoutinset_kill_timer(void* self, int id);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#killTimer)
///
/// @param self QCPLayoutInset*
/// @param id enum Qt__TimerId
void q_cplayoutinset_kill_timer2(void* self, int32_t id);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#children)
///
/// @param self QCPLayoutInset*
libqt_list /* of QObject* */ q_cplayoutinset_children(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setParent)
///
/// @param self QCPLayoutInset*
/// @param parent QObject*
void q_cplayoutinset_set_parent(void* self, void* parent);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#installEventFilter)
///
/// @param self QCPLayoutInset*
/// @param filterObj QObject*
void q_cplayoutinset_install_event_filter(void* self, void* filterObj);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#removeEventFilter)
///
/// @param self QCPLayoutInset*
/// @param obj QObject*
void q_cplayoutinset_remove_event_filter(void* self, void* obj);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param method QMetaMethod*
QMetaObject__Connection* q_cplayoutinset_connect(void* sender, void* signal, void* receiver, void* method);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param self QCPLayoutInset*
/// @param sender QObject*
/// @param signal const char*
/// @param member const char*
QMetaObject__Connection* q_cplayoutinset_connect2(void* self, void* sender, const char* signal, const char* member);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param member QMetaMethod*
bool q_cplayoutinset_disconnect(void* sender, void* signal, void* receiver, void* member);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnect)
///
/// @param param1 QMetaObject__Connection*
bool q_cplayoutinset_disconnect2(void* param1);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dumpObjectTree)
///
/// @param self QCPLayoutInset*
void q_cplayoutinset_dump_object_tree(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dumpObjectInfo)
///
/// @param self QCPLayoutInset*
void q_cplayoutinset_dump_object_info(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setProperty)
///
/// @param self QCPLayoutInset*
/// @param name const char*
/// @param value QVariant*
bool q_cplayoutinset_set_property(void* self, const char* name, void* value);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#property)
///
/// @param self QCPLayoutInset*
/// @param name const char*
QVariant* q_cplayoutinset_property(void* self, const char* name);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dynamicPropertyNames)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPLayoutInset*
const char** q_cplayoutinset_dynamic_property_names(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#bindingStorage)
///
/// @param self QCPLayoutInset*
QBindingStorage* q_cplayoutinset_binding_storage(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#bindingStorage)
///
/// @param self QCPLayoutInset*
const QBindingStorage* q_cplayoutinset_binding_storage2(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPLayoutInset*
void q_cplayoutinset_destroyed(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPLayoutInset*
/// @param callback void func(QCPLayoutInset* self)
void q_cplayoutinset_on_destroyed(void* self, void (*callback)(void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#parent)
///
/// @param self QCPLayoutInset*
QObject* q_cplayoutinset_parent(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#inherits)
///
/// @param self QCPLayoutInset*
/// @param classname const char*
bool q_cplayoutinset_inherits(void* self, const char* classname);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#deleteLater)
///
/// @param self QCPLayoutInset*
void q_cplayoutinset_delete_later(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#moveToThread)
///
/// @param self QCPLayoutInset*
/// @param thread QThread*
/// @param param2 Disambiguated_t*
bool q_cplayoutinset_move_to_thread2(void* self, void* thread, void* param2);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#startTimer)
///
/// @param self QCPLayoutInset*
/// @param interval int
/// @param timerType enum Qt__TimerType
int32_t q_cplayoutinset_start_timer22(void* self, int interval, int32_t timerType);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param method QMetaMethod*
/// @param type enum Qt__ConnectionType
QMetaObject__Connection* q_cplayoutinset_connect5(void* sender, void* signal, void* receiver, void* method, int32_t type);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param self QCPLayoutInset*
/// @param sender QObject*
/// @param signal const char*
/// @param member const char*
/// @param type enum Qt__ConnectionType
QMetaObject__Connection* q_cplayoutinset_connect4(void* self, void* sender, const char* signal, const char* member, int32_t type);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPLayoutInset*
/// @param param1 QObject*
void q_cplayoutinset_destroyed1(void* self, void* param1);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPLayoutInset*
/// @param callback void func(QCPLayoutInset* self, QObject* param1)
void q_cplayoutinset_on_destroyed1(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayout
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayout.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayoutInset*
/// @param phase enum QCPLayoutElement__UpdatePhase
void q_cplayoutinset_update(void* self, int32_t phase);

/// Inherited from QCPLayout
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayout.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayoutInset*
/// @param phase enum QCPLayoutElement__UpdatePhase
void q_cplayoutinset_qbase_update(void* self, int32_t phase);

/// Inherited from QCPLayout
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayout.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayoutInset*
/// @param callback void func(QCPLayoutInset* self, enum QCPLayoutElement__UpdatePhase phase)
void q_cplayoutinset_on_update(void* self, void (*callback)(void*, int32_t));

/// Inherited from QCPLayout
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayout.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayoutInset*
/// @param recursive bool
libqt_list /* of QCPLayoutElement* */ q_cplayoutinset_elements(void* self, bool recursive);

/// Inherited from QCPLayout
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayout.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayoutInset*
/// @param recursive bool
libqt_list /* of QCPLayoutElement* */ q_cplayoutinset_qbase_elements(void* self, bool recursive);

/// Inherited from QCPLayout
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayout.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayoutInset*
/// @param callback QCPLayoutElement** func(QCPLayoutInset* self, bool recursive)
void q_cplayoutinset_on_elements(void* self, QCPLayoutElement** (*callback)(void*, bool));

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayoutInset*
QSize* q_cplayoutinset_minimum_outer_size_hint(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayoutInset*
QSize* q_cplayoutinset_qbase_minimum_outer_size_hint(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayoutInset*
/// @param callback QSize* func()
void q_cplayoutinset_on_minimum_outer_size_hint(void* self, QSize* (*callback)());

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayoutInset*
QSize* q_cplayoutinset_maximum_outer_size_hint(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayoutInset*
QSize* q_cplayoutinset_qbase_maximum_outer_size_hint(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayoutInset*
/// @param callback QSize* func()
void q_cplayoutinset_on_maximum_outer_size_hint(void* self, QSize* (*callback)());

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayoutInset*
/// @param side enum QCP__MarginSide
int32_t q_cplayoutinset_calculate_auto_margin(void* self, int32_t side);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayoutInset*
/// @param side enum QCP__MarginSide
int32_t q_cplayoutinset_qbase_calculate_auto_margin(void* self, int32_t side);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayoutInset*
/// @param callback int32_t func(QCPLayoutInset* self, enum QCP__MarginSide side)
void q_cplayoutinset_on_calculate_auto_margin(void* self, int32_t (*callback)(void*, int32_t));

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayoutInset*
void q_cplayoutinset_layout_changed(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayoutInset*
void q_cplayoutinset_qbase_layout_changed(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayoutInset*
/// @param callback void func()
void q_cplayoutinset_on_layout_changed(void* self, void (*callback)());

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayoutInset*
/// @param painter QCPPainter*
void q_cplayoutinset_apply_default_antialiasing_hint(void* self, void* painter);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayoutInset*
/// @param painter QCPPainter*
void q_cplayoutinset_qbase_apply_default_antialiasing_hint(void* self, void* painter);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayoutInset*
/// @param callback void func(QCPLayoutInset* self, QCPPainter* painter)
void q_cplayoutinset_on_apply_default_antialiasing_hint(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayoutInset*
/// @param painter QCPPainter*
void q_cplayoutinset_draw(void* self, void* painter);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayoutInset*
/// @param painter QCPPainter*
void q_cplayoutinset_qbase_draw(void* self, void* painter);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayoutInset*
/// @param callback void func(QCPLayoutInset* self, QCPPainter* painter)
void q_cplayoutinset_on_draw(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayoutInset*
/// @param parentPlot QCustomPlot*
void q_cplayoutinset_parent_plot_initialized(void* self, void* parentPlot);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayoutInset*
/// @param parentPlot QCustomPlot*
void q_cplayoutinset_qbase_parent_plot_initialized(void* self, void* parentPlot);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayoutInset*
/// @param callback void func(QCPLayoutInset* self, QCustomPlot* parentPlot)
void q_cplayoutinset_on_parent_plot_initialized(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayoutInset*
///
/// @return enum QCP__Interaction
int32_t q_cplayoutinset_selection_category(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayoutInset*
///
/// @return enum QCP__Interaction
int32_t q_cplayoutinset_qbase_selection_category(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayoutInset*
/// @param callback int32_t func()
void q_cplayoutinset_on_selection_category(void* self, int32_t (*callback)());

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayoutInset*
QRect* q_cplayoutinset_clip_rect(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayoutInset*
QRect* q_cplayoutinset_qbase_clip_rect(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayoutInset*
/// @param callback QRect* func()
void q_cplayoutinset_on_clip_rect(void* self, QRect* (*callback)());

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayoutInset*
/// @param event QMouseEvent*
/// @param additive bool
/// @param details QVariant*
/// @param selectionStateChanged bool*
void q_cplayoutinset_select_event(void* self, void* event, bool additive, void* details, bool* selectionStateChanged);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayoutInset*
/// @param event QMouseEvent*
/// @param additive bool
/// @param details QVariant*
/// @param selectionStateChanged bool*
void q_cplayoutinset_qbase_select_event(void* self, void* event, bool additive, void* details, bool* selectionStateChanged);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayoutInset*
/// @param callback void func(QCPLayoutInset* self, QMouseEvent* event, bool additive, QVariant* details, bool* selectionStateChanged)
void q_cplayoutinset_on_select_event(void* self, void (*callback)(void*, void*, bool, void*, bool*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayoutInset*
/// @param selectionStateChanged bool*
void q_cplayoutinset_deselect_event(void* self, bool* selectionStateChanged);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayoutInset*
/// @param selectionStateChanged bool*
void q_cplayoutinset_qbase_deselect_event(void* self, bool* selectionStateChanged);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayoutInset*
/// @param callback void func(QCPLayoutInset* self, bool* selectionStateChanged)
void q_cplayoutinset_on_deselect_event(void* self, void (*callback)(void*, bool*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayoutInset*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cplayoutinset_mouse_press_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayoutInset*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cplayoutinset_qbase_mouse_press_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayoutInset*
/// @param callback void func(QCPLayoutInset* self, QMouseEvent* event, QVariant* details)
void q_cplayoutinset_on_mouse_press_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayoutInset*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cplayoutinset_mouse_move_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayoutInset*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cplayoutinset_qbase_mouse_move_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayoutInset*
/// @param callback void func(QCPLayoutInset* self, QMouseEvent* event, QPointF* startPos)
void q_cplayoutinset_on_mouse_move_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayoutInset*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cplayoutinset_mouse_release_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayoutInset*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cplayoutinset_qbase_mouse_release_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayoutInset*
/// @param callback void func(QCPLayoutInset* self, QMouseEvent* event, QPointF* startPos)
void q_cplayoutinset_on_mouse_release_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayoutInset*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cplayoutinset_mouse_double_click_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayoutInset*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cplayoutinset_qbase_mouse_double_click_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayoutInset*
/// @param callback void func(QCPLayoutInset* self, QMouseEvent* event, QVariant* details)
void q_cplayoutinset_on_mouse_double_click_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayoutInset*
/// @param event QWheelEvent*
void q_cplayoutinset_wheel_event(void* self, void* event);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayoutInset*
/// @param event QWheelEvent*
void q_cplayoutinset_qbase_wheel_event(void* self, void* event);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayoutInset*
/// @param callback void func(QCPLayoutInset* self, QWheelEvent* event)
void q_cplayoutinset_on_wheel_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayoutInset*
/// @param event QEvent*
bool q_cplayoutinset_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayoutInset*
/// @param event QEvent*
bool q_cplayoutinset_qbase_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayoutInset*
/// @param callback bool func(QCPLayoutInset* self, QEvent* event)
void q_cplayoutinset_on_event(void* self, bool (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayoutInset*
/// @param watched QObject*
/// @param event QEvent*
bool q_cplayoutinset_event_filter(void* self, void* watched, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayoutInset*
/// @param watched QObject*
/// @param event QEvent*
bool q_cplayoutinset_qbase_event_filter(void* self, void* watched, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayoutInset*
/// @param callback bool func(QCPLayoutInset* self, QObject* watched, QEvent* event)
void q_cplayoutinset_on_event_filter(void* self, bool (*callback)(void*, void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayoutInset*
/// @param event QTimerEvent*
void q_cplayoutinset_timer_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayoutInset*
/// @param event QTimerEvent*
void q_cplayoutinset_qbase_timer_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayoutInset*
/// @param callback void func(QCPLayoutInset* self, QTimerEvent* event)
void q_cplayoutinset_on_timer_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayoutInset*
/// @param event QChildEvent*
void q_cplayoutinset_child_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayoutInset*
/// @param event QChildEvent*
void q_cplayoutinset_qbase_child_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayoutInset*
/// @param callback void func(QCPLayoutInset* self, QChildEvent* event)
void q_cplayoutinset_on_child_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayoutInset*
/// @param event QEvent*
void q_cplayoutinset_custom_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayoutInset*
/// @param event QEvent*
void q_cplayoutinset_qbase_custom_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayoutInset*
/// @param callback void func(QCPLayoutInset* self, QEvent* event)
void q_cplayoutinset_on_custom_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayoutInset*
/// @param signal QMetaMethod*
void q_cplayoutinset_connect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayoutInset*
/// @param signal QMetaMethod*
void q_cplayoutinset_qbase_connect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayoutInset*
/// @param callback void func(QCPLayoutInset* self, QMetaMethod* signal)
void q_cplayoutinset_on_connect_notify(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayoutInset*
/// @param signal QMetaMethod*
void q_cplayoutinset_disconnect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayoutInset*
/// @param signal QMetaMethod*
void q_cplayoutinset_qbase_disconnect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayoutInset*
/// @param callback void func(QCPLayoutInset* self, QMetaMethod* signal)
void q_cplayoutinset_on_disconnect_notify(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayout
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayout.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayoutInset*
void q_cplayoutinset_size_constraints_changed(void* self);

/// Inherited from QCPLayout
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayout.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayoutInset*
void q_cplayoutinset_qbase_size_constraints_changed(void* self);

/// Inherited from QCPLayout
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayout.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayoutInset*
/// @param callback void func()
void q_cplayoutinset_on_size_constraints_changed(void* self, void (*callback)());

/// Inherited from QCPLayout
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayout.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayoutInset*
/// @param el QCPLayoutElement*
void q_cplayoutinset_adopt_element(void* self, void* el);

/// Inherited from QCPLayout
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayout.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayoutInset*
/// @param el QCPLayoutElement*
void q_cplayoutinset_qbase_adopt_element(void* self, void* el);

/// Inherited from QCPLayout
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayout.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayoutInset*
/// @param callback void func(QCPLayoutInset* self, QCPLayoutElement* el)
void q_cplayoutinset_on_adopt_element(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayout
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayout.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayoutInset*
/// @param el QCPLayoutElement*
void q_cplayoutinset_release_element(void* self, void* el);

/// Inherited from QCPLayout
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayout.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayoutInset*
/// @param el QCPLayoutElement*
void q_cplayoutinset_qbase_release_element(void* self, void* el);

/// Inherited from QCPLayout
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayout.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayoutInset*
/// @param callback void func(QCPLayoutInset* self, QCPLayoutElement* el)
void q_cplayoutinset_on_release_element(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayout
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayout.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayoutInset*
/// @param maxSizes libqt_list /* of int */
/// @param minSizes libqt_list /* of int */
/// @param stretchFactors libqt_list /* of double */
/// @param totalSize int
libqt_list /* of int */ q_cplayoutinset_get_section_sizes(void* self, libqt_list maxSizes, libqt_list minSizes, libqt_list stretchFactors, int totalSize);

/// Inherited from QCPLayout
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayout.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayoutInset*
/// @param maxSizes libqt_list /* of int */
/// @param minSizes libqt_list /* of int */
/// @param stretchFactors libqt_list /* of double */
/// @param totalSize int
libqt_list /* of int */ q_cplayoutinset_qbase_get_section_sizes(void* self, libqt_list maxSizes, libqt_list minSizes, libqt_list stretchFactors, int totalSize);

/// Inherited from QCPLayout
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayout.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayoutInset*
/// @param callback int* func(QCPLayoutInset* self, int* /* of int */, int* /* of int */, libqt_list /* of double */ /* of double */, int totalSize)
void q_cplayoutinset_on_get_section_sizes(void* self, int* (*callback)(void*, int*, int*, libqt_list, int));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayoutInset*
/// @param parentPlot QCustomPlot*
void q_cplayoutinset_initialize_parent_plot(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayoutInset*
/// @param parentPlot QCustomPlot*
void q_cplayoutinset_qbase_initialize_parent_plot(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayoutInset*
/// @param callback void func(QCPLayoutInset* self, QCustomPlot* parentPlot)
void q_cplayoutinset_on_initialize_parent_plot(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayoutInset*
/// @param parentLayerable QCPLayerable*
void q_cplayoutinset_set_parent_layerable(void* self, void* parentLayerable);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayoutInset*
/// @param parentLayerable QCPLayerable*
void q_cplayoutinset_qbase_set_parent_layerable(void* self, void* parentLayerable);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayoutInset*
/// @param callback void func(QCPLayoutInset* self, QCPLayerable* parentLayerable)
void q_cplayoutinset_on_set_parent_layerable(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayoutInset*
/// @param layer QCPLayer*
/// @param prepend bool
bool q_cplayoutinset_move_to_layer(void* self, void* layer, bool prepend);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayoutInset*
/// @param layer QCPLayer*
/// @param prepend bool
bool q_cplayoutinset_qbase_move_to_layer(void* self, void* layer, bool prepend);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayoutInset*
/// @param callback bool func(QCPLayoutInset* self, QCPLayer* layer, bool prepend)
void q_cplayoutinset_on_move_to_layer(void* self, bool (*callback)(void*, void*, bool));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayoutInset*
/// @param painter QCPPainter*
/// @param localAntialiased bool
/// @param overrideElement enum QCP__AntialiasedElement
void q_cplayoutinset_apply_antialiasing_hint(void* self, void* painter, bool localAntialiased, int32_t overrideElement);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayoutInset*
/// @param painter QCPPainter*
/// @param localAntialiased bool
/// @param overrideElement enum QCP__AntialiasedElement
void q_cplayoutinset_qbase_apply_antialiasing_hint(void* self, void* painter, bool localAntialiased, int32_t overrideElement);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayoutInset*
/// @param callback void func(QCPLayoutInset* self, QCPPainter* painter, bool localAntialiased, enum QCP__AntialiasedElement overrideElement)
void q_cplayoutinset_on_apply_antialiasing_hint(void* self, void (*callback)(void*, void*, bool, int32_t));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayoutInset*
QObject* q_cplayoutinset_sender(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayoutInset*
QObject* q_cplayoutinset_qbase_sender(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayoutInset*
/// @param callback QObject* func()
void q_cplayoutinset_on_sender(void* self, QObject* (*callback)());

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayoutInset*
int32_t q_cplayoutinset_sender_signal_index(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayoutInset*
int32_t q_cplayoutinset_qbase_sender_signal_index(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayoutInset*
/// @param callback int32_t func()
void q_cplayoutinset_on_sender_signal_index(void* self, int32_t (*callback)());

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayoutInset*
/// @param signal const char*
int32_t q_cplayoutinset_receivers(void* self, const char* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayoutInset*
/// @param signal const char*
int32_t q_cplayoutinset_qbase_receivers(void* self, const char* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayoutInset*
/// @param callback int32_t func(QCPLayoutInset* self, const char* signal)
void q_cplayoutinset_on_receivers(void* self, int32_t (*callback)(void*, const char*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLayoutInset*
/// @param signal QMetaMethod*
bool q_cplayoutinset_is_signal_connected(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLayoutInset*
/// @param signal QMetaMethod*
bool q_cplayoutinset_qbase_is_signal_connected(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLayoutInset*
/// @param callback bool func(QCPLayoutInset* self, QMetaMethod* signal)
void q_cplayoutinset_on_is_signal_connected(void* self, bool (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#objectNameChanged)
///
/// Wrapper to allow calling private signal
///
/// @param self QCPLayoutInset*
/// @param callback void func(QCPLayoutInset* self, const char* objectName)
void q_cplayoutinset_on_object_name_changed(void* self, void (*callback)(void*, const char*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutInset.html)
///
/// Delete this object from C++ memory.
///
/// @param self QCPLayoutInset*
void q_cplayoutinset_delete(void* self);

/// https://www.qcustomplot.com/documentation/classQCPLineEnding.html

/// q_cplineending_new constructs a new QCPLineEnding object.
///
/// @param other QCPLineEnding*
QCPLineEnding* q_cplineending_new(void* other);

/// q_cplineending_new2 constructs a new QCPLineEnding object and invalidates the source QCPLineEnding object.
///
/// @param other QCPLineEnding*
QCPLineEnding* q_cplineending_new2(void* other);

/// q_cplineending_new3 constructs a new QCPLineEnding object.
///
QCPLineEnding* q_cplineending_new3();

/// q_cplineending_new4 constructs a new QCPLineEnding object.
///
/// @param style enum QCPLineEnding__EndingStyle
QCPLineEnding* q_cplineending_new4(int32_t style);

/// q_cplineending_new5 constructs a new QCPLineEnding object.
///
/// @param param1 QCPLineEnding*
QCPLineEnding* q_cplineending_new5(void* param1);

/// q_cplineending_new6 constructs a new QCPLineEnding object.
///
/// @param style enum QCPLineEnding__EndingStyle
/// @param width double
QCPLineEnding* q_cplineending_new6(int32_t style, double width);

/// q_cplineending_new7 constructs a new QCPLineEnding object.
///
/// @param style enum QCPLineEnding__EndingStyle
/// @param width double
/// @param length double
QCPLineEnding* q_cplineending_new7(int32_t style, double width, double length);

/// q_cplineending_new8 constructs a new QCPLineEnding object.
///
/// @param style enum QCPLineEnding__EndingStyle
/// @param width double
/// @param length double
/// @param inverted bool
QCPLineEnding* q_cplineending_new8(int32_t style, double width, double length, bool inverted);

/// q_cplineending_copy_assign shallow copies `other` into `self`.
///
/// @param self QCPLineEnding*
/// @param other QCPLineEnding*
void q_cplineending_copy_assign(void* self, void* other);

/// q_cplineending_move_assign moves `other` into `self` and invalidates `other`.
///
/// @param self QCPLineEnding*
/// @param other QCPLineEnding*
void q_cplineending_move_assign(void* self, void* other);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLineEnding.html)
///
/// @param self QCPLineEnding*
///
/// @return enum QCPLineEnding__EndingStyle
int32_t q_cplineending_style(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLineEnding.html)
///
/// @param self QCPLineEnding*
double q_cplineending_width(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLineEnding.html)
///
/// @param self QCPLineEnding*
double q_cplineending_length(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLineEnding.html)
///
/// @param self QCPLineEnding*
bool q_cplineending_inverted(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLineEnding.html)
///
/// @param self QCPLineEnding*
/// @param style enum QCPLineEnding__EndingStyle
void q_cplineending_set_style(void* self, int32_t style);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLineEnding.html)
///
/// @param self QCPLineEnding*
/// @param width double
void q_cplineending_set_width(void* self, double width);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLineEnding.html)
///
/// @param self QCPLineEnding*
/// @param length double
void q_cplineending_set_length(void* self, double length);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLineEnding.html)
///
/// @param self QCPLineEnding*
/// @param inverted bool
void q_cplineending_set_inverted(void* self, bool inverted);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLineEnding.html)
///
/// @param self QCPLineEnding*
double q_cplineending_bounding_distance(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLineEnding.html)
///
/// @param self QCPLineEnding*
double q_cplineending_real_length(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLineEnding.html)
///
/// @param self QCPLineEnding*
/// @param painter QCPPainter*
/// @param pos QCPVector2D*
/// @param dir QCPVector2D*
void q_cplineending_draw(void* self, void* painter, void* pos, void* dir);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLineEnding.html)
///
/// @param self QCPLineEnding*
/// @param painter QCPPainter*
/// @param pos QCPVector2D*
/// @param angle double
void q_cplineending_draw2(void* self, void* painter, void* pos, double angle);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLineEnding.html)
///
/// Delete this object from C++ memory.
///
/// @param self QCPLineEnding*
void q_cplineending_delete(void* self);

/// https://www.qcustomplot.com/documentation/classQCPAxisTicker.html

/// q_cpaxisticker_new constructs a new QCPAxisTicker object.
///
QCPAxisTicker* q_cpaxisticker_new();

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// @param self QCPAxisTicker*
///
/// @return enum QCPAxisTicker__TickStepStrategy
int32_t q_cpaxisticker_tick_step_strategy(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// @param self QCPAxisTicker*
int32_t q_cpaxisticker_tick_count(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// @param self QCPAxisTicker*
double q_cpaxisticker_tick_origin(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// @param self QCPAxisTicker*
/// @param strategy enum QCPAxisTicker__TickStepStrategy
void q_cpaxisticker_set_tick_step_strategy(void* self, int32_t strategy);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// @param self QCPAxisTicker*
/// @param count int
void q_cpaxisticker_set_tick_count(void* self, int count);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// @param self QCPAxisTicker*
/// @param origin double
void q_cpaxisticker_set_tick_origin(void* self, double origin);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// @param self QCPAxisTicker*
/// @param range QCPRange*
/// @param locale QLocale*
/// @param formatChar QChar*
/// @param precision int
/// @param ticks libqt_list /* of double */
/// @param subTicks libqt_list /* of double */
/// @param tickLabels const char**
void q_cpaxisticker_generate(void* self, void* range, void* locale, void* formatChar, int precision, libqt_list ticks, libqt_list subTicks, const char* tickLabels[]);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPAxisTicker*
/// @param callback void func(QCPAxisTicker* self, QCPRange* range, QLocale* locale, QChar* formatChar, int precision, libqt_list /* of double */ /* of double */, libqt_list /* of double */ /* of double */, const char** tickLabels)
void q_cpaxisticker_on_generate(void* self, void (*callback)(void*, void*, void*, void*, int, libqt_list, libqt_list, const char**));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Base class method implementation
///
/// @param self QCPAxisTicker*
/// @param range QCPRange*
/// @param locale QLocale*
/// @param formatChar QChar*
/// @param precision int
/// @param ticks libqt_list /* of double */
/// @param subTicks libqt_list /* of double */
/// @param tickLabels const char**
void q_cpaxisticker_qbase_generate(void* self, void* range, void* locale, void* formatChar, int precision, libqt_list ticks, libqt_list subTicks, const char* tickLabels[]);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// @param self QCPAxisTicker*
/// @param range QCPRange*
double q_cpaxisticker_get_tick_step(void* self, void* range);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPAxisTicker*
/// @param callback double func(QCPAxisTicker* self, QCPRange* range)
void q_cpaxisticker_on_get_tick_step(void* self, double (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Base class method implementation
///
/// @param self QCPAxisTicker*
/// @param range QCPRange*
double q_cpaxisticker_qbase_get_tick_step(void* self, void* range);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// @param self QCPAxisTicker*
/// @param tickStep double
int32_t q_cpaxisticker_get_sub_tick_count(void* self, double tickStep);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPAxisTicker*
/// @param callback int32_t func(QCPAxisTicker* self, double tickStep)
void q_cpaxisticker_on_get_sub_tick_count(void* self, int32_t (*callback)(void*, double));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Base class method implementation
///
/// @param self QCPAxisTicker*
/// @param tickStep double
int32_t q_cpaxisticker_qbase_get_sub_tick_count(void* self, double tickStep);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPAxisTicker*
/// @param tick double
/// @param locale QLocale*
/// @param formatChar QChar*
/// @param precision int
const char* q_cpaxisticker_get_tick_label(void* self, double tick, void* locale, void* formatChar, int precision);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPAxisTicker*
/// @param callback const char* func(QCPAxisTicker* self, double tick, QLocale* locale, QChar* formatChar, int precision)
void q_cpaxisticker_on_get_tick_label(void* self, const char* (*callback)(void*, double, void*, void*, int));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Base class method implementation
///
/// @param self QCPAxisTicker*
/// @param tick double
/// @param locale QLocale*
/// @param formatChar QChar*
/// @param precision int
const char* q_cpaxisticker_qbase_get_tick_label(void* self, double tick, void* locale, void* formatChar, int precision);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// @param self QCPAxisTicker*
/// @param tickStep double
/// @param range QCPRange*
libqt_list /* of double */ q_cpaxisticker_create_tick_vector(void* self, double tickStep, void* range);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPAxisTicker*
/// @param callback libqt_list /* of double */ func(QCPAxisTicker* self, double tickStep, QCPRange* range)
void q_cpaxisticker_on_create_tick_vector(void* self, libqt_list /* of double */ (*callback)(void*, double, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Base class method implementation
///
/// @param self QCPAxisTicker*
/// @param tickStep double
/// @param range QCPRange*
libqt_list /* of double */ q_cpaxisticker_qbase_create_tick_vector(void* self, double tickStep, void* range);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// @param self QCPAxisTicker*
/// @param subTickCount int
/// @param ticks libqt_list /* of double */
libqt_list /* of double */ q_cpaxisticker_create_sub_tick_vector(void* self, int subTickCount, libqt_list ticks);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPAxisTicker*
/// @param callback libqt_list /* of double */ func(QCPAxisTicker* self, int subTickCount, libqt_list /* of double */ /* of double */)
void q_cpaxisticker_on_create_sub_tick_vector(void* self, libqt_list /* of double */ (*callback)(void*, int, libqt_list));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Base class method implementation
///
/// @param self QCPAxisTicker*
/// @param subTickCount int
/// @param ticks libqt_list /* of double */
libqt_list /* of double */ q_cpaxisticker_qbase_create_sub_tick_vector(void* self, int subTickCount, libqt_list ticks);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPAxisTicker*
/// @param ticks libqt_list /* of double */
/// @param locale QLocale*
/// @param formatChar QChar*
/// @param precision int
const char** q_cpaxisticker_create_label_vector(void* self, libqt_list ticks, void* locale, void* formatChar, int precision);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPAxisTicker*
/// @param callback const char** func(QCPAxisTicker* self, libqt_list /* of double */ /* of double */, QLocale* locale, QChar* formatChar, int precision)
void q_cpaxisticker_on_create_label_vector(void* self, const char** (*callback)(void*, libqt_list, void*, void*, int));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Base class method implementation
///
/// @param self QCPAxisTicker*
/// @param ticks libqt_list /* of double */
/// @param locale QLocale*
/// @param formatChar QChar*
/// @param precision int
const char** q_cpaxisticker_qbase_create_label_vector(void* self, libqt_list ticks, void* locale, void* formatChar, int precision);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// @param self QCPAxisTicker*
/// @param range QCPRange*
/// @param ticks libqt_list /* of double */
/// @param keepOneOutlier bool
void q_cpaxisticker_trim_ticks(void* self, void* range, libqt_list ticks, bool keepOneOutlier);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPAxisTicker*
/// @param callback void func(QCPAxisTicker* self, QCPRange* range, libqt_list /* of double */ /* of double */, bool keepOneOutlier)
void q_cpaxisticker_on_trim_ticks(void* self, void (*callback)(void*, void*, libqt_list, bool));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Base class method implementation
///
/// @param self QCPAxisTicker*
/// @param range QCPRange*
/// @param ticks libqt_list /* of double */
/// @param keepOneOutlier bool
void q_cpaxisticker_qbase_trim_ticks(void* self, void* range, libqt_list ticks, bool keepOneOutlier);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// @param self QCPAxisTicker*
/// @param target double
/// @param candidates libqt_list /* of double */
double q_cpaxisticker_pick_closest(void* self, double target, libqt_list candidates);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPAxisTicker*
/// @param callback double func(QCPAxisTicker* self, double target, libqt_list /* of double */ /* of double */)
void q_cpaxisticker_on_pick_closest(void* self, double (*callback)(void*, double, libqt_list));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Base class method implementation
///
/// @param self QCPAxisTicker*
/// @param target double
/// @param candidates libqt_list /* of double */
double q_cpaxisticker_qbase_pick_closest(void* self, double target, libqt_list candidates);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// @param self QCPAxisTicker*
/// @param input double
double q_cpaxisticker_get_mantissa(void* self, double input);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPAxisTicker*
/// @param callback double func(QCPAxisTicker* self, double input)
void q_cpaxisticker_on_get_mantissa(void* self, double (*callback)(void*, double));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Base class method implementation
///
/// @param self QCPAxisTicker*
/// @param input double
double q_cpaxisticker_qbase_get_mantissa(void* self, double input);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// @param self QCPAxisTicker*
/// @param input double
double q_cpaxisticker_clean_mantissa(void* self, double input);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPAxisTicker*
/// @param callback double func(QCPAxisTicker* self, double input)
void q_cpaxisticker_on_clean_mantissa(void* self, double (*callback)(void*, double));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Base class method implementation
///
/// @param self QCPAxisTicker*
/// @param input double
double q_cpaxisticker_qbase_clean_mantissa(void* self, double input);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// @param self QCPAxisTicker*
/// @param input double
/// @param magnitude double*
double q_cpaxisticker_get_mantissa2(void* self, double input, double* magnitude);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPAxisTicker*
/// @param callback double func(QCPAxisTicker* self, double input, double* magnitude)
void q_cpaxisticker_on_get_mantissa2(void* self, double (*callback)(void*, double, double*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Base class method implementation
///
/// @param self QCPAxisTicker*
/// @param input double
/// @param magnitude double*
double q_cpaxisticker_qbase_get_mantissa2(void* self, double input, double* magnitude);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Delete this object from C++ memory.
///
/// @param self QCPAxisTicker*
void q_cpaxisticker_delete(void* self);

/// https://www.qcustomplot.com/documentation/classQCPAxisTickerDateTime.html

/// q_cpaxistickerdatetime_new constructs a new QCPAxisTickerDateTime object.
///
QCPAxisTickerDateTime* q_cpaxistickerdatetime_new();

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerDateTime.html)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPAxisTickerDateTime*
const char* q_cpaxistickerdatetime_date_time_format(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerDateTime.html)
///
/// @param self QCPAxisTickerDateTime*
///
/// @return enum Qt__TimeSpec
int32_t q_cpaxistickerdatetime_date_time_spec(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerDateTime.html)
///
/// @param self QCPAxisTickerDateTime*
QTimeZone* q_cpaxistickerdatetime_time_zone(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerDateTime.html)
///
/// @param self QCPAxisTickerDateTime*
/// @param format const char*
void q_cpaxistickerdatetime_set_date_time_format(void* self, const char* format);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerDateTime.html)
///
/// @param self QCPAxisTickerDateTime*
/// @param spec enum Qt__TimeSpec
void q_cpaxistickerdatetime_set_date_time_spec(void* self, int32_t spec);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerDateTime.html)
///
/// @param self QCPAxisTickerDateTime*
/// @param zone QTimeZone*
void q_cpaxistickerdatetime_set_time_zone(void* self, void* zone);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerDateTime.html)
///
/// @param self QCPAxisTickerDateTime*
/// @param origin double
void q_cpaxistickerdatetime_set_tick_origin(void* self, double origin);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerDateTime.html)
///
/// @param self QCPAxisTickerDateTime*
/// @param origin QDateTime*
void q_cpaxistickerdatetime_set_tick_origin2(void* self, void* origin);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerDateTime.html)
///
/// @param key double
QDateTime* q_cpaxistickerdatetime_key_to_date_time(double key);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerDateTime.html)
///
/// @param dateTime QDateTime*
double q_cpaxistickerdatetime_date_time_to_key(void* dateTime);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerDateTime.html)
///
/// @param date QDate*
double q_cpaxistickerdatetime_date_time_to_key2(void* date);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerDateTime.html)
///
/// @param self QCPAxisTickerDateTime*
/// @param range QCPRange*
double q_cpaxistickerdatetime_get_tick_step(void* self, void* range);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerDateTime.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPAxisTickerDateTime*
/// @param callback double func(QCPAxisTickerDateTime* self, QCPRange* range)
void q_cpaxistickerdatetime_on_get_tick_step(void* self, double (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerDateTime.html)
///
/// Base class method implementation
///
/// @param self QCPAxisTickerDateTime*
/// @param range QCPRange*
double q_cpaxistickerdatetime_qbase_get_tick_step(void* self, void* range);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerDateTime.html)
///
/// @param self QCPAxisTickerDateTime*
/// @param tickStep double
int32_t q_cpaxistickerdatetime_get_sub_tick_count(void* self, double tickStep);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerDateTime.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPAxisTickerDateTime*
/// @param callback int32_t func(QCPAxisTickerDateTime* self, double tickStep)
void q_cpaxistickerdatetime_on_get_sub_tick_count(void* self, int32_t (*callback)(void*, double));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerDateTime.html)
///
/// Base class method implementation
///
/// @param self QCPAxisTickerDateTime*
/// @param tickStep double
int32_t q_cpaxistickerdatetime_qbase_get_sub_tick_count(void* self, double tickStep);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerDateTime.html)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPAxisTickerDateTime*
/// @param tick double
/// @param locale QLocale*
/// @param formatChar QChar*
/// @param precision int
const char* q_cpaxistickerdatetime_get_tick_label(void* self, double tick, void* locale, void* formatChar, int precision);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerDateTime.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPAxisTickerDateTime*
/// @param callback const char* func(QCPAxisTickerDateTime* self, double tick, QLocale* locale, QChar* formatChar, int precision)
void q_cpaxistickerdatetime_on_get_tick_label(void* self, const char* (*callback)(void*, double, void*, void*, int));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerDateTime.html)
///
/// Base class method implementation
///
/// @param self QCPAxisTickerDateTime*
/// @param tick double
/// @param locale QLocale*
/// @param formatChar QChar*
/// @param precision int
const char* q_cpaxistickerdatetime_qbase_get_tick_label(void* self, double tick, void* locale, void* formatChar, int precision);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerDateTime.html)
///
/// @param self QCPAxisTickerDateTime*
/// @param tickStep double
/// @param range QCPRange*
libqt_list /* of double */ q_cpaxistickerdatetime_create_tick_vector(void* self, double tickStep, void* range);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerDateTime.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPAxisTickerDateTime*
/// @param callback libqt_list /* of double */ func(QCPAxisTickerDateTime* self, double tickStep, QCPRange* range)
void q_cpaxistickerdatetime_on_create_tick_vector(void* self, libqt_list /* of double */ (*callback)(void*, double, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerDateTime.html)
///
/// Base class method implementation
///
/// @param self QCPAxisTickerDateTime*
/// @param tickStep double
/// @param range QCPRange*
libqt_list /* of double */ q_cpaxistickerdatetime_qbase_create_tick_vector(void* self, double tickStep, void* range);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerDateTime.html)
///
/// @param date QDate*
/// @param timeSpec enum Qt__TimeSpec
double q_cpaxistickerdatetime_date_time_to_key22(void* date, int32_t timeSpec);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// @param self QCPAxisTickerDateTime*
///
/// @return enum QCPAxisTicker__TickStepStrategy
int32_t q_cpaxistickerdatetime_tick_step_strategy(void* self);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// @param self QCPAxisTickerDateTime*
int32_t q_cpaxistickerdatetime_tick_count(void* self);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// @param self QCPAxisTickerDateTime*
double q_cpaxistickerdatetime_tick_origin(void* self);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// @param self QCPAxisTickerDateTime*
/// @param strategy enum QCPAxisTicker__TickStepStrategy
void q_cpaxistickerdatetime_set_tick_step_strategy(void* self, int32_t strategy);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// @param self QCPAxisTickerDateTime*
/// @param count int
void q_cpaxistickerdatetime_set_tick_count(void* self, int count);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAxisTickerDateTime*
/// @param range QCPRange*
/// @param locale QLocale*
/// @param formatChar QChar*
/// @param precision int
/// @param ticks libqt_list /* of double */
/// @param subTicks libqt_list /* of double */
/// @param tickLabels const char**
void q_cpaxistickerdatetime_generate(void* self, void* range, void* locale, void* formatChar, int precision, libqt_list ticks, libqt_list subTicks, const char* tickLabels[]);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAxisTickerDateTime*
/// @param range QCPRange*
/// @param locale QLocale*
/// @param formatChar QChar*
/// @param precision int
/// @param ticks libqt_list /* of double */
/// @param subTicks libqt_list /* of double */
/// @param tickLabels const char**
void q_cpaxistickerdatetime_qbase_generate(void* self, void* range, void* locale, void* formatChar, int precision, libqt_list ticks, libqt_list subTicks, const char* tickLabels[]);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAxisTickerDateTime*
/// @param callback void func(QCPAxisTickerDateTime* self, QCPRange* range, QLocale* locale, QChar* formatChar, int precision, libqt_list /* of double */ /* of double */, libqt_list /* of double */ /* of double */, const char** tickLabels)
void q_cpaxistickerdatetime_on_generate(void* self, void (*callback)(void*, void*, void*, void*, int, libqt_list, libqt_list, const char**));

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAxisTickerDateTime*
/// @param subTickCount int
/// @param ticks libqt_list /* of double */
libqt_list /* of double */ q_cpaxistickerdatetime_create_sub_tick_vector(void* self, int subTickCount, libqt_list ticks);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAxisTickerDateTime*
/// @param subTickCount int
/// @param ticks libqt_list /* of double */
libqt_list /* of double */ q_cpaxistickerdatetime_qbase_create_sub_tick_vector(void* self, int subTickCount, libqt_list ticks);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAxisTickerDateTime*
/// @param callback libqt_list /* of double */ func(QCPAxisTickerDateTime* self, int subTickCount, libqt_list /* of double */ /* of double */)
void q_cpaxistickerdatetime_on_create_sub_tick_vector(void* self, libqt_list /* of double */ (*callback)(void*, int, libqt_list));

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Caller is responsible for freeing the returned memory
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAxisTickerDateTime*
/// @param ticks libqt_list /* of double */
/// @param locale QLocale*
/// @param formatChar QChar*
/// @param precision int
const char** q_cpaxistickerdatetime_create_label_vector(void* self, libqt_list ticks, void* locale, void* formatChar, int precision);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Caller is responsible for freeing the returned memory
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAxisTickerDateTime*
/// @param ticks libqt_list /* of double */
/// @param locale QLocale*
/// @param formatChar QChar*
/// @param precision int
const char** q_cpaxistickerdatetime_qbase_create_label_vector(void* self, libqt_list ticks, void* locale, void* formatChar, int precision);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAxisTickerDateTime*
/// @param callback const char** func(QCPAxisTickerDateTime* self, libqt_list /* of double */ /* of double */, QLocale* locale, QChar* formatChar, int precision)
void q_cpaxistickerdatetime_on_create_label_vector(void* self, const char** (*callback)(void*, libqt_list, void*, void*, int));

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAxisTickerDateTime*
/// @param range QCPRange*
/// @param ticks libqt_list /* of double */
/// @param keepOneOutlier bool
void q_cpaxistickerdatetime_trim_ticks(void* self, void* range, libqt_list ticks, bool keepOneOutlier);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAxisTickerDateTime*
/// @param range QCPRange*
/// @param ticks libqt_list /* of double */
/// @param keepOneOutlier bool
void q_cpaxistickerdatetime_qbase_trim_ticks(void* self, void* range, libqt_list ticks, bool keepOneOutlier);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAxisTickerDateTime*
/// @param callback void func(QCPAxisTickerDateTime* self, QCPRange* range, libqt_list /* of double */ /* of double */, bool keepOneOutlier)
void q_cpaxistickerdatetime_on_trim_ticks(void* self, void (*callback)(void*, void*, libqt_list, bool));

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAxisTickerDateTime*
/// @param target double
/// @param candidates libqt_list /* of double */
double q_cpaxistickerdatetime_pick_closest(void* self, double target, libqt_list candidates);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAxisTickerDateTime*
/// @param target double
/// @param candidates libqt_list /* of double */
double q_cpaxistickerdatetime_qbase_pick_closest(void* self, double target, libqt_list candidates);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAxisTickerDateTime*
/// @param callback double func(QCPAxisTickerDateTime* self, double target, libqt_list /* of double */ /* of double */)
void q_cpaxistickerdatetime_on_pick_closest(void* self, double (*callback)(void*, double, libqt_list));

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAxisTickerDateTime*
/// @param input double
double q_cpaxistickerdatetime_get_mantissa(void* self, double input);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAxisTickerDateTime*
/// @param input double
double q_cpaxistickerdatetime_qbase_get_mantissa(void* self, double input);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAxisTickerDateTime*
/// @param callback double func(QCPAxisTickerDateTime* self, double input)
void q_cpaxistickerdatetime_on_get_mantissa(void* self, double (*callback)(void*, double));

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAxisTickerDateTime*
/// @param input double
double q_cpaxistickerdatetime_clean_mantissa(void* self, double input);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAxisTickerDateTime*
/// @param input double
double q_cpaxistickerdatetime_qbase_clean_mantissa(void* self, double input);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAxisTickerDateTime*
/// @param callback double func(QCPAxisTickerDateTime* self, double input)
void q_cpaxistickerdatetime_on_clean_mantissa(void* self, double (*callback)(void*, double));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerDateTime.html)
///
/// Delete this object from C++ memory.
///
/// @param self QCPAxisTickerDateTime*
void q_cpaxistickerdatetime_delete(void* self);

/// https://www.qcustomplot.com/documentation/classQCPAxisTickerTime.html

/// q_cpaxistickertime_new constructs a new QCPAxisTickerTime object.
///
QCPAxisTickerTime* q_cpaxistickertime_new();

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerTime.html)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPAxisTickerTime*
const char* q_cpaxistickertime_time_format(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerTime.html)
///
/// @param self QCPAxisTickerTime*
/// @param unit enum QCPAxisTickerTime__TimeUnit
int32_t q_cpaxistickertime_field_width(void* self, int32_t unit);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerTime.html)
///
/// @param self QCPAxisTickerTime*
/// @param format const char*
void q_cpaxistickertime_set_time_format(void* self, const char* format);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerTime.html)
///
/// @param self QCPAxisTickerTime*
/// @param unit enum QCPAxisTickerTime__TimeUnit
/// @param width int
void q_cpaxistickertime_set_field_width(void* self, int32_t unit, int width);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerTime.html)
///
/// @param self QCPAxisTickerTime*
/// @param range QCPRange*
double q_cpaxistickertime_get_tick_step(void* self, void* range);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerTime.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPAxisTickerTime*
/// @param callback double func(QCPAxisTickerTime* self, QCPRange* range)
void q_cpaxistickertime_on_get_tick_step(void* self, double (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerTime.html)
///
/// Base class method implementation
///
/// @param self QCPAxisTickerTime*
/// @param range QCPRange*
double q_cpaxistickertime_qbase_get_tick_step(void* self, void* range);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerTime.html)
///
/// @param self QCPAxisTickerTime*
/// @param tickStep double
int32_t q_cpaxistickertime_get_sub_tick_count(void* self, double tickStep);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerTime.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPAxisTickerTime*
/// @param callback int32_t func(QCPAxisTickerTime* self, double tickStep)
void q_cpaxistickertime_on_get_sub_tick_count(void* self, int32_t (*callback)(void*, double));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerTime.html)
///
/// Base class method implementation
///
/// @param self QCPAxisTickerTime*
/// @param tickStep double
int32_t q_cpaxistickertime_qbase_get_sub_tick_count(void* self, double tickStep);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerTime.html)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPAxisTickerTime*
/// @param tick double
/// @param locale QLocale*
/// @param formatChar QChar*
/// @param precision int
const char* q_cpaxistickertime_get_tick_label(void* self, double tick, void* locale, void* formatChar, int precision);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerTime.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPAxisTickerTime*
/// @param callback const char* func(QCPAxisTickerTime* self, double tick, QLocale* locale, QChar* formatChar, int precision)
void q_cpaxistickertime_on_get_tick_label(void* self, const char* (*callback)(void*, double, void*, void*, int));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerTime.html)
///
/// Base class method implementation
///
/// @param self QCPAxisTickerTime*
/// @param tick double
/// @param locale QLocale*
/// @param formatChar QChar*
/// @param precision int
const char* q_cpaxistickertime_qbase_get_tick_label(void* self, double tick, void* locale, void* formatChar, int precision);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerTime.html)
///
/// @param self QCPAxisTickerTime*
/// @param text const char*
/// @param unit enum QCPAxisTickerTime__TimeUnit
/// @param value int
void q_cpaxistickertime_replace_unit(void* self, const char* text, int32_t unit, int value);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerTime.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPAxisTickerTime*
/// @param callback void func(QCPAxisTickerTime* self, const char* text, enum QCPAxisTickerTime__TimeUnit unit, int value)
void q_cpaxistickertime_on_replace_unit(void* self, void (*callback)(void*, const char*, int32_t, int));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerTime.html)
///
/// Base class method implementation
///
/// @param self QCPAxisTickerTime*
/// @param text const char*
/// @param unit enum QCPAxisTickerTime__TimeUnit
/// @param value int
void q_cpaxistickertime_qbase_replace_unit(void* self, const char* text, int32_t unit, int value);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// @param self QCPAxisTickerTime*
///
/// @return enum QCPAxisTicker__TickStepStrategy
int32_t q_cpaxistickertime_tick_step_strategy(void* self);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// @param self QCPAxisTickerTime*
int32_t q_cpaxistickertime_tick_count(void* self);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// @param self QCPAxisTickerTime*
double q_cpaxistickertime_tick_origin(void* self);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// @param self QCPAxisTickerTime*
/// @param strategy enum QCPAxisTicker__TickStepStrategy
void q_cpaxistickertime_set_tick_step_strategy(void* self, int32_t strategy);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// @param self QCPAxisTickerTime*
/// @param count int
void q_cpaxistickertime_set_tick_count(void* self, int count);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// @param self QCPAxisTickerTime*
/// @param origin double
void q_cpaxistickertime_set_tick_origin(void* self, double origin);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAxisTickerTime*
/// @param range QCPRange*
/// @param locale QLocale*
/// @param formatChar QChar*
/// @param precision int
/// @param ticks libqt_list /* of double */
/// @param subTicks libqt_list /* of double */
/// @param tickLabels const char**
void q_cpaxistickertime_generate(void* self, void* range, void* locale, void* formatChar, int precision, libqt_list ticks, libqt_list subTicks, const char* tickLabels[]);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAxisTickerTime*
/// @param range QCPRange*
/// @param locale QLocale*
/// @param formatChar QChar*
/// @param precision int
/// @param ticks libqt_list /* of double */
/// @param subTicks libqt_list /* of double */
/// @param tickLabels const char**
void q_cpaxistickertime_qbase_generate(void* self, void* range, void* locale, void* formatChar, int precision, libqt_list ticks, libqt_list subTicks, const char* tickLabels[]);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAxisTickerTime*
/// @param callback void func(QCPAxisTickerTime* self, QCPRange* range, QLocale* locale, QChar* formatChar, int precision, libqt_list /* of double */ /* of double */, libqt_list /* of double */ /* of double */, const char** tickLabels)
void q_cpaxistickertime_on_generate(void* self, void (*callback)(void*, void*, void*, void*, int, libqt_list, libqt_list, const char**));

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAxisTickerTime*
/// @param tickStep double
/// @param range QCPRange*
libqt_list /* of double */ q_cpaxistickertime_create_tick_vector(void* self, double tickStep, void* range);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAxisTickerTime*
/// @param tickStep double
/// @param range QCPRange*
libqt_list /* of double */ q_cpaxistickertime_qbase_create_tick_vector(void* self, double tickStep, void* range);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAxisTickerTime*
/// @param callback libqt_list /* of double */ func(QCPAxisTickerTime* self, double tickStep, QCPRange* range)
void q_cpaxistickertime_on_create_tick_vector(void* self, libqt_list /* of double */ (*callback)(void*, double, void*));

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAxisTickerTime*
/// @param subTickCount int
/// @param ticks libqt_list /* of double */
libqt_list /* of double */ q_cpaxistickertime_create_sub_tick_vector(void* self, int subTickCount, libqt_list ticks);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAxisTickerTime*
/// @param subTickCount int
/// @param ticks libqt_list /* of double */
libqt_list /* of double */ q_cpaxistickertime_qbase_create_sub_tick_vector(void* self, int subTickCount, libqt_list ticks);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAxisTickerTime*
/// @param callback libqt_list /* of double */ func(QCPAxisTickerTime* self, int subTickCount, libqt_list /* of double */ /* of double */)
void q_cpaxistickertime_on_create_sub_tick_vector(void* self, libqt_list /* of double */ (*callback)(void*, int, libqt_list));

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Caller is responsible for freeing the returned memory
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAxisTickerTime*
/// @param ticks libqt_list /* of double */
/// @param locale QLocale*
/// @param formatChar QChar*
/// @param precision int
const char** q_cpaxistickertime_create_label_vector(void* self, libqt_list ticks, void* locale, void* formatChar, int precision);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Caller is responsible for freeing the returned memory
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAxisTickerTime*
/// @param ticks libqt_list /* of double */
/// @param locale QLocale*
/// @param formatChar QChar*
/// @param precision int
const char** q_cpaxistickertime_qbase_create_label_vector(void* self, libqt_list ticks, void* locale, void* formatChar, int precision);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAxisTickerTime*
/// @param callback const char** func(QCPAxisTickerTime* self, libqt_list /* of double */ /* of double */, QLocale* locale, QChar* formatChar, int precision)
void q_cpaxistickertime_on_create_label_vector(void* self, const char** (*callback)(void*, libqt_list, void*, void*, int));

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAxisTickerTime*
/// @param range QCPRange*
/// @param ticks libqt_list /* of double */
/// @param keepOneOutlier bool
void q_cpaxistickertime_trim_ticks(void* self, void* range, libqt_list ticks, bool keepOneOutlier);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAxisTickerTime*
/// @param range QCPRange*
/// @param ticks libqt_list /* of double */
/// @param keepOneOutlier bool
void q_cpaxistickertime_qbase_trim_ticks(void* self, void* range, libqt_list ticks, bool keepOneOutlier);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAxisTickerTime*
/// @param callback void func(QCPAxisTickerTime* self, QCPRange* range, libqt_list /* of double */ /* of double */, bool keepOneOutlier)
void q_cpaxistickertime_on_trim_ticks(void* self, void (*callback)(void*, void*, libqt_list, bool));

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAxisTickerTime*
/// @param target double
/// @param candidates libqt_list /* of double */
double q_cpaxistickertime_pick_closest(void* self, double target, libqt_list candidates);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAxisTickerTime*
/// @param target double
/// @param candidates libqt_list /* of double */
double q_cpaxistickertime_qbase_pick_closest(void* self, double target, libqt_list candidates);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAxisTickerTime*
/// @param callback double func(QCPAxisTickerTime* self, double target, libqt_list /* of double */ /* of double */)
void q_cpaxistickertime_on_pick_closest(void* self, double (*callback)(void*, double, libqt_list));

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAxisTickerTime*
/// @param input double
double q_cpaxistickertime_get_mantissa(void* self, double input);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAxisTickerTime*
/// @param input double
double q_cpaxistickertime_qbase_get_mantissa(void* self, double input);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAxisTickerTime*
/// @param callback double func(QCPAxisTickerTime* self, double input)
void q_cpaxistickertime_on_get_mantissa(void* self, double (*callback)(void*, double));

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAxisTickerTime*
/// @param input double
double q_cpaxistickertime_clean_mantissa(void* self, double input);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAxisTickerTime*
/// @param input double
double q_cpaxistickertime_qbase_clean_mantissa(void* self, double input);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAxisTickerTime*
/// @param callback double func(QCPAxisTickerTime* self, double input)
void q_cpaxistickertime_on_clean_mantissa(void* self, double (*callback)(void*, double));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerTime.html)
///
/// Delete this object from C++ memory.
///
/// @param self QCPAxisTickerTime*
void q_cpaxistickertime_delete(void* self);

/// https://www.qcustomplot.com/documentation/classQCPAxisTickerFixed.html

/// q_cpaxistickerfixed_new constructs a new QCPAxisTickerFixed object.
///
QCPAxisTickerFixed* q_cpaxistickerfixed_new();

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerFixed.html)
///
/// @param self QCPAxisTickerFixed*
double q_cpaxistickerfixed_tick_step(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerFixed.html)
///
/// @param self QCPAxisTickerFixed*
///
/// @return enum QCPAxisTickerFixed__ScaleStrategy
int32_t q_cpaxistickerfixed_scale_strategy(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerFixed.html)
///
/// @param self QCPAxisTickerFixed*
/// @param step double
void q_cpaxistickerfixed_set_tick_step(void* self, double step);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerFixed.html)
///
/// @param self QCPAxisTickerFixed*
/// @param strategy enum QCPAxisTickerFixed__ScaleStrategy
void q_cpaxistickerfixed_set_scale_strategy(void* self, int32_t strategy);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerFixed.html)
///
/// @param self QCPAxisTickerFixed*
/// @param range QCPRange*
double q_cpaxistickerfixed_get_tick_step(void* self, void* range);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerFixed.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPAxisTickerFixed*
/// @param callback double func(QCPAxisTickerFixed* self, QCPRange* range)
void q_cpaxistickerfixed_on_get_tick_step(void* self, double (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerFixed.html)
///
/// Base class method implementation
///
/// @param self QCPAxisTickerFixed*
/// @param range QCPRange*
double q_cpaxistickerfixed_qbase_get_tick_step(void* self, void* range);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// @param self QCPAxisTickerFixed*
///
/// @return enum QCPAxisTicker__TickStepStrategy
int32_t q_cpaxistickerfixed_tick_step_strategy(void* self);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// @param self QCPAxisTickerFixed*
int32_t q_cpaxistickerfixed_tick_count(void* self);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// @param self QCPAxisTickerFixed*
double q_cpaxistickerfixed_tick_origin(void* self);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// @param self QCPAxisTickerFixed*
/// @param strategy enum QCPAxisTicker__TickStepStrategy
void q_cpaxistickerfixed_set_tick_step_strategy(void* self, int32_t strategy);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// @param self QCPAxisTickerFixed*
/// @param count int
void q_cpaxistickerfixed_set_tick_count(void* self, int count);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// @param self QCPAxisTickerFixed*
/// @param origin double
void q_cpaxistickerfixed_set_tick_origin(void* self, double origin);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAxisTickerFixed*
/// @param range QCPRange*
/// @param locale QLocale*
/// @param formatChar QChar*
/// @param precision int
/// @param ticks libqt_list /* of double */
/// @param subTicks libqt_list /* of double */
/// @param tickLabels const char**
void q_cpaxistickerfixed_generate(void* self, void* range, void* locale, void* formatChar, int precision, libqt_list ticks, libqt_list subTicks, const char* tickLabels[]);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAxisTickerFixed*
/// @param range QCPRange*
/// @param locale QLocale*
/// @param formatChar QChar*
/// @param precision int
/// @param ticks libqt_list /* of double */
/// @param subTicks libqt_list /* of double */
/// @param tickLabels const char**
void q_cpaxistickerfixed_qbase_generate(void* self, void* range, void* locale, void* formatChar, int precision, libqt_list ticks, libqt_list subTicks, const char* tickLabels[]);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAxisTickerFixed*
/// @param callback void func(QCPAxisTickerFixed* self, QCPRange* range, QLocale* locale, QChar* formatChar, int precision, libqt_list /* of double */ /* of double */, libqt_list /* of double */ /* of double */, const char** tickLabels)
void q_cpaxistickerfixed_on_generate(void* self, void (*callback)(void*, void*, void*, void*, int, libqt_list, libqt_list, const char**));

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAxisTickerFixed*
/// @param tickStep double
int32_t q_cpaxistickerfixed_get_sub_tick_count(void* self, double tickStep);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAxisTickerFixed*
/// @param tickStep double
int32_t q_cpaxistickerfixed_qbase_get_sub_tick_count(void* self, double tickStep);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAxisTickerFixed*
/// @param callback int32_t func(QCPAxisTickerFixed* self, double tickStep)
void q_cpaxistickerfixed_on_get_sub_tick_count(void* self, int32_t (*callback)(void*, double));

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Caller is responsible for freeing the returned memory
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAxisTickerFixed*
/// @param tick double
/// @param locale QLocale*
/// @param formatChar QChar*
/// @param precision int
const char* q_cpaxistickerfixed_get_tick_label(void* self, double tick, void* locale, void* formatChar, int precision);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Caller is responsible for freeing the returned memory
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAxisTickerFixed*
/// @param tick double
/// @param locale QLocale*
/// @param formatChar QChar*
/// @param precision int
const char* q_cpaxistickerfixed_qbase_get_tick_label(void* self, double tick, void* locale, void* formatChar, int precision);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAxisTickerFixed*
/// @param callback const char* func(QCPAxisTickerFixed* self, double tick, QLocale* locale, QChar* formatChar, int precision)
void q_cpaxistickerfixed_on_get_tick_label(void* self, const char* (*callback)(void*, double, void*, void*, int));

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAxisTickerFixed*
/// @param tickStep double
/// @param range QCPRange*
libqt_list /* of double */ q_cpaxistickerfixed_create_tick_vector(void* self, double tickStep, void* range);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAxisTickerFixed*
/// @param tickStep double
/// @param range QCPRange*
libqt_list /* of double */ q_cpaxistickerfixed_qbase_create_tick_vector(void* self, double tickStep, void* range);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAxisTickerFixed*
/// @param callback libqt_list /* of double */ func(QCPAxisTickerFixed* self, double tickStep, QCPRange* range)
void q_cpaxistickerfixed_on_create_tick_vector(void* self, libqt_list /* of double */ (*callback)(void*, double, void*));

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAxisTickerFixed*
/// @param subTickCount int
/// @param ticks libqt_list /* of double */
libqt_list /* of double */ q_cpaxistickerfixed_create_sub_tick_vector(void* self, int subTickCount, libqt_list ticks);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAxisTickerFixed*
/// @param subTickCount int
/// @param ticks libqt_list /* of double */
libqt_list /* of double */ q_cpaxistickerfixed_qbase_create_sub_tick_vector(void* self, int subTickCount, libqt_list ticks);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAxisTickerFixed*
/// @param callback libqt_list /* of double */ func(QCPAxisTickerFixed* self, int subTickCount, libqt_list /* of double */ /* of double */)
void q_cpaxistickerfixed_on_create_sub_tick_vector(void* self, libqt_list /* of double */ (*callback)(void*, int, libqt_list));

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Caller is responsible for freeing the returned memory
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAxisTickerFixed*
/// @param ticks libqt_list /* of double */
/// @param locale QLocale*
/// @param formatChar QChar*
/// @param precision int
const char** q_cpaxistickerfixed_create_label_vector(void* self, libqt_list ticks, void* locale, void* formatChar, int precision);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Caller is responsible for freeing the returned memory
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAxisTickerFixed*
/// @param ticks libqt_list /* of double */
/// @param locale QLocale*
/// @param formatChar QChar*
/// @param precision int
const char** q_cpaxistickerfixed_qbase_create_label_vector(void* self, libqt_list ticks, void* locale, void* formatChar, int precision);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAxisTickerFixed*
/// @param callback const char** func(QCPAxisTickerFixed* self, libqt_list /* of double */ /* of double */, QLocale* locale, QChar* formatChar, int precision)
void q_cpaxistickerfixed_on_create_label_vector(void* self, const char** (*callback)(void*, libqt_list, void*, void*, int));

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAxisTickerFixed*
/// @param range QCPRange*
/// @param ticks libqt_list /* of double */
/// @param keepOneOutlier bool
void q_cpaxistickerfixed_trim_ticks(void* self, void* range, libqt_list ticks, bool keepOneOutlier);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAxisTickerFixed*
/// @param range QCPRange*
/// @param ticks libqt_list /* of double */
/// @param keepOneOutlier bool
void q_cpaxistickerfixed_qbase_trim_ticks(void* self, void* range, libqt_list ticks, bool keepOneOutlier);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAxisTickerFixed*
/// @param callback void func(QCPAxisTickerFixed* self, QCPRange* range, libqt_list /* of double */ /* of double */, bool keepOneOutlier)
void q_cpaxistickerfixed_on_trim_ticks(void* self, void (*callback)(void*, void*, libqt_list, bool));

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAxisTickerFixed*
/// @param target double
/// @param candidates libqt_list /* of double */
double q_cpaxistickerfixed_pick_closest(void* self, double target, libqt_list candidates);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAxisTickerFixed*
/// @param target double
/// @param candidates libqt_list /* of double */
double q_cpaxistickerfixed_qbase_pick_closest(void* self, double target, libqt_list candidates);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAxisTickerFixed*
/// @param callback double func(QCPAxisTickerFixed* self, double target, libqt_list /* of double */ /* of double */)
void q_cpaxistickerfixed_on_pick_closest(void* self, double (*callback)(void*, double, libqt_list));

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAxisTickerFixed*
/// @param input double
double q_cpaxistickerfixed_get_mantissa(void* self, double input);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAxisTickerFixed*
/// @param input double
double q_cpaxistickerfixed_qbase_get_mantissa(void* self, double input);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAxisTickerFixed*
/// @param callback double func(QCPAxisTickerFixed* self, double input)
void q_cpaxistickerfixed_on_get_mantissa(void* self, double (*callback)(void*, double));

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAxisTickerFixed*
/// @param input double
double q_cpaxistickerfixed_clean_mantissa(void* self, double input);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAxisTickerFixed*
/// @param input double
double q_cpaxistickerfixed_qbase_clean_mantissa(void* self, double input);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAxisTickerFixed*
/// @param callback double func(QCPAxisTickerFixed* self, double input)
void q_cpaxistickerfixed_on_clean_mantissa(void* self, double (*callback)(void*, double));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerFixed.html)
///
/// Delete this object from C++ memory.
///
/// @param self QCPAxisTickerFixed*
void q_cpaxistickerfixed_delete(void* self);

/// https://www.qcustomplot.com/documentation/classQCPAxisTickerText.html

/// q_cpaxistickertext_new constructs a new QCPAxisTickerText object.
///
QCPAxisTickerText* q_cpaxistickertext_new();

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerText.html)
///
/// @param self QCPAxisTickerText*
libqt_map /* of double to const char* */ q_cpaxistickertext_ticks(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerText.html)
///
/// @param self QCPAxisTickerText*
int32_t q_cpaxistickertext_sub_tick_count(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerText.html)
///
/// @param self QCPAxisTickerText*
/// @param ticks libqt_map /* of double to const char* */
void q_cpaxistickertext_set_ticks(void* self, libqt_map /* of double to const char* */ ticks);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerText.html)
///
/// @param self QCPAxisTickerText*
/// @param positions libqt_list /* of double */
/// @param labels const char**
void q_cpaxistickertext_set_ticks2(void* self, libqt_list positions, const char* labels[]);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerText.html)
///
/// @param self QCPAxisTickerText*
/// @param subTicks int
void q_cpaxistickertext_set_sub_tick_count(void* self, int subTicks);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerText.html)
///
/// @param self QCPAxisTickerText*
void q_cpaxistickertext_clear(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerText.html)
///
/// @param self QCPAxisTickerText*
/// @param position double
/// @param label const char*
void q_cpaxistickertext_add_tick(void* self, double position, const char* label);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerText.html)
///
/// @param self QCPAxisTickerText*
/// @param ticks libqt_map /* of double to const char* */
void q_cpaxistickertext_add_ticks(void* self, libqt_map /* of double to const char* */ ticks);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerText.html)
///
/// @param self QCPAxisTickerText*
/// @param positions libqt_list /* of double */
/// @param labels const char**
void q_cpaxistickertext_add_ticks2(void* self, libqt_list positions, const char* labels[]);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerText.html)
///
/// @param self QCPAxisTickerText*
/// @param range QCPRange*
double q_cpaxistickertext_get_tick_step(void* self, void* range);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerText.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPAxisTickerText*
/// @param callback double func(QCPAxisTickerText* self, QCPRange* range)
void q_cpaxistickertext_on_get_tick_step(void* self, double (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerText.html)
///
/// Base class method implementation
///
/// @param self QCPAxisTickerText*
/// @param range QCPRange*
double q_cpaxistickertext_qbase_get_tick_step(void* self, void* range);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerText.html)
///
/// @param self QCPAxisTickerText*
/// @param tickStep double
int32_t q_cpaxistickertext_get_sub_tick_count(void* self, double tickStep);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerText.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPAxisTickerText*
/// @param callback int32_t func(QCPAxisTickerText* self, double tickStep)
void q_cpaxistickertext_on_get_sub_tick_count(void* self, int32_t (*callback)(void*, double));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerText.html)
///
/// Base class method implementation
///
/// @param self QCPAxisTickerText*
/// @param tickStep double
int32_t q_cpaxistickertext_qbase_get_sub_tick_count(void* self, double tickStep);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerText.html)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPAxisTickerText*
/// @param tick double
/// @param locale QLocale*
/// @param formatChar QChar*
/// @param precision int
const char* q_cpaxistickertext_get_tick_label(void* self, double tick, void* locale, void* formatChar, int precision);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerText.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPAxisTickerText*
/// @param callback const char* func(QCPAxisTickerText* self, double tick, QLocale* locale, QChar* formatChar, int precision)
void q_cpaxistickertext_on_get_tick_label(void* self, const char* (*callback)(void*, double, void*, void*, int));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerText.html)
///
/// Base class method implementation
///
/// @param self QCPAxisTickerText*
/// @param tick double
/// @param locale QLocale*
/// @param formatChar QChar*
/// @param precision int
const char* q_cpaxistickertext_qbase_get_tick_label(void* self, double tick, void* locale, void* formatChar, int precision);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerText.html)
///
/// @param self QCPAxisTickerText*
/// @param tickStep double
/// @param range QCPRange*
libqt_list /* of double */ q_cpaxistickertext_create_tick_vector(void* self, double tickStep, void* range);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerText.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPAxisTickerText*
/// @param callback libqt_list /* of double */ func(QCPAxisTickerText* self, double tickStep, QCPRange* range)
void q_cpaxistickertext_on_create_tick_vector(void* self, libqt_list /* of double */ (*callback)(void*, double, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerText.html)
///
/// Base class method implementation
///
/// @param self QCPAxisTickerText*
/// @param tickStep double
/// @param range QCPRange*
libqt_list /* of double */ q_cpaxistickertext_qbase_create_tick_vector(void* self, double tickStep, void* range);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// @param self QCPAxisTickerText*
///
/// @return enum QCPAxisTicker__TickStepStrategy
int32_t q_cpaxistickertext_tick_step_strategy(void* self);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// @param self QCPAxisTickerText*
int32_t q_cpaxistickertext_tick_count(void* self);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// @param self QCPAxisTickerText*
double q_cpaxistickertext_tick_origin(void* self);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// @param self QCPAxisTickerText*
/// @param strategy enum QCPAxisTicker__TickStepStrategy
void q_cpaxistickertext_set_tick_step_strategy(void* self, int32_t strategy);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// @param self QCPAxisTickerText*
/// @param count int
void q_cpaxistickertext_set_tick_count(void* self, int count);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// @param self QCPAxisTickerText*
/// @param origin double
void q_cpaxistickertext_set_tick_origin(void* self, double origin);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAxisTickerText*
/// @param range QCPRange*
/// @param locale QLocale*
/// @param formatChar QChar*
/// @param precision int
/// @param ticks libqt_list /* of double */
/// @param subTicks libqt_list /* of double */
/// @param tickLabels const char**
void q_cpaxistickertext_generate(void* self, void* range, void* locale, void* formatChar, int precision, libqt_list ticks, libqt_list subTicks, const char* tickLabels[]);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAxisTickerText*
/// @param range QCPRange*
/// @param locale QLocale*
/// @param formatChar QChar*
/// @param precision int
/// @param ticks libqt_list /* of double */
/// @param subTicks libqt_list /* of double */
/// @param tickLabels const char**
void q_cpaxistickertext_qbase_generate(void* self, void* range, void* locale, void* formatChar, int precision, libqt_list ticks, libqt_list subTicks, const char* tickLabels[]);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAxisTickerText*
/// @param callback void func(QCPAxisTickerText* self, QCPRange* range, QLocale* locale, QChar* formatChar, int precision, libqt_list /* of double */ /* of double */, libqt_list /* of double */ /* of double */, const char** tickLabels)
void q_cpaxistickertext_on_generate(void* self, void (*callback)(void*, void*, void*, void*, int, libqt_list, libqt_list, const char**));

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAxisTickerText*
/// @param subTickCount int
/// @param ticks libqt_list /* of double */
libqt_list /* of double */ q_cpaxistickertext_create_sub_tick_vector(void* self, int subTickCount, libqt_list ticks);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAxisTickerText*
/// @param subTickCount int
/// @param ticks libqt_list /* of double */
libqt_list /* of double */ q_cpaxistickertext_qbase_create_sub_tick_vector(void* self, int subTickCount, libqt_list ticks);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAxisTickerText*
/// @param callback libqt_list /* of double */ func(QCPAxisTickerText* self, int subTickCount, libqt_list /* of double */ /* of double */)
void q_cpaxistickertext_on_create_sub_tick_vector(void* self, libqt_list /* of double */ (*callback)(void*, int, libqt_list));

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Caller is responsible for freeing the returned memory
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAxisTickerText*
/// @param ticks libqt_list /* of double */
/// @param locale QLocale*
/// @param formatChar QChar*
/// @param precision int
const char** q_cpaxistickertext_create_label_vector(void* self, libqt_list ticks, void* locale, void* formatChar, int precision);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Caller is responsible for freeing the returned memory
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAxisTickerText*
/// @param ticks libqt_list /* of double */
/// @param locale QLocale*
/// @param formatChar QChar*
/// @param precision int
const char** q_cpaxistickertext_qbase_create_label_vector(void* self, libqt_list ticks, void* locale, void* formatChar, int precision);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAxisTickerText*
/// @param callback const char** func(QCPAxisTickerText* self, libqt_list /* of double */ /* of double */, QLocale* locale, QChar* formatChar, int precision)
void q_cpaxistickertext_on_create_label_vector(void* self, const char** (*callback)(void*, libqt_list, void*, void*, int));

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAxisTickerText*
/// @param range QCPRange*
/// @param ticks libqt_list /* of double */
/// @param keepOneOutlier bool
void q_cpaxistickertext_trim_ticks(void* self, void* range, libqt_list ticks, bool keepOneOutlier);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAxisTickerText*
/// @param range QCPRange*
/// @param ticks libqt_list /* of double */
/// @param keepOneOutlier bool
void q_cpaxistickertext_qbase_trim_ticks(void* self, void* range, libqt_list ticks, bool keepOneOutlier);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAxisTickerText*
/// @param callback void func(QCPAxisTickerText* self, QCPRange* range, libqt_list /* of double */ /* of double */, bool keepOneOutlier)
void q_cpaxistickertext_on_trim_ticks(void* self, void (*callback)(void*, void*, libqt_list, bool));

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAxisTickerText*
/// @param target double
/// @param candidates libqt_list /* of double */
double q_cpaxistickertext_pick_closest(void* self, double target, libqt_list candidates);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAxisTickerText*
/// @param target double
/// @param candidates libqt_list /* of double */
double q_cpaxistickertext_qbase_pick_closest(void* self, double target, libqt_list candidates);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAxisTickerText*
/// @param callback double func(QCPAxisTickerText* self, double target, libqt_list /* of double */ /* of double */)
void q_cpaxistickertext_on_pick_closest(void* self, double (*callback)(void*, double, libqt_list));

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAxisTickerText*
/// @param input double
double q_cpaxistickertext_get_mantissa(void* self, double input);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAxisTickerText*
/// @param input double
double q_cpaxistickertext_qbase_get_mantissa(void* self, double input);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAxisTickerText*
/// @param callback double func(QCPAxisTickerText* self, double input)
void q_cpaxistickertext_on_get_mantissa(void* self, double (*callback)(void*, double));

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAxisTickerText*
/// @param input double
double q_cpaxistickertext_clean_mantissa(void* self, double input);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAxisTickerText*
/// @param input double
double q_cpaxistickertext_qbase_clean_mantissa(void* self, double input);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAxisTickerText*
/// @param callback double func(QCPAxisTickerText* self, double input)
void q_cpaxistickertext_on_clean_mantissa(void* self, double (*callback)(void*, double));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerText.html)
///
/// Delete this object from C++ memory.
///
/// @param self QCPAxisTickerText*
void q_cpaxistickertext_delete(void* self);

/// https://www.qcustomplot.com/documentation/classQCPAxisTickerPi.html

/// q_cpaxistickerpi_new constructs a new QCPAxisTickerPi object.
///
QCPAxisTickerPi* q_cpaxistickerpi_new();

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerPi.html)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPAxisTickerPi*
const char* q_cpaxistickerpi_pi_symbol(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerPi.html)
///
/// @param self QCPAxisTickerPi*
double q_cpaxistickerpi_pi_value(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerPi.html)
///
/// @param self QCPAxisTickerPi*
bool q_cpaxistickerpi_periodicity(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerPi.html)
///
/// @param self QCPAxisTickerPi*
///
/// @return enum QCPAxisTickerPi__FractionStyle
int32_t q_cpaxistickerpi_fraction_style(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerPi.html)
///
/// @param self QCPAxisTickerPi*
/// @param symbol const char*
void q_cpaxistickerpi_set_pi_symbol(void* self, const char* symbol);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerPi.html)
///
/// @param self QCPAxisTickerPi*
/// @param pi double
void q_cpaxistickerpi_set_pi_value(void* self, double pi);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerPi.html)
///
/// @param self QCPAxisTickerPi*
/// @param multiplesOfPi int
void q_cpaxistickerpi_set_periodicity(void* self, int multiplesOfPi);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerPi.html)
///
/// @param self QCPAxisTickerPi*
/// @param style enum QCPAxisTickerPi__FractionStyle
void q_cpaxistickerpi_set_fraction_style(void* self, int32_t style);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerPi.html)
///
/// @param self QCPAxisTickerPi*
/// @param range QCPRange*
double q_cpaxistickerpi_get_tick_step(void* self, void* range);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerPi.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPAxisTickerPi*
/// @param callback double func(QCPAxisTickerPi* self, QCPRange* range)
void q_cpaxistickerpi_on_get_tick_step(void* self, double (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerPi.html)
///
/// Base class method implementation
///
/// @param self QCPAxisTickerPi*
/// @param range QCPRange*
double q_cpaxistickerpi_qbase_get_tick_step(void* self, void* range);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerPi.html)
///
/// @param self QCPAxisTickerPi*
/// @param tickStep double
int32_t q_cpaxistickerpi_get_sub_tick_count(void* self, double tickStep);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerPi.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPAxisTickerPi*
/// @param callback int32_t func(QCPAxisTickerPi* self, double tickStep)
void q_cpaxistickerpi_on_get_sub_tick_count(void* self, int32_t (*callback)(void*, double));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerPi.html)
///
/// Base class method implementation
///
/// @param self QCPAxisTickerPi*
/// @param tickStep double
int32_t q_cpaxistickerpi_qbase_get_sub_tick_count(void* self, double tickStep);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerPi.html)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPAxisTickerPi*
/// @param tick double
/// @param locale QLocale*
/// @param formatChar QChar*
/// @param precision int
const char* q_cpaxistickerpi_get_tick_label(void* self, double tick, void* locale, void* formatChar, int precision);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerPi.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPAxisTickerPi*
/// @param callback const char* func(QCPAxisTickerPi* self, double tick, QLocale* locale, QChar* formatChar, int precision)
void q_cpaxistickerpi_on_get_tick_label(void* self, const char* (*callback)(void*, double, void*, void*, int));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerPi.html)
///
/// Base class method implementation
///
/// @param self QCPAxisTickerPi*
/// @param tick double
/// @param locale QLocale*
/// @param formatChar QChar*
/// @param precision int
const char* q_cpaxistickerpi_qbase_get_tick_label(void* self, double tick, void* locale, void* formatChar, int precision);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerPi.html)
///
/// @param self QCPAxisTickerPi*
/// @param numerator int*
/// @param denominator int*
void q_cpaxistickerpi_simplify_fraction(void* self, int* numerator, int* denominator);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerPi.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPAxisTickerPi*
/// @param callback void func(QCPAxisTickerPi* self, int* numerator, int* denominator)
void q_cpaxistickerpi_on_simplify_fraction(void* self, void (*callback)(void*, int*, int*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerPi.html)
///
/// Base class method implementation
///
/// @param self QCPAxisTickerPi*
/// @param numerator int*
/// @param denominator int*
void q_cpaxistickerpi_qbase_simplify_fraction(void* self, int* numerator, int* denominator);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerPi.html)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPAxisTickerPi*
/// @param numerator int
/// @param denominator int
const char* q_cpaxistickerpi_fraction_to_string(void* self, int numerator, int denominator);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerPi.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPAxisTickerPi*
/// @param callback const char* func(QCPAxisTickerPi* self, int numerator, int denominator)
void q_cpaxistickerpi_on_fraction_to_string(void* self, const char* (*callback)(void*, int, int));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerPi.html)
///
/// Base class method implementation
///
/// @param self QCPAxisTickerPi*
/// @param numerator int
/// @param denominator int
const char* q_cpaxistickerpi_qbase_fraction_to_string(void* self, int numerator, int denominator);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerPi.html)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPAxisTickerPi*
/// @param numerator int
/// @param denominator int
const char* q_cpaxistickerpi_unicode_fraction(void* self, int numerator, int denominator);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerPi.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPAxisTickerPi*
/// @param callback const char* func(QCPAxisTickerPi* self, int numerator, int denominator)
void q_cpaxistickerpi_on_unicode_fraction(void* self, const char* (*callback)(void*, int, int));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerPi.html)
///
/// Base class method implementation
///
/// @param self QCPAxisTickerPi*
/// @param numerator int
/// @param denominator int
const char* q_cpaxistickerpi_qbase_unicode_fraction(void* self, int numerator, int denominator);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerPi.html)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPAxisTickerPi*
/// @param number int
const char* q_cpaxistickerpi_unicode_superscript(void* self, int number);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerPi.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPAxisTickerPi*
/// @param callback const char* func(QCPAxisTickerPi* self, int number)
void q_cpaxistickerpi_on_unicode_superscript(void* self, const char* (*callback)(void*, int));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerPi.html)
///
/// Base class method implementation
///
/// @param self QCPAxisTickerPi*
/// @param number int
const char* q_cpaxistickerpi_qbase_unicode_superscript(void* self, int number);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerPi.html)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPAxisTickerPi*
/// @param number int
const char* q_cpaxistickerpi_unicode_subscript(void* self, int number);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerPi.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPAxisTickerPi*
/// @param callback const char* func(QCPAxisTickerPi* self, int number)
void q_cpaxistickerpi_on_unicode_subscript(void* self, const char* (*callback)(void*, int));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerPi.html)
///
/// Base class method implementation
///
/// @param self QCPAxisTickerPi*
/// @param number int
const char* q_cpaxistickerpi_qbase_unicode_subscript(void* self, int number);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// @param self QCPAxisTickerPi*
///
/// @return enum QCPAxisTicker__TickStepStrategy
int32_t q_cpaxistickerpi_tick_step_strategy(void* self);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// @param self QCPAxisTickerPi*
int32_t q_cpaxistickerpi_tick_count(void* self);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// @param self QCPAxisTickerPi*
double q_cpaxistickerpi_tick_origin(void* self);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// @param self QCPAxisTickerPi*
/// @param strategy enum QCPAxisTicker__TickStepStrategy
void q_cpaxistickerpi_set_tick_step_strategy(void* self, int32_t strategy);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// @param self QCPAxisTickerPi*
/// @param count int
void q_cpaxistickerpi_set_tick_count(void* self, int count);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// @param self QCPAxisTickerPi*
/// @param origin double
void q_cpaxistickerpi_set_tick_origin(void* self, double origin);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAxisTickerPi*
/// @param range QCPRange*
/// @param locale QLocale*
/// @param formatChar QChar*
/// @param precision int
/// @param ticks libqt_list /* of double */
/// @param subTicks libqt_list /* of double */
/// @param tickLabels const char**
void q_cpaxistickerpi_generate(void* self, void* range, void* locale, void* formatChar, int precision, libqt_list ticks, libqt_list subTicks, const char* tickLabels[]);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAxisTickerPi*
/// @param range QCPRange*
/// @param locale QLocale*
/// @param formatChar QChar*
/// @param precision int
/// @param ticks libqt_list /* of double */
/// @param subTicks libqt_list /* of double */
/// @param tickLabels const char**
void q_cpaxistickerpi_qbase_generate(void* self, void* range, void* locale, void* formatChar, int precision, libqt_list ticks, libqt_list subTicks, const char* tickLabels[]);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAxisTickerPi*
/// @param callback void func(QCPAxisTickerPi* self, QCPRange* range, QLocale* locale, QChar* formatChar, int precision, libqt_list /* of double */ /* of double */, libqt_list /* of double */ /* of double */, const char** tickLabels)
void q_cpaxistickerpi_on_generate(void* self, void (*callback)(void*, void*, void*, void*, int, libqt_list, libqt_list, const char**));

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAxisTickerPi*
/// @param tickStep double
/// @param range QCPRange*
libqt_list /* of double */ q_cpaxistickerpi_create_tick_vector(void* self, double tickStep, void* range);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAxisTickerPi*
/// @param tickStep double
/// @param range QCPRange*
libqt_list /* of double */ q_cpaxistickerpi_qbase_create_tick_vector(void* self, double tickStep, void* range);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAxisTickerPi*
/// @param callback libqt_list /* of double */ func(QCPAxisTickerPi* self, double tickStep, QCPRange* range)
void q_cpaxistickerpi_on_create_tick_vector(void* self, libqt_list /* of double */ (*callback)(void*, double, void*));

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAxisTickerPi*
/// @param subTickCount int
/// @param ticks libqt_list /* of double */
libqt_list /* of double */ q_cpaxistickerpi_create_sub_tick_vector(void* self, int subTickCount, libqt_list ticks);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAxisTickerPi*
/// @param subTickCount int
/// @param ticks libqt_list /* of double */
libqt_list /* of double */ q_cpaxistickerpi_qbase_create_sub_tick_vector(void* self, int subTickCount, libqt_list ticks);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAxisTickerPi*
/// @param callback libqt_list /* of double */ func(QCPAxisTickerPi* self, int subTickCount, libqt_list /* of double */ /* of double */)
void q_cpaxistickerpi_on_create_sub_tick_vector(void* self, libqt_list /* of double */ (*callback)(void*, int, libqt_list));

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Caller is responsible for freeing the returned memory
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAxisTickerPi*
/// @param ticks libqt_list /* of double */
/// @param locale QLocale*
/// @param formatChar QChar*
/// @param precision int
const char** q_cpaxistickerpi_create_label_vector(void* self, libqt_list ticks, void* locale, void* formatChar, int precision);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Caller is responsible for freeing the returned memory
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAxisTickerPi*
/// @param ticks libqt_list /* of double */
/// @param locale QLocale*
/// @param formatChar QChar*
/// @param precision int
const char** q_cpaxistickerpi_qbase_create_label_vector(void* self, libqt_list ticks, void* locale, void* formatChar, int precision);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAxisTickerPi*
/// @param callback const char** func(QCPAxisTickerPi* self, libqt_list /* of double */ /* of double */, QLocale* locale, QChar* formatChar, int precision)
void q_cpaxistickerpi_on_create_label_vector(void* self, const char** (*callback)(void*, libqt_list, void*, void*, int));

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAxisTickerPi*
/// @param range QCPRange*
/// @param ticks libqt_list /* of double */
/// @param keepOneOutlier bool
void q_cpaxistickerpi_trim_ticks(void* self, void* range, libqt_list ticks, bool keepOneOutlier);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAxisTickerPi*
/// @param range QCPRange*
/// @param ticks libqt_list /* of double */
/// @param keepOneOutlier bool
void q_cpaxistickerpi_qbase_trim_ticks(void* self, void* range, libqt_list ticks, bool keepOneOutlier);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAxisTickerPi*
/// @param callback void func(QCPAxisTickerPi* self, QCPRange* range, libqt_list /* of double */ /* of double */, bool keepOneOutlier)
void q_cpaxistickerpi_on_trim_ticks(void* self, void (*callback)(void*, void*, libqt_list, bool));

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAxisTickerPi*
/// @param target double
/// @param candidates libqt_list /* of double */
double q_cpaxistickerpi_pick_closest(void* self, double target, libqt_list candidates);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAxisTickerPi*
/// @param target double
/// @param candidates libqt_list /* of double */
double q_cpaxistickerpi_qbase_pick_closest(void* self, double target, libqt_list candidates);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAxisTickerPi*
/// @param callback double func(QCPAxisTickerPi* self, double target, libqt_list /* of double */ /* of double */)
void q_cpaxistickerpi_on_pick_closest(void* self, double (*callback)(void*, double, libqt_list));

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAxisTickerPi*
/// @param input double
double q_cpaxistickerpi_get_mantissa(void* self, double input);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAxisTickerPi*
/// @param input double
double q_cpaxistickerpi_qbase_get_mantissa(void* self, double input);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAxisTickerPi*
/// @param callback double func(QCPAxisTickerPi* self, double input)
void q_cpaxistickerpi_on_get_mantissa(void* self, double (*callback)(void*, double));

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAxisTickerPi*
/// @param input double
double q_cpaxistickerpi_clean_mantissa(void* self, double input);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAxisTickerPi*
/// @param input double
double q_cpaxistickerpi_qbase_clean_mantissa(void* self, double input);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAxisTickerPi*
/// @param callback double func(QCPAxisTickerPi* self, double input)
void q_cpaxistickerpi_on_clean_mantissa(void* self, double (*callback)(void*, double));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerPi.html)
///
/// Delete this object from C++ memory.
///
/// @param self QCPAxisTickerPi*
void q_cpaxistickerpi_delete(void* self);

/// https://www.qcustomplot.com/documentation/classQCPAxisTickerLog.html

/// q_cpaxistickerlog_new constructs a new QCPAxisTickerLog object.
///
QCPAxisTickerLog* q_cpaxistickerlog_new();

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerLog.html)
///
/// @param self QCPAxisTickerLog*
double q_cpaxistickerlog_log_base(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerLog.html)
///
/// @param self QCPAxisTickerLog*
int32_t q_cpaxistickerlog_sub_tick_count(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerLog.html)
///
/// @param self QCPAxisTickerLog*
/// @param base double
void q_cpaxistickerlog_set_log_base(void* self, double base);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerLog.html)
///
/// @param self QCPAxisTickerLog*
/// @param subTicks int
void q_cpaxistickerlog_set_sub_tick_count(void* self, int subTicks);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerLog.html)
///
/// @param self QCPAxisTickerLog*
/// @param tickStep double
int32_t q_cpaxistickerlog_get_sub_tick_count(void* self, double tickStep);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerLog.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPAxisTickerLog*
/// @param callback int32_t func(QCPAxisTickerLog* self, double tickStep)
void q_cpaxistickerlog_on_get_sub_tick_count(void* self, int32_t (*callback)(void*, double));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerLog.html)
///
/// Base class method implementation
///
/// @param self QCPAxisTickerLog*
/// @param tickStep double
int32_t q_cpaxistickerlog_qbase_get_sub_tick_count(void* self, double tickStep);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerLog.html)
///
/// @param self QCPAxisTickerLog*
/// @param tickStep double
/// @param range QCPRange*
libqt_list /* of double */ q_cpaxistickerlog_create_tick_vector(void* self, double tickStep, void* range);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerLog.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPAxisTickerLog*
/// @param callback libqt_list /* of double */ func(QCPAxisTickerLog* self, double tickStep, QCPRange* range)
void q_cpaxistickerlog_on_create_tick_vector(void* self, libqt_list /* of double */ (*callback)(void*, double, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerLog.html)
///
/// Base class method implementation
///
/// @param self QCPAxisTickerLog*
/// @param tickStep double
/// @param range QCPRange*
libqt_list /* of double */ q_cpaxistickerlog_qbase_create_tick_vector(void* self, double tickStep, void* range);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// @param self QCPAxisTickerLog*
///
/// @return enum QCPAxisTicker__TickStepStrategy
int32_t q_cpaxistickerlog_tick_step_strategy(void* self);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// @param self QCPAxisTickerLog*
int32_t q_cpaxistickerlog_tick_count(void* self);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// @param self QCPAxisTickerLog*
double q_cpaxistickerlog_tick_origin(void* self);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// @param self QCPAxisTickerLog*
/// @param strategy enum QCPAxisTicker__TickStepStrategy
void q_cpaxistickerlog_set_tick_step_strategy(void* self, int32_t strategy);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// @param self QCPAxisTickerLog*
/// @param count int
void q_cpaxistickerlog_set_tick_count(void* self, int count);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// @param self QCPAxisTickerLog*
/// @param origin double
void q_cpaxistickerlog_set_tick_origin(void* self, double origin);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAxisTickerLog*
/// @param range QCPRange*
/// @param locale QLocale*
/// @param formatChar QChar*
/// @param precision int
/// @param ticks libqt_list /* of double */
/// @param subTicks libqt_list /* of double */
/// @param tickLabels const char**
void q_cpaxistickerlog_generate(void* self, void* range, void* locale, void* formatChar, int precision, libqt_list ticks, libqt_list subTicks, const char* tickLabels[]);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAxisTickerLog*
/// @param range QCPRange*
/// @param locale QLocale*
/// @param formatChar QChar*
/// @param precision int
/// @param ticks libqt_list /* of double */
/// @param subTicks libqt_list /* of double */
/// @param tickLabels const char**
void q_cpaxistickerlog_qbase_generate(void* self, void* range, void* locale, void* formatChar, int precision, libqt_list ticks, libqt_list subTicks, const char* tickLabels[]);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAxisTickerLog*
/// @param callback void func(QCPAxisTickerLog* self, QCPRange* range, QLocale* locale, QChar* formatChar, int precision, libqt_list /* of double */ /* of double */, libqt_list /* of double */ /* of double */, const char** tickLabels)
void q_cpaxistickerlog_on_generate(void* self, void (*callback)(void*, void*, void*, void*, int, libqt_list, libqt_list, const char**));

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAxisTickerLog*
/// @param range QCPRange*
double q_cpaxistickerlog_get_tick_step(void* self, void* range);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAxisTickerLog*
/// @param range QCPRange*
double q_cpaxistickerlog_qbase_get_tick_step(void* self, void* range);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAxisTickerLog*
/// @param callback double func(QCPAxisTickerLog* self, QCPRange* range)
void q_cpaxistickerlog_on_get_tick_step(void* self, double (*callback)(void*, void*));

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Caller is responsible for freeing the returned memory
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAxisTickerLog*
/// @param tick double
/// @param locale QLocale*
/// @param formatChar QChar*
/// @param precision int
const char* q_cpaxistickerlog_get_tick_label(void* self, double tick, void* locale, void* formatChar, int precision);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Caller is responsible for freeing the returned memory
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAxisTickerLog*
/// @param tick double
/// @param locale QLocale*
/// @param formatChar QChar*
/// @param precision int
const char* q_cpaxistickerlog_qbase_get_tick_label(void* self, double tick, void* locale, void* formatChar, int precision);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAxisTickerLog*
/// @param callback const char* func(QCPAxisTickerLog* self, double tick, QLocale* locale, QChar* formatChar, int precision)
void q_cpaxistickerlog_on_get_tick_label(void* self, const char* (*callback)(void*, double, void*, void*, int));

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAxisTickerLog*
/// @param subTickCount int
/// @param ticks libqt_list /* of double */
libqt_list /* of double */ q_cpaxistickerlog_create_sub_tick_vector(void* self, int subTickCount, libqt_list ticks);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAxisTickerLog*
/// @param subTickCount int
/// @param ticks libqt_list /* of double */
libqt_list /* of double */ q_cpaxistickerlog_qbase_create_sub_tick_vector(void* self, int subTickCount, libqt_list ticks);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAxisTickerLog*
/// @param callback libqt_list /* of double */ func(QCPAxisTickerLog* self, int subTickCount, libqt_list /* of double */ /* of double */)
void q_cpaxistickerlog_on_create_sub_tick_vector(void* self, libqt_list /* of double */ (*callback)(void*, int, libqt_list));

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Caller is responsible for freeing the returned memory
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAxisTickerLog*
/// @param ticks libqt_list /* of double */
/// @param locale QLocale*
/// @param formatChar QChar*
/// @param precision int
const char** q_cpaxistickerlog_create_label_vector(void* self, libqt_list ticks, void* locale, void* formatChar, int precision);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Caller is responsible for freeing the returned memory
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAxisTickerLog*
/// @param ticks libqt_list /* of double */
/// @param locale QLocale*
/// @param formatChar QChar*
/// @param precision int
const char** q_cpaxistickerlog_qbase_create_label_vector(void* self, libqt_list ticks, void* locale, void* formatChar, int precision);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAxisTickerLog*
/// @param callback const char** func(QCPAxisTickerLog* self, libqt_list /* of double */ /* of double */, QLocale* locale, QChar* formatChar, int precision)
void q_cpaxistickerlog_on_create_label_vector(void* self, const char** (*callback)(void*, libqt_list, void*, void*, int));

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAxisTickerLog*
/// @param range QCPRange*
/// @param ticks libqt_list /* of double */
/// @param keepOneOutlier bool
void q_cpaxistickerlog_trim_ticks(void* self, void* range, libqt_list ticks, bool keepOneOutlier);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAxisTickerLog*
/// @param range QCPRange*
/// @param ticks libqt_list /* of double */
/// @param keepOneOutlier bool
void q_cpaxistickerlog_qbase_trim_ticks(void* self, void* range, libqt_list ticks, bool keepOneOutlier);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAxisTickerLog*
/// @param callback void func(QCPAxisTickerLog* self, QCPRange* range, libqt_list /* of double */ /* of double */, bool keepOneOutlier)
void q_cpaxistickerlog_on_trim_ticks(void* self, void (*callback)(void*, void*, libqt_list, bool));

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAxisTickerLog*
/// @param target double
/// @param candidates libqt_list /* of double */
double q_cpaxistickerlog_pick_closest(void* self, double target, libqt_list candidates);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAxisTickerLog*
/// @param target double
/// @param candidates libqt_list /* of double */
double q_cpaxistickerlog_qbase_pick_closest(void* self, double target, libqt_list candidates);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAxisTickerLog*
/// @param callback double func(QCPAxisTickerLog* self, double target, libqt_list /* of double */ /* of double */)
void q_cpaxistickerlog_on_pick_closest(void* self, double (*callback)(void*, double, libqt_list));

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAxisTickerLog*
/// @param input double
double q_cpaxistickerlog_get_mantissa(void* self, double input);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAxisTickerLog*
/// @param input double
double q_cpaxistickerlog_qbase_get_mantissa(void* self, double input);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAxisTickerLog*
/// @param callback double func(QCPAxisTickerLog* self, double input)
void q_cpaxistickerlog_on_get_mantissa(void* self, double (*callback)(void*, double));

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAxisTickerLog*
/// @param input double
double q_cpaxistickerlog_clean_mantissa(void* self, double input);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAxisTickerLog*
/// @param input double
double q_cpaxistickerlog_qbase_clean_mantissa(void* self, double input);

/// Inherited from QCPAxisTicker
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTicker.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAxisTickerLog*
/// @param callback double func(QCPAxisTickerLog* self, double input)
void q_cpaxistickerlog_on_clean_mantissa(void* self, double (*callback)(void*, double));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisTickerLog.html)
///
/// Delete this object from C++ memory.
///
/// @param self QCPAxisTickerLog*
void q_cpaxistickerlog_delete(void* self);

/// https://www.qcustomplot.com/documentation/classQCPGrid.html

/// q_cpgrid_new constructs a new QCPGrid object.
///
/// @param parentAxis QCPAxis*
QCPGrid* q_cpgrid_new(void* parentAxis);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#metaObject)
///
/// @param self QCPGrid*
const QMetaObject* q_cpgrid_meta_object(void* self);

/// @param self QCPGrid*
/// @param param1 const char*
void* q_cpgrid_metacast(void* self, const char* param1);

/// @param self QCPGrid*
/// @param param1 enum QMetaObject__Call
/// @param param2 int
/// @param param3 void*
int32_t q_cpgrid_metacall(void* self, int32_t param1, int param2, void* param3);

/// Allows for overriding the related default method
///
/// @param self QCPGrid*
/// @param callback int32_t func(QCPGrid* self, enum QMetaObject__Call param1, int param2, void* param3)
void q_cpgrid_on_metacall(void* self, int32_t (*callback)(void*, int32_t, int, void*));

/// Base class method implementation
///
/// @param self QCPGrid*
/// @param param1 enum QMetaObject__Call
/// @param param2 int
/// @param param3 void*
int32_t q_cpgrid_qbase_metacall(void* self, int32_t param1, int param2, void* param3);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
const char* q_cpgrid_tr(const char* s);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGrid.html)
///
/// @param self QCPGrid*
bool q_cpgrid_sub_grid_visible(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGrid.html)
///
/// @param self QCPGrid*
bool q_cpgrid_antialiased_sub_grid(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGrid.html)
///
/// @param self QCPGrid*
bool q_cpgrid_antialiased_zero_line(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGrid.html)
///
/// @param self QCPGrid*
QPen* q_cpgrid_pen(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGrid.html)
///
/// @param self QCPGrid*
QPen* q_cpgrid_sub_grid_pen(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGrid.html)
///
/// @param self QCPGrid*
QPen* q_cpgrid_zero_line_pen(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGrid.html)
///
/// @param self QCPGrid*
/// @param visible bool
void q_cpgrid_set_sub_grid_visible(void* self, bool visible);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGrid.html)
///
/// @param self QCPGrid*
/// @param enabled bool
void q_cpgrid_set_antialiased_sub_grid(void* self, bool enabled);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGrid.html)
///
/// @param self QCPGrid*
/// @param enabled bool
void q_cpgrid_set_antialiased_zero_line(void* self, bool enabled);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGrid.html)
///
/// @param self QCPGrid*
/// @param pen QPen*
void q_cpgrid_set_pen(void* self, void* pen);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGrid.html)
///
/// @param self QCPGrid*
/// @param pen QPen*
void q_cpgrid_set_sub_grid_pen(void* self, void* pen);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGrid.html)
///
/// @param self QCPGrid*
/// @param pen QPen*
void q_cpgrid_set_zero_line_pen(void* self, void* pen);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGrid.html)
///
/// @param self QCPGrid*
/// @param painter QCPPainter*
void q_cpgrid_apply_default_antialiasing_hint(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGrid.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPGrid*
/// @param callback void func(QCPGrid* self, QCPPainter* painter)
void q_cpgrid_on_apply_default_antialiasing_hint(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGrid.html)
///
/// Base class method implementation
///
/// @param self QCPGrid*
/// @param painter QCPPainter*
void q_cpgrid_qbase_apply_default_antialiasing_hint(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGrid.html)
///
/// @param self QCPGrid*
/// @param painter QCPPainter*
void q_cpgrid_draw(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGrid.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPGrid*
/// @param callback void func(QCPGrid* self, QCPPainter* painter)
void q_cpgrid_on_draw(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGrid.html)
///
/// Base class method implementation
///
/// @param self QCPGrid*
/// @param painter QCPPainter*
void q_cpgrid_qbase_draw(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGrid.html)
///
/// @param self QCPGrid*
/// @param painter QCPPainter*
void q_cpgrid_draw_grid_lines(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGrid.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPGrid*
/// @param callback void func(QCPGrid* self, QCPPainter* painter)
void q_cpgrid_on_draw_grid_lines(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGrid.html)
///
/// Base class method implementation
///
/// @param self QCPGrid*
/// @param painter QCPPainter*
void q_cpgrid_qbase_draw_grid_lines(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGrid.html)
///
/// @param self QCPGrid*
/// @param painter QCPPainter*
void q_cpgrid_draw_sub_grid_lines(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGrid.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPGrid*
/// @param callback void func(QCPGrid* self, QCPPainter* painter)
void q_cpgrid_on_draw_sub_grid_lines(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGrid.html)
///
/// Base class method implementation
///
/// @param self QCPGrid*
/// @param painter QCPPainter*
void q_cpgrid_qbase_draw_sub_grid_lines(void* self, void* painter);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
/// @param c const char*
const char* q_cpgrid_tr2(const char* s, const char* c);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
/// @param c const char*
/// @param n int
const char* q_cpgrid_tr3(const char* s, const char* c, int n);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPGrid*
bool q_cpgrid_visible(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPGrid*
QCustomPlot* q_cpgrid_parent_plot(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPGrid*
QCPLayerable* q_cpgrid_parent_layerable(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPGrid*
QCPLayer* q_cpgrid_layer(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPGrid*
bool q_cpgrid_antialiased(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPGrid*
/// @param on bool
void q_cpgrid_set_visible(void* self, bool on);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPGrid*
/// @param layer QCPLayer*
bool q_cpgrid_set_layer(void* self, void* layer);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPGrid*
/// @param layerName const char*
bool q_cpgrid_set_layer2(void* self, const char* layerName);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPGrid*
/// @param enabled bool
void q_cpgrid_set_antialiased(void* self, bool enabled);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPGrid*
bool q_cpgrid_real_visibility(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPGrid*
/// @param newLayer QCPLayer*
void q_cpgrid_layer_changed(void* self, void* newLayer);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPGrid*
/// @param callback void func(QCPGrid* self, QCPLayer* newLayer)
void q_cpgrid_on_layer_changed(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#objectName)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPGrid*
const char* q_cpgrid_object_name(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setObjectName)
///
/// @param self QCPGrid*
/// @param name char*
void q_cpgrid_set_object_name(void* self, char* name);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isWidgetType)
///
/// @param self QCPGrid*
bool q_cpgrid_is_widget_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isWindowType)
///
/// @param self QCPGrid*
bool q_cpgrid_is_window_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isQuickItemType)
///
/// @param self QCPGrid*
bool q_cpgrid_is_quick_item_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#signalsBlocked)
///
/// @param self QCPGrid*
bool q_cpgrid_signals_blocked(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#blockSignals)
///
/// @param self QCPGrid*
/// @param b bool
bool q_cpgrid_block_signals(void* self, bool b);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#thread)
///
/// @param self QCPGrid*
QThread* q_cpgrid_thread(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#moveToThread)
///
/// @param self QCPGrid*
/// @param thread QThread*
bool q_cpgrid_move_to_thread(void* self, void* thread);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#startTimer)
///
/// @param self QCPGrid*
/// @param interval int
int32_t q_cpgrid_start_timer(void* self, int interval);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#killTimer)
///
/// @param self QCPGrid*
/// @param id int
void q_cpgrid_kill_timer(void* self, int id);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#killTimer)
///
/// @param self QCPGrid*
/// @param id enum Qt__TimerId
void q_cpgrid_kill_timer2(void* self, int32_t id);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#children)
///
/// @param self QCPGrid*
libqt_list /* of QObject* */ q_cpgrid_children(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setParent)
///
/// @param self QCPGrid*
/// @param parent QObject*
void q_cpgrid_set_parent(void* self, void* parent);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#installEventFilter)
///
/// @param self QCPGrid*
/// @param filterObj QObject*
void q_cpgrid_install_event_filter(void* self, void* filterObj);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#removeEventFilter)
///
/// @param self QCPGrid*
/// @param obj QObject*
void q_cpgrid_remove_event_filter(void* self, void* obj);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param method QMetaMethod*
QMetaObject__Connection* q_cpgrid_connect(void* sender, void* signal, void* receiver, void* method);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param self QCPGrid*
/// @param sender QObject*
/// @param signal const char*
/// @param member const char*
QMetaObject__Connection* q_cpgrid_connect2(void* self, void* sender, const char* signal, const char* member);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param member QMetaMethod*
bool q_cpgrid_disconnect(void* sender, void* signal, void* receiver, void* member);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnect)
///
/// @param param1 QMetaObject__Connection*
bool q_cpgrid_disconnect2(void* param1);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dumpObjectTree)
///
/// @param self QCPGrid*
void q_cpgrid_dump_object_tree(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dumpObjectInfo)
///
/// @param self QCPGrid*
void q_cpgrid_dump_object_info(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setProperty)
///
/// @param self QCPGrid*
/// @param name const char*
/// @param value QVariant*
bool q_cpgrid_set_property(void* self, const char* name, void* value);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#property)
///
/// @param self QCPGrid*
/// @param name const char*
QVariant* q_cpgrid_property(void* self, const char* name);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dynamicPropertyNames)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPGrid*
const char** q_cpgrid_dynamic_property_names(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#bindingStorage)
///
/// @param self QCPGrid*
QBindingStorage* q_cpgrid_binding_storage(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#bindingStorage)
///
/// @param self QCPGrid*
const QBindingStorage* q_cpgrid_binding_storage2(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPGrid*
void q_cpgrid_destroyed(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPGrid*
/// @param callback void func(QCPGrid* self)
void q_cpgrid_on_destroyed(void* self, void (*callback)(void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#parent)
///
/// @param self QCPGrid*
QObject* q_cpgrid_parent(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#inherits)
///
/// @param self QCPGrid*
/// @param classname const char*
bool q_cpgrid_inherits(void* self, const char* classname);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#deleteLater)
///
/// @param self QCPGrid*
void q_cpgrid_delete_later(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#moveToThread)
///
/// @param self QCPGrid*
/// @param thread QThread*
/// @param param2 Disambiguated_t*
bool q_cpgrid_move_to_thread2(void* self, void* thread, void* param2);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#startTimer)
///
/// @param self QCPGrid*
/// @param interval int
/// @param timerType enum Qt__TimerType
int32_t q_cpgrid_start_timer22(void* self, int interval, int32_t timerType);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param method QMetaMethod*
/// @param type enum Qt__ConnectionType
QMetaObject__Connection* q_cpgrid_connect5(void* sender, void* signal, void* receiver, void* method, int32_t type);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param self QCPGrid*
/// @param sender QObject*
/// @param signal const char*
/// @param member const char*
/// @param type enum Qt__ConnectionType
QMetaObject__Connection* q_cpgrid_connect4(void* self, void* sender, const char* signal, const char* member, int32_t type);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPGrid*
/// @param param1 QObject*
void q_cpgrid_destroyed1(void* self, void* param1);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPGrid*
/// @param callback void func(QCPGrid* self, QObject* param1)
void q_cpgrid_on_destroyed1(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPGrid*
/// @param pos QPointF*
/// @param onlySelectable bool
/// @param details QVariant*
double q_cpgrid_select_test(void* self, void* pos, bool onlySelectable, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPGrid*
/// @param pos QPointF*
/// @param onlySelectable bool
/// @param details QVariant*
double q_cpgrid_qbase_select_test(void* self, void* pos, bool onlySelectable, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPGrid*
/// @param callback double func(QCPGrid* self, QPointF* pos, bool onlySelectable, QVariant* details)
void q_cpgrid_on_select_test(void* self, double (*callback)(void*, void*, bool, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPGrid*
/// @param parentPlot QCustomPlot*
void q_cpgrid_parent_plot_initialized(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPGrid*
/// @param parentPlot QCustomPlot*
void q_cpgrid_qbase_parent_plot_initialized(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPGrid*
/// @param callback void func(QCPGrid* self, QCustomPlot* parentPlot)
void q_cpgrid_on_parent_plot_initialized(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPGrid*
///
/// @return enum QCP__Interaction
int32_t q_cpgrid_selection_category(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPGrid*
///
/// @return enum QCP__Interaction
int32_t q_cpgrid_qbase_selection_category(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPGrid*
/// @param callback int32_t func()
void q_cpgrid_on_selection_category(void* self, int32_t (*callback)());

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPGrid*
QRect* q_cpgrid_clip_rect(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPGrid*
QRect* q_cpgrid_qbase_clip_rect(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPGrid*
/// @param callback QRect* func()
void q_cpgrid_on_clip_rect(void* self, QRect* (*callback)());

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPGrid*
/// @param event QMouseEvent*
/// @param additive bool
/// @param details QVariant*
/// @param selectionStateChanged bool*
void q_cpgrid_select_event(void* self, void* event, bool additive, void* details, bool* selectionStateChanged);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPGrid*
/// @param event QMouseEvent*
/// @param additive bool
/// @param details QVariant*
/// @param selectionStateChanged bool*
void q_cpgrid_qbase_select_event(void* self, void* event, bool additive, void* details, bool* selectionStateChanged);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPGrid*
/// @param callback void func(QCPGrid* self, QMouseEvent* event, bool additive, QVariant* details, bool* selectionStateChanged)
void q_cpgrid_on_select_event(void* self, void (*callback)(void*, void*, bool, void*, bool*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPGrid*
/// @param selectionStateChanged bool*
void q_cpgrid_deselect_event(void* self, bool* selectionStateChanged);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPGrid*
/// @param selectionStateChanged bool*
void q_cpgrid_qbase_deselect_event(void* self, bool* selectionStateChanged);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPGrid*
/// @param callback void func(QCPGrid* self, bool* selectionStateChanged)
void q_cpgrid_on_deselect_event(void* self, void (*callback)(void*, bool*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPGrid*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cpgrid_mouse_press_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPGrid*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cpgrid_qbase_mouse_press_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPGrid*
/// @param callback void func(QCPGrid* self, QMouseEvent* event, QVariant* details)
void q_cpgrid_on_mouse_press_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPGrid*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cpgrid_mouse_move_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPGrid*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cpgrid_qbase_mouse_move_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPGrid*
/// @param callback void func(QCPGrid* self, QMouseEvent* event, QPointF* startPos)
void q_cpgrid_on_mouse_move_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPGrid*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cpgrid_mouse_release_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPGrid*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cpgrid_qbase_mouse_release_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPGrid*
/// @param callback void func(QCPGrid* self, QMouseEvent* event, QPointF* startPos)
void q_cpgrid_on_mouse_release_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPGrid*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cpgrid_mouse_double_click_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPGrid*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cpgrid_qbase_mouse_double_click_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPGrid*
/// @param callback void func(QCPGrid* self, QMouseEvent* event, QVariant* details)
void q_cpgrid_on_mouse_double_click_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPGrid*
/// @param event QWheelEvent*
void q_cpgrid_wheel_event(void* self, void* event);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPGrid*
/// @param event QWheelEvent*
void q_cpgrid_qbase_wheel_event(void* self, void* event);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPGrid*
/// @param callback void func(QCPGrid* self, QWheelEvent* event)
void q_cpgrid_on_wheel_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPGrid*
/// @param event QEvent*
bool q_cpgrid_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPGrid*
/// @param event QEvent*
bool q_cpgrid_qbase_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPGrid*
/// @param callback bool func(QCPGrid* self, QEvent* event)
void q_cpgrid_on_event(void* self, bool (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPGrid*
/// @param watched QObject*
/// @param event QEvent*
bool q_cpgrid_event_filter(void* self, void* watched, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPGrid*
/// @param watched QObject*
/// @param event QEvent*
bool q_cpgrid_qbase_event_filter(void* self, void* watched, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPGrid*
/// @param callback bool func(QCPGrid* self, QObject* watched, QEvent* event)
void q_cpgrid_on_event_filter(void* self, bool (*callback)(void*, void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPGrid*
/// @param event QTimerEvent*
void q_cpgrid_timer_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPGrid*
/// @param event QTimerEvent*
void q_cpgrid_qbase_timer_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPGrid*
/// @param callback void func(QCPGrid* self, QTimerEvent* event)
void q_cpgrid_on_timer_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPGrid*
/// @param event QChildEvent*
void q_cpgrid_child_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPGrid*
/// @param event QChildEvent*
void q_cpgrid_qbase_child_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPGrid*
/// @param callback void func(QCPGrid* self, QChildEvent* event)
void q_cpgrid_on_child_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPGrid*
/// @param event QEvent*
void q_cpgrid_custom_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPGrid*
/// @param event QEvent*
void q_cpgrid_qbase_custom_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPGrid*
/// @param callback void func(QCPGrid* self, QEvent* event)
void q_cpgrid_on_custom_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPGrid*
/// @param signal QMetaMethod*
void q_cpgrid_connect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPGrid*
/// @param signal QMetaMethod*
void q_cpgrid_qbase_connect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPGrid*
/// @param callback void func(QCPGrid* self, QMetaMethod* signal)
void q_cpgrid_on_connect_notify(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPGrid*
/// @param signal QMetaMethod*
void q_cpgrid_disconnect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPGrid*
/// @param signal QMetaMethod*
void q_cpgrid_qbase_disconnect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPGrid*
/// @param callback void func(QCPGrid* self, QMetaMethod* signal)
void q_cpgrid_on_disconnect_notify(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPGrid*
/// @param parentPlot QCustomPlot*
void q_cpgrid_initialize_parent_plot(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPGrid*
/// @param parentPlot QCustomPlot*
void q_cpgrid_qbase_initialize_parent_plot(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPGrid*
/// @param callback void func(QCPGrid* self, QCustomPlot* parentPlot)
void q_cpgrid_on_initialize_parent_plot(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPGrid*
/// @param parentLayerable QCPLayerable*
void q_cpgrid_set_parent_layerable(void* self, void* parentLayerable);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPGrid*
/// @param parentLayerable QCPLayerable*
void q_cpgrid_qbase_set_parent_layerable(void* self, void* parentLayerable);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPGrid*
/// @param callback void func(QCPGrid* self, QCPLayerable* parentLayerable)
void q_cpgrid_on_set_parent_layerable(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPGrid*
/// @param layer QCPLayer*
/// @param prepend bool
bool q_cpgrid_move_to_layer(void* self, void* layer, bool prepend);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPGrid*
/// @param layer QCPLayer*
/// @param prepend bool
bool q_cpgrid_qbase_move_to_layer(void* self, void* layer, bool prepend);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPGrid*
/// @param callback bool func(QCPGrid* self, QCPLayer* layer, bool prepend)
void q_cpgrid_on_move_to_layer(void* self, bool (*callback)(void*, void*, bool));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPGrid*
/// @param painter QCPPainter*
/// @param localAntialiased bool
/// @param overrideElement enum QCP__AntialiasedElement
void q_cpgrid_apply_antialiasing_hint(void* self, void* painter, bool localAntialiased, int32_t overrideElement);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPGrid*
/// @param painter QCPPainter*
/// @param localAntialiased bool
/// @param overrideElement enum QCP__AntialiasedElement
void q_cpgrid_qbase_apply_antialiasing_hint(void* self, void* painter, bool localAntialiased, int32_t overrideElement);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPGrid*
/// @param callback void func(QCPGrid* self, QCPPainter* painter, bool localAntialiased, enum QCP__AntialiasedElement overrideElement)
void q_cpgrid_on_apply_antialiasing_hint(void* self, void (*callback)(void*, void*, bool, int32_t));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPGrid*
QObject* q_cpgrid_sender(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPGrid*
QObject* q_cpgrid_qbase_sender(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPGrid*
/// @param callback QObject* func()
void q_cpgrid_on_sender(void* self, QObject* (*callback)());

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPGrid*
int32_t q_cpgrid_sender_signal_index(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPGrid*
int32_t q_cpgrid_qbase_sender_signal_index(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPGrid*
/// @param callback int32_t func()
void q_cpgrid_on_sender_signal_index(void* self, int32_t (*callback)());

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPGrid*
/// @param signal const char*
int32_t q_cpgrid_receivers(void* self, const char* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPGrid*
/// @param signal const char*
int32_t q_cpgrid_qbase_receivers(void* self, const char* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPGrid*
/// @param callback int32_t func(QCPGrid* self, const char* signal)
void q_cpgrid_on_receivers(void* self, int32_t (*callback)(void*, const char*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPGrid*
/// @param signal QMetaMethod*
bool q_cpgrid_is_signal_connected(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPGrid*
/// @param signal QMetaMethod*
bool q_cpgrid_qbase_is_signal_connected(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPGrid*
/// @param callback bool func(QCPGrid* self, QMetaMethod* signal)
void q_cpgrid_on_is_signal_connected(void* self, bool (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#objectNameChanged)
///
/// Wrapper to allow calling private signal
///
/// @param self QCPGrid*
/// @param callback void func(QCPGrid* self, const char* objectName)
void q_cpgrid_on_object_name_changed(void* self, void (*callback)(void*, const char*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGrid.html)
///
/// Delete this object from C++ memory.
///
/// @param self QCPGrid*
void q_cpgrid_delete(void* self);

/// https://www.qcustomplot.com/documentation/classQCPAxis.html

/// q_cpaxis_new constructs a new QCPAxis object.
///
/// @param parent QCPAxisRect*
/// @param type enum QCPAxis__AxisType
QCPAxis* q_cpaxis_new(void* parent, int32_t type);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#metaObject)
///
/// @param self QCPAxis*
const QMetaObject* q_cpaxis_meta_object(void* self);

/// @param self QCPAxis*
/// @param param1 const char*
void* q_cpaxis_metacast(void* self, const char* param1);

/// @param self QCPAxis*
/// @param param1 enum QMetaObject__Call
/// @param param2 int
/// @param param3 void*
int32_t q_cpaxis_metacall(void* self, int32_t param1, int param2, void* param3);

/// Allows for overriding the related default method
///
/// @param self QCPAxis*
/// @param callback int32_t func(QCPAxis* self, enum QMetaObject__Call param1, int param2, void* param3)
void q_cpaxis_on_metacall(void* self, int32_t (*callback)(void*, int32_t, int, void*));

/// Base class method implementation
///
/// @param self QCPAxis*
/// @param param1 enum QMetaObject__Call
/// @param param2 int
/// @param param3 void*
int32_t q_cpaxis_qbase_metacall(void* self, int32_t param1, int param2, void* param3);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
const char* q_cpaxis_tr(const char* s);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
///
/// @return enum QCPAxis__AxisType
int32_t q_cpaxis_axis_type(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
QCPAxisRect* q_cpaxis_axis_rect(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
///
/// @return enum QCPAxis__ScaleType
int32_t q_cpaxis_scale_type(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
const QCPRange* q_cpaxis_range(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
bool q_cpaxis_range_reversed(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
bool q_cpaxis_ticks(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
bool q_cpaxis_tick_labels(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
int32_t q_cpaxis_tick_label_padding(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
QFont* q_cpaxis_tick_label_font(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
QColor* q_cpaxis_tick_label_color(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
double q_cpaxis_tick_label_rotation(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
///
/// @return enum QCPAxis__LabelSide
int32_t q_cpaxis_tick_label_side(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPAxis*
const char* q_cpaxis_number_format(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
int32_t q_cpaxis_number_precision(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
libqt_list /* of double */ q_cpaxis_tick_vector(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPAxis*
const char** q_cpaxis_tick_vector_labels(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
int32_t q_cpaxis_tick_length_in(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
int32_t q_cpaxis_tick_length_out(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
bool q_cpaxis_sub_ticks(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
int32_t q_cpaxis_sub_tick_length_in(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
int32_t q_cpaxis_sub_tick_length_out(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
QPen* q_cpaxis_base_pen(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
QPen* q_cpaxis_tick_pen(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
QPen* q_cpaxis_sub_tick_pen(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
QFont* q_cpaxis_label_font(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
QColor* q_cpaxis_label_color(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPAxis*
const char* q_cpaxis_label(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
int32_t q_cpaxis_label_padding(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
int32_t q_cpaxis_padding(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
int32_t q_cpaxis_offset(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
///
/// @return flag of enum QCPAxis__SelectablePart
int32_t q_cpaxis_selected_parts(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
///
/// @return flag of enum QCPAxis__SelectablePart
int32_t q_cpaxis_selectable_parts(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
QFont* q_cpaxis_selected_tick_label_font(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
QFont* q_cpaxis_selected_label_font(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
QColor* q_cpaxis_selected_tick_label_color(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
QColor* q_cpaxis_selected_label_color(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
QPen* q_cpaxis_selected_base_pen(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
QPen* q_cpaxis_selected_tick_pen(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
QPen* q_cpaxis_selected_sub_tick_pen(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
QCPLineEnding* q_cpaxis_lower_ending(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
QCPLineEnding* q_cpaxis_upper_ending(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
QCPGrid* q_cpaxis_grid(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
/// @param type enum QCPAxis__ScaleType
void q_cpaxis_set_scale_type(void* self, int32_t type);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
/// @param range QCPRange*
void q_cpaxis_set_range(void* self, void* range);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
/// @param lower double
/// @param upper double
void q_cpaxis_set_range2(void* self, double lower, double upper);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
/// @param position double
/// @param size double
/// @param alignment enum Qt__AlignmentFlag
void q_cpaxis_set_range3(void* self, double position, double size, int32_t alignment);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
/// @param lower double
void q_cpaxis_set_range_lower(void* self, double lower);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
/// @param upper double
void q_cpaxis_set_range_upper(void* self, double upper);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
/// @param reversed bool
void q_cpaxis_set_range_reversed(void* self, bool reversed);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
/// @param show bool
void q_cpaxis_set_ticks(void* self, bool show);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
/// @param show bool
void q_cpaxis_set_tick_labels(void* self, bool show);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
/// @param padding int
void q_cpaxis_set_tick_label_padding(void* self, int padding);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
/// @param font QFont*
void q_cpaxis_set_tick_label_font(void* self, void* font);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
/// @param color QColor*
void q_cpaxis_set_tick_label_color(void* self, void* color);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
/// @param degrees double
void q_cpaxis_set_tick_label_rotation(void* self, double degrees);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
/// @param side enum QCPAxis__LabelSide
void q_cpaxis_set_tick_label_side(void* self, int32_t side);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
/// @param formatCode const char*
void q_cpaxis_set_number_format(void* self, const char* formatCode);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
/// @param precision int
void q_cpaxis_set_number_precision(void* self, int precision);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
/// @param inside int
void q_cpaxis_set_tick_length(void* self, int inside);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
/// @param inside int
void q_cpaxis_set_tick_length_in(void* self, int inside);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
/// @param outside int
void q_cpaxis_set_tick_length_out(void* self, int outside);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
/// @param show bool
void q_cpaxis_set_sub_ticks(void* self, bool show);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
/// @param inside int
void q_cpaxis_set_sub_tick_length(void* self, int inside);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
/// @param inside int
void q_cpaxis_set_sub_tick_length_in(void* self, int inside);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
/// @param outside int
void q_cpaxis_set_sub_tick_length_out(void* self, int outside);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
/// @param pen QPen*
void q_cpaxis_set_base_pen(void* self, void* pen);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
/// @param pen QPen*
void q_cpaxis_set_tick_pen(void* self, void* pen);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
/// @param pen QPen*
void q_cpaxis_set_sub_tick_pen(void* self, void* pen);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
/// @param font QFont*
void q_cpaxis_set_label_font(void* self, void* font);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
/// @param color QColor*
void q_cpaxis_set_label_color(void* self, void* color);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
/// @param str const char*
void q_cpaxis_set_label(void* self, const char* str);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
/// @param padding int
void q_cpaxis_set_label_padding(void* self, int padding);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
/// @param padding int
void q_cpaxis_set_padding(void* self, int padding);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
/// @param offset int
void q_cpaxis_set_offset(void* self, int offset);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
/// @param font QFont*
void q_cpaxis_set_selected_tick_label_font(void* self, void* font);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
/// @param font QFont*
void q_cpaxis_set_selected_label_font(void* self, void* font);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
/// @param color QColor*
void q_cpaxis_set_selected_tick_label_color(void* self, void* color);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
/// @param color QColor*
void q_cpaxis_set_selected_label_color(void* self, void* color);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
/// @param pen QPen*
void q_cpaxis_set_selected_base_pen(void* self, void* pen);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
/// @param pen QPen*
void q_cpaxis_set_selected_tick_pen(void* self, void* pen);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
/// @param pen QPen*
void q_cpaxis_set_selected_sub_tick_pen(void* self, void* pen);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
/// @param selectableParts flag of enum QCPAxis__SelectablePart
void q_cpaxis_set_selectable_parts(void* self, const int32_t* selectableParts);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
/// @param selectedParts flag of enum QCPAxis__SelectablePart
void q_cpaxis_set_selected_parts(void* self, const int32_t* selectedParts);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
/// @param ending QCPLineEnding*
void q_cpaxis_set_lower_ending(void* self, void* ending);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
/// @param ending QCPLineEnding*
void q_cpaxis_set_upper_ending(void* self, void* ending);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
/// @param pos QPointF*
/// @param onlySelectable bool
/// @param details QVariant*
double q_cpaxis_select_test(void* self, void* pos, bool onlySelectable, void* details);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPAxis*
/// @param callback double func(QCPAxis* self, QPointF* pos, bool onlySelectable, QVariant* details)
void q_cpaxis_on_select_test(void* self, double (*callback)(void*, void*, bool, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// Base class method implementation
///
/// @param self QCPAxis*
/// @param pos QPointF*
/// @param onlySelectable bool
/// @param details QVariant*
double q_cpaxis_qbase_select_test(void* self, void* pos, bool onlySelectable, void* details);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
///
/// @return enum Qt__Orientation
int32_t q_cpaxis_orientation(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
int32_t q_cpaxis_pixel_orientation(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
/// @param diff double
void q_cpaxis_move_range(void* self, double diff);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
/// @param factor double
void q_cpaxis_scale_range(void* self, double factor);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
/// @param factor double
/// @param center double
void q_cpaxis_scale_range2(void* self, double factor, double center);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
/// @param otherAxis QCPAxis*
void q_cpaxis_set_scale_ratio(void* self, void* otherAxis);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
void q_cpaxis_rescale(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
/// @param value double
double q_cpaxis_pixel_to_coord(void* self, double value);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
/// @param value double
double q_cpaxis_coord_to_pixel(void* self, double value);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
/// @param pos QPointF*
///
/// @return enum QCPAxis__SelectablePart
int32_t q_cpaxis_get_part_at(void* self, void* pos);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
libqt_list /* of QCPAbstractPlottable* */ q_cpaxis_plottables(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
libqt_list /* of QCPGraph* */ q_cpaxis_graphs(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
libqt_list /* of QCPAbstractItem* */ q_cpaxis_items(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param side enum QCP__MarginSide
///
/// @return enum QCPAxis__AxisType
int32_t q_cpaxis_margin_side_to_axis_type(int32_t side);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param type enum QCPAxis__AxisType
///
/// @return enum Qt__Orientation
int32_t q_cpaxis_orientation2(int32_t type);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param type enum QCPAxis__AxisType
///
/// @return enum QCPAxis__AxisType
int32_t q_cpaxis_opposite(int32_t type);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
/// @param newRange QCPRange*
void q_cpaxis_range_changed(void* self, void* newRange);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
/// @param newRange QCPRange*
/// @param oldRange QCPRange*
void q_cpaxis_range_changed2(void* self, void* newRange, void* oldRange);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
/// @param scaleType enum QCPAxis__ScaleType
void q_cpaxis_scale_type_changed(void* self, int32_t scaleType);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
/// @param parts flag of enum QCPAxis__SelectablePart
void q_cpaxis_selection_changed(void* self, const int32_t* parts);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
/// @param parts flag of enum QCPAxis__SelectablePart
void q_cpaxis_selectable_changed(void* self, const int32_t* parts);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
int32_t q_cpaxis_calculate_margin(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPAxis*
/// @param callback int32_t func()
void q_cpaxis_on_calculate_margin(void* self, int32_t (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// Base class method implementation
///
/// @param self QCPAxis*
int32_t q_cpaxis_qbase_calculate_margin(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
/// @param painter QCPPainter*
void q_cpaxis_apply_default_antialiasing_hint(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPAxis*
/// @param callback void func(QCPAxis* self, QCPPainter* painter)
void q_cpaxis_on_apply_default_antialiasing_hint(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// Base class method implementation
///
/// @param self QCPAxis*
/// @param painter QCPPainter*
void q_cpaxis_qbase_apply_default_antialiasing_hint(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
/// @param painter QCPPainter*
void q_cpaxis_draw(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPAxis*
/// @param callback void func(QCPAxis* self, QCPPainter* painter)
void q_cpaxis_on_draw(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// Base class method implementation
///
/// @param self QCPAxis*
/// @param painter QCPPainter*
void q_cpaxis_qbase_draw(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
///
/// @return enum QCP__Interaction
int32_t q_cpaxis_selection_category(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPAxis*
/// @param callback int32_t func()
void q_cpaxis_on_selection_category(void* self, int32_t (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// Base class method implementation
///
/// @param self QCPAxis*
///
/// @return enum QCP__Interaction
int32_t q_cpaxis_qbase_selection_category(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
/// @param event QMouseEvent*
/// @param additive bool
/// @param details QVariant*
/// @param selectionStateChanged bool*
void q_cpaxis_select_event(void* self, void* event, bool additive, void* details, bool* selectionStateChanged);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPAxis*
/// @param callback void func(QCPAxis* self, QMouseEvent* event, bool additive, QVariant* details, bool* selectionStateChanged)
void q_cpaxis_on_select_event(void* self, void (*callback)(void*, void*, bool, void*, bool*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// Base class method implementation
///
/// @param self QCPAxis*
/// @param event QMouseEvent*
/// @param additive bool
/// @param details QVariant*
/// @param selectionStateChanged bool*
void q_cpaxis_qbase_select_event(void* self, void* event, bool additive, void* details, bool* selectionStateChanged);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
/// @param selectionStateChanged bool*
void q_cpaxis_deselect_event(void* self, bool* selectionStateChanged);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPAxis*
/// @param callback void func(QCPAxis* self, bool* selectionStateChanged)
void q_cpaxis_on_deselect_event(void* self, void (*callback)(void*, bool*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// Base class method implementation
///
/// @param self QCPAxis*
/// @param selectionStateChanged bool*
void q_cpaxis_qbase_deselect_event(void* self, bool* selectionStateChanged);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cpaxis_mouse_press_event(void* self, void* event, void* details);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPAxis*
/// @param callback void func(QCPAxis* self, QMouseEvent* event, QVariant* details)
void q_cpaxis_on_mouse_press_event(void* self, void (*callback)(void*, void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// Base class method implementation
///
/// @param self QCPAxis*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cpaxis_qbase_mouse_press_event(void* self, void* event, void* details);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cpaxis_mouse_move_event(void* self, void* event, void* startPos);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPAxis*
/// @param callback void func(QCPAxis* self, QMouseEvent* event, QPointF* startPos)
void q_cpaxis_on_mouse_move_event(void* self, void (*callback)(void*, void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// Base class method implementation
///
/// @param self QCPAxis*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cpaxis_qbase_mouse_move_event(void* self, void* event, void* startPos);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cpaxis_mouse_release_event(void* self, void* event, void* startPos);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPAxis*
/// @param callback void func(QCPAxis* self, QMouseEvent* event, QPointF* startPos)
void q_cpaxis_on_mouse_release_event(void* self, void (*callback)(void*, void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// Base class method implementation
///
/// @param self QCPAxis*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cpaxis_qbase_mouse_release_event(void* self, void* event, void* startPos);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
/// @param event QWheelEvent*
void q_cpaxis_wheel_event(void* self, void* event);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPAxis*
/// @param callback void func(QCPAxis* self, QWheelEvent* event)
void q_cpaxis_on_wheel_event(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// Base class method implementation
///
/// @param self QCPAxis*
/// @param event QWheelEvent*
void q_cpaxis_qbase_wheel_event(void* self, void* event);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
void q_cpaxis_setup_tick_vectors(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPAxis*
/// @param callback void func()
void q_cpaxis_on_setup_tick_vectors(void* self, void (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// Base class method implementation
///
/// @param self QCPAxis*
void q_cpaxis_qbase_setup_tick_vectors(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
QPen* q_cpaxis_get_base_pen(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPAxis*
/// @param callback QPen* func()
void q_cpaxis_on_get_base_pen(void* self, QPen* (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// Base class method implementation
///
/// @param self QCPAxis*
QPen* q_cpaxis_qbase_get_base_pen(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
QPen* q_cpaxis_get_tick_pen(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPAxis*
/// @param callback QPen* func()
void q_cpaxis_on_get_tick_pen(void* self, QPen* (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// Base class method implementation
///
/// @param self QCPAxis*
QPen* q_cpaxis_qbase_get_tick_pen(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
QPen* q_cpaxis_get_sub_tick_pen(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPAxis*
/// @param callback QPen* func()
void q_cpaxis_on_get_sub_tick_pen(void* self, QPen* (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// Base class method implementation
///
/// @param self QCPAxis*
QPen* q_cpaxis_qbase_get_sub_tick_pen(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
QFont* q_cpaxis_get_tick_label_font(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPAxis*
/// @param callback QFont* func()
void q_cpaxis_on_get_tick_label_font(void* self, QFont* (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// Base class method implementation
///
/// @param self QCPAxis*
QFont* q_cpaxis_qbase_get_tick_label_font(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
QFont* q_cpaxis_get_label_font(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPAxis*
/// @param callback QFont* func()
void q_cpaxis_on_get_label_font(void* self, QFont* (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// Base class method implementation
///
/// @param self QCPAxis*
QFont* q_cpaxis_qbase_get_label_font(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
QColor* q_cpaxis_get_tick_label_color(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPAxis*
/// @param callback QColor* func()
void q_cpaxis_on_get_tick_label_color(void* self, QColor* (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// Base class method implementation
///
/// @param self QCPAxis*
QColor* q_cpaxis_qbase_get_tick_label_color(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
QColor* q_cpaxis_get_label_color(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPAxis*
/// @param callback QColor* func()
void q_cpaxis_on_get_label_color(void* self, QColor* (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// Base class method implementation
///
/// @param self QCPAxis*
QColor* q_cpaxis_qbase_get_label_color(void* self);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
/// @param c const char*
const char* q_cpaxis_tr2(const char* s, const char* c);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
/// @param c const char*
/// @param n int
const char* q_cpaxis_tr3(const char* s, const char* c, int n);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
/// @param inside int
/// @param outside int
void q_cpaxis_set_tick_length2(void* self, int inside, int outside);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
/// @param inside int
/// @param outside int
void q_cpaxis_set_sub_tick_length2(void* self, int inside, int outside);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
/// @param otherAxis QCPAxis*
/// @param ratio double
void q_cpaxis_set_scale_ratio2(void* self, void* otherAxis, double ratio);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// @param self QCPAxis*
/// @param onlyVisiblePlottables bool
void q_cpaxis_rescale1(void* self, bool onlyVisiblePlottables);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPAxis*
bool q_cpaxis_visible(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPAxis*
QCustomPlot* q_cpaxis_parent_plot(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPAxis*
QCPLayerable* q_cpaxis_parent_layerable(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPAxis*
QCPLayer* q_cpaxis_layer(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPAxis*
bool q_cpaxis_antialiased(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPAxis*
/// @param on bool
void q_cpaxis_set_visible(void* self, bool on);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPAxis*
/// @param layer QCPLayer*
bool q_cpaxis_set_layer(void* self, void* layer);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPAxis*
/// @param layerName const char*
bool q_cpaxis_set_layer2(void* self, const char* layerName);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPAxis*
/// @param enabled bool
void q_cpaxis_set_antialiased(void* self, bool enabled);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPAxis*
bool q_cpaxis_real_visibility(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPAxis*
/// @param newLayer QCPLayer*
void q_cpaxis_layer_changed(void* self, void* newLayer);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPAxis*
/// @param callback void func(QCPAxis* self, QCPLayer* newLayer)
void q_cpaxis_on_layer_changed(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#objectName)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPAxis*
const char* q_cpaxis_object_name(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setObjectName)
///
/// @param self QCPAxis*
/// @param name char*
void q_cpaxis_set_object_name(void* self, char* name);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isWidgetType)
///
/// @param self QCPAxis*
bool q_cpaxis_is_widget_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isWindowType)
///
/// @param self QCPAxis*
bool q_cpaxis_is_window_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isQuickItemType)
///
/// @param self QCPAxis*
bool q_cpaxis_is_quick_item_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#signalsBlocked)
///
/// @param self QCPAxis*
bool q_cpaxis_signals_blocked(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#blockSignals)
///
/// @param self QCPAxis*
/// @param b bool
bool q_cpaxis_block_signals(void* self, bool b);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#thread)
///
/// @param self QCPAxis*
QThread* q_cpaxis_thread(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#moveToThread)
///
/// @param self QCPAxis*
/// @param thread QThread*
bool q_cpaxis_move_to_thread(void* self, void* thread);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#startTimer)
///
/// @param self QCPAxis*
/// @param interval int
int32_t q_cpaxis_start_timer(void* self, int interval);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#killTimer)
///
/// @param self QCPAxis*
/// @param id int
void q_cpaxis_kill_timer(void* self, int id);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#killTimer)
///
/// @param self QCPAxis*
/// @param id enum Qt__TimerId
void q_cpaxis_kill_timer2(void* self, int32_t id);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#children)
///
/// @param self QCPAxis*
libqt_list /* of QObject* */ q_cpaxis_children(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setParent)
///
/// @param self QCPAxis*
/// @param parent QObject*
void q_cpaxis_set_parent(void* self, void* parent);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#installEventFilter)
///
/// @param self QCPAxis*
/// @param filterObj QObject*
void q_cpaxis_install_event_filter(void* self, void* filterObj);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#removeEventFilter)
///
/// @param self QCPAxis*
/// @param obj QObject*
void q_cpaxis_remove_event_filter(void* self, void* obj);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param method QMetaMethod*
QMetaObject__Connection* q_cpaxis_connect(void* sender, void* signal, void* receiver, void* method);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param self QCPAxis*
/// @param sender QObject*
/// @param signal const char*
/// @param member const char*
QMetaObject__Connection* q_cpaxis_connect2(void* self, void* sender, const char* signal, const char* member);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param member QMetaMethod*
bool q_cpaxis_disconnect(void* sender, void* signal, void* receiver, void* member);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnect)
///
/// @param param1 QMetaObject__Connection*
bool q_cpaxis_disconnect2(void* param1);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dumpObjectTree)
///
/// @param self QCPAxis*
void q_cpaxis_dump_object_tree(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dumpObjectInfo)
///
/// @param self QCPAxis*
void q_cpaxis_dump_object_info(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setProperty)
///
/// @param self QCPAxis*
/// @param name const char*
/// @param value QVariant*
bool q_cpaxis_set_property(void* self, const char* name, void* value);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#property)
///
/// @param self QCPAxis*
/// @param name const char*
QVariant* q_cpaxis_property(void* self, const char* name);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dynamicPropertyNames)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPAxis*
const char** q_cpaxis_dynamic_property_names(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#bindingStorage)
///
/// @param self QCPAxis*
QBindingStorage* q_cpaxis_binding_storage(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#bindingStorage)
///
/// @param self QCPAxis*
const QBindingStorage* q_cpaxis_binding_storage2(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPAxis*
void q_cpaxis_destroyed(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPAxis*
/// @param callback void func(QCPAxis* self)
void q_cpaxis_on_destroyed(void* self, void (*callback)(void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#parent)
///
/// @param self QCPAxis*
QObject* q_cpaxis_parent(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#inherits)
///
/// @param self QCPAxis*
/// @param classname const char*
bool q_cpaxis_inherits(void* self, const char* classname);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#deleteLater)
///
/// @param self QCPAxis*
void q_cpaxis_delete_later(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#moveToThread)
///
/// @param self QCPAxis*
/// @param thread QThread*
/// @param param2 Disambiguated_t*
bool q_cpaxis_move_to_thread2(void* self, void* thread, void* param2);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#startTimer)
///
/// @param self QCPAxis*
/// @param interval int
/// @param timerType enum Qt__TimerType
int32_t q_cpaxis_start_timer22(void* self, int interval, int32_t timerType);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param method QMetaMethod*
/// @param type enum Qt__ConnectionType
QMetaObject__Connection* q_cpaxis_connect5(void* sender, void* signal, void* receiver, void* method, int32_t type);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param self QCPAxis*
/// @param sender QObject*
/// @param signal const char*
/// @param member const char*
/// @param type enum Qt__ConnectionType
QMetaObject__Connection* q_cpaxis_connect4(void* self, void* sender, const char* signal, const char* member, int32_t type);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPAxis*
/// @param param1 QObject*
void q_cpaxis_destroyed1(void* self, void* param1);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPAxis*
/// @param callback void func(QCPAxis* self, QObject* param1)
void q_cpaxis_on_destroyed1(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAxis*
/// @param parentPlot QCustomPlot*
void q_cpaxis_parent_plot_initialized(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAxis*
/// @param parentPlot QCustomPlot*
void q_cpaxis_qbase_parent_plot_initialized(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAxis*
/// @param callback void func(QCPAxis* self, QCustomPlot* parentPlot)
void q_cpaxis_on_parent_plot_initialized(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAxis*
QRect* q_cpaxis_clip_rect(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAxis*
QRect* q_cpaxis_qbase_clip_rect(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAxis*
/// @param callback QRect* func()
void q_cpaxis_on_clip_rect(void* self, QRect* (*callback)());

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAxis*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cpaxis_mouse_double_click_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAxis*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cpaxis_qbase_mouse_double_click_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAxis*
/// @param callback void func(QCPAxis* self, QMouseEvent* event, QVariant* details)
void q_cpaxis_on_mouse_double_click_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAxis*
/// @param event QEvent*
bool q_cpaxis_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAxis*
/// @param event QEvent*
bool q_cpaxis_qbase_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAxis*
/// @param callback bool func(QCPAxis* self, QEvent* event)
void q_cpaxis_on_event(void* self, bool (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAxis*
/// @param watched QObject*
/// @param event QEvent*
bool q_cpaxis_event_filter(void* self, void* watched, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAxis*
/// @param watched QObject*
/// @param event QEvent*
bool q_cpaxis_qbase_event_filter(void* self, void* watched, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAxis*
/// @param callback bool func(QCPAxis* self, QObject* watched, QEvent* event)
void q_cpaxis_on_event_filter(void* self, bool (*callback)(void*, void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAxis*
/// @param event QTimerEvent*
void q_cpaxis_timer_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAxis*
/// @param event QTimerEvent*
void q_cpaxis_qbase_timer_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAxis*
/// @param callback void func(QCPAxis* self, QTimerEvent* event)
void q_cpaxis_on_timer_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAxis*
/// @param event QChildEvent*
void q_cpaxis_child_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAxis*
/// @param event QChildEvent*
void q_cpaxis_qbase_child_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAxis*
/// @param callback void func(QCPAxis* self, QChildEvent* event)
void q_cpaxis_on_child_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAxis*
/// @param event QEvent*
void q_cpaxis_custom_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAxis*
/// @param event QEvent*
void q_cpaxis_qbase_custom_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAxis*
/// @param callback void func(QCPAxis* self, QEvent* event)
void q_cpaxis_on_custom_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAxis*
/// @param signal QMetaMethod*
void q_cpaxis_connect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAxis*
/// @param signal QMetaMethod*
void q_cpaxis_qbase_connect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAxis*
/// @param callback void func(QCPAxis* self, QMetaMethod* signal)
void q_cpaxis_on_connect_notify(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAxis*
/// @param signal QMetaMethod*
void q_cpaxis_disconnect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAxis*
/// @param signal QMetaMethod*
void q_cpaxis_qbase_disconnect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAxis*
/// @param callback void func(QCPAxis* self, QMetaMethod* signal)
void q_cpaxis_on_disconnect_notify(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAxis*
/// @param parentPlot QCustomPlot*
void q_cpaxis_initialize_parent_plot(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAxis*
/// @param parentPlot QCustomPlot*
void q_cpaxis_qbase_initialize_parent_plot(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAxis*
/// @param callback void func(QCPAxis* self, QCustomPlot* parentPlot)
void q_cpaxis_on_initialize_parent_plot(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAxis*
/// @param parentLayerable QCPLayerable*
void q_cpaxis_set_parent_layerable(void* self, void* parentLayerable);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAxis*
/// @param parentLayerable QCPLayerable*
void q_cpaxis_qbase_set_parent_layerable(void* self, void* parentLayerable);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAxis*
/// @param callback void func(QCPAxis* self, QCPLayerable* parentLayerable)
void q_cpaxis_on_set_parent_layerable(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAxis*
/// @param layer QCPLayer*
/// @param prepend bool
bool q_cpaxis_move_to_layer(void* self, void* layer, bool prepend);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAxis*
/// @param layer QCPLayer*
/// @param prepend bool
bool q_cpaxis_qbase_move_to_layer(void* self, void* layer, bool prepend);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAxis*
/// @param callback bool func(QCPAxis* self, QCPLayer* layer, bool prepend)
void q_cpaxis_on_move_to_layer(void* self, bool (*callback)(void*, void*, bool));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAxis*
/// @param painter QCPPainter*
/// @param localAntialiased bool
/// @param overrideElement enum QCP__AntialiasedElement
void q_cpaxis_apply_antialiasing_hint(void* self, void* painter, bool localAntialiased, int32_t overrideElement);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAxis*
/// @param painter QCPPainter*
/// @param localAntialiased bool
/// @param overrideElement enum QCP__AntialiasedElement
void q_cpaxis_qbase_apply_antialiasing_hint(void* self, void* painter, bool localAntialiased, int32_t overrideElement);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAxis*
/// @param callback void func(QCPAxis* self, QCPPainter* painter, bool localAntialiased, enum QCP__AntialiasedElement overrideElement)
void q_cpaxis_on_apply_antialiasing_hint(void* self, void (*callback)(void*, void*, bool, int32_t));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAxis*
QObject* q_cpaxis_sender(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAxis*
QObject* q_cpaxis_qbase_sender(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAxis*
/// @param callback QObject* func()
void q_cpaxis_on_sender(void* self, QObject* (*callback)());

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAxis*
int32_t q_cpaxis_sender_signal_index(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAxis*
int32_t q_cpaxis_qbase_sender_signal_index(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAxis*
/// @param callback int32_t func()
void q_cpaxis_on_sender_signal_index(void* self, int32_t (*callback)());

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAxis*
/// @param signal const char*
int32_t q_cpaxis_receivers(void* self, const char* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAxis*
/// @param signal const char*
int32_t q_cpaxis_qbase_receivers(void* self, const char* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAxis*
/// @param callback int32_t func(QCPAxis* self, const char* signal)
void q_cpaxis_on_receivers(void* self, int32_t (*callback)(void*, const char*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAxis*
/// @param signal QMetaMethod*
bool q_cpaxis_is_signal_connected(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAxis*
/// @param signal QMetaMethod*
bool q_cpaxis_qbase_is_signal_connected(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAxis*
/// @param callback bool func(QCPAxis* self, QMetaMethod* signal)
void q_cpaxis_on_is_signal_connected(void* self, bool (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#objectNameChanged)
///
/// Wrapper to allow calling private signal
///
/// @param self QCPAxis*
/// @param callback void func(QCPAxis* self, const char* objectName)
void q_cpaxis_on_object_name_changed(void* self, void (*callback)(void*, const char*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxis.html)
///
/// Delete this object from C++ memory.
///
/// @param self QCPAxis*
void q_cpaxis_delete(void* self);

/// https://www.qcustomplot.com/documentation/classQCPScatterStyle.html

/// q_cpscatterstyle_new constructs a new QCPScatterStyle object.
///
QCPScatterStyle* q_cpscatterstyle_new();

/// q_cpscatterstyle_new2 constructs a new QCPScatterStyle object.
///
/// @param shape enum QCPScatterStyle__ScatterShape
QCPScatterStyle* q_cpscatterstyle_new2(int32_t shape);

/// q_cpscatterstyle_new3 constructs a new QCPScatterStyle object.
///
/// @param shape enum QCPScatterStyle__ScatterShape
/// @param color QColor*
/// @param size double
QCPScatterStyle* q_cpscatterstyle_new3(int32_t shape, void* color, double size);

/// q_cpscatterstyle_new4 constructs a new QCPScatterStyle object.
///
/// @param shape enum QCPScatterStyle__ScatterShape
/// @param color QColor*
/// @param fill QColor*
/// @param size double
QCPScatterStyle* q_cpscatterstyle_new4(int32_t shape, void* color, void* fill, double size);

/// q_cpscatterstyle_new5 constructs a new QCPScatterStyle object.
///
/// @param shape enum QCPScatterStyle__ScatterShape
/// @param pen QPen*
/// @param brush QBrush*
/// @param size double
QCPScatterStyle* q_cpscatterstyle_new5(int32_t shape, void* pen, void* brush, double size);

/// q_cpscatterstyle_new6 constructs a new QCPScatterStyle object.
///
/// @param pixmap QPixmap*
QCPScatterStyle* q_cpscatterstyle_new6(void* pixmap);

/// q_cpscatterstyle_new7 constructs a new QCPScatterStyle object.
///
/// @param customPath QPainterPath*
/// @param pen QPen*
QCPScatterStyle* q_cpscatterstyle_new7(void* customPath, void* pen);

/// q_cpscatterstyle_new8 constructs a new QCPScatterStyle object.
///
/// @param shape enum QCPScatterStyle__ScatterShape
/// @param size double
QCPScatterStyle* q_cpscatterstyle_new8(int32_t shape, double size);

/// q_cpscatterstyle_new9 constructs a new QCPScatterStyle object.
///
/// @param customPath QPainterPath*
/// @param pen QPen*
/// @param brush QBrush*
QCPScatterStyle* q_cpscatterstyle_new9(void* customPath, void* pen, void* brush);

/// q_cpscatterstyle_new10 constructs a new QCPScatterStyle object.
///
/// @param customPath QPainterPath*
/// @param pen QPen*
/// @param brush QBrush*
/// @param size double
QCPScatterStyle* q_cpscatterstyle_new10(void* customPath, void* pen, void* brush, double size);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPScatterStyle.html)
///
/// @param self QCPScatterStyle*
double q_cpscatterstyle_size(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPScatterStyle.html)
///
/// @param self QCPScatterStyle*
///
/// @return enum QCPScatterStyle__ScatterShape
int32_t q_cpscatterstyle_shape(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPScatterStyle.html)
///
/// @param self QCPScatterStyle*
QPen* q_cpscatterstyle_pen(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPScatterStyle.html)
///
/// @param self QCPScatterStyle*
QBrush* q_cpscatterstyle_brush(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPScatterStyle.html)
///
/// @param self QCPScatterStyle*
QPixmap* q_cpscatterstyle_pixmap(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPScatterStyle.html)
///
/// @param self QCPScatterStyle*
QPainterPath* q_cpscatterstyle_custom_path(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPScatterStyle.html)
///
/// @param self QCPScatterStyle*
/// @param other QCPScatterStyle*
/// @param properties flag of enum QCPScatterStyle__ScatterProperty
void q_cpscatterstyle_set_from_other(void* self, void* other, int32_t properties);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPScatterStyle.html)
///
/// @param self QCPScatterStyle*
/// @param size double
void q_cpscatterstyle_set_size(void* self, double size);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPScatterStyle.html)
///
/// @param self QCPScatterStyle*
/// @param shape enum QCPScatterStyle__ScatterShape
void q_cpscatterstyle_set_shape(void* self, int32_t shape);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPScatterStyle.html)
///
/// @param self QCPScatterStyle*
/// @param pen QPen*
void q_cpscatterstyle_set_pen(void* self, void* pen);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPScatterStyle.html)
///
/// @param self QCPScatterStyle*
/// @param brush QBrush*
void q_cpscatterstyle_set_brush(void* self, void* brush);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPScatterStyle.html)
///
/// @param self QCPScatterStyle*
/// @param pixmap QPixmap*
void q_cpscatterstyle_set_pixmap(void* self, void* pixmap);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPScatterStyle.html)
///
/// @param self QCPScatterStyle*
/// @param customPath QPainterPath*
void q_cpscatterstyle_set_custom_path(void* self, void* customPath);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPScatterStyle.html)
///
/// @param self QCPScatterStyle*
bool q_cpscatterstyle_is_none(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPScatterStyle.html)
///
/// @param self QCPScatterStyle*
bool q_cpscatterstyle_is_pen_defined(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPScatterStyle.html)
///
/// @param self QCPScatterStyle*
void q_cpscatterstyle_undefine_pen(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPScatterStyle.html)
///
/// @param self QCPScatterStyle*
/// @param painter QCPPainter*
/// @param defaultPen QPen*
void q_cpscatterstyle_apply_to(void* self, void* painter, void* defaultPen);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPScatterStyle.html)
///
/// @param self QCPScatterStyle*
/// @param painter QCPPainter*
/// @param pos QPointF*
void q_cpscatterstyle_draw_shape(void* self, void* painter, void* pos);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPScatterStyle.html)
///
/// @param self QCPScatterStyle*
/// @param painter QCPPainter*
/// @param x double
/// @param y double
void q_cpscatterstyle_draw_shape2(void* self, void* painter, double x, double y);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPScatterStyle.html)
///
/// Delete this object from C++ memory.
///
/// @param self QCPScatterStyle*
void q_cpscatterstyle_delete(void* self);

/// https://www.qcustomplot.com/documentation/classQCPSelectionDecorator.html

/// q_cpselectiondecorator_new constructs a new QCPSelectionDecorator object.
///
QCPSelectionDecorator* q_cpselectiondecorator_new();

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPSelectionDecorator.html)
///
/// @param self QCPSelectionDecorator*
QPen* q_cpselectiondecorator_pen(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPSelectionDecorator.html)
///
/// @param self QCPSelectionDecorator*
QBrush* q_cpselectiondecorator_brush(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPSelectionDecorator.html)
///
/// @param self QCPSelectionDecorator*
QCPScatterStyle* q_cpselectiondecorator_scatter_style(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPSelectionDecorator.html)
///
/// @param self QCPSelectionDecorator*
///
/// @return flag of enum QCPScatterStyle__ScatterProperty
int32_t q_cpselectiondecorator_used_scatter_properties(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPSelectionDecorator.html)
///
/// @param self QCPSelectionDecorator*
/// @param pen QPen*
void q_cpselectiondecorator_set_pen(void* self, void* pen);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPSelectionDecorator.html)
///
/// @param self QCPSelectionDecorator*
/// @param brush QBrush*
void q_cpselectiondecorator_set_brush(void* self, void* brush);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPSelectionDecorator.html)
///
/// @param self QCPSelectionDecorator*
/// @param scatterStyle QCPScatterStyle*
void q_cpselectiondecorator_set_scatter_style(void* self, void* scatterStyle);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPSelectionDecorator.html)
///
/// @param self QCPSelectionDecorator*
/// @param properties flag of enum QCPScatterStyle__ScatterProperty
void q_cpselectiondecorator_set_used_scatter_properties(void* self, const int32_t* properties);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPSelectionDecorator.html)
///
/// @param self QCPSelectionDecorator*
/// @param painter QCPPainter*
void q_cpselectiondecorator_apply_pen(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPSelectionDecorator.html)
///
/// @param self QCPSelectionDecorator*
/// @param painter QCPPainter*
void q_cpselectiondecorator_apply_brush(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPSelectionDecorator.html)
///
/// @param self QCPSelectionDecorator*
/// @param unselectedStyle QCPScatterStyle*
QCPScatterStyle* q_cpselectiondecorator_get_final_scatter_style(void* self, void* unselectedStyle);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPSelectionDecorator.html)
///
/// @param self QCPSelectionDecorator*
/// @param other QCPSelectionDecorator*
void q_cpselectiondecorator_copy_from(void* self, void* other);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPSelectionDecorator.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPSelectionDecorator*
/// @param callback void func(QCPSelectionDecorator* self, QCPSelectionDecorator* other)
void q_cpselectiondecorator_on_copy_from(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPSelectionDecorator.html)
///
/// Base class method implementation
///
/// @param self QCPSelectionDecorator*
/// @param other QCPSelectionDecorator*
void q_cpselectiondecorator_qbase_copy_from(void* self, void* other);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPSelectionDecorator.html)
///
/// @param self QCPSelectionDecorator*
/// @param painter QCPPainter*
/// @param selection QCPDataSelection*
void q_cpselectiondecorator_draw_decoration(void* self, void* painter, void* selection);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPSelectionDecorator.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPSelectionDecorator*
/// @param callback void func(QCPSelectionDecorator* self, QCPPainter* painter, QCPDataSelection* selection)
void q_cpselectiondecorator_on_draw_decoration(void* self, void (*callback)(void*, void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPSelectionDecorator.html)
///
/// Base class method implementation
///
/// @param self QCPSelectionDecorator*
/// @param painter QCPPainter*
/// @param selection QCPDataSelection*
void q_cpselectiondecorator_qbase_draw_decoration(void* self, void* painter, void* selection);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPSelectionDecorator.html)
///
/// @param self QCPSelectionDecorator*
/// @param plottable QCPAbstractPlottable*
bool q_cpselectiondecorator_register_with_plottable(void* self, void* plottable);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPSelectionDecorator.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPSelectionDecorator*
/// @param callback bool func(QCPSelectionDecorator* self, QCPAbstractPlottable* plottable)
void q_cpselectiondecorator_on_register_with_plottable(void* self, bool (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPSelectionDecorator.html)
///
/// Base class method implementation
///
/// @param self QCPSelectionDecorator*
/// @param plottable QCPAbstractPlottable*
bool q_cpselectiondecorator_qbase_register_with_plottable(void* self, void* plottable);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPSelectionDecorator.html)
///
/// @param self QCPSelectionDecorator*
/// @param scatterStyle QCPScatterStyle*
/// @param usedProperties flag of enum QCPScatterStyle__ScatterProperty
void q_cpselectiondecorator_set_scatter_style2(void* self, void* scatterStyle, int32_t usedProperties);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPSelectionDecorator.html)
///
/// Delete this object from C++ memory.
///
/// @param self QCPSelectionDecorator*
void q_cpselectiondecorator_delete(void* self);

/// https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html

/// q_cpabstractplottable_new constructs a new QCPAbstractPlottable object.
///
/// @param keyAxis QCPAxis*
/// @param valueAxis QCPAxis*
QCPAbstractPlottable* q_cpabstractplottable_new(void* keyAxis, void* valueAxis);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#metaObject)
///
/// @param self QCPAbstractPlottable*
const QMetaObject* q_cpabstractplottable_meta_object(void* self);

/// @param self QCPAbstractPlottable*
/// @param param1 const char*
void* q_cpabstractplottable_metacast(void* self, const char* param1);

/// @param self QCPAbstractPlottable*
/// @param param1 enum QMetaObject__Call
/// @param param2 int
/// @param param3 void*
int32_t q_cpabstractplottable_metacall(void* self, int32_t param1, int param2, void* param3);

/// Allows for overriding the related default method
///
/// @param self QCPAbstractPlottable*
/// @param callback int32_t func(QCPAbstractPlottable* self, enum QMetaObject__Call param1, int param2, void* param3)
void q_cpabstractplottable_on_metacall(void* self, int32_t (*callback)(void*, int32_t, int, void*));

/// Base class method implementation
///
/// @param self QCPAbstractPlottable*
/// @param param1 enum QMetaObject__Call
/// @param param2 int
/// @param param3 void*
int32_t q_cpabstractplottable_qbase_metacall(void* self, int32_t param1, int param2, void* param3);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
const char* q_cpabstractplottable_tr(const char* s);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPAbstractPlottable*
const char* q_cpabstractplottable_name(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPAbstractPlottable*
bool q_cpabstractplottable_antialiased_fill(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPAbstractPlottable*
bool q_cpabstractplottable_antialiased_scatters(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPAbstractPlottable*
QPen* q_cpabstractplottable_pen(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPAbstractPlottable*
QBrush* q_cpabstractplottable_brush(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPAbstractPlottable*
QCPAxis* q_cpabstractplottable_key_axis(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPAbstractPlottable*
QCPAxis* q_cpabstractplottable_value_axis(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPAbstractPlottable*
///
/// @return enum QCP__SelectionType
int32_t q_cpabstractplottable_selectable(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPAbstractPlottable*
bool q_cpabstractplottable_selected(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPAbstractPlottable*
QCPDataSelection* q_cpabstractplottable_selection(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPAbstractPlottable*
QCPSelectionDecorator* q_cpabstractplottable_selection_decorator(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPAbstractPlottable*
/// @param name const char*
void q_cpabstractplottable_set_name(void* self, const char* name);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPAbstractPlottable*
/// @param enabled bool
void q_cpabstractplottable_set_antialiased_fill(void* self, bool enabled);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPAbstractPlottable*
/// @param enabled bool
void q_cpabstractplottable_set_antialiased_scatters(void* self, bool enabled);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPAbstractPlottable*
/// @param pen QPen*
void q_cpabstractplottable_set_pen(void* self, void* pen);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPAbstractPlottable*
/// @param brush QBrush*
void q_cpabstractplottable_set_brush(void* self, void* brush);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPAbstractPlottable*
/// @param axis QCPAxis*
void q_cpabstractplottable_set_key_axis(void* self, void* axis);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPAbstractPlottable*
/// @param axis QCPAxis*
void q_cpabstractplottable_set_value_axis(void* self, void* axis);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPAbstractPlottable*
/// @param selectable enum QCP__SelectionType
void q_cpabstractplottable_set_selectable(void* self, int32_t selectable);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPAbstractPlottable*
/// @param selection QCPDataSelection*
void q_cpabstractplottable_set_selection(void* self, void* selection);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPAbstractPlottable*
/// @param decorator QCPSelectionDecorator*
void q_cpabstractplottable_set_selection_decorator(void* self, void* decorator);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPAbstractPlottable*
/// @param pos QPointF*
/// @param onlySelectable bool
/// @param details QVariant*
double q_cpabstractplottable_select_test(void* self, void* pos, bool onlySelectable, void* details);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPAbstractPlottable*
/// @param callback double func(QCPAbstractPlottable* self, QPointF* pos, bool onlySelectable, QVariant* details)
void q_cpabstractplottable_on_select_test(void* self, double (*callback)(void*, void*, bool, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Base class method implementation
///
/// @param self QCPAbstractPlottable*
/// @param pos QPointF*
/// @param onlySelectable bool
/// @param details QVariant*
double q_cpabstractplottable_qbase_select_test(void* self, void* pos, bool onlySelectable, void* details);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPAbstractPlottable*
QCPPlottableInterface1D* q_cpabstractplottable_interface1_d(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPAbstractPlottable*
/// @param callback QCPPlottableInterface1D* func()
void q_cpabstractplottable_on_interface1_d(void* self, QCPPlottableInterface1D* (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Base class method implementation
///
/// @param self QCPAbstractPlottable*
QCPPlottableInterface1D* q_cpabstractplottable_qbase_interface1_d(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPAbstractPlottable*
/// @param foundRange bool*
/// @param inSignDomain enum QCP__SignDomain
QCPRange* q_cpabstractplottable_get_key_range(void* self, bool* foundRange, int32_t inSignDomain);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPAbstractPlottable*
/// @param callback QCPRange* func(QCPAbstractPlottable* self, bool* foundRange, enum QCP__SignDomain inSignDomain)
void q_cpabstractplottable_on_get_key_range(void* self, QCPRange* (*callback)(void*, bool*, int32_t));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Base class method implementation
///
/// @param self QCPAbstractPlottable*
/// @param foundRange bool*
/// @param inSignDomain enum QCP__SignDomain
QCPRange* q_cpabstractplottable_qbase_get_key_range(void* self, bool* foundRange, int32_t inSignDomain);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPAbstractPlottable*
/// @param foundRange bool*
/// @param inSignDomain enum QCP__SignDomain
/// @param inKeyRange QCPRange*
QCPRange* q_cpabstractplottable_get_value_range(void* self, bool* foundRange, int32_t inSignDomain, void* inKeyRange);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPAbstractPlottable*
/// @param callback QCPRange* func(QCPAbstractPlottable* self, bool* foundRange, enum QCP__SignDomain inSignDomain, QCPRange* inKeyRange)
void q_cpabstractplottable_on_get_value_range(void* self, QCPRange* (*callback)(void*, bool*, int32_t, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Base class method implementation
///
/// @param self QCPAbstractPlottable*
/// @param foundRange bool*
/// @param inSignDomain enum QCP__SignDomain
/// @param inKeyRange QCPRange*
QCPRange* q_cpabstractplottable_qbase_get_value_range(void* self, bool* foundRange, int32_t inSignDomain, void* inKeyRange);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPAbstractPlottable*
/// @param key double
/// @param value double
/// @param x double*
/// @param y double*
void q_cpabstractplottable_coords_to_pixels(void* self, double key, double value, double* x, double* y);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPAbstractPlottable*
/// @param key double
/// @param value double
const QPointF* q_cpabstractplottable_coords_to_pixels2(void* self, double key, double value);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPAbstractPlottable*
/// @param x double
/// @param y double
/// @param key double*
/// @param value double*
void q_cpabstractplottable_pixels_to_coords(void* self, double x, double y, double* key, double* value);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPAbstractPlottable*
/// @param pixelPos QPointF*
/// @param key double*
/// @param value double*
void q_cpabstractplottable_pixels_to_coords2(void* self, void* pixelPos, double* key, double* value);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPAbstractPlottable*
void q_cpabstractplottable_rescale_axes(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPAbstractPlottable*
void q_cpabstractplottable_rescale_key_axis(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPAbstractPlottable*
void q_cpabstractplottable_rescale_value_axis(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPAbstractPlottable*
/// @param legend QCPLegend*
bool q_cpabstractplottable_add_to_legend(void* self, void* legend);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPAbstractPlottable*
bool q_cpabstractplottable_add_to_legend2(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPAbstractPlottable*
/// @param legend QCPLegend*
bool q_cpabstractplottable_remove_from_legend(void* self, void* legend);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPAbstractPlottable*
bool q_cpabstractplottable_remove_from_legend2(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPAbstractPlottable*
/// @param selected bool
void q_cpabstractplottable_selection_changed(void* self, bool selected);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPAbstractPlottable*
/// @param selection QCPDataSelection*
void q_cpabstractplottable_selection_changed2(void* self, void* selection);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPAbstractPlottable*
/// @param selectable enum QCP__SelectionType
void q_cpabstractplottable_selectable_changed(void* self, int32_t selectable);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPAbstractPlottable*
QRect* q_cpabstractplottable_clip_rect(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPAbstractPlottable*
/// @param callback QRect* func()
void q_cpabstractplottable_on_clip_rect(void* self, QRect* (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Base class method implementation
///
/// @param self QCPAbstractPlottable*
QRect* q_cpabstractplottable_qbase_clip_rect(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPAbstractPlottable*
/// @param painter QCPPainter*
void q_cpabstractplottable_draw(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPAbstractPlottable*
/// @param callback void func(QCPAbstractPlottable* self, QCPPainter* painter)
void q_cpabstractplottable_on_draw(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Base class method implementation
///
/// @param self QCPAbstractPlottable*
/// @param painter QCPPainter*
void q_cpabstractplottable_qbase_draw(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPAbstractPlottable*
///
/// @return enum QCP__Interaction
int32_t q_cpabstractplottable_selection_category(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPAbstractPlottable*
/// @param callback int32_t func()
void q_cpabstractplottable_on_selection_category(void* self, int32_t (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Base class method implementation
///
/// @param self QCPAbstractPlottable*
///
/// @return enum QCP__Interaction
int32_t q_cpabstractplottable_qbase_selection_category(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPAbstractPlottable*
/// @param painter QCPPainter*
void q_cpabstractplottable_apply_default_antialiasing_hint(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPAbstractPlottable*
/// @param callback void func(QCPAbstractPlottable* self, QCPPainter* painter)
void q_cpabstractplottable_on_apply_default_antialiasing_hint(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Base class method implementation
///
/// @param self QCPAbstractPlottable*
/// @param painter QCPPainter*
void q_cpabstractplottable_qbase_apply_default_antialiasing_hint(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPAbstractPlottable*
/// @param event QMouseEvent*
/// @param additive bool
/// @param details QVariant*
/// @param selectionStateChanged bool*
void q_cpabstractplottable_select_event(void* self, void* event, bool additive, void* details, bool* selectionStateChanged);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPAbstractPlottable*
/// @param callback void func(QCPAbstractPlottable* self, QMouseEvent* event, bool additive, QVariant* details, bool* selectionStateChanged)
void q_cpabstractplottable_on_select_event(void* self, void (*callback)(void*, void*, bool, void*, bool*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Base class method implementation
///
/// @param self QCPAbstractPlottable*
/// @param event QMouseEvent*
/// @param additive bool
/// @param details QVariant*
/// @param selectionStateChanged bool*
void q_cpabstractplottable_qbase_select_event(void* self, void* event, bool additive, void* details, bool* selectionStateChanged);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPAbstractPlottable*
/// @param selectionStateChanged bool*
void q_cpabstractplottable_deselect_event(void* self, bool* selectionStateChanged);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPAbstractPlottable*
/// @param callback void func(QCPAbstractPlottable* self, bool* selectionStateChanged)
void q_cpabstractplottable_on_deselect_event(void* self, void (*callback)(void*, bool*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Base class method implementation
///
/// @param self QCPAbstractPlottable*
/// @param selectionStateChanged bool*
void q_cpabstractplottable_qbase_deselect_event(void* self, bool* selectionStateChanged);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPAbstractPlottable*
/// @param painter QCPPainter*
/// @param rect QRectF*
void q_cpabstractplottable_draw_legend_icon(void* self, void* painter, void* rect);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPAbstractPlottable*
/// @param callback void func(QCPAbstractPlottable* self, QCPPainter* painter, QRectF* rect)
void q_cpabstractplottable_on_draw_legend_icon(void* self, void (*callback)(void*, void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Base class method implementation
///
/// @param self QCPAbstractPlottable*
/// @param painter QCPPainter*
/// @param rect QRectF*
void q_cpabstractplottable_qbase_draw_legend_icon(void* self, void* painter, void* rect);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPAbstractPlottable*
/// @param painter QCPPainter*
void q_cpabstractplottable_apply_fill_antialiasing_hint(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPAbstractPlottable*
/// @param callback void func(QCPAbstractPlottable* self, QCPPainter* painter)
void q_cpabstractplottable_on_apply_fill_antialiasing_hint(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Base class method implementation
///
/// @param self QCPAbstractPlottable*
/// @param painter QCPPainter*
void q_cpabstractplottable_qbase_apply_fill_antialiasing_hint(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPAbstractPlottable*
/// @param painter QCPPainter*
void q_cpabstractplottable_apply_scatters_antialiasing_hint(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPAbstractPlottable*
/// @param callback void func(QCPAbstractPlottable* self, QCPPainter* painter)
void q_cpabstractplottable_on_apply_scatters_antialiasing_hint(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Base class method implementation
///
/// @param self QCPAbstractPlottable*
/// @param painter QCPPainter*
void q_cpabstractplottable_qbase_apply_scatters_antialiasing_hint(void* self, void* painter);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
/// @param c const char*
const char* q_cpabstractplottable_tr2(const char* s, const char* c);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
/// @param c const char*
/// @param n int
const char* q_cpabstractplottable_tr3(const char* s, const char* c, int n);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPAbstractPlottable*
/// @param onlyEnlarge bool
void q_cpabstractplottable_rescale_axes1(void* self, bool onlyEnlarge);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPAbstractPlottable*
/// @param onlyEnlarge bool
void q_cpabstractplottable_rescale_key_axis1(void* self, bool onlyEnlarge);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPAbstractPlottable*
/// @param onlyEnlarge bool
void q_cpabstractplottable_rescale_value_axis1(void* self, bool onlyEnlarge);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPAbstractPlottable*
/// @param onlyEnlarge bool
/// @param inKeyRange bool
void q_cpabstractplottable_rescale_value_axis2(void* self, bool onlyEnlarge, bool inKeyRange);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPAbstractPlottable*
bool q_cpabstractplottable_visible(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPAbstractPlottable*
QCustomPlot* q_cpabstractplottable_parent_plot(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPAbstractPlottable*
QCPLayerable* q_cpabstractplottable_parent_layerable(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPAbstractPlottable*
QCPLayer* q_cpabstractplottable_layer(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPAbstractPlottable*
bool q_cpabstractplottable_antialiased(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPAbstractPlottable*
/// @param on bool
void q_cpabstractplottable_set_visible(void* self, bool on);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPAbstractPlottable*
/// @param layer QCPLayer*
bool q_cpabstractplottable_set_layer(void* self, void* layer);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPAbstractPlottable*
/// @param layerName const char*
bool q_cpabstractplottable_set_layer2(void* self, const char* layerName);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPAbstractPlottable*
/// @param enabled bool
void q_cpabstractplottable_set_antialiased(void* self, bool enabled);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPAbstractPlottable*
bool q_cpabstractplottable_real_visibility(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPAbstractPlottable*
/// @param newLayer QCPLayer*
void q_cpabstractplottable_layer_changed(void* self, void* newLayer);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPAbstractPlottable*
/// @param callback void func(QCPAbstractPlottable* self, QCPLayer* newLayer)
void q_cpabstractplottable_on_layer_changed(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#objectName)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPAbstractPlottable*
const char* q_cpabstractplottable_object_name(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setObjectName)
///
/// @param self QCPAbstractPlottable*
/// @param name char*
void q_cpabstractplottable_set_object_name(void* self, char* name);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isWidgetType)
///
/// @param self QCPAbstractPlottable*
bool q_cpabstractplottable_is_widget_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isWindowType)
///
/// @param self QCPAbstractPlottable*
bool q_cpabstractplottable_is_window_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isQuickItemType)
///
/// @param self QCPAbstractPlottable*
bool q_cpabstractplottable_is_quick_item_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#signalsBlocked)
///
/// @param self QCPAbstractPlottable*
bool q_cpabstractplottable_signals_blocked(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#blockSignals)
///
/// @param self QCPAbstractPlottable*
/// @param b bool
bool q_cpabstractplottable_block_signals(void* self, bool b);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#thread)
///
/// @param self QCPAbstractPlottable*
QThread* q_cpabstractplottable_thread(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#moveToThread)
///
/// @param self QCPAbstractPlottable*
/// @param thread QThread*
bool q_cpabstractplottable_move_to_thread(void* self, void* thread);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#startTimer)
///
/// @param self QCPAbstractPlottable*
/// @param interval int
int32_t q_cpabstractplottable_start_timer(void* self, int interval);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#killTimer)
///
/// @param self QCPAbstractPlottable*
/// @param id int
void q_cpabstractplottable_kill_timer(void* self, int id);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#killTimer)
///
/// @param self QCPAbstractPlottable*
/// @param id enum Qt__TimerId
void q_cpabstractplottable_kill_timer2(void* self, int32_t id);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#children)
///
/// @param self QCPAbstractPlottable*
libqt_list /* of QObject* */ q_cpabstractplottable_children(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setParent)
///
/// @param self QCPAbstractPlottable*
/// @param parent QObject*
void q_cpabstractplottable_set_parent(void* self, void* parent);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#installEventFilter)
///
/// @param self QCPAbstractPlottable*
/// @param filterObj QObject*
void q_cpabstractplottable_install_event_filter(void* self, void* filterObj);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#removeEventFilter)
///
/// @param self QCPAbstractPlottable*
/// @param obj QObject*
void q_cpabstractplottable_remove_event_filter(void* self, void* obj);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param method QMetaMethod*
QMetaObject__Connection* q_cpabstractplottable_connect(void* sender, void* signal, void* receiver, void* method);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param self QCPAbstractPlottable*
/// @param sender QObject*
/// @param signal const char*
/// @param member const char*
QMetaObject__Connection* q_cpabstractplottable_connect2(void* self, void* sender, const char* signal, const char* member);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param member QMetaMethod*
bool q_cpabstractplottable_disconnect(void* sender, void* signal, void* receiver, void* member);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnect)
///
/// @param param1 QMetaObject__Connection*
bool q_cpabstractplottable_disconnect2(void* param1);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dumpObjectTree)
///
/// @param self QCPAbstractPlottable*
void q_cpabstractplottable_dump_object_tree(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dumpObjectInfo)
///
/// @param self QCPAbstractPlottable*
void q_cpabstractplottable_dump_object_info(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setProperty)
///
/// @param self QCPAbstractPlottable*
/// @param name const char*
/// @param value QVariant*
bool q_cpabstractplottable_set_property(void* self, const char* name, void* value);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#property)
///
/// @param self QCPAbstractPlottable*
/// @param name const char*
QVariant* q_cpabstractplottable_property(void* self, const char* name);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dynamicPropertyNames)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPAbstractPlottable*
const char** q_cpabstractplottable_dynamic_property_names(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#bindingStorage)
///
/// @param self QCPAbstractPlottable*
QBindingStorage* q_cpabstractplottable_binding_storage(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#bindingStorage)
///
/// @param self QCPAbstractPlottable*
const QBindingStorage* q_cpabstractplottable_binding_storage2(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPAbstractPlottable*
void q_cpabstractplottable_destroyed(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPAbstractPlottable*
/// @param callback void func(QCPAbstractPlottable* self)
void q_cpabstractplottable_on_destroyed(void* self, void (*callback)(void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#parent)
///
/// @param self QCPAbstractPlottable*
QObject* q_cpabstractplottable_parent(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#inherits)
///
/// @param self QCPAbstractPlottable*
/// @param classname const char*
bool q_cpabstractplottable_inherits(void* self, const char* classname);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#deleteLater)
///
/// @param self QCPAbstractPlottable*
void q_cpabstractplottable_delete_later(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#moveToThread)
///
/// @param self QCPAbstractPlottable*
/// @param thread QThread*
/// @param param2 Disambiguated_t*
bool q_cpabstractplottable_move_to_thread2(void* self, void* thread, void* param2);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#startTimer)
///
/// @param self QCPAbstractPlottable*
/// @param interval int
/// @param timerType enum Qt__TimerType
int32_t q_cpabstractplottable_start_timer22(void* self, int interval, int32_t timerType);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param method QMetaMethod*
/// @param type enum Qt__ConnectionType
QMetaObject__Connection* q_cpabstractplottable_connect5(void* sender, void* signal, void* receiver, void* method, int32_t type);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param self QCPAbstractPlottable*
/// @param sender QObject*
/// @param signal const char*
/// @param member const char*
/// @param type enum Qt__ConnectionType
QMetaObject__Connection* q_cpabstractplottable_connect4(void* self, void* sender, const char* signal, const char* member, int32_t type);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPAbstractPlottable*
/// @param param1 QObject*
void q_cpabstractplottable_destroyed1(void* self, void* param1);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPAbstractPlottable*
/// @param callback void func(QCPAbstractPlottable* self, QObject* param1)
void q_cpabstractplottable_on_destroyed1(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAbstractPlottable*
/// @param parentPlot QCustomPlot*
void q_cpabstractplottable_parent_plot_initialized(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAbstractPlottable*
/// @param parentPlot QCustomPlot*
void q_cpabstractplottable_qbase_parent_plot_initialized(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAbstractPlottable*
/// @param callback void func(QCPAbstractPlottable* self, QCustomPlot* parentPlot)
void q_cpabstractplottable_on_parent_plot_initialized(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAbstractPlottable*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cpabstractplottable_mouse_press_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAbstractPlottable*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cpabstractplottable_qbase_mouse_press_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAbstractPlottable*
/// @param callback void func(QCPAbstractPlottable* self, QMouseEvent* event, QVariant* details)
void q_cpabstractplottable_on_mouse_press_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAbstractPlottable*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cpabstractplottable_mouse_move_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAbstractPlottable*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cpabstractplottable_qbase_mouse_move_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAbstractPlottable*
/// @param callback void func(QCPAbstractPlottable* self, QMouseEvent* event, QPointF* startPos)
void q_cpabstractplottable_on_mouse_move_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAbstractPlottable*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cpabstractplottable_mouse_release_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAbstractPlottable*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cpabstractplottable_qbase_mouse_release_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAbstractPlottable*
/// @param callback void func(QCPAbstractPlottable* self, QMouseEvent* event, QPointF* startPos)
void q_cpabstractplottable_on_mouse_release_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAbstractPlottable*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cpabstractplottable_mouse_double_click_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAbstractPlottable*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cpabstractplottable_qbase_mouse_double_click_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAbstractPlottable*
/// @param callback void func(QCPAbstractPlottable* self, QMouseEvent* event, QVariant* details)
void q_cpabstractplottable_on_mouse_double_click_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAbstractPlottable*
/// @param event QWheelEvent*
void q_cpabstractplottable_wheel_event(void* self, void* event);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAbstractPlottable*
/// @param event QWheelEvent*
void q_cpabstractplottable_qbase_wheel_event(void* self, void* event);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAbstractPlottable*
/// @param callback void func(QCPAbstractPlottable* self, QWheelEvent* event)
void q_cpabstractplottable_on_wheel_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAbstractPlottable*
/// @param event QEvent*
bool q_cpabstractplottable_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAbstractPlottable*
/// @param event QEvent*
bool q_cpabstractplottable_qbase_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAbstractPlottable*
/// @param callback bool func(QCPAbstractPlottable* self, QEvent* event)
void q_cpabstractplottable_on_event(void* self, bool (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAbstractPlottable*
/// @param watched QObject*
/// @param event QEvent*
bool q_cpabstractplottable_event_filter(void* self, void* watched, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAbstractPlottable*
/// @param watched QObject*
/// @param event QEvent*
bool q_cpabstractplottable_qbase_event_filter(void* self, void* watched, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAbstractPlottable*
/// @param callback bool func(QCPAbstractPlottable* self, QObject* watched, QEvent* event)
void q_cpabstractplottable_on_event_filter(void* self, bool (*callback)(void*, void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAbstractPlottable*
/// @param event QTimerEvent*
void q_cpabstractplottable_timer_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAbstractPlottable*
/// @param event QTimerEvent*
void q_cpabstractplottable_qbase_timer_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAbstractPlottable*
/// @param callback void func(QCPAbstractPlottable* self, QTimerEvent* event)
void q_cpabstractplottable_on_timer_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAbstractPlottable*
/// @param event QChildEvent*
void q_cpabstractplottable_child_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAbstractPlottable*
/// @param event QChildEvent*
void q_cpabstractplottable_qbase_child_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAbstractPlottable*
/// @param callback void func(QCPAbstractPlottable* self, QChildEvent* event)
void q_cpabstractplottable_on_child_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAbstractPlottable*
/// @param event QEvent*
void q_cpabstractplottable_custom_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAbstractPlottable*
/// @param event QEvent*
void q_cpabstractplottable_qbase_custom_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAbstractPlottable*
/// @param callback void func(QCPAbstractPlottable* self, QEvent* event)
void q_cpabstractplottable_on_custom_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAbstractPlottable*
/// @param signal QMetaMethod*
void q_cpabstractplottable_connect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAbstractPlottable*
/// @param signal QMetaMethod*
void q_cpabstractplottable_qbase_connect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAbstractPlottable*
/// @param callback void func(QCPAbstractPlottable* self, QMetaMethod* signal)
void q_cpabstractplottable_on_connect_notify(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAbstractPlottable*
/// @param signal QMetaMethod*
void q_cpabstractplottable_disconnect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAbstractPlottable*
/// @param signal QMetaMethod*
void q_cpabstractplottable_qbase_disconnect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAbstractPlottable*
/// @param callback void func(QCPAbstractPlottable* self, QMetaMethod* signal)
void q_cpabstractplottable_on_disconnect_notify(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAbstractPlottable*
/// @param parentPlot QCustomPlot*
void q_cpabstractplottable_initialize_parent_plot(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAbstractPlottable*
/// @param parentPlot QCustomPlot*
void q_cpabstractplottable_qbase_initialize_parent_plot(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAbstractPlottable*
/// @param callback void func(QCPAbstractPlottable* self, QCustomPlot* parentPlot)
void q_cpabstractplottable_on_initialize_parent_plot(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAbstractPlottable*
/// @param parentLayerable QCPLayerable*
void q_cpabstractplottable_set_parent_layerable(void* self, void* parentLayerable);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAbstractPlottable*
/// @param parentLayerable QCPLayerable*
void q_cpabstractplottable_qbase_set_parent_layerable(void* self, void* parentLayerable);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAbstractPlottable*
/// @param callback void func(QCPAbstractPlottable* self, QCPLayerable* parentLayerable)
void q_cpabstractplottable_on_set_parent_layerable(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAbstractPlottable*
/// @param layer QCPLayer*
/// @param prepend bool
bool q_cpabstractplottable_move_to_layer(void* self, void* layer, bool prepend);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAbstractPlottable*
/// @param layer QCPLayer*
/// @param prepend bool
bool q_cpabstractplottable_qbase_move_to_layer(void* self, void* layer, bool prepend);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAbstractPlottable*
/// @param callback bool func(QCPAbstractPlottable* self, QCPLayer* layer, bool prepend)
void q_cpabstractplottable_on_move_to_layer(void* self, bool (*callback)(void*, void*, bool));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAbstractPlottable*
/// @param painter QCPPainter*
/// @param localAntialiased bool
/// @param overrideElement enum QCP__AntialiasedElement
void q_cpabstractplottable_apply_antialiasing_hint(void* self, void* painter, bool localAntialiased, int32_t overrideElement);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAbstractPlottable*
/// @param painter QCPPainter*
/// @param localAntialiased bool
/// @param overrideElement enum QCP__AntialiasedElement
void q_cpabstractplottable_qbase_apply_antialiasing_hint(void* self, void* painter, bool localAntialiased, int32_t overrideElement);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAbstractPlottable*
/// @param callback void func(QCPAbstractPlottable* self, QCPPainter* painter, bool localAntialiased, enum QCP__AntialiasedElement overrideElement)
void q_cpabstractplottable_on_apply_antialiasing_hint(void* self, void (*callback)(void*, void*, bool, int32_t));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAbstractPlottable*
QObject* q_cpabstractplottable_sender(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAbstractPlottable*
QObject* q_cpabstractplottable_qbase_sender(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAbstractPlottable*
/// @param callback QObject* func()
void q_cpabstractplottable_on_sender(void* self, QObject* (*callback)());

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAbstractPlottable*
int32_t q_cpabstractplottable_sender_signal_index(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAbstractPlottable*
int32_t q_cpabstractplottable_qbase_sender_signal_index(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAbstractPlottable*
/// @param callback int32_t func()
void q_cpabstractplottable_on_sender_signal_index(void* self, int32_t (*callback)());

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAbstractPlottable*
/// @param signal const char*
int32_t q_cpabstractplottable_receivers(void* self, const char* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAbstractPlottable*
/// @param signal const char*
int32_t q_cpabstractplottable_qbase_receivers(void* self, const char* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAbstractPlottable*
/// @param callback int32_t func(QCPAbstractPlottable* self, const char* signal)
void q_cpabstractplottable_on_receivers(void* self, int32_t (*callback)(void*, const char*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAbstractPlottable*
/// @param signal QMetaMethod*
bool q_cpabstractplottable_is_signal_connected(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAbstractPlottable*
/// @param signal QMetaMethod*
bool q_cpabstractplottable_qbase_is_signal_connected(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAbstractPlottable*
/// @param callback bool func(QCPAbstractPlottable* self, QMetaMethod* signal)
void q_cpabstractplottable_on_is_signal_connected(void* self, bool (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#objectNameChanged)
///
/// Wrapper to allow calling private signal
///
/// @param self QCPAbstractPlottable*
/// @param callback void func(QCPAbstractPlottable* self, const char* objectName)
void q_cpabstractplottable_on_object_name_changed(void* self, void (*callback)(void*, const char*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Delete this object from C++ memory.
///
/// @param self QCPAbstractPlottable*
void q_cpabstractplottable_delete(void* self);

/// https://www.qcustomplot.com/documentation/classQCPItemAnchor.html

/// q_cpitemanchor_new constructs a new QCPItemAnchor object.
///
/// @param parentPlot QCustomPlot*
/// @param parentItem QCPAbstractItem*
/// @param name const char*
QCPItemAnchor* q_cpitemanchor_new(void* parentPlot, void* parentItem, const char* name);

/// q_cpitemanchor_new2 constructs a new QCPItemAnchor object.
///
/// @param parentPlot QCustomPlot*
/// @param parentItem QCPAbstractItem*
/// @param name const char*
/// @param anchorId int
QCPItemAnchor* q_cpitemanchor_new2(void* parentPlot, void* parentItem, const char* name, int anchorId);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemAnchor.html)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPItemAnchor*
const char* q_cpitemanchor_name(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemAnchor.html)
///
/// @param self QCPItemAnchor*
QPointF* q_cpitemanchor_pixel_position(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemAnchor.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPItemAnchor*
/// @param callback QPointF* func()
void q_cpitemanchor_on_pixel_position(void* self, QPointF* (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemAnchor.html)
///
/// Base class method implementation
///
/// @param self QCPItemAnchor*
QPointF* q_cpitemanchor_qbase_pixel_position(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemAnchor.html)
///
/// @param self QCPItemAnchor*
QCPItemPosition* q_cpitemanchor_to_q_c_p_item_position(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemAnchor.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPItemAnchor*
/// @param callback QCPItemPosition* func()
void q_cpitemanchor_on_to_q_c_p_item_position(void* self, QCPItemPosition* (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemAnchor.html)
///
/// Base class method implementation
///
/// @param self QCPItemAnchor*
QCPItemPosition* q_cpitemanchor_qbase_to_q_c_p_item_position(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemAnchor.html)
///
/// @param self QCPItemAnchor*
/// @param pos QCPItemPosition*
void q_cpitemanchor_add_child_x(void* self, void* pos);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemAnchor.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPItemAnchor*
/// @param callback void func(QCPItemAnchor* self, QCPItemPosition* pos)
void q_cpitemanchor_on_add_child_x(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemAnchor.html)
///
/// Base class method implementation
///
/// @param self QCPItemAnchor*
/// @param pos QCPItemPosition*
void q_cpitemanchor_qbase_add_child_x(void* self, void* pos);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemAnchor.html)
///
/// @param self QCPItemAnchor*
/// @param pos QCPItemPosition*
void q_cpitemanchor_remove_child_x(void* self, void* pos);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemAnchor.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPItemAnchor*
/// @param callback void func(QCPItemAnchor* self, QCPItemPosition* pos)
void q_cpitemanchor_on_remove_child_x(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemAnchor.html)
///
/// Base class method implementation
///
/// @param self QCPItemAnchor*
/// @param pos QCPItemPosition*
void q_cpitemanchor_qbase_remove_child_x(void* self, void* pos);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemAnchor.html)
///
/// @param self QCPItemAnchor*
/// @param pos QCPItemPosition*
void q_cpitemanchor_add_child_y(void* self, void* pos);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemAnchor.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPItemAnchor*
/// @param callback void func(QCPItemAnchor* self, QCPItemPosition* pos)
void q_cpitemanchor_on_add_child_y(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemAnchor.html)
///
/// Base class method implementation
///
/// @param self QCPItemAnchor*
/// @param pos QCPItemPosition*
void q_cpitemanchor_qbase_add_child_y(void* self, void* pos);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemAnchor.html)
///
/// @param self QCPItemAnchor*
/// @param pos QCPItemPosition*
void q_cpitemanchor_remove_child_y(void* self, void* pos);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemAnchor.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPItemAnchor*
/// @param callback void func(QCPItemAnchor* self, QCPItemPosition* pos)
void q_cpitemanchor_on_remove_child_y(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemAnchor.html)
///
/// Base class method implementation
///
/// @param self QCPItemAnchor*
/// @param pos QCPItemPosition*
void q_cpitemanchor_qbase_remove_child_y(void* self, void* pos);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemAnchor.html)
///
/// Delete this object from C++ memory.
///
/// @param self QCPItemAnchor*
void q_cpitemanchor_delete(void* self);

/// https://www.qcustomplot.com/documentation/classQCPItemPosition.html

/// q_cpitemposition_new constructs a new QCPItemPosition object.
///
/// @param parentPlot QCustomPlot*
/// @param parentItem QCPAbstractItem*
/// @param name const char*
QCPItemPosition* q_cpitemposition_new(void* parentPlot, void* parentItem, const char* name);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemPosition.html)
///
/// @param self QCPItemPosition*
///
/// @return enum QCPItemPosition__PositionType
int32_t q_cpitemposition_type(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemPosition.html)
///
/// @param self QCPItemPosition*
///
/// @return enum QCPItemPosition__PositionType
int32_t q_cpitemposition_type_x(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemPosition.html)
///
/// @param self QCPItemPosition*
///
/// @return enum QCPItemPosition__PositionType
int32_t q_cpitemposition_type_y(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemPosition.html)
///
/// @param self QCPItemPosition*
QCPItemAnchor* q_cpitemposition_parent_anchor(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemPosition.html)
///
/// @param self QCPItemPosition*
QCPItemAnchor* q_cpitemposition_parent_anchor_x(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemPosition.html)
///
/// @param self QCPItemPosition*
QCPItemAnchor* q_cpitemposition_parent_anchor_y(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemPosition.html)
///
/// @param self QCPItemPosition*
double q_cpitemposition_key(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemPosition.html)
///
/// @param self QCPItemPosition*
double q_cpitemposition_value(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemPosition.html)
///
/// @param self QCPItemPosition*
QPointF* q_cpitemposition_coords(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemPosition.html)
///
/// @param self QCPItemPosition*
QCPAxis* q_cpitemposition_key_axis(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemPosition.html)
///
/// @param self QCPItemPosition*
QCPAxis* q_cpitemposition_value_axis(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemPosition.html)
///
/// @param self QCPItemPosition*
QCPAxisRect* q_cpitemposition_axis_rect(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemPosition.html)
///
/// @param self QCPItemPosition*
QPointF* q_cpitemposition_pixel_position(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemPosition.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPItemPosition*
/// @param callback QPointF* func()
void q_cpitemposition_on_pixel_position(void* self, QPointF* (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemPosition.html)
///
/// Base class method implementation
///
/// @param self QCPItemPosition*
QPointF* q_cpitemposition_qbase_pixel_position(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemPosition.html)
///
/// @param self QCPItemPosition*
/// @param type enum QCPItemPosition__PositionType
void q_cpitemposition_set_type(void* self, int32_t type);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemPosition.html)
///
/// @param self QCPItemPosition*
/// @param type enum QCPItemPosition__PositionType
void q_cpitemposition_set_type_x(void* self, int32_t type);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemPosition.html)
///
/// @param self QCPItemPosition*
/// @param type enum QCPItemPosition__PositionType
void q_cpitemposition_set_type_y(void* self, int32_t type);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemPosition.html)
///
/// @param self QCPItemPosition*
/// @param parentAnchor QCPItemAnchor*
bool q_cpitemposition_set_parent_anchor(void* self, void* parentAnchor);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemPosition.html)
///
/// @param self QCPItemPosition*
/// @param parentAnchor QCPItemAnchor*
bool q_cpitemposition_set_parent_anchor_x(void* self, void* parentAnchor);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemPosition.html)
///
/// @param self QCPItemPosition*
/// @param parentAnchor QCPItemAnchor*
bool q_cpitemposition_set_parent_anchor_y(void* self, void* parentAnchor);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemPosition.html)
///
/// @param self QCPItemPosition*
/// @param key double
/// @param value double
void q_cpitemposition_set_coords(void* self, double key, double value);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemPosition.html)
///
/// @param self QCPItemPosition*
/// @param pos QPointF*
void q_cpitemposition_set_coords2(void* self, void* pos);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemPosition.html)
///
/// @param self QCPItemPosition*
/// @param keyAxis QCPAxis*
/// @param valueAxis QCPAxis*
void q_cpitemposition_set_axes(void* self, void* keyAxis, void* valueAxis);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemPosition.html)
///
/// @param self QCPItemPosition*
/// @param axisRect QCPAxisRect*
void q_cpitemposition_set_axis_rect(void* self, void* axisRect);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemPosition.html)
///
/// @param self QCPItemPosition*
/// @param pixelPosition QPointF*
void q_cpitemposition_set_pixel_position(void* self, void* pixelPosition);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemPosition.html)
///
/// @param self QCPItemPosition*
QCPItemPosition* q_cpitemposition_to_q_c_p_item_position(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemPosition.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPItemPosition*
/// @param callback QCPItemPosition* func()
void q_cpitemposition_on_to_q_c_p_item_position(void* self, QCPItemPosition* (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemPosition.html)
///
/// Base class method implementation
///
/// @param self QCPItemPosition*
QCPItemPosition* q_cpitemposition_qbase_to_q_c_p_item_position(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemPosition.html)
///
/// @param self QCPItemPosition*
/// @param parentAnchor QCPItemAnchor*
/// @param keepPixelPosition bool
bool q_cpitemposition_set_parent_anchor2(void* self, void* parentAnchor, bool keepPixelPosition);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemPosition.html)
///
/// @param self QCPItemPosition*
/// @param parentAnchor QCPItemAnchor*
/// @param keepPixelPosition bool
bool q_cpitemposition_set_parent_anchor_x2(void* self, void* parentAnchor, bool keepPixelPosition);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemPosition.html)
///
/// @param self QCPItemPosition*
/// @param parentAnchor QCPItemAnchor*
/// @param keepPixelPosition bool
bool q_cpitemposition_set_parent_anchor_y2(void* self, void* parentAnchor, bool keepPixelPosition);

/// Inherited from QCPItemAnchor
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemAnchor.html)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPItemPosition*
const char* q_cpitemposition_name(void* self);

/// Inherited from QCPItemAnchor
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemAnchor.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemPosition*
/// @param pos QCPItemPosition*
void q_cpitemposition_add_child_x(void* self, void* pos);

/// Inherited from QCPItemAnchor
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemAnchor.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemPosition*
/// @param pos QCPItemPosition*
void q_cpitemposition_qbase_add_child_x(void* self, void* pos);

/// Inherited from QCPItemAnchor
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemAnchor.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemPosition*
/// @param callback void func(QCPItemPosition* self, QCPItemPosition* pos)
void q_cpitemposition_on_add_child_x(void* self, void (*callback)(void*, void*));

/// Inherited from QCPItemAnchor
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemAnchor.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemPosition*
/// @param pos QCPItemPosition*
void q_cpitemposition_remove_child_x(void* self, void* pos);

/// Inherited from QCPItemAnchor
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemAnchor.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemPosition*
/// @param pos QCPItemPosition*
void q_cpitemposition_qbase_remove_child_x(void* self, void* pos);

/// Inherited from QCPItemAnchor
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemAnchor.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemPosition*
/// @param callback void func(QCPItemPosition* self, QCPItemPosition* pos)
void q_cpitemposition_on_remove_child_x(void* self, void (*callback)(void*, void*));

/// Inherited from QCPItemAnchor
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemAnchor.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemPosition*
/// @param pos QCPItemPosition*
void q_cpitemposition_add_child_y(void* self, void* pos);

/// Inherited from QCPItemAnchor
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemAnchor.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemPosition*
/// @param pos QCPItemPosition*
void q_cpitemposition_qbase_add_child_y(void* self, void* pos);

/// Inherited from QCPItemAnchor
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemAnchor.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemPosition*
/// @param callback void func(QCPItemPosition* self, QCPItemPosition* pos)
void q_cpitemposition_on_add_child_y(void* self, void (*callback)(void*, void*));

/// Inherited from QCPItemAnchor
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemAnchor.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemPosition*
/// @param pos QCPItemPosition*
void q_cpitemposition_remove_child_y(void* self, void* pos);

/// Inherited from QCPItemAnchor
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemAnchor.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemPosition*
/// @param pos QCPItemPosition*
void q_cpitemposition_qbase_remove_child_y(void* self, void* pos);

/// Inherited from QCPItemAnchor
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemAnchor.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemPosition*
/// @param callback void func(QCPItemPosition* self, QCPItemPosition* pos)
void q_cpitemposition_on_remove_child_y(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemPosition.html)
///
/// Delete this object from C++ memory.
///
/// @param self QCPItemPosition*
void q_cpitemposition_delete(void* self);

/// https://www.qcustomplot.com/documentation/classQCPAbstractItem.html

/// q_cpabstractitem_new constructs a new QCPAbstractItem object.
///
/// @param parentPlot QCustomPlot*
QCPAbstractItem* q_cpabstractitem_new(void* parentPlot);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#metaObject)
///
/// @param self QCPAbstractItem*
const QMetaObject* q_cpabstractitem_meta_object(void* self);

/// @param self QCPAbstractItem*
/// @param param1 const char*
void* q_cpabstractitem_metacast(void* self, const char* param1);

/// @param self QCPAbstractItem*
/// @param param1 enum QMetaObject__Call
/// @param param2 int
/// @param param3 void*
int32_t q_cpabstractitem_metacall(void* self, int32_t param1, int param2, void* param3);

/// Allows for overriding the related default method
///
/// @param self QCPAbstractItem*
/// @param callback int32_t func(QCPAbstractItem* self, enum QMetaObject__Call param1, int param2, void* param3)
void q_cpabstractitem_on_metacall(void* self, int32_t (*callback)(void*, int32_t, int, void*));

/// Base class method implementation
///
/// @param self QCPAbstractItem*
/// @param param1 enum QMetaObject__Call
/// @param param2 int
/// @param param3 void*
int32_t q_cpabstractitem_qbase_metacall(void* self, int32_t param1, int param2, void* param3);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
const char* q_cpabstractitem_tr(const char* s);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPAbstractItem*
bool q_cpabstractitem_clip_to_axis_rect(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPAbstractItem*
QCPAxisRect* q_cpabstractitem_clip_axis_rect(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPAbstractItem*
bool q_cpabstractitem_selectable(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPAbstractItem*
bool q_cpabstractitem_selected(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPAbstractItem*
/// @param clip bool
void q_cpabstractitem_set_clip_to_axis_rect(void* self, bool clip);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPAbstractItem*
/// @param rect QCPAxisRect*
void q_cpabstractitem_set_clip_axis_rect(void* self, void* rect);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPAbstractItem*
/// @param selectable bool
void q_cpabstractitem_set_selectable(void* self, bool selectable);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPAbstractItem*
/// @param selected bool
void q_cpabstractitem_set_selected(void* self, bool selected);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPAbstractItem*
/// @param pos QPointF*
/// @param onlySelectable bool
/// @param details QVariant*
double q_cpabstractitem_select_test(void* self, void* pos, bool onlySelectable, void* details);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPAbstractItem*
/// @param callback double func(QCPAbstractItem* self, QPointF* pos, bool onlySelectable, QVariant* details)
void q_cpabstractitem_on_select_test(void* self, double (*callback)(void*, void*, bool, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Base class method implementation
///
/// @param self QCPAbstractItem*
/// @param pos QPointF*
/// @param onlySelectable bool
/// @param details QVariant*
double q_cpabstractitem_qbase_select_test(void* self, void* pos, bool onlySelectable, void* details);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPAbstractItem*
libqt_list /* of QCPItemPosition* */ q_cpabstractitem_positions(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPAbstractItem*
libqt_list /* of QCPItemAnchor* */ q_cpabstractitem_anchors(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPAbstractItem*
/// @param name const char*
QCPItemPosition* q_cpabstractitem_position(void* self, const char* name);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPAbstractItem*
/// @param name const char*
QCPItemAnchor* q_cpabstractitem_anchor(void* self, const char* name);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPAbstractItem*
/// @param name const char*
bool q_cpabstractitem_has_anchor(void* self, const char* name);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPAbstractItem*
/// @param selected bool
void q_cpabstractitem_selection_changed(void* self, bool selected);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPAbstractItem*
/// @param callback void func(QCPAbstractItem* self, bool selected)
void q_cpabstractitem_on_selection_changed(void* self, void (*callback)(void*, bool));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPAbstractItem*
/// @param selectable bool
void q_cpabstractitem_selectable_changed(void* self, bool selectable);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPAbstractItem*
/// @param callback void func(QCPAbstractItem* self, bool selectable)
void q_cpabstractitem_on_selectable_changed(void* self, void (*callback)(void*, bool));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPAbstractItem*
///
/// @return enum QCP__Interaction
int32_t q_cpabstractitem_selection_category(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPAbstractItem*
/// @param callback int32_t func()
void q_cpabstractitem_on_selection_category(void* self, int32_t (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Base class method implementation
///
/// @param self QCPAbstractItem*
///
/// @return enum QCP__Interaction
int32_t q_cpabstractitem_qbase_selection_category(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPAbstractItem*
QRect* q_cpabstractitem_clip_rect(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPAbstractItem*
/// @param callback QRect* func()
void q_cpabstractitem_on_clip_rect(void* self, QRect* (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Base class method implementation
///
/// @param self QCPAbstractItem*
QRect* q_cpabstractitem_qbase_clip_rect(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPAbstractItem*
/// @param painter QCPPainter*
void q_cpabstractitem_apply_default_antialiasing_hint(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPAbstractItem*
/// @param callback void func(QCPAbstractItem* self, QCPPainter* painter)
void q_cpabstractitem_on_apply_default_antialiasing_hint(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Base class method implementation
///
/// @param self QCPAbstractItem*
/// @param painter QCPPainter*
void q_cpabstractitem_qbase_apply_default_antialiasing_hint(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPAbstractItem*
/// @param painter QCPPainter*
void q_cpabstractitem_draw(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPAbstractItem*
/// @param callback void func(QCPAbstractItem* self, QCPPainter* painter)
void q_cpabstractitem_on_draw(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Base class method implementation
///
/// @param self QCPAbstractItem*
/// @param painter QCPPainter*
void q_cpabstractitem_qbase_draw(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPAbstractItem*
/// @param event QMouseEvent*
/// @param additive bool
/// @param details QVariant*
/// @param selectionStateChanged bool*
void q_cpabstractitem_select_event(void* self, void* event, bool additive, void* details, bool* selectionStateChanged);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPAbstractItem*
/// @param callback void func(QCPAbstractItem* self, QMouseEvent* event, bool additive, QVariant* details, bool* selectionStateChanged)
void q_cpabstractitem_on_select_event(void* self, void (*callback)(void*, void*, bool, void*, bool*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Base class method implementation
///
/// @param self QCPAbstractItem*
/// @param event QMouseEvent*
/// @param additive bool
/// @param details QVariant*
/// @param selectionStateChanged bool*
void q_cpabstractitem_qbase_select_event(void* self, void* event, bool additive, void* details, bool* selectionStateChanged);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPAbstractItem*
/// @param selectionStateChanged bool*
void q_cpabstractitem_deselect_event(void* self, bool* selectionStateChanged);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPAbstractItem*
/// @param callback void func(QCPAbstractItem* self, bool* selectionStateChanged)
void q_cpabstractitem_on_deselect_event(void* self, void (*callback)(void*, bool*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Base class method implementation
///
/// @param self QCPAbstractItem*
/// @param selectionStateChanged bool*
void q_cpabstractitem_qbase_deselect_event(void* self, bool* selectionStateChanged);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPAbstractItem*
/// @param anchorId int
QPointF* q_cpabstractitem_anchor_pixel_position(void* self, int anchorId);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPAbstractItem*
/// @param callback QPointF* func(QCPAbstractItem* self, int anchorId)
void q_cpabstractitem_on_anchor_pixel_position(void* self, QPointF* (*callback)(void*, int));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Base class method implementation
///
/// @param self QCPAbstractItem*
/// @param anchorId int
QPointF* q_cpabstractitem_qbase_anchor_pixel_position(void* self, int anchorId);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPAbstractItem*
/// @param rect QRectF*
/// @param pos QPointF*
/// @param filledRect bool
double q_cpabstractitem_rect_distance(void* self, void* rect, void* pos, bool filledRect);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPAbstractItem*
/// @param callback double func(QCPAbstractItem* self, QRectF* rect, QPointF* pos, bool filledRect)
void q_cpabstractitem_on_rect_distance(void* self, double (*callback)(void*, void*, void*, bool));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Base class method implementation
///
/// @param self QCPAbstractItem*
/// @param rect QRectF*
/// @param pos QPointF*
/// @param filledRect bool
double q_cpabstractitem_qbase_rect_distance(void* self, void* rect, void* pos, bool filledRect);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPAbstractItem*
/// @param name const char*
QCPItemPosition* q_cpabstractitem_create_position(void* self, const char* name);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPAbstractItem*
/// @param callback QCPItemPosition* func(QCPAbstractItem* self, const char* name)
void q_cpabstractitem_on_create_position(void* self, QCPItemPosition* (*callback)(void*, const char*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Base class method implementation
///
/// @param self QCPAbstractItem*
/// @param name const char*
QCPItemPosition* q_cpabstractitem_qbase_create_position(void* self, const char* name);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPAbstractItem*
/// @param name const char*
/// @param anchorId int
QCPItemAnchor* q_cpabstractitem_create_anchor(void* self, const char* name, int anchorId);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPAbstractItem*
/// @param callback QCPItemAnchor* func(QCPAbstractItem* self, const char* name, int anchorId)
void q_cpabstractitem_on_create_anchor(void* self, QCPItemAnchor* (*callback)(void*, const char*, int));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Base class method implementation
///
/// @param self QCPAbstractItem*
/// @param name const char*
/// @param anchorId int
QCPItemAnchor* q_cpabstractitem_qbase_create_anchor(void* self, const char* name, int anchorId);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
/// @param c const char*
const char* q_cpabstractitem_tr2(const char* s, const char* c);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
/// @param c const char*
/// @param n int
const char* q_cpabstractitem_tr3(const char* s, const char* c, int n);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPAbstractItem*
bool q_cpabstractitem_visible(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPAbstractItem*
QCustomPlot* q_cpabstractitem_parent_plot(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPAbstractItem*
QCPLayerable* q_cpabstractitem_parent_layerable(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPAbstractItem*
QCPLayer* q_cpabstractitem_layer(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPAbstractItem*
bool q_cpabstractitem_antialiased(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPAbstractItem*
/// @param on bool
void q_cpabstractitem_set_visible(void* self, bool on);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPAbstractItem*
/// @param layer QCPLayer*
bool q_cpabstractitem_set_layer(void* self, void* layer);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPAbstractItem*
/// @param layerName const char*
bool q_cpabstractitem_set_layer2(void* self, const char* layerName);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPAbstractItem*
/// @param enabled bool
void q_cpabstractitem_set_antialiased(void* self, bool enabled);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPAbstractItem*
bool q_cpabstractitem_real_visibility(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPAbstractItem*
/// @param newLayer QCPLayer*
void q_cpabstractitem_layer_changed(void* self, void* newLayer);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPAbstractItem*
/// @param callback void func(QCPAbstractItem* self, QCPLayer* newLayer)
void q_cpabstractitem_on_layer_changed(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#objectName)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPAbstractItem*
const char* q_cpabstractitem_object_name(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setObjectName)
///
/// @param self QCPAbstractItem*
/// @param name char*
void q_cpabstractitem_set_object_name(void* self, char* name);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isWidgetType)
///
/// @param self QCPAbstractItem*
bool q_cpabstractitem_is_widget_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isWindowType)
///
/// @param self QCPAbstractItem*
bool q_cpabstractitem_is_window_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isQuickItemType)
///
/// @param self QCPAbstractItem*
bool q_cpabstractitem_is_quick_item_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#signalsBlocked)
///
/// @param self QCPAbstractItem*
bool q_cpabstractitem_signals_blocked(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#blockSignals)
///
/// @param self QCPAbstractItem*
/// @param b bool
bool q_cpabstractitem_block_signals(void* self, bool b);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#thread)
///
/// @param self QCPAbstractItem*
QThread* q_cpabstractitem_thread(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#moveToThread)
///
/// @param self QCPAbstractItem*
/// @param thread QThread*
bool q_cpabstractitem_move_to_thread(void* self, void* thread);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#startTimer)
///
/// @param self QCPAbstractItem*
/// @param interval int
int32_t q_cpabstractitem_start_timer(void* self, int interval);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#killTimer)
///
/// @param self QCPAbstractItem*
/// @param id int
void q_cpabstractitem_kill_timer(void* self, int id);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#killTimer)
///
/// @param self QCPAbstractItem*
/// @param id enum Qt__TimerId
void q_cpabstractitem_kill_timer2(void* self, int32_t id);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#children)
///
/// @param self QCPAbstractItem*
libqt_list /* of QObject* */ q_cpabstractitem_children(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setParent)
///
/// @param self QCPAbstractItem*
/// @param parent QObject*
void q_cpabstractitem_set_parent(void* self, void* parent);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#installEventFilter)
///
/// @param self QCPAbstractItem*
/// @param filterObj QObject*
void q_cpabstractitem_install_event_filter(void* self, void* filterObj);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#removeEventFilter)
///
/// @param self QCPAbstractItem*
/// @param obj QObject*
void q_cpabstractitem_remove_event_filter(void* self, void* obj);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param method QMetaMethod*
QMetaObject__Connection* q_cpabstractitem_connect(void* sender, void* signal, void* receiver, void* method);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param self QCPAbstractItem*
/// @param sender QObject*
/// @param signal const char*
/// @param member const char*
QMetaObject__Connection* q_cpabstractitem_connect2(void* self, void* sender, const char* signal, const char* member);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param member QMetaMethod*
bool q_cpabstractitem_disconnect(void* sender, void* signal, void* receiver, void* member);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnect)
///
/// @param param1 QMetaObject__Connection*
bool q_cpabstractitem_disconnect2(void* param1);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dumpObjectTree)
///
/// @param self QCPAbstractItem*
void q_cpabstractitem_dump_object_tree(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dumpObjectInfo)
///
/// @param self QCPAbstractItem*
void q_cpabstractitem_dump_object_info(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setProperty)
///
/// @param self QCPAbstractItem*
/// @param name const char*
/// @param value QVariant*
bool q_cpabstractitem_set_property(void* self, const char* name, void* value);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#property)
///
/// @param self QCPAbstractItem*
/// @param name const char*
QVariant* q_cpabstractitem_property(void* self, const char* name);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dynamicPropertyNames)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPAbstractItem*
const char** q_cpabstractitem_dynamic_property_names(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#bindingStorage)
///
/// @param self QCPAbstractItem*
QBindingStorage* q_cpabstractitem_binding_storage(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#bindingStorage)
///
/// @param self QCPAbstractItem*
const QBindingStorage* q_cpabstractitem_binding_storage2(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPAbstractItem*
void q_cpabstractitem_destroyed(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPAbstractItem*
/// @param callback void func(QCPAbstractItem* self)
void q_cpabstractitem_on_destroyed(void* self, void (*callback)(void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#parent)
///
/// @param self QCPAbstractItem*
QObject* q_cpabstractitem_parent(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#inherits)
///
/// @param self QCPAbstractItem*
/// @param classname const char*
bool q_cpabstractitem_inherits(void* self, const char* classname);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#deleteLater)
///
/// @param self QCPAbstractItem*
void q_cpabstractitem_delete_later(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#moveToThread)
///
/// @param self QCPAbstractItem*
/// @param thread QThread*
/// @param param2 Disambiguated_t*
bool q_cpabstractitem_move_to_thread2(void* self, void* thread, void* param2);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#startTimer)
///
/// @param self QCPAbstractItem*
/// @param interval int
/// @param timerType enum Qt__TimerType
int32_t q_cpabstractitem_start_timer22(void* self, int interval, int32_t timerType);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param method QMetaMethod*
/// @param type enum Qt__ConnectionType
QMetaObject__Connection* q_cpabstractitem_connect5(void* sender, void* signal, void* receiver, void* method, int32_t type);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param self QCPAbstractItem*
/// @param sender QObject*
/// @param signal const char*
/// @param member const char*
/// @param type enum Qt__ConnectionType
QMetaObject__Connection* q_cpabstractitem_connect4(void* self, void* sender, const char* signal, const char* member, int32_t type);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPAbstractItem*
/// @param param1 QObject*
void q_cpabstractitem_destroyed1(void* self, void* param1);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPAbstractItem*
/// @param callback void func(QCPAbstractItem* self, QObject* param1)
void q_cpabstractitem_on_destroyed1(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAbstractItem*
/// @param parentPlot QCustomPlot*
void q_cpabstractitem_parent_plot_initialized(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAbstractItem*
/// @param parentPlot QCustomPlot*
void q_cpabstractitem_qbase_parent_plot_initialized(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAbstractItem*
/// @param callback void func(QCPAbstractItem* self, QCustomPlot* parentPlot)
void q_cpabstractitem_on_parent_plot_initialized(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAbstractItem*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cpabstractitem_mouse_press_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAbstractItem*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cpabstractitem_qbase_mouse_press_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAbstractItem*
/// @param callback void func(QCPAbstractItem* self, QMouseEvent* event, QVariant* details)
void q_cpabstractitem_on_mouse_press_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAbstractItem*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cpabstractitem_mouse_move_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAbstractItem*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cpabstractitem_qbase_mouse_move_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAbstractItem*
/// @param callback void func(QCPAbstractItem* self, QMouseEvent* event, QPointF* startPos)
void q_cpabstractitem_on_mouse_move_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAbstractItem*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cpabstractitem_mouse_release_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAbstractItem*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cpabstractitem_qbase_mouse_release_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAbstractItem*
/// @param callback void func(QCPAbstractItem* self, QMouseEvent* event, QPointF* startPos)
void q_cpabstractitem_on_mouse_release_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAbstractItem*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cpabstractitem_mouse_double_click_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAbstractItem*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cpabstractitem_qbase_mouse_double_click_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAbstractItem*
/// @param callback void func(QCPAbstractItem* self, QMouseEvent* event, QVariant* details)
void q_cpabstractitem_on_mouse_double_click_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAbstractItem*
/// @param event QWheelEvent*
void q_cpabstractitem_wheel_event(void* self, void* event);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAbstractItem*
/// @param event QWheelEvent*
void q_cpabstractitem_qbase_wheel_event(void* self, void* event);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAbstractItem*
/// @param callback void func(QCPAbstractItem* self, QWheelEvent* event)
void q_cpabstractitem_on_wheel_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAbstractItem*
/// @param event QEvent*
bool q_cpabstractitem_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAbstractItem*
/// @param event QEvent*
bool q_cpabstractitem_qbase_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAbstractItem*
/// @param callback bool func(QCPAbstractItem* self, QEvent* event)
void q_cpabstractitem_on_event(void* self, bool (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAbstractItem*
/// @param watched QObject*
/// @param event QEvent*
bool q_cpabstractitem_event_filter(void* self, void* watched, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAbstractItem*
/// @param watched QObject*
/// @param event QEvent*
bool q_cpabstractitem_qbase_event_filter(void* self, void* watched, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAbstractItem*
/// @param callback bool func(QCPAbstractItem* self, QObject* watched, QEvent* event)
void q_cpabstractitem_on_event_filter(void* self, bool (*callback)(void*, void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAbstractItem*
/// @param event QTimerEvent*
void q_cpabstractitem_timer_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAbstractItem*
/// @param event QTimerEvent*
void q_cpabstractitem_qbase_timer_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAbstractItem*
/// @param callback void func(QCPAbstractItem* self, QTimerEvent* event)
void q_cpabstractitem_on_timer_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAbstractItem*
/// @param event QChildEvent*
void q_cpabstractitem_child_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAbstractItem*
/// @param event QChildEvent*
void q_cpabstractitem_qbase_child_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAbstractItem*
/// @param callback void func(QCPAbstractItem* self, QChildEvent* event)
void q_cpabstractitem_on_child_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAbstractItem*
/// @param event QEvent*
void q_cpabstractitem_custom_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAbstractItem*
/// @param event QEvent*
void q_cpabstractitem_qbase_custom_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAbstractItem*
/// @param callback void func(QCPAbstractItem* self, QEvent* event)
void q_cpabstractitem_on_custom_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAbstractItem*
/// @param signal QMetaMethod*
void q_cpabstractitem_connect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAbstractItem*
/// @param signal QMetaMethod*
void q_cpabstractitem_qbase_connect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAbstractItem*
/// @param callback void func(QCPAbstractItem* self, QMetaMethod* signal)
void q_cpabstractitem_on_connect_notify(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAbstractItem*
/// @param signal QMetaMethod*
void q_cpabstractitem_disconnect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAbstractItem*
/// @param signal QMetaMethod*
void q_cpabstractitem_qbase_disconnect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAbstractItem*
/// @param callback void func(QCPAbstractItem* self, QMetaMethod* signal)
void q_cpabstractitem_on_disconnect_notify(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAbstractItem*
/// @param parentPlot QCustomPlot*
void q_cpabstractitem_initialize_parent_plot(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAbstractItem*
/// @param parentPlot QCustomPlot*
void q_cpabstractitem_qbase_initialize_parent_plot(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAbstractItem*
/// @param callback void func(QCPAbstractItem* self, QCustomPlot* parentPlot)
void q_cpabstractitem_on_initialize_parent_plot(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAbstractItem*
/// @param parentLayerable QCPLayerable*
void q_cpabstractitem_set_parent_layerable(void* self, void* parentLayerable);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAbstractItem*
/// @param parentLayerable QCPLayerable*
void q_cpabstractitem_qbase_set_parent_layerable(void* self, void* parentLayerable);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAbstractItem*
/// @param callback void func(QCPAbstractItem* self, QCPLayerable* parentLayerable)
void q_cpabstractitem_on_set_parent_layerable(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAbstractItem*
/// @param layer QCPLayer*
/// @param prepend bool
bool q_cpabstractitem_move_to_layer(void* self, void* layer, bool prepend);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAbstractItem*
/// @param layer QCPLayer*
/// @param prepend bool
bool q_cpabstractitem_qbase_move_to_layer(void* self, void* layer, bool prepend);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAbstractItem*
/// @param callback bool func(QCPAbstractItem* self, QCPLayer* layer, bool prepend)
void q_cpabstractitem_on_move_to_layer(void* self, bool (*callback)(void*, void*, bool));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAbstractItem*
/// @param painter QCPPainter*
/// @param localAntialiased bool
/// @param overrideElement enum QCP__AntialiasedElement
void q_cpabstractitem_apply_antialiasing_hint(void* self, void* painter, bool localAntialiased, int32_t overrideElement);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAbstractItem*
/// @param painter QCPPainter*
/// @param localAntialiased bool
/// @param overrideElement enum QCP__AntialiasedElement
void q_cpabstractitem_qbase_apply_antialiasing_hint(void* self, void* painter, bool localAntialiased, int32_t overrideElement);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAbstractItem*
/// @param callback void func(QCPAbstractItem* self, QCPPainter* painter, bool localAntialiased, enum QCP__AntialiasedElement overrideElement)
void q_cpabstractitem_on_apply_antialiasing_hint(void* self, void (*callback)(void*, void*, bool, int32_t));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAbstractItem*
QObject* q_cpabstractitem_sender(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAbstractItem*
QObject* q_cpabstractitem_qbase_sender(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAbstractItem*
/// @param callback QObject* func()
void q_cpabstractitem_on_sender(void* self, QObject* (*callback)());

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAbstractItem*
int32_t q_cpabstractitem_sender_signal_index(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAbstractItem*
int32_t q_cpabstractitem_qbase_sender_signal_index(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAbstractItem*
/// @param callback int32_t func()
void q_cpabstractitem_on_sender_signal_index(void* self, int32_t (*callback)());

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAbstractItem*
/// @param signal const char*
int32_t q_cpabstractitem_receivers(void* self, const char* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAbstractItem*
/// @param signal const char*
int32_t q_cpabstractitem_qbase_receivers(void* self, const char* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAbstractItem*
/// @param callback int32_t func(QCPAbstractItem* self, const char* signal)
void q_cpabstractitem_on_receivers(void* self, int32_t (*callback)(void*, const char*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAbstractItem*
/// @param signal QMetaMethod*
bool q_cpabstractitem_is_signal_connected(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAbstractItem*
/// @param signal QMetaMethod*
bool q_cpabstractitem_qbase_is_signal_connected(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAbstractItem*
/// @param callback bool func(QCPAbstractItem* self, QMetaMethod* signal)
void q_cpabstractitem_on_is_signal_connected(void* self, bool (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#objectNameChanged)
///
/// Wrapper to allow calling private signal
///
/// @param self QCPAbstractItem*
/// @param callback void func(QCPAbstractItem* self, const char* objectName)
void q_cpabstractitem_on_object_name_changed(void* self, void (*callback)(void*, const char*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Delete this object from C++ memory.
///
/// @param self QCPAbstractItem*
void q_cpabstractitem_delete(void* self);

/// https://www.qcustomplot.com/documentation/classQCustomPlot.html

/// q_customplot_new constructs a new QCustomPlot object.
///
/// @param parent QWidget*
QCustomPlot* q_customplot_new(void* parent);

/// q_customplot_new2 constructs a new QCustomPlot object.
///
QCustomPlot* q_customplot_new2();

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#metaObject)
///
/// @param self QCustomPlot*
const QMetaObject* q_customplot_meta_object(void* self);

/// @param self QCustomPlot*
/// @param param1 const char*
void* q_customplot_metacast(void* self, const char* param1);

/// @param self QCustomPlot*
/// @param param1 enum QMetaObject__Call
/// @param param2 int
/// @param param3 void*
int32_t q_customplot_metacall(void* self, int32_t param1, int param2, void* param3);

/// Allows for overriding the related default method
///
/// @param self QCustomPlot*
/// @param callback int32_t func(QCustomPlot* self, enum QMetaObject__Call param1, int param2, void* param3)
void q_customplot_on_metacall(void* self, int32_t (*callback)(void*, int32_t, int, void*));

/// Base class method implementation
///
/// @param self QCustomPlot*
/// @param param1 enum QMetaObject__Call
/// @param param2 int
/// @param param3 void*
int32_t q_customplot_qbase_metacall(void* self, int32_t param1, int param2, void* param3);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
const char* q_customplot_tr(const char* s);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
QRect* q_customplot_viewport(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
double q_customplot_buffer_device_pixel_ratio(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
QPixmap* q_customplot_background(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
bool q_customplot_background_scaled(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
///
/// @return enum Qt__AspectRatioMode
int32_t q_customplot_background_scaled_mode(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
QCPLayoutGrid* q_customplot_plot_layout(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
///
/// @return flag of enum QCP__AntialiasedElement
int32_t q_customplot_antialiased_elements(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
///
/// @return flag of enum QCP__AntialiasedElement
int32_t q_customplot_not_antialiased_elements(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
bool q_customplot_auto_add_plottable_to_legend(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
///
/// @return flag of enum QCP__Interaction
int32_t q_customplot_interactions(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
int32_t q_customplot_selection_tolerance(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
bool q_customplot_no_antialiasing_on_drag(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
///
/// @return flag of enum QCP__PlottingHint
int32_t q_customplot_plotting_hints(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
///
/// @return enum Qt__KeyboardModifier
int64_t q_customplot_multi_select_modifier(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
///
/// @return enum QCP__SelectionRectMode
int32_t q_customplot_selection_rect_mode(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
QCPSelectionRect* q_customplot_selection_rect(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
bool q_customplot_open_gl(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param rect QRect*
void q_customplot_set_viewport(void* self, void* rect);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param ratio double
void q_customplot_set_buffer_device_pixel_ratio(void* self, double ratio);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param pm QPixmap*
void q_customplot_set_background(void* self, void* pm);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param pm QPixmap*
/// @param scaled bool
void q_customplot_set_background2(void* self, void* pm, bool scaled);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param brush QBrush*
void q_customplot_set_background3(void* self, void* brush);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param scaled bool
void q_customplot_set_background_scaled(void* self, bool scaled);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param mode enum Qt__AspectRatioMode
void q_customplot_set_background_scaled_mode(void* self, int32_t mode);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param antialiasedElements flag of enum QCP__AntialiasedElement
void q_customplot_set_antialiased_elements(void* self, const int32_t* antialiasedElements);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param antialiasedElement enum QCP__AntialiasedElement
void q_customplot_set_antialiased_element(void* self, int32_t antialiasedElement);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param notAntialiasedElements flag of enum QCP__AntialiasedElement
void q_customplot_set_not_antialiased_elements(void* self, const int32_t* notAntialiasedElements);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param notAntialiasedElement enum QCP__AntialiasedElement
void q_customplot_set_not_antialiased_element(void* self, int32_t notAntialiasedElement);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param on bool
void q_customplot_set_auto_add_plottable_to_legend(void* self, bool on);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param interactions flag of enum QCP__Interaction
void q_customplot_set_interactions(void* self, const int32_t* interactions);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param interaction enum QCP__Interaction*
void q_customplot_set_interaction(void* self, int32_t* interaction);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param pixels int
void q_customplot_set_selection_tolerance(void* self, int pixels);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param enabled bool
void q_customplot_set_no_antialiasing_on_drag(void* self, bool enabled);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param hints flag of enum QCP__PlottingHint
void q_customplot_set_plotting_hints(void* self, const int32_t* hints);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param hint enum QCP__PlottingHint
void q_customplot_set_plotting_hint(void* self, int32_t hint);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param modifier enum Qt__KeyboardModifier
void q_customplot_set_multi_select_modifier(void* self, int64_t modifier);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param mode enum QCP__SelectionRectMode
void q_customplot_set_selection_rect_mode(void* self, int32_t mode);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param selectionRect QCPSelectionRect*
void q_customplot_set_selection_rect(void* self, void* selectionRect);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param enabled bool
void q_customplot_set_open_gl(void* self, bool enabled);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param index int
QCPAbstractPlottable* q_customplot_plottable(void* self, int index);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
QCPAbstractPlottable* q_customplot_plottable2(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param plottable QCPAbstractPlottable*
bool q_customplot_remove_plottable(void* self, void* plottable);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param index int
bool q_customplot_remove_plottable2(void* self, int index);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
int32_t q_customplot_clear_plottables(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
int32_t q_customplot_plottable_count(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
libqt_list /* of QCPAbstractPlottable* */ q_customplot_selected_plottables(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param pos QPointF*
QCPAbstractPlottable* q_customplot_plottable_at(void* self, void* pos);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param plottable QCPAbstractPlottable*
bool q_customplot_has_plottable(void* self, void* plottable);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param index int
QCPGraph* q_customplot_graph(void* self, int index);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
QCPGraph* q_customplot_graph2(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
QCPGraph* q_customplot_add_graph(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param graph QCPGraph*
bool q_customplot_remove_graph(void* self, void* graph);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param index int
bool q_customplot_remove_graph2(void* self, int index);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
int32_t q_customplot_clear_graphs(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
int32_t q_customplot_graph_count(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
libqt_list /* of QCPGraph* */ q_customplot_selected_graphs(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param index int
QCPAbstractItem* q_customplot_item(void* self, int index);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
QCPAbstractItem* q_customplot_item2(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param item QCPAbstractItem*
bool q_customplot_remove_item(void* self, void* item);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param index int
bool q_customplot_remove_item2(void* self, int index);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
int32_t q_customplot_clear_items(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
int32_t q_customplot_item_count(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
libqt_list /* of QCPAbstractItem* */ q_customplot_selected_items(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param pos QPointF*
QCPAbstractItem* q_customplot_item_at(void* self, void* pos);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param item QCPAbstractItem*
bool q_customplot_has_item(void* self, void* item);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param name const char*
QCPLayer* q_customplot_layer(void* self, const char* name);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param index int
QCPLayer* q_customplot_layer2(void* self, int index);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
QCPLayer* q_customplot_current_layer(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param name const char*
bool q_customplot_set_current_layer(void* self, const char* name);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param layer QCPLayer*
bool q_customplot_set_current_layer2(void* self, void* layer);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
int32_t q_customplot_layer_count(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param name const char*
bool q_customplot_add_layer(void* self, const char* name);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param layer QCPLayer*
bool q_customplot_remove_layer(void* self, void* layer);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param layer QCPLayer*
/// @param otherLayer QCPLayer*
bool q_customplot_move_layer(void* self, void* layer, void* otherLayer);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
int32_t q_customplot_axis_rect_count(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
QCPAxisRect* q_customplot_axis_rect(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
libqt_list /* of QCPAxisRect* */ q_customplot_axis_rects(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param pos QPointF*
QCPLayoutElement* q_customplot_layout_element_at(void* self, void* pos);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param pos QPointF*
QCPAxisRect* q_customplot_axis_rect_at(void* self, void* pos);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
void q_customplot_rescale_axes(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
libqt_list /* of QCPAxis* */ q_customplot_selected_axes(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
libqt_list /* of QCPLegend* */ q_customplot_selected_legends(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
void q_customplot_deselect_all(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param fileName const char*
bool q_customplot_save_pdf(void* self, const char* fileName);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param fileName const char*
bool q_customplot_save_png(void* self, const char* fileName);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param fileName const char*
bool q_customplot_save_jpg(void* self, const char* fileName);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param fileName const char*
bool q_customplot_save_bmp(void* self, const char* fileName);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param fileName const char*
/// @param width int
/// @param height int
/// @param scale double
/// @param format const char*
bool q_customplot_save_rastered(void* self, const char* fileName, int width, int height, double scale, const char* format);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
QPixmap* q_customplot_to_pixmap(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param painter QCPPainter*
void q_customplot_to_painter(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
void q_customplot_replot(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
double q_customplot_replot_time(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
QCPAxis* q_customplot_x_axis(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param xAxis QCPAxis*
void q_customplot_set_x_axis(void* self, void* xAxis);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
QCPAxis* q_customplot_y_axis(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param yAxis QCPAxis*
void q_customplot_set_y_axis(void* self, void* yAxis);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
QCPAxis* q_customplot_x_axis2(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param xAxis2 QCPAxis*
void q_customplot_set_x_axis2(void* self, void* xAxis2);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
QCPAxis* q_customplot_y_axis2(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param yAxis2 QCPAxis*
void q_customplot_set_y_axis2(void* self, void* yAxis2);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
QCPLegend* q_customplot_legend(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param legend QCPLegend*
void q_customplot_set_legend(void* self, void* legend);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param event QMouseEvent*
void q_customplot_mouse_double_click(void* self, void* event);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param callback void func(QCustomPlot* self, QMouseEvent* event)
void q_customplot_on_mouse_double_click(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param event QMouseEvent*
void q_customplot_mouse_press(void* self, void* event);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param callback void func(QCustomPlot* self, QMouseEvent* event)
void q_customplot_on_mouse_press(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param event QMouseEvent*
void q_customplot_mouse_move(void* self, void* event);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param callback void func(QCustomPlot* self, QMouseEvent* event)
void q_customplot_on_mouse_move(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param event QMouseEvent*
void q_customplot_mouse_release(void* self, void* event);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param callback void func(QCustomPlot* self, QMouseEvent* event)
void q_customplot_on_mouse_release(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param event QWheelEvent*
void q_customplot_mouse_wheel(void* self, void* event);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param callback void func(QCustomPlot* self, QWheelEvent* event)
void q_customplot_on_mouse_wheel(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param plottable QCPAbstractPlottable*
/// @param dataIndex int
/// @param event QMouseEvent*
void q_customplot_plottable_click(void* self, void* plottable, int dataIndex, void* event);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param callback void func(QCustomPlot* self, QCPAbstractPlottable* plottable, int dataIndex, QMouseEvent* event)
void q_customplot_on_plottable_click(void* self, void (*callback)(void*, void*, int, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param plottable QCPAbstractPlottable*
/// @param dataIndex int
/// @param event QMouseEvent*
void q_customplot_plottable_double_click(void* self, void* plottable, int dataIndex, void* event);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param callback void func(QCustomPlot* self, QCPAbstractPlottable* plottable, int dataIndex, QMouseEvent* event)
void q_customplot_on_plottable_double_click(void* self, void (*callback)(void*, void*, int, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param item QCPAbstractItem*
/// @param event QMouseEvent*
void q_customplot_item_click(void* self, void* item, void* event);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param callback void func(QCustomPlot* self, QCPAbstractItem* item, QMouseEvent* event)
void q_customplot_on_item_click(void* self, void (*callback)(void*, void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param item QCPAbstractItem*
/// @param event QMouseEvent*
void q_customplot_item_double_click(void* self, void* item, void* event);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param callback void func(QCustomPlot* self, QCPAbstractItem* item, QMouseEvent* event)
void q_customplot_on_item_double_click(void* self, void (*callback)(void*, void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param axis QCPAxis*
/// @param part enum QCPAxis__SelectablePart
/// @param event QMouseEvent*
void q_customplot_axis_click(void* self, void* axis, int32_t part, void* event);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param callback void func(QCustomPlot* self, QCPAxis* axis, enum QCPAxis__SelectablePart part, QMouseEvent* event)
void q_customplot_on_axis_click(void* self, void (*callback)(void*, void*, int32_t, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param axis QCPAxis*
/// @param part enum QCPAxis__SelectablePart
/// @param event QMouseEvent*
void q_customplot_axis_double_click(void* self, void* axis, int32_t part, void* event);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param callback void func(QCustomPlot* self, QCPAxis* axis, enum QCPAxis__SelectablePart part, QMouseEvent* event)
void q_customplot_on_axis_double_click(void* self, void (*callback)(void*, void*, int32_t, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param legend QCPLegend*
/// @param item QCPAbstractLegendItem*
/// @param event QMouseEvent*
void q_customplot_legend_click(void* self, void* legend, void* item, void* event);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param callback void func(QCustomPlot* self, QCPLegend* legend, QCPAbstractLegendItem* item, QMouseEvent* event)
void q_customplot_on_legend_click(void* self, void (*callback)(void*, void*, void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param legend QCPLegend*
/// @param item QCPAbstractLegendItem*
/// @param event QMouseEvent*
void q_customplot_legend_double_click(void* self, void* legend, void* item, void* event);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param callback void func(QCustomPlot* self, QCPLegend* legend, QCPAbstractLegendItem* item, QMouseEvent* event)
void q_customplot_on_legend_double_click(void* self, void (*callback)(void*, void*, void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
void q_customplot_selection_changed_by_user(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param callback void func(QCustomPlot* self)
void q_customplot_on_selection_changed_by_user(void* self, void (*callback)(void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
void q_customplot_before_replot(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param callback void func(QCustomPlot* self)
void q_customplot_on_before_replot(void* self, void (*callback)(void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
void q_customplot_after_layout(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param callback void func(QCustomPlot* self)
void q_customplot_on_after_layout(void* self, void (*callback)(void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
void q_customplot_after_replot(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param callback void func(QCustomPlot* self)
void q_customplot_on_after_replot(void* self, void (*callback)(void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
QSize* q_customplot_minimum_size_hint(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// Allows for overriding the related default method
///
/// @param self QCustomPlot*
/// @param callback QSize* func()
void q_customplot_on_minimum_size_hint(void* self, QSize* (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// Base class method implementation
///
/// @param self QCustomPlot*
QSize* q_customplot_qbase_minimum_size_hint(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
QSize* q_customplot_size_hint(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// Allows for overriding the related default method
///
/// @param self QCustomPlot*
/// @param callback QSize* func()
void q_customplot_on_size_hint(void* self, QSize* (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// Base class method implementation
///
/// @param self QCustomPlot*
QSize* q_customplot_qbase_size_hint(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param event QPaintEvent*
void q_customplot_paint_event(void* self, void* event);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// Allows for overriding the related default method
///
/// @param self QCustomPlot*
/// @param callback void func(QCustomPlot* self, QPaintEvent* event)
void q_customplot_on_paint_event(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// Base class method implementation
///
/// @param self QCustomPlot*
/// @param event QPaintEvent*
void q_customplot_qbase_paint_event(void* self, void* event);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param event QResizeEvent*
void q_customplot_resize_event(void* self, void* event);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// Allows for overriding the related default method
///
/// @param self QCustomPlot*
/// @param callback void func(QCustomPlot* self, QResizeEvent* event)
void q_customplot_on_resize_event(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// Base class method implementation
///
/// @param self QCustomPlot*
/// @param event QResizeEvent*
void q_customplot_qbase_resize_event(void* self, void* event);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param event QMouseEvent*
void q_customplot_mouse_double_click_event(void* self, void* event);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// Allows for overriding the related default method
///
/// @param self QCustomPlot*
/// @param callback void func(QCustomPlot* self, QMouseEvent* event)
void q_customplot_on_mouse_double_click_event(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// Base class method implementation
///
/// @param self QCustomPlot*
/// @param event QMouseEvent*
void q_customplot_qbase_mouse_double_click_event(void* self, void* event);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param event QMouseEvent*
void q_customplot_mouse_press_event(void* self, void* event);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// Allows for overriding the related default method
///
/// @param self QCustomPlot*
/// @param callback void func(QCustomPlot* self, QMouseEvent* event)
void q_customplot_on_mouse_press_event(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// Base class method implementation
///
/// @param self QCustomPlot*
/// @param event QMouseEvent*
void q_customplot_qbase_mouse_press_event(void* self, void* event);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param event QMouseEvent*
void q_customplot_mouse_move_event(void* self, void* event);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// Allows for overriding the related default method
///
/// @param self QCustomPlot*
/// @param callback void func(QCustomPlot* self, QMouseEvent* event)
void q_customplot_on_mouse_move_event(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// Base class method implementation
///
/// @param self QCustomPlot*
/// @param event QMouseEvent*
void q_customplot_qbase_mouse_move_event(void* self, void* event);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param event QMouseEvent*
void q_customplot_mouse_release_event(void* self, void* event);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// Allows for overriding the related default method
///
/// @param self QCustomPlot*
/// @param callback void func(QCustomPlot* self, QMouseEvent* event)
void q_customplot_on_mouse_release_event(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// Base class method implementation
///
/// @param self QCustomPlot*
/// @param event QMouseEvent*
void q_customplot_qbase_mouse_release_event(void* self, void* event);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param event QWheelEvent*
void q_customplot_wheel_event(void* self, void* event);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// Allows for overriding the related default method
///
/// @param self QCustomPlot*
/// @param callback void func(QCustomPlot* self, QWheelEvent* event)
void q_customplot_on_wheel_event(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// Base class method implementation
///
/// @param self QCustomPlot*
/// @param event QWheelEvent*
void q_customplot_qbase_wheel_event(void* self, void* event);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param painter QCPPainter*
void q_customplot_draw(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// Allows for overriding the related default method
///
/// @param self QCustomPlot*
/// @param callback void func(QCustomPlot* self, QCPPainter* painter)
void q_customplot_on_draw(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// Base class method implementation
///
/// @param self QCustomPlot*
/// @param painter QCPPainter*
void q_customplot_qbase_draw(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
void q_customplot_update_layout(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// Allows for overriding the related default method
///
/// @param self QCustomPlot*
/// @param callback void func()
void q_customplot_on_update_layout(void* self, void (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// Base class method implementation
///
/// @param self QCustomPlot*
void q_customplot_qbase_update_layout(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param axis QCPAxis*
void q_customplot_axis_removed(void* self, void* axis);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// Allows for overriding the related default method
///
/// @param self QCustomPlot*
/// @param callback void func(QCustomPlot* self, QCPAxis* axis)
void q_customplot_on_axis_removed(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// Base class method implementation
///
/// @param self QCustomPlot*
/// @param axis QCPAxis*
void q_customplot_qbase_axis_removed(void* self, void* axis);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param legend QCPLegend*
void q_customplot_legend_removed(void* self, void* legend);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// Allows for overriding the related default method
///
/// @param self QCustomPlot*
/// @param callback void func(QCustomPlot* self, QCPLegend* legend)
void q_customplot_on_legend_removed(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// Base class method implementation
///
/// @param self QCustomPlot*
/// @param legend QCPLegend*
void q_customplot_qbase_legend_removed(void* self, void* legend);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param rect QRect*
/// @param event QMouseEvent*
void q_customplot_process_rect_selection(void* self, void* rect, void* event);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// Allows for overriding the related default method
///
/// @param self QCustomPlot*
/// @param callback void func(QCustomPlot* self, QRect* rect, QMouseEvent* event)
void q_customplot_on_process_rect_selection(void* self, void (*callback)(void*, void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// Base class method implementation
///
/// @param self QCustomPlot*
/// @param rect QRect*
/// @param event QMouseEvent*
void q_customplot_qbase_process_rect_selection(void* self, void* rect, void* event);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param rect QRect*
/// @param event QMouseEvent*
void q_customplot_process_rect_zoom(void* self, void* rect, void* event);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// Allows for overriding the related default method
///
/// @param self QCustomPlot*
/// @param callback void func(QCustomPlot* self, QRect* rect, QMouseEvent* event)
void q_customplot_on_process_rect_zoom(void* self, void (*callback)(void*, void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// Base class method implementation
///
/// @param self QCustomPlot*
/// @param rect QRect*
/// @param event QMouseEvent*
void q_customplot_qbase_process_rect_zoom(void* self, void* rect, void* event);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param event QMouseEvent*
void q_customplot_process_point_selection(void* self, void* event);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// Allows for overriding the related default method
///
/// @param self QCustomPlot*
/// @param callback void func(QCustomPlot* self, QMouseEvent* event)
void q_customplot_on_process_point_selection(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// Base class method implementation
///
/// @param self QCustomPlot*
/// @param event QMouseEvent*
void q_customplot_qbase_process_point_selection(void* self, void* event);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param plottable QCPAbstractPlottable*
bool q_customplot_register_plottable(void* self, void* plottable);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// Allows for overriding the related default method
///
/// @param self QCustomPlot*
/// @param callback bool func(QCustomPlot* self, QCPAbstractPlottable* plottable)
void q_customplot_on_register_plottable(void* self, bool (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// Base class method implementation
///
/// @param self QCustomPlot*
/// @param plottable QCPAbstractPlottable*
bool q_customplot_qbase_register_plottable(void* self, void* plottable);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param graph QCPGraph*
bool q_customplot_register_graph(void* self, void* graph);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// Allows for overriding the related default method
///
/// @param self QCustomPlot*
/// @param callback bool func(QCustomPlot* self, QCPGraph* graph)
void q_customplot_on_register_graph(void* self, bool (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// Base class method implementation
///
/// @param self QCustomPlot*
/// @param graph QCPGraph*
bool q_customplot_qbase_register_graph(void* self, void* graph);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param item QCPAbstractItem*
bool q_customplot_register_item(void* self, void* item);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// Allows for overriding the related default method
///
/// @param self QCustomPlot*
/// @param callback bool func(QCustomPlot* self, QCPAbstractItem* item)
void q_customplot_on_register_item(void* self, bool (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// Base class method implementation
///
/// @param self QCustomPlot*
/// @param item QCPAbstractItem*
bool q_customplot_qbase_register_item(void* self, void* item);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
void q_customplot_update_layer_indices(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// Allows for overriding the related default method
///
/// @param self QCustomPlot*
/// @param callback void func()
void q_customplot_on_update_layer_indices(void* self, void (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// Base class method implementation
///
/// @param self QCustomPlot*
void q_customplot_qbase_update_layer_indices(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param pos QPointF*
/// @param onlySelectable bool
QCPLayerable* q_customplot_layerable_at(void* self, void* pos, bool onlySelectable);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// Allows for overriding the related default method
///
/// @param self QCustomPlot*
/// @param callback QCPLayerable* func(QCustomPlot* self, QPointF* pos, bool onlySelectable)
void q_customplot_on_layerable_at(void* self, QCPLayerable* (*callback)(void*, void*, bool));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// Base class method implementation
///
/// @param self QCustomPlot*
/// @param pos QPointF*
/// @param onlySelectable bool
QCPLayerable* q_customplot_qbase_layerable_at(void* self, void* pos, bool onlySelectable);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param pos QPointF*
/// @param onlySelectable bool
libqt_list /* of QCPLayerable* */ q_customplot_layerable_list_at(void* self, void* pos, bool onlySelectable);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// Allows for overriding the related default method
///
/// @param self QCustomPlot*
/// @param callback QCPLayerable** func(QCustomPlot* self, QPointF* pos, bool onlySelectable)
void q_customplot_on_layerable_list_at(void* self, QCPLayerable** (*callback)(void*, void*, bool));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// Base class method implementation
///
/// @param self QCustomPlot*
/// @param pos QPointF*
/// @param onlySelectable bool
libqt_list /* of QCPLayerable* */ q_customplot_qbase_layerable_list_at(void* self, void* pos, bool onlySelectable);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param painter QCPPainter*
void q_customplot_draw_background(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// Allows for overriding the related default method
///
/// @param self QCustomPlot*
/// @param callback void func(QCustomPlot* self, QCPPainter* painter)
void q_customplot_on_draw_background(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// Base class method implementation
///
/// @param self QCustomPlot*
/// @param painter QCPPainter*
void q_customplot_qbase_draw_background(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
void q_customplot_setup_paint_buffers(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// Allows for overriding the related default method
///
/// @param self QCustomPlot*
/// @param callback void func()
void q_customplot_on_setup_paint_buffers(void* self, void (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// Base class method implementation
///
/// @param self QCustomPlot*
void q_customplot_qbase_setup_paint_buffers(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
QCPAbstractPaintBuffer* q_customplot_create_paint_buffer(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// Allows for overriding the related default method
///
/// @param self QCustomPlot*
/// @param callback QCPAbstractPaintBuffer* func()
void q_customplot_on_create_paint_buffer(void* self, QCPAbstractPaintBuffer* (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// Base class method implementation
///
/// @param self QCustomPlot*
QCPAbstractPaintBuffer* q_customplot_qbase_create_paint_buffer(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
bool q_customplot_has_invalidated_paint_buffers(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// Allows for overriding the related default method
///
/// @param self QCustomPlot*
/// @param callback bool func()
void q_customplot_on_has_invalidated_paint_buffers(void* self, bool (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// Base class method implementation
///
/// @param self QCustomPlot*
bool q_customplot_qbase_has_invalidated_paint_buffers(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
bool q_customplot_setup_open_gl(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// Allows for overriding the related default method
///
/// @param self QCustomPlot*
/// @param callback bool func()
void q_customplot_on_setup_open_gl(void* self, bool (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// Base class method implementation
///
/// @param self QCustomPlot*
bool q_customplot_qbase_setup_open_gl(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
void q_customplot_free_open_gl(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// Allows for overriding the related default method
///
/// @param self QCustomPlot*
/// @param callback void func()
void q_customplot_on_free_open_gl(void* self, void (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// Base class method implementation
///
/// @param self QCustomPlot*
void q_customplot_qbase_free_open_gl(void* self);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
/// @param c const char*
const char* q_customplot_tr2(const char* s, const char* c);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
/// @param c const char*
/// @param n int
const char* q_customplot_tr3(const char* s, const char* c, int n);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param pm QPixmap*
/// @param scaled bool
/// @param mode enum Qt__AspectRatioMode
void q_customplot_set_background32(void* self, void* pm, bool scaled, int32_t mode);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param antialiasedElement enum QCP__AntialiasedElement
/// @param enabled bool
void q_customplot_set_antialiased_element2(void* self, int32_t antialiasedElement, bool enabled);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param notAntialiasedElement enum QCP__AntialiasedElement
/// @param enabled bool
void q_customplot_set_not_antialiased_element2(void* self, int32_t notAntialiasedElement, bool enabled);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param interaction enum QCP__Interaction*
/// @param enabled bool
void q_customplot_set_interaction2(void* self, int32_t* interaction, bool enabled);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param hint enum QCP__PlottingHint
/// @param enabled bool
void q_customplot_set_plotting_hint2(void* self, int32_t hint, bool enabled);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param enabled bool
/// @param multisampling int
void q_customplot_set_open_gl2(void* self, bool enabled, int multisampling);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param pos QPointF*
/// @param onlySelectable bool
QCPAbstractPlottable* q_customplot_plottable_at2(void* self, void* pos, bool onlySelectable);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param pos QPointF*
/// @param onlySelectable bool
/// @param dataIndex int*
QCPAbstractPlottable* q_customplot_plottable_at3(void* self, void* pos, bool onlySelectable, int* dataIndex);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param keyAxis QCPAxis*
QCPGraph* q_customplot_add_graph1(void* self, void* keyAxis);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param keyAxis QCPAxis*
/// @param valueAxis QCPAxis*
QCPGraph* q_customplot_add_graph2(void* self, void* keyAxis, void* valueAxis);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param pos QPointF*
/// @param onlySelectable bool
QCPAbstractItem* q_customplot_item_at2(void* self, void* pos, bool onlySelectable);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param name const char*
/// @param otherLayer QCPLayer*
bool q_customplot_add_layer2(void* self, const char* name, void* otherLayer);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param name const char*
/// @param otherLayer QCPLayer*
/// @param insertMode enum QCustomPlot__LayerInsertMode
bool q_customplot_add_layer3(void* self, const char* name, void* otherLayer, int32_t insertMode);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param layer QCPLayer*
/// @param otherLayer QCPLayer*
/// @param insertMode enum QCustomPlot__LayerInsertMode
bool q_customplot_move_layer3(void* self, void* layer, void* otherLayer, int32_t insertMode);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param index int
QCPAxisRect* q_customplot_axis_rect1(void* self, int index);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param onlyVisiblePlottables bool
void q_customplot_rescale_axes1(void* self, bool onlyVisiblePlottables);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param fileName const char*
/// @param width int
bool q_customplot_save_pdf2(void* self, const char* fileName, int width);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param fileName const char*
/// @param width int
/// @param height int
bool q_customplot_save_pdf3(void* self, const char* fileName, int width, int height);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param fileName const char*
/// @param width int
/// @param height int
/// @param exportPen enum QCP__ExportPen
bool q_customplot_save_pdf4(void* self, const char* fileName, int width, int height, int32_t exportPen);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param fileName const char*
/// @param width int
/// @param height int
/// @param exportPen enum QCP__ExportPen
/// @param pdfCreator const char*
bool q_customplot_save_pdf5(void* self, const char* fileName, int width, int height, int32_t exportPen, const char* pdfCreator);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param fileName const char*
/// @param width int
/// @param height int
/// @param exportPen enum QCP__ExportPen
/// @param pdfCreator const char*
/// @param pdfTitle const char*
bool q_customplot_save_pdf6(void* self, const char* fileName, int width, int height, int32_t exportPen, const char* pdfCreator, const char* pdfTitle);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param fileName const char*
/// @param width int
bool q_customplot_save_png2(void* self, const char* fileName, int width);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param fileName const char*
/// @param width int
/// @param height int
bool q_customplot_save_png3(void* self, const char* fileName, int width, int height);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param fileName const char*
/// @param width int
/// @param height int
/// @param scale double
bool q_customplot_save_png4(void* self, const char* fileName, int width, int height, double scale);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param fileName const char*
/// @param width int
/// @param height int
/// @param scale double
/// @param quality int
bool q_customplot_save_png5(void* self, const char* fileName, int width, int height, double scale, int quality);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param fileName const char*
/// @param width int
/// @param height int
/// @param scale double
/// @param quality int
/// @param resolution int
bool q_customplot_save_png6(void* self, const char* fileName, int width, int height, double scale, int quality, int resolution);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param fileName const char*
/// @param width int
/// @param height int
/// @param scale double
/// @param quality int
/// @param resolution int
/// @param resolutionUnit enum QCP__ResolutionUnit
bool q_customplot_save_png7(void* self, const char* fileName, int width, int height, double scale, int quality, int resolution, int32_t resolutionUnit);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param fileName const char*
/// @param width int
bool q_customplot_save_jpg2(void* self, const char* fileName, int width);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param fileName const char*
/// @param width int
/// @param height int
bool q_customplot_save_jpg3(void* self, const char* fileName, int width, int height);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param fileName const char*
/// @param width int
/// @param height int
/// @param scale double
bool q_customplot_save_jpg4(void* self, const char* fileName, int width, int height, double scale);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param fileName const char*
/// @param width int
/// @param height int
/// @param scale double
/// @param quality int
bool q_customplot_save_jpg5(void* self, const char* fileName, int width, int height, double scale, int quality);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param fileName const char*
/// @param width int
/// @param height int
/// @param scale double
/// @param quality int
/// @param resolution int
bool q_customplot_save_jpg6(void* self, const char* fileName, int width, int height, double scale, int quality, int resolution);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param fileName const char*
/// @param width int
/// @param height int
/// @param scale double
/// @param quality int
/// @param resolution int
/// @param resolutionUnit enum QCP__ResolutionUnit
bool q_customplot_save_jpg7(void* self, const char* fileName, int width, int height, double scale, int quality, int resolution, int32_t resolutionUnit);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param fileName const char*
/// @param width int
bool q_customplot_save_bmp2(void* self, const char* fileName, int width);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param fileName const char*
/// @param width int
/// @param height int
bool q_customplot_save_bmp3(void* self, const char* fileName, int width, int height);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param fileName const char*
/// @param width int
/// @param height int
/// @param scale double
bool q_customplot_save_bmp4(void* self, const char* fileName, int width, int height, double scale);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param fileName const char*
/// @param width int
/// @param height int
/// @param scale double
/// @param resolution int
bool q_customplot_save_bmp5(void* self, const char* fileName, int width, int height, double scale, int resolution);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param fileName const char*
/// @param width int
/// @param height int
/// @param scale double
/// @param resolution int
/// @param resolutionUnit enum QCP__ResolutionUnit
bool q_customplot_save_bmp6(void* self, const char* fileName, int width, int height, double scale, int resolution, int32_t resolutionUnit);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param fileName const char*
/// @param width int
/// @param height int
/// @param scale double
/// @param format const char*
/// @param quality int
bool q_customplot_save_rastered6(void* self, const char* fileName, int width, int height, double scale, const char* format, int quality);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param fileName const char*
/// @param width int
/// @param height int
/// @param scale double
/// @param format const char*
/// @param quality int
/// @param resolution int
bool q_customplot_save_rastered7(void* self, const char* fileName, int width, int height, double scale, const char* format, int quality, int resolution);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param fileName const char*
/// @param width int
/// @param height int
/// @param scale double
/// @param format const char*
/// @param quality int
/// @param resolution int
/// @param resolutionUnit enum QCP__ResolutionUnit
bool q_customplot_save_rastered8(void* self, const char* fileName, int width, int height, double scale, const char* format, int quality, int resolution, int32_t resolutionUnit);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param width int
QPixmap* q_customplot_to_pixmap1(void* self, int width);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param width int
/// @param height int
QPixmap* q_customplot_to_pixmap2(void* self, int width, int height);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param width int
/// @param height int
/// @param scale double
QPixmap* q_customplot_to_pixmap3(void* self, int width, int height, double scale);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param painter QCPPainter*
/// @param width int
void q_customplot_to_painter2(void* self, void* painter, int width);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param painter QCPPainter*
/// @param width int
/// @param height int
void q_customplot_to_painter3(void* self, void* painter, int width, int height);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param refreshPriority enum QCustomPlot__RefreshPriority
void q_customplot_replot1(void* self, int32_t refreshPriority);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param average bool
double q_customplot_replot_time1(void* self, bool average);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param pos QPointF*
/// @param onlySelectable bool
/// @param selectionDetails QVariant*
QCPLayerable* q_customplot_layerable_at3(void* self, void* pos, bool onlySelectable, void* selectionDetails);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// Allows for overriding the related default method
///
/// @param self QCustomPlot*
/// @param callback QCPLayerable* func(QCustomPlot* self, QPointF* pos, bool onlySelectable, QVariant* selectionDetails)
void q_customplot_on_layerable_at3(void* self, QCPLayerable* (*callback)(void*, void*, bool, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// Base class method implementation
///
/// @param self QCustomPlot*
/// @param pos QPointF*
/// @param onlySelectable bool
/// @param selectionDetails QVariant*
QCPLayerable* q_customplot_qbase_layerable_at3(void* self, void* pos, bool onlySelectable, void* selectionDetails);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// @param self QCustomPlot*
/// @param pos QPointF*
/// @param onlySelectable bool
/// @param selectionDetails libqt_list /* of QVariant* */
libqt_list /* of QCPLayerable* */ q_customplot_layerable_list_at3(void* self, void* pos, bool onlySelectable, libqt_list selectionDetails);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// Allows for overriding the related default method
///
/// @param self QCustomPlot*
/// @param callback QCPLayerable** func(QCustomPlot* self, QPointF* pos, bool onlySelectable, QVariant** selectionDetails)
void q_customplot_on_layerable_list_at3(void* self, QCPLayerable** (*callback)(void*, void*, bool, QVariant**));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// Base class method implementation
///
/// @param self QCustomPlot*
/// @param pos QPointF*
/// @param onlySelectable bool
/// @param selectionDetails libqt_list /* of QVariant* */
libqt_list /* of QCPLayerable* */ q_customplot_qbase_layerable_list_at3(void* self, void* pos, bool onlySelectable, libqt_list selectionDetails);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#winId)
///
/// @param self QCustomPlot*
uintptr_t q_customplot_win_id(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#createWinId)
///
/// @param self QCustomPlot*
void q_customplot_create_win_id(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#internalWinId)
///
/// @param self QCustomPlot*
uintptr_t q_customplot_internal_win_id(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#effectiveWinId)
///
/// @param self QCustomPlot*
uintptr_t q_customplot_effective_win_id(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#style)
///
/// @param self QCustomPlot*
QStyle* q_customplot_style(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#setStyle)
///
/// @param self QCustomPlot*
/// @param style QStyle*
void q_customplot_set_style(void* self, void* style);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#isTopLevel)
///
/// @param self QCustomPlot*
bool q_customplot_is_top_level(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#isWindow)
///
/// @param self QCustomPlot*
bool q_customplot_is_window(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#isModal)
///
/// @param self QCustomPlot*
bool q_customplot_is_modal(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#windowModality)
///
/// @param self QCustomPlot*
///
/// @return enum Qt__WindowModality
int32_t q_customplot_window_modality(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#setWindowModality)
///
/// @param self QCustomPlot*
/// @param windowModality enum Qt__WindowModality
void q_customplot_set_window_modality(void* self, int32_t windowModality);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#isEnabled)
///
/// @param self QCustomPlot*
bool q_customplot_is_enabled(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#isEnabledTo)
///
/// @param self QCustomPlot*
/// @param param1 QWidget*
bool q_customplot_is_enabled_to(void* self, void* param1);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#setEnabled)
///
/// @param self QCustomPlot*
/// @param enabled bool
void q_customplot_set_enabled(void* self, bool enabled);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#setDisabled)
///
/// @param self QCustomPlot*
/// @param disabled bool
void q_customplot_set_disabled(void* self, bool disabled);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#setWindowModified)
///
/// @param self QCustomPlot*
/// @param windowModified bool
void q_customplot_set_window_modified(void* self, bool windowModified);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#frameGeometry)
///
/// @param self QCustomPlot*
QRect* q_customplot_frame_geometry(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#geometry)
///
/// @param self QCustomPlot*
const QRect* q_customplot_geometry(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#normalGeometry)
///
/// @param self QCustomPlot*
QRect* q_customplot_normal_geometry(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#x)
///
/// @param self QCustomPlot*
int32_t q_customplot_x(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#y)
///
/// @param self QCustomPlot*
int32_t q_customplot_y(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#pos)
///
/// @param self QCustomPlot*
QPoint* q_customplot_pos(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#frameSize)
///
/// @param self QCustomPlot*
QSize* q_customplot_frame_size(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#size)
///
/// @param self QCustomPlot*
QSize* q_customplot_size(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#width)
///
/// @param self QCustomPlot*
int32_t q_customplot_width(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#height)
///
/// @param self QCustomPlot*
int32_t q_customplot_height(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#rect)
///
/// @param self QCustomPlot*
QRect* q_customplot_rect(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#childrenRect)
///
/// @param self QCustomPlot*
QRect* q_customplot_children_rect(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#childrenRegion)
///
/// @param self QCustomPlot*
QRegion* q_customplot_children_region(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#minimumSize)
///
/// @param self QCustomPlot*
QSize* q_customplot_minimum_size(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#maximumSize)
///
/// @param self QCustomPlot*
QSize* q_customplot_maximum_size(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#minimumWidth)
///
/// @param self QCustomPlot*
int32_t q_customplot_minimum_width(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#minimumHeight)
///
/// @param self QCustomPlot*
int32_t q_customplot_minimum_height(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#maximumWidth)
///
/// @param self QCustomPlot*
int32_t q_customplot_maximum_width(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#maximumHeight)
///
/// @param self QCustomPlot*
int32_t q_customplot_maximum_height(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#setMinimumSize)
///
/// @param self QCustomPlot*
/// @param minimumSize QSize*
void q_customplot_set_minimum_size(void* self, void* minimumSize);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#setMinimumSize)
///
/// @param self QCustomPlot*
/// @param minw int
/// @param minh int
void q_customplot_set_minimum_size2(void* self, int minw, int minh);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#setMaximumSize)
///
/// @param self QCustomPlot*
/// @param maximumSize QSize*
void q_customplot_set_maximum_size(void* self, void* maximumSize);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#setMaximumSize)
///
/// @param self QCustomPlot*
/// @param maxw int
/// @param maxh int
void q_customplot_set_maximum_size2(void* self, int maxw, int maxh);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#setMinimumWidth)
///
/// @param self QCustomPlot*
/// @param minw int
void q_customplot_set_minimum_width(void* self, int minw);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#setMinimumHeight)
///
/// @param self QCustomPlot*
/// @param minh int
void q_customplot_set_minimum_height(void* self, int minh);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#setMaximumWidth)
///
/// @param self QCustomPlot*
/// @param maxw int
void q_customplot_set_maximum_width(void* self, int maxw);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#setMaximumHeight)
///
/// @param self QCustomPlot*
/// @param maxh int
void q_customplot_set_maximum_height(void* self, int maxh);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#sizeIncrement)
///
/// @param self QCustomPlot*
QSize* q_customplot_size_increment(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#setSizeIncrement)
///
/// @param self QCustomPlot*
/// @param sizeIncrement QSize*
void q_customplot_set_size_increment(void* self, void* sizeIncrement);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#setSizeIncrement)
///
/// @param self QCustomPlot*
/// @param w int
/// @param h int
void q_customplot_set_size_increment2(void* self, int w, int h);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#baseSize)
///
/// @param self QCustomPlot*
QSize* q_customplot_base_size(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#setBaseSize)
///
/// @param self QCustomPlot*
/// @param baseSize QSize*
void q_customplot_set_base_size(void* self, void* baseSize);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#setBaseSize)
///
/// @param self QCustomPlot*
/// @param basew int
/// @param baseh int
void q_customplot_set_base_size2(void* self, int basew, int baseh);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#setFixedSize)
///
/// @param self QCustomPlot*
/// @param fixedSize QSize*
void q_customplot_set_fixed_size(void* self, void* fixedSize);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#setFixedSize)
///
/// @param self QCustomPlot*
/// @param w int
/// @param h int
void q_customplot_set_fixed_size2(void* self, int w, int h);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#setFixedWidth)
///
/// @param self QCustomPlot*
/// @param w int
void q_customplot_set_fixed_width(void* self, int w);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#setFixedHeight)
///
/// @param self QCustomPlot*
/// @param h int
void q_customplot_set_fixed_height(void* self, int h);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#mapToGlobal)
///
/// @param self QCustomPlot*
/// @param param1 QPointF*
QPointF* q_customplot_map_to_global(void* self, void* param1);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#mapToGlobal)
///
/// @param self QCustomPlot*
/// @param param1 QPoint*
QPoint* q_customplot_map_to_global2(void* self, void* param1);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#mapFromGlobal)
///
/// @param self QCustomPlot*
/// @param param1 QPointF*
QPointF* q_customplot_map_from_global(void* self, void* param1);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#mapFromGlobal)
///
/// @param self QCustomPlot*
/// @param param1 QPoint*
QPoint* q_customplot_map_from_global2(void* self, void* param1);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#mapToParent)
///
/// @param self QCustomPlot*
/// @param param1 QPointF*
QPointF* q_customplot_map_to_parent(void* self, void* param1);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#mapToParent)
///
/// @param self QCustomPlot*
/// @param param1 QPoint*
QPoint* q_customplot_map_to_parent2(void* self, void* param1);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#mapFromParent)
///
/// @param self QCustomPlot*
/// @param param1 QPointF*
QPointF* q_customplot_map_from_parent(void* self, void* param1);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#mapFromParent)
///
/// @param self QCustomPlot*
/// @param param1 QPoint*
QPoint* q_customplot_map_from_parent2(void* self, void* param1);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#mapTo)
///
/// @param self QCustomPlot*
/// @param param1 QWidget*
/// @param param2 QPointF*
QPointF* q_customplot_map_to(void* self, void* param1, void* param2);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#mapTo)
///
/// @param self QCustomPlot*
/// @param param1 QWidget*
/// @param param2 QPoint*
QPoint* q_customplot_map_to2(void* self, void* param1, void* param2);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#mapFrom)
///
/// @param self QCustomPlot*
/// @param param1 QWidget*
/// @param param2 QPointF*
QPointF* q_customplot_map_from(void* self, void* param1, void* param2);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#mapFrom)
///
/// @param self QCustomPlot*
/// @param param1 QWidget*
/// @param param2 QPoint*
QPoint* q_customplot_map_from2(void* self, void* param1, void* param2);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#window)
///
/// @param self QCustomPlot*
QWidget* q_customplot_window(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#nativeParentWidget)
///
/// @param self QCustomPlot*
QWidget* q_customplot_native_parent_widget(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#topLevelWidget)
///
/// @param self QCustomPlot*
QWidget* q_customplot_top_level_widget(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#palette)
///
/// @param self QCustomPlot*
const QPalette* q_customplot_palette(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#setPalette)
///
/// @param self QCustomPlot*
/// @param palette QPalette*
void q_customplot_set_palette(void* self, void* palette);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#setBackgroundRole)
///
/// @param self QCustomPlot*
/// @param backgroundRole enum QPalette__ColorRole
void q_customplot_set_background_role(void* self, int32_t backgroundRole);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#backgroundRole)
///
/// @param self QCustomPlot*
///
/// @return enum QPalette__ColorRole
int32_t q_customplot_background_role(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#setForegroundRole)
///
/// @param self QCustomPlot*
/// @param foregroundRole enum QPalette__ColorRole
void q_customplot_set_foreground_role(void* self, int32_t foregroundRole);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#foregroundRole)
///
/// @param self QCustomPlot*
///
/// @return enum QPalette__ColorRole
int32_t q_customplot_foreground_role(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#font)
///
/// @param self QCustomPlot*
const QFont* q_customplot_font(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#setFont)
///
/// @param self QCustomPlot*
/// @param font QFont*
void q_customplot_set_font(void* self, void* font);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#fontMetrics)
///
/// @param self QCustomPlot*
QFontMetrics* q_customplot_font_metrics(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#fontInfo)
///
/// @param self QCustomPlot*
QFontInfo* q_customplot_font_info(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#cursor)
///
/// @param self QCustomPlot*
QCursor* q_customplot_cursor(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#setCursor)
///
/// @param self QCustomPlot*
/// @param cursor QCursor*
void q_customplot_set_cursor(void* self, void* cursor);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#unsetCursor)
///
/// @param self QCustomPlot*
void q_customplot_unset_cursor(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#setMouseTracking)
///
/// @param self QCustomPlot*
/// @param enable bool
void q_customplot_set_mouse_tracking(void* self, bool enable);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#hasMouseTracking)
///
/// @param self QCustomPlot*
bool q_customplot_has_mouse_tracking(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#underMouse)
///
/// @param self QCustomPlot*
bool q_customplot_under_mouse(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#setTabletTracking)
///
/// @param self QCustomPlot*
/// @param enable bool
void q_customplot_set_tablet_tracking(void* self, bool enable);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#hasTabletTracking)
///
/// @param self QCustomPlot*
bool q_customplot_has_tablet_tracking(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#setMask)
///
/// @param self QCustomPlot*
/// @param mask QBitmap*
void q_customplot_set_mask(void* self, void* mask);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#setMask)
///
/// @param self QCustomPlot*
/// @param mask QRegion*
void q_customplot_set_mask2(void* self, void* mask);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#mask)
///
/// @param self QCustomPlot*
QRegion* q_customplot_mask(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#clearMask)
///
/// @param self QCustomPlot*
void q_customplot_clear_mask(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#render)
///
/// @param self QCustomPlot*
/// @param target QPaintDevice*
void q_customplot_render(void* self, void* target);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#render)
///
/// @param self QCustomPlot*
/// @param painter QPainter*
void q_customplot_render2(void* self, void* painter);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#grab)
///
/// @param self QCustomPlot*
QPixmap* q_customplot_grab(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#graphicsEffect)
///
/// @param self QCustomPlot*
QGraphicsEffect* q_customplot_graphics_effect(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#setGraphicsEffect)
///
/// @param self QCustomPlot*
/// @param effect QGraphicsEffect*
void q_customplot_set_graphics_effect(void* self, void* effect);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#grabGesture)
///
/// @param self QCustomPlot*
/// @param type enum Qt__GestureType
void q_customplot_grab_gesture(void* self, int64_t type);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#ungrabGesture)
///
/// @param self QCustomPlot*
/// @param type enum Qt__GestureType
void q_customplot_ungrab_gesture(void* self, int64_t type);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#setWindowTitle)
///
/// @param self QCustomPlot*
/// @param windowTitle const char*
void q_customplot_set_window_title(void* self, const char* windowTitle);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#setStyleSheet)
///
/// @param self QCustomPlot*
/// @param styleSheet const char*
void q_customplot_set_style_sheet(void* self, const char* styleSheet);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#styleSheet)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCustomPlot*
const char* q_customplot_style_sheet(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#windowTitle)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCustomPlot*
const char* q_customplot_window_title(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#setWindowIcon)
///
/// @param self QCustomPlot*
/// @param icon QIcon*
void q_customplot_set_window_icon(void* self, void* icon);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#windowIcon)
///
/// @param self QCustomPlot*
QIcon* q_customplot_window_icon(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#setWindowIconText)
///
/// @param self QCustomPlot*
/// @param windowIconText const char*
void q_customplot_set_window_icon_text(void* self, const char* windowIconText);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#windowIconText)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCustomPlot*
const char* q_customplot_window_icon_text(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#setWindowRole)
///
/// @param self QCustomPlot*
/// @param windowRole const char*
void q_customplot_set_window_role(void* self, const char* windowRole);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#windowRole)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCustomPlot*
const char* q_customplot_window_role(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#setWindowFilePath)
///
/// @param self QCustomPlot*
/// @param filePath const char*
void q_customplot_set_window_file_path(void* self, const char* filePath);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#windowFilePath)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCustomPlot*
const char* q_customplot_window_file_path(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#setWindowOpacity)
///
/// @param self QCustomPlot*
/// @param level double
void q_customplot_set_window_opacity(void* self, double level);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#windowOpacity)
///
/// @param self QCustomPlot*
double q_customplot_window_opacity(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#isWindowModified)
///
/// @param self QCustomPlot*
bool q_customplot_is_window_modified(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#setToolTip)
///
/// @param self QCustomPlot*
/// @param toolTip const char*
void q_customplot_set_tool_tip(void* self, const char* toolTip);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#toolTip)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCustomPlot*
const char* q_customplot_tool_tip(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#setToolTipDuration)
///
/// @param self QCustomPlot*
/// @param msec int
void q_customplot_set_tool_tip_duration(void* self, int msec);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#toolTipDuration)
///
/// @param self QCustomPlot*
int32_t q_customplot_tool_tip_duration(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#setStatusTip)
///
/// @param self QCustomPlot*
/// @param statusTip const char*
void q_customplot_set_status_tip(void* self, const char* statusTip);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#statusTip)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCustomPlot*
const char* q_customplot_status_tip(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#setWhatsThis)
///
/// @param self QCustomPlot*
/// @param whatsThis const char*
void q_customplot_set_whats_this(void* self, const char* whatsThis);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#whatsThis)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCustomPlot*
const char* q_customplot_whats_this(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#accessibleName)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCustomPlot*
const char* q_customplot_accessible_name(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#setAccessibleName)
///
/// @param self QCustomPlot*
/// @param name const char*
void q_customplot_set_accessible_name(void* self, const char* name);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#accessibleDescription)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCustomPlot*
const char* q_customplot_accessible_description(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#setAccessibleDescription)
///
/// @param self QCustomPlot*
/// @param description const char*
void q_customplot_set_accessible_description(void* self, const char* description);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#setLayoutDirection)
///
/// @param self QCustomPlot*
/// @param direction enum Qt__LayoutDirection
void q_customplot_set_layout_direction(void* self, int32_t direction);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#layoutDirection)
///
/// @param self QCustomPlot*
///
/// @return enum Qt__LayoutDirection
int32_t q_customplot_layout_direction(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#unsetLayoutDirection)
///
/// @param self QCustomPlot*
void q_customplot_unset_layout_direction(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#setLocale)
///
/// @param self QCustomPlot*
/// @param locale QLocale*
void q_customplot_set_locale(void* self, void* locale);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#locale)
///
/// @param self QCustomPlot*
QLocale* q_customplot_locale(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#unsetLocale)
///
/// @param self QCustomPlot*
void q_customplot_unset_locale(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#isRightToLeft)
///
/// @param self QCustomPlot*
bool q_customplot_is_right_to_left(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#isLeftToRight)
///
/// @param self QCustomPlot*
bool q_customplot_is_left_to_right(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#setFocus)
///
/// @param self QCustomPlot*
void q_customplot_set_focus(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#isActiveWindow)
///
/// @param self QCustomPlot*
bool q_customplot_is_active_window(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#activateWindow)
///
/// @param self QCustomPlot*
void q_customplot_activate_window(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#clearFocus)
///
/// @param self QCustomPlot*
void q_customplot_clear_focus(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#setFocus)
///
/// @param self QCustomPlot*
/// @param reason enum Qt__FocusReason
void q_customplot_set_focus2(void* self, int32_t reason);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#focusPolicy)
///
/// @param self QCustomPlot*
///
/// @return enum Qt__FocusPolicy
int32_t q_customplot_focus_policy(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#setFocusPolicy)
///
/// @param self QCustomPlot*
/// @param policy enum Qt__FocusPolicy
void q_customplot_set_focus_policy(void* self, int32_t policy);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#hasFocus)
///
/// @param self QCustomPlot*
bool q_customplot_has_focus(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#setTabOrder)
///
/// @param param1 QWidget*
/// @param param2 QWidget*
void q_customplot_set_tab_order(void* param1, void* param2);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#setFocusProxy)
///
/// @param self QCustomPlot*
/// @param focusProxy QWidget*
void q_customplot_set_focus_proxy(void* self, void* focusProxy);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#focusProxy)
///
/// @param self QCustomPlot*
QWidget* q_customplot_focus_proxy(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#contextMenuPolicy)
///
/// @param self QCustomPlot*
///
/// @return enum Qt__ContextMenuPolicy
int32_t q_customplot_context_menu_policy(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#setContextMenuPolicy)
///
/// @param self QCustomPlot*
/// @param policy enum Qt__ContextMenuPolicy
void q_customplot_set_context_menu_policy(void* self, int32_t policy);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#grabMouse)
///
/// @param self QCustomPlot*
void q_customplot_grab_mouse(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#grabMouse)
///
/// @param self QCustomPlot*
/// @param param1 QCursor*
void q_customplot_grab_mouse2(void* self, void* param1);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#releaseMouse)
///
/// @param self QCustomPlot*
void q_customplot_release_mouse(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#grabKeyboard)
///
/// @param self QCustomPlot*
void q_customplot_grab_keyboard(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#releaseKeyboard)
///
/// @param self QCustomPlot*
void q_customplot_release_keyboard(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#grabShortcut)
///
/// @param self QCustomPlot*
/// @param key QKeySequence*
int32_t q_customplot_grab_shortcut(void* self, void* key);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#releaseShortcut)
///
/// @param self QCustomPlot*
/// @param id int
void q_customplot_release_shortcut(void* self, int id);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#setShortcutEnabled)
///
/// @param self QCustomPlot*
/// @param id int
void q_customplot_set_shortcut_enabled(void* self, int id);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#setShortcutAutoRepeat)
///
/// @param self QCustomPlot*
/// @param id int
void q_customplot_set_shortcut_auto_repeat(void* self, int id);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#mouseGrabber)
///
QWidget* q_customplot_mouse_grabber();

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#keyboardGrabber)
///
QWidget* q_customplot_keyboard_grabber();

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#updatesEnabled)
///
/// @param self QCustomPlot*
bool q_customplot_updates_enabled(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#setUpdatesEnabled)
///
/// @param self QCustomPlot*
/// @param enable bool
void q_customplot_set_updates_enabled(void* self, bool enable);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#graphicsProxyWidget)
///
/// @param self QCustomPlot*
QGraphicsProxyWidget* q_customplot_graphics_proxy_widget(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#update)
///
/// @param self QCustomPlot*
void q_customplot_update(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#repaint)
///
/// @param self QCustomPlot*
void q_customplot_repaint(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#update)
///
/// @param self QCustomPlot*
/// @param x int
/// @param y int
/// @param w int
/// @param h int
void q_customplot_update2(void* self, int x, int y, int w, int h);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#update)
///
/// @param self QCustomPlot*
/// @param param1 QRect*
void q_customplot_update3(void* self, void* param1);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#update)
///
/// @param self QCustomPlot*
/// @param param1 QRegion*
void q_customplot_update4(void* self, void* param1);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#repaint)
///
/// @param self QCustomPlot*
/// @param x int
/// @param y int
/// @param w int
/// @param h int
void q_customplot_repaint2(void* self, int x, int y, int w, int h);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#repaint)
///
/// @param self QCustomPlot*
/// @param param1 QRect*
void q_customplot_repaint3(void* self, void* param1);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#repaint)
///
/// @param self QCustomPlot*
/// @param param1 QRegion*
void q_customplot_repaint4(void* self, void* param1);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#setHidden)
///
/// @param self QCustomPlot*
/// @param hidden bool
void q_customplot_set_hidden(void* self, bool hidden);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#show)
///
/// @param self QCustomPlot*
void q_customplot_show(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#hide)
///
/// @param self QCustomPlot*
void q_customplot_hide(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#showMinimized)
///
/// @param self QCustomPlot*
void q_customplot_show_minimized(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#showMaximized)
///
/// @param self QCustomPlot*
void q_customplot_show_maximized(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#showFullScreen)
///
/// @param self QCustomPlot*
void q_customplot_show_full_screen(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#showNormal)
///
/// @param self QCustomPlot*
void q_customplot_show_normal(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#close)
///
/// @param self QCustomPlot*
bool q_customplot_close(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#raise)
///
/// @param self QCustomPlot*
void q_customplot_raise(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#lower)
///
/// @param self QCustomPlot*
void q_customplot_lower(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#stackUnder)
///
/// @param self QCustomPlot*
/// @param param1 QWidget*
void q_customplot_stack_under(void* self, void* param1);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#move)
///
/// @param self QCustomPlot*
/// @param x int
/// @param y int
void q_customplot_move(void* self, int x, int y);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#move)
///
/// @param self QCustomPlot*
/// @param param1 QPoint*
void q_customplot_move2(void* self, void* param1);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#resize)
///
/// @param self QCustomPlot*
/// @param w int
/// @param h int
void q_customplot_resize(void* self, int w, int h);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#resize)
///
/// @param self QCustomPlot*
/// @param param1 QSize*
void q_customplot_resize2(void* self, void* param1);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#setGeometry)
///
/// @param self QCustomPlot*
/// @param x int
/// @param y int
/// @param w int
/// @param h int
void q_customplot_set_geometry(void* self, int x, int y, int w, int h);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#setGeometry)
///
/// @param self QCustomPlot*
/// @param geometry QRect*
void q_customplot_set_geometry2(void* self, void* geometry);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#saveGeometry)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCustomPlot*
char* q_customplot_save_geometry(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#restoreGeometry)
///
/// @param self QCustomPlot*
/// @param geometry const char*
bool q_customplot_restore_geometry(void* self, const char* geometry);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#adjustSize)
///
/// @param self QCustomPlot*
void q_customplot_adjust_size(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#isVisible)
///
/// @param self QCustomPlot*
bool q_customplot_is_visible(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#isVisibleTo)
///
/// @param self QCustomPlot*
/// @param param1 QWidget*
bool q_customplot_is_visible_to(void* self, void* param1);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#isHidden)
///
/// @param self QCustomPlot*
bool q_customplot_is_hidden(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#isMinimized)
///
/// @param self QCustomPlot*
bool q_customplot_is_minimized(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#isMaximized)
///
/// @param self QCustomPlot*
bool q_customplot_is_maximized(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#isFullScreen)
///
/// @param self QCustomPlot*
bool q_customplot_is_full_screen(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#windowState)
///
/// @param self QCustomPlot*
///
/// @return flag of enum Qt__WindowState
int32_t q_customplot_window_state(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#setWindowState)
///
/// @param self QCustomPlot*
/// @param state flag of enum Qt__WindowState
void q_customplot_set_window_state(void* self, int32_t state);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#overrideWindowState)
///
/// @param self QCustomPlot*
/// @param state flag of enum Qt__WindowState
void q_customplot_override_window_state(void* self, int32_t state);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#sizePolicy)
///
/// @param self QCustomPlot*
QSizePolicy* q_customplot_size_policy(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#setSizePolicy)
///
/// @param self QCustomPlot*
/// @param sizePolicy QSizePolicy*
void q_customplot_set_size_policy(void* self, void* sizePolicy);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#setSizePolicy)
///
/// @param self QCustomPlot*
/// @param horizontal enum QSizePolicy__Policy
/// @param vertical enum QSizePolicy__Policy
void q_customplot_set_size_policy2(void* self, int32_t horizontal, int32_t vertical);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#visibleRegion)
///
/// @param self QCustomPlot*
QRegion* q_customplot_visible_region(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#setContentsMargins)
///
/// @param self QCustomPlot*
/// @param left int
/// @param top int
/// @param right int
/// @param bottom int
void q_customplot_set_contents_margins(void* self, int left, int top, int right, int bottom);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#setContentsMargins)
///
/// @param self QCustomPlot*
/// @param margins QMargins*
void q_customplot_set_contents_margins2(void* self, void* margins);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#contentsMargins)
///
/// @param self QCustomPlot*
QMargins* q_customplot_contents_margins(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#contentsRect)
///
/// @param self QCustomPlot*
QRect* q_customplot_contents_rect(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#layout)
///
/// @param self QCustomPlot*
QLayout* q_customplot_layout(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#setLayout)
///
/// @param self QCustomPlot*
/// @param layout QLayout*
void q_customplot_set_layout(void* self, void* layout);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#updateGeometry)
///
/// @param self QCustomPlot*
void q_customplot_update_geometry(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#setParent)
///
/// @param self QCustomPlot*
/// @param parent QWidget*
void q_customplot_set_parent(void* self, void* parent);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#setParent)
///
/// @param self QCustomPlot*
/// @param parent QWidget*
/// @param f flag of enum Qt__WindowType
void q_customplot_set_parent2(void* self, void* parent, int64_t f);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#scroll)
///
/// @param self QCustomPlot*
/// @param dx int
/// @param dy int
void q_customplot_scroll(void* self, int dx, int dy);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#scroll)
///
/// @param self QCustomPlot*
/// @param dx int
/// @param dy int
/// @param param3 QRect*
void q_customplot_scroll2(void* self, int dx, int dy, void* param3);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#focusWidget)
///
/// @param self QCustomPlot*
QWidget* q_customplot_focus_widget(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#nextInFocusChain)
///
/// @param self QCustomPlot*
QWidget* q_customplot_next_in_focus_chain(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#previousInFocusChain)
///
/// @param self QCustomPlot*
QWidget* q_customplot_previous_in_focus_chain(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#acceptDrops)
///
/// @param self QCustomPlot*
bool q_customplot_accept_drops(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#setAcceptDrops)
///
/// @param self QCustomPlot*
/// @param on bool
void q_customplot_set_accept_drops(void* self, bool on);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#addAction)
///
/// @param self QCustomPlot*
/// @param action QAction*
void q_customplot_add_action(void* self, void* action);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#addActions)
///
/// @param self QCustomPlot*
/// @param actions libqt_list /* of QAction* */
void q_customplot_add_actions(void* self, libqt_list actions);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#insertActions)
///
/// @param self QCustomPlot*
/// @param before QAction*
/// @param actions libqt_list /* of QAction* */
void q_customplot_insert_actions(void* self, void* before, libqt_list actions);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#insertAction)
///
/// @param self QCustomPlot*
/// @param before QAction*
/// @param action QAction*
void q_customplot_insert_action(void* self, void* before, void* action);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#removeAction)
///
/// @param self QCustomPlot*
/// @param action QAction*
void q_customplot_remove_action(void* self, void* action);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#actions)
///
/// @param self QCustomPlot*
libqt_list /* of QAction* */ q_customplot_actions(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#addAction)
///
/// @param self QCustomPlot*
/// @param text const char*
QAction* q_customplot_add_action2(void* self, const char* text);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#addAction)
///
/// @param self QCustomPlot*
/// @param icon QIcon*
/// @param text const char*
QAction* q_customplot_add_action3(void* self, void* icon, const char* text);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#addAction)
///
/// @param self QCustomPlot*
/// @param text const char*
/// @param shortcut QKeySequence*
QAction* q_customplot_add_action4(void* self, const char* text, void* shortcut);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#addAction)
///
/// @param self QCustomPlot*
/// @param icon QIcon*
/// @param text const char*
/// @param shortcut QKeySequence*
QAction* q_customplot_add_action5(void* self, void* icon, const char* text, void* shortcut);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#parentWidget)
///
/// @param self QCustomPlot*
QWidget* q_customplot_parent_widget(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#setWindowFlags)
///
/// @param self QCustomPlot*
/// @param type flag of enum Qt__WindowType
void q_customplot_set_window_flags(void* self, int64_t type);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#windowFlags)
///
/// @param self QCustomPlot*
///
/// @return flag of enum Qt__WindowType
int64_t q_customplot_window_flags(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#setWindowFlag)
///
/// @param self QCustomPlot*
/// @param param1 enum Qt__WindowType
void q_customplot_set_window_flag(void* self, int64_t param1);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#overrideWindowFlags)
///
/// @param self QCustomPlot*
/// @param type flag of enum Qt__WindowType
void q_customplot_override_window_flags(void* self, int64_t type);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#windowType)
///
/// @param self QCustomPlot*
///
/// @return enum Qt__WindowType
int64_t q_customplot_window_type(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#find)
///
/// @param param1 uint64_t
QWidget* q_customplot_find(uint64_t param1);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#childAt)
///
/// @param self QCustomPlot*
/// @param x int
/// @param y int
QWidget* q_customplot_child_at(void* self, int x, int y);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#childAt)
///
/// @param self QCustomPlot*
/// @param p QPoint*
QWidget* q_customplot_child_at2(void* self, void* p);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#childAt)
///
/// @param self QCustomPlot*
/// @param p QPointF*
QWidget* q_customplot_child_at3(void* self, void* p);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#setAttribute)
///
/// @param self QCustomPlot*
/// @param param1 enum Qt__WidgetAttribute
void q_customplot_set_attribute(void* self, int32_t param1);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#testAttribute)
///
/// @param self QCustomPlot*
/// @param param1 enum Qt__WidgetAttribute
bool q_customplot_test_attribute(void* self, int32_t param1);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#ensurePolished)
///
/// @param self QCustomPlot*
void q_customplot_ensure_polished(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#isAncestorOf)
///
/// @param self QCustomPlot*
/// @param child QWidget*
bool q_customplot_is_ancestor_of(void* self, void* child);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#autoFillBackground)
///
/// @param self QCustomPlot*
bool q_customplot_auto_fill_background(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#setAutoFillBackground)
///
/// @param self QCustomPlot*
/// @param enabled bool
void q_customplot_set_auto_fill_background(void* self, bool enabled);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#backingStore)
///
/// @param self QCustomPlot*
QBackingStore* q_customplot_backing_store(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#windowHandle)
///
/// @param self QCustomPlot*
QWindow* q_customplot_window_handle(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#screen)
///
/// @param self QCustomPlot*
QScreen* q_customplot_screen(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#setScreen)
///
/// @param self QCustomPlot*
/// @param screen QScreen*
void q_customplot_set_screen(void* self, void* screen);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#createWindowContainer)
///
/// @param window QWindow*
QWidget* q_customplot_create_window_container(void* window);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#windowTitleChanged)
///
/// @param self QCustomPlot*
/// @param title const char*
void q_customplot_window_title_changed(void* self, const char* title);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#windowTitleChanged)
///
/// @param self QCustomPlot*
/// @param callback void func(QCustomPlot* self, const char* title)
void q_customplot_on_window_title_changed(void* self, void (*callback)(void*, const char*));

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#windowIconChanged)
///
/// @param self QCustomPlot*
/// @param icon QIcon*
void q_customplot_window_icon_changed(void* self, void* icon);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#windowIconChanged)
///
/// @param self QCustomPlot*
/// @param callback void func(QCustomPlot* self, QIcon* icon)
void q_customplot_on_window_icon_changed(void* self, void (*callback)(void*, void*));

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#windowIconTextChanged)
///
/// @param self QCustomPlot*
/// @param iconText const char*
void q_customplot_window_icon_text_changed(void* self, const char* iconText);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#windowIconTextChanged)
///
/// @param self QCustomPlot*
/// @param callback void func(QCustomPlot* self, const char* iconText)
void q_customplot_on_window_icon_text_changed(void* self, void (*callback)(void*, const char*));

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#customContextMenuRequested)
///
/// @param self QCustomPlot*
/// @param pos QPoint*
void q_customplot_custom_context_menu_requested(void* self, void* pos);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#customContextMenuRequested)
///
/// @param self QCustomPlot*
/// @param callback void func(QCustomPlot* self, QPoint* pos)
void q_customplot_on_custom_context_menu_requested(void* self, void (*callback)(void*, void*));

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#inputMethodHints)
///
/// @param self QCustomPlot*
///
/// @return flag of enum Qt__InputMethodHint
int64_t q_customplot_input_method_hints(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#setInputMethodHints)
///
/// @param self QCustomPlot*
/// @param hints flag of enum Qt__InputMethodHint
void q_customplot_set_input_method_hints(void* self, int64_t hints);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#render)
///
/// @param self QCustomPlot*
/// @param target QPaintDevice*
/// @param targetOffset QPoint*
void q_customplot_render22(void* self, void* target, void* targetOffset);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#render)
///
/// @param self QCustomPlot*
/// @param target QPaintDevice*
/// @param targetOffset QPoint*
/// @param sourceRegion QRegion*
void q_customplot_render3(void* self, void* target, void* targetOffset, void* sourceRegion);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#render)
///
/// @param self QCustomPlot*
/// @param target QPaintDevice*
/// @param targetOffset QPoint*
/// @param sourceRegion QRegion*
/// @param renderFlags flag of enum QWidget__RenderFlag
void q_customplot_render4(void* self, void* target, void* targetOffset, void* sourceRegion, int32_t renderFlags);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#render)
///
/// @param self QCustomPlot*
/// @param painter QPainter*
/// @param targetOffset QPoint*
void q_customplot_render23(void* self, void* painter, void* targetOffset);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#render)
///
/// @param self QCustomPlot*
/// @param painter QPainter*
/// @param targetOffset QPoint*
/// @param sourceRegion QRegion*
void q_customplot_render32(void* self, void* painter, void* targetOffset, void* sourceRegion);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#render)
///
/// @param self QCustomPlot*
/// @param painter QPainter*
/// @param targetOffset QPoint*
/// @param sourceRegion QRegion*
/// @param renderFlags flag of enum QWidget__RenderFlag
void q_customplot_render42(void* self, void* painter, void* targetOffset, void* sourceRegion, int32_t renderFlags);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#grab)
///
/// @param self QCustomPlot*
/// @param rectangle QRect*
QPixmap* q_customplot_grab1(void* self, void* rectangle);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#grabGesture)
///
/// @param self QCustomPlot*
/// @param type enum Qt__GestureType
/// @param flags flag of enum Qt__GestureFlag
void q_customplot_grab_gesture2(void* self, int64_t type, int32_t flags);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#grabShortcut)
///
/// @param self QCustomPlot*
/// @param key QKeySequence*
/// @param context enum Qt__ShortcutContext
int32_t q_customplot_grab_shortcut2(void* self, void* key, int32_t context);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#setShortcutEnabled)
///
/// @param self QCustomPlot*
/// @param id int
/// @param enable bool
void q_customplot_set_shortcut_enabled2(void* self, int id, bool enable);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#setShortcutAutoRepeat)
///
/// @param self QCustomPlot*
/// @param id int
/// @param enable bool
void q_customplot_set_shortcut_auto_repeat2(void* self, int id, bool enable);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#setWindowFlag)
///
/// @param self QCustomPlot*
/// @param param1 enum Qt__WindowType
/// @param on bool
void q_customplot_set_window_flag2(void* self, int64_t param1, bool on);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#setAttribute)
///
/// @param self QCustomPlot*
/// @param param1 enum Qt__WidgetAttribute
/// @param on bool
void q_customplot_set_attribute2(void* self, int32_t param1, bool on);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#createWindowContainer)
///
/// @param window QWindow*
/// @param parent QWidget*
QWidget* q_customplot_create_window_container2(void* window, void* parent);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#createWindowContainer)
///
/// @param window QWindow*
/// @param parent QWidget*
/// @param flags flag of enum Qt__WindowType
QWidget* q_customplot_create_window_container3(void* window, void* parent, int64_t flags);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#objectName)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCustomPlot*
const char* q_customplot_object_name(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setObjectName)
///
/// @param self QCustomPlot*
/// @param name char*
void q_customplot_set_object_name(void* self, char* name);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isWidgetType)
///
/// @param self QCustomPlot*
bool q_customplot_is_widget_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isWindowType)
///
/// @param self QCustomPlot*
bool q_customplot_is_window_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isQuickItemType)
///
/// @param self QCustomPlot*
bool q_customplot_is_quick_item_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#signalsBlocked)
///
/// @param self QCustomPlot*
bool q_customplot_signals_blocked(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#blockSignals)
///
/// @param self QCustomPlot*
/// @param b bool
bool q_customplot_block_signals(void* self, bool b);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#thread)
///
/// @param self QCustomPlot*
QThread* q_customplot_thread(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#moveToThread)
///
/// @param self QCustomPlot*
/// @param thread QThread*
bool q_customplot_move_to_thread(void* self, void* thread);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#startTimer)
///
/// @param self QCustomPlot*
/// @param interval int
int32_t q_customplot_start_timer(void* self, int interval);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#killTimer)
///
/// @param self QCustomPlot*
/// @param id int
void q_customplot_kill_timer(void* self, int id);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#killTimer)
///
/// @param self QCustomPlot*
/// @param id enum Qt__TimerId
void q_customplot_kill_timer2(void* self, int32_t id);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#children)
///
/// @param self QCustomPlot*
libqt_list /* of QObject* */ q_customplot_children(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#installEventFilter)
///
/// @param self QCustomPlot*
/// @param filterObj QObject*
void q_customplot_install_event_filter(void* self, void* filterObj);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#removeEventFilter)
///
/// @param self QCustomPlot*
/// @param obj QObject*
void q_customplot_remove_event_filter(void* self, void* obj);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param method QMetaMethod*
QMetaObject__Connection* q_customplot_connect(void* sender, void* signal, void* receiver, void* method);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param self QCustomPlot*
/// @param sender QObject*
/// @param signal const char*
/// @param member const char*
QMetaObject__Connection* q_customplot_connect2(void* self, void* sender, const char* signal, const char* member);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param member QMetaMethod*
bool q_customplot_disconnect(void* sender, void* signal, void* receiver, void* member);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnect)
///
/// @param param1 QMetaObject__Connection*
bool q_customplot_disconnect2(void* param1);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dumpObjectTree)
///
/// @param self QCustomPlot*
void q_customplot_dump_object_tree(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dumpObjectInfo)
///
/// @param self QCustomPlot*
void q_customplot_dump_object_info(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setProperty)
///
/// @param self QCustomPlot*
/// @param name const char*
/// @param value QVariant*
bool q_customplot_set_property(void* self, const char* name, void* value);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#property)
///
/// @param self QCustomPlot*
/// @param name const char*
QVariant* q_customplot_property(void* self, const char* name);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dynamicPropertyNames)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCustomPlot*
const char** q_customplot_dynamic_property_names(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#bindingStorage)
///
/// @param self QCustomPlot*
QBindingStorage* q_customplot_binding_storage(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#bindingStorage)
///
/// @param self QCustomPlot*
const QBindingStorage* q_customplot_binding_storage2(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCustomPlot*
void q_customplot_destroyed(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCustomPlot*
/// @param callback void func(QCustomPlot* self)
void q_customplot_on_destroyed(void* self, void (*callback)(void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#parent)
///
/// @param self QCustomPlot*
QObject* q_customplot_parent(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#inherits)
///
/// @param self QCustomPlot*
/// @param classname const char*
bool q_customplot_inherits(void* self, const char* classname);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#deleteLater)
///
/// @param self QCustomPlot*
void q_customplot_delete_later(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#moveToThread)
///
/// @param self QCustomPlot*
/// @param thread QThread*
/// @param param2 Disambiguated_t*
bool q_customplot_move_to_thread2(void* self, void* thread, void* param2);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#startTimer)
///
/// @param self QCustomPlot*
/// @param interval int
/// @param timerType enum Qt__TimerType
int32_t q_customplot_start_timer22(void* self, int interval, int32_t timerType);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param method QMetaMethod*
/// @param type enum Qt__ConnectionType
QMetaObject__Connection* q_customplot_connect5(void* sender, void* signal, void* receiver, void* method, int32_t type);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param self QCustomPlot*
/// @param sender QObject*
/// @param signal const char*
/// @param member const char*
/// @param type enum Qt__ConnectionType
QMetaObject__Connection* q_customplot_connect4(void* self, void* sender, const char* signal, const char* member, int32_t type);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCustomPlot*
/// @param param1 QObject*
void q_customplot_destroyed1(void* self, void* param1);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCustomPlot*
/// @param callback void func(QCustomPlot* self, QObject* param1)
void q_customplot_on_destroyed1(void* self, void (*callback)(void*, void*));

/// Inherited from QPaintDevice
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpaintdevice.html#paintingActive)
///
/// @param self QCustomPlot*
bool q_customplot_painting_active(void* self);

/// Inherited from QPaintDevice
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpaintdevice.html#widthMM)
///
/// @param self QCustomPlot*
int32_t q_customplot_width_m_m(void* self);

/// Inherited from QPaintDevice
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpaintdevice.html#heightMM)
///
/// @param self QCustomPlot*
int32_t q_customplot_height_m_m(void* self);

/// Inherited from QPaintDevice
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpaintdevice.html#logicalDpiX)
///
/// @param self QCustomPlot*
int32_t q_customplot_logical_dpi_x(void* self);

/// Inherited from QPaintDevice
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpaintdevice.html#logicalDpiY)
///
/// @param self QCustomPlot*
int32_t q_customplot_logical_dpi_y(void* self);

/// Inherited from QPaintDevice
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpaintdevice.html#physicalDpiX)
///
/// @param self QCustomPlot*
int32_t q_customplot_physical_dpi_x(void* self);

/// Inherited from QPaintDevice
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpaintdevice.html#physicalDpiY)
///
/// @param self QCustomPlot*
int32_t q_customplot_physical_dpi_y(void* self);

/// Inherited from QPaintDevice
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpaintdevice.html#devicePixelRatio)
///
/// @param self QCustomPlot*
double q_customplot_device_pixel_ratio(void* self);

/// Inherited from QPaintDevice
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpaintdevice.html#devicePixelRatioF)
///
/// @param self QCustomPlot*
double q_customplot_device_pixel_ratio_f(void* self);

/// Inherited from QPaintDevice
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpaintdevice.html#colorCount)
///
/// @param self QCustomPlot*
int32_t q_customplot_color_count(void* self);

/// Inherited from QPaintDevice
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpaintdevice.html#depth)
///
/// @param self QCustomPlot*
int32_t q_customplot_depth(void* self);

/// Inherited from QPaintDevice
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpaintdevice.html#devicePixelRatioFScale)
///
double q_customplot_device_pixel_ratio_f_scale();

/// Inherited from QPaintDevice
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpaintdevice.html#encodeMetricF)
///
/// @param metric enum QPaintDevice__PaintDeviceMetric
/// @param value double
int32_t q_customplot_encode_metric_f(int32_t metric, double value);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#devType)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCustomPlot*
int32_t q_customplot_dev_type(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#devType)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCustomPlot*
int32_t q_customplot_qbase_dev_type(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#devType)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCustomPlot*
/// @param callback int32_t func()
void q_customplot_on_dev_type(void* self, int32_t (*callback)());

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#setVisible)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCustomPlot*
/// @param visible bool
void q_customplot_set_visible(void* self, bool visible);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#setVisible)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCustomPlot*
/// @param visible bool
void q_customplot_qbase_set_visible(void* self, bool visible);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#setVisible)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCustomPlot*
/// @param callback void func(QCustomPlot* self, bool visible)
void q_customplot_on_set_visible(void* self, void (*callback)(void*, bool));

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#heightForWidth)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCustomPlot*
/// @param param1 int
int32_t q_customplot_height_for_width(void* self, int param1);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#heightForWidth)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCustomPlot*
/// @param param1 int
int32_t q_customplot_qbase_height_for_width(void* self, int param1);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#heightForWidth)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCustomPlot*
/// @param callback int32_t func(QCustomPlot* self, int param1)
void q_customplot_on_height_for_width(void* self, int32_t (*callback)(void*, int));

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#hasHeightForWidth)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCustomPlot*
bool q_customplot_has_height_for_width(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#hasHeightForWidth)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCustomPlot*
bool q_customplot_qbase_has_height_for_width(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#hasHeightForWidth)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCustomPlot*
/// @param callback bool func()
void q_customplot_on_has_height_for_width(void* self, bool (*callback)());

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#paintEngine)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCustomPlot*
QPaintEngine* q_customplot_paint_engine(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#paintEngine)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCustomPlot*
QPaintEngine* q_customplot_qbase_paint_engine(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#paintEngine)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCustomPlot*
/// @param callback QPaintEngine* func()
void q_customplot_on_paint_engine(void* self, QPaintEngine* (*callback)());

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#event)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCustomPlot*
/// @param event QEvent*
bool q_customplot_event(void* self, void* event);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#event)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCustomPlot*
/// @param event QEvent*
bool q_customplot_qbase_event(void* self, void* event);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#event)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCustomPlot*
/// @param callback bool func(QCustomPlot* self, QEvent* event)
void q_customplot_on_event(void* self, bool (*callback)(void*, void*));

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#keyPressEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCustomPlot*
/// @param event QKeyEvent*
void q_customplot_key_press_event(void* self, void* event);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#keyPressEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCustomPlot*
/// @param event QKeyEvent*
void q_customplot_qbase_key_press_event(void* self, void* event);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#keyPressEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCustomPlot*
/// @param callback void func(QCustomPlot* self, QKeyEvent* event)
void q_customplot_on_key_press_event(void* self, void (*callback)(void*, void*));

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#keyReleaseEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCustomPlot*
/// @param event QKeyEvent*
void q_customplot_key_release_event(void* self, void* event);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#keyReleaseEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCustomPlot*
/// @param event QKeyEvent*
void q_customplot_qbase_key_release_event(void* self, void* event);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#keyReleaseEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCustomPlot*
/// @param callback void func(QCustomPlot* self, QKeyEvent* event)
void q_customplot_on_key_release_event(void* self, void (*callback)(void*, void*));

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#focusInEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCustomPlot*
/// @param event QFocusEvent*
void q_customplot_focus_in_event(void* self, void* event);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#focusInEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCustomPlot*
/// @param event QFocusEvent*
void q_customplot_qbase_focus_in_event(void* self, void* event);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#focusInEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCustomPlot*
/// @param callback void func(QCustomPlot* self, QFocusEvent* event)
void q_customplot_on_focus_in_event(void* self, void (*callback)(void*, void*));

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#focusOutEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCustomPlot*
/// @param event QFocusEvent*
void q_customplot_focus_out_event(void* self, void* event);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#focusOutEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCustomPlot*
/// @param event QFocusEvent*
void q_customplot_qbase_focus_out_event(void* self, void* event);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#focusOutEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCustomPlot*
/// @param callback void func(QCustomPlot* self, QFocusEvent* event)
void q_customplot_on_focus_out_event(void* self, void (*callback)(void*, void*));

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#enterEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCustomPlot*
/// @param event QEnterEvent*
void q_customplot_enter_event(void* self, void* event);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#enterEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCustomPlot*
/// @param event QEnterEvent*
void q_customplot_qbase_enter_event(void* self, void* event);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#enterEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCustomPlot*
/// @param callback void func(QCustomPlot* self, QEnterEvent* event)
void q_customplot_on_enter_event(void* self, void (*callback)(void*, void*));

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#leaveEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCustomPlot*
/// @param event QEvent*
void q_customplot_leave_event(void* self, void* event);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#leaveEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCustomPlot*
/// @param event QEvent*
void q_customplot_qbase_leave_event(void* self, void* event);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#leaveEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCustomPlot*
/// @param callback void func(QCustomPlot* self, QEvent* event)
void q_customplot_on_leave_event(void* self, void (*callback)(void*, void*));

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#moveEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCustomPlot*
/// @param event QMoveEvent*
void q_customplot_move_event(void* self, void* event);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#moveEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCustomPlot*
/// @param event QMoveEvent*
void q_customplot_qbase_move_event(void* self, void* event);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#moveEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCustomPlot*
/// @param callback void func(QCustomPlot* self, QMoveEvent* event)
void q_customplot_on_move_event(void* self, void (*callback)(void*, void*));

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#closeEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCustomPlot*
/// @param event QCloseEvent*
void q_customplot_close_event(void* self, void* event);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#closeEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCustomPlot*
/// @param event QCloseEvent*
void q_customplot_qbase_close_event(void* self, void* event);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#closeEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCustomPlot*
/// @param callback void func(QCustomPlot* self, QCloseEvent* event)
void q_customplot_on_close_event(void* self, void (*callback)(void*, void*));

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#contextMenuEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCustomPlot*
/// @param event QContextMenuEvent*
void q_customplot_context_menu_event(void* self, void* event);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#contextMenuEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCustomPlot*
/// @param event QContextMenuEvent*
void q_customplot_qbase_context_menu_event(void* self, void* event);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#contextMenuEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCustomPlot*
/// @param callback void func(QCustomPlot* self, QContextMenuEvent* event)
void q_customplot_on_context_menu_event(void* self, void (*callback)(void*, void*));

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#tabletEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCustomPlot*
/// @param event QTabletEvent*
void q_customplot_tablet_event(void* self, void* event);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#tabletEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCustomPlot*
/// @param event QTabletEvent*
void q_customplot_qbase_tablet_event(void* self, void* event);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#tabletEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCustomPlot*
/// @param callback void func(QCustomPlot* self, QTabletEvent* event)
void q_customplot_on_tablet_event(void* self, void (*callback)(void*, void*));

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#actionEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCustomPlot*
/// @param event QActionEvent*
void q_customplot_action_event(void* self, void* event);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#actionEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCustomPlot*
/// @param event QActionEvent*
void q_customplot_qbase_action_event(void* self, void* event);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#actionEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCustomPlot*
/// @param callback void func(QCustomPlot* self, QActionEvent* event)
void q_customplot_on_action_event(void* self, void (*callback)(void*, void*));

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#dragEnterEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCustomPlot*
/// @param event QDragEnterEvent*
void q_customplot_drag_enter_event(void* self, void* event);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#dragEnterEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCustomPlot*
/// @param event QDragEnterEvent*
void q_customplot_qbase_drag_enter_event(void* self, void* event);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#dragEnterEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCustomPlot*
/// @param callback void func(QCustomPlot* self, QDragEnterEvent* event)
void q_customplot_on_drag_enter_event(void* self, void (*callback)(void*, void*));

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#dragMoveEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCustomPlot*
/// @param event QDragMoveEvent*
void q_customplot_drag_move_event(void* self, void* event);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#dragMoveEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCustomPlot*
/// @param event QDragMoveEvent*
void q_customplot_qbase_drag_move_event(void* self, void* event);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#dragMoveEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCustomPlot*
/// @param callback void func(QCustomPlot* self, QDragMoveEvent* event)
void q_customplot_on_drag_move_event(void* self, void (*callback)(void*, void*));

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#dragLeaveEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCustomPlot*
/// @param event QDragLeaveEvent*
void q_customplot_drag_leave_event(void* self, void* event);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#dragLeaveEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCustomPlot*
/// @param event QDragLeaveEvent*
void q_customplot_qbase_drag_leave_event(void* self, void* event);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#dragLeaveEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCustomPlot*
/// @param callback void func(QCustomPlot* self, QDragLeaveEvent* event)
void q_customplot_on_drag_leave_event(void* self, void (*callback)(void*, void*));

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#dropEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCustomPlot*
/// @param event QDropEvent*
void q_customplot_drop_event(void* self, void* event);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#dropEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCustomPlot*
/// @param event QDropEvent*
void q_customplot_qbase_drop_event(void* self, void* event);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#dropEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCustomPlot*
/// @param callback void func(QCustomPlot* self, QDropEvent* event)
void q_customplot_on_drop_event(void* self, void (*callback)(void*, void*));

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#showEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCustomPlot*
/// @param event QShowEvent*
void q_customplot_show_event(void* self, void* event);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#showEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCustomPlot*
/// @param event QShowEvent*
void q_customplot_qbase_show_event(void* self, void* event);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#showEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCustomPlot*
/// @param callback void func(QCustomPlot* self, QShowEvent* event)
void q_customplot_on_show_event(void* self, void (*callback)(void*, void*));

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#hideEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCustomPlot*
/// @param event QHideEvent*
void q_customplot_hide_event(void* self, void* event);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#hideEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCustomPlot*
/// @param event QHideEvent*
void q_customplot_qbase_hide_event(void* self, void* event);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#hideEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCustomPlot*
/// @param callback void func(QCustomPlot* self, QHideEvent* event)
void q_customplot_on_hide_event(void* self, void (*callback)(void*, void*));

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#nativeEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCustomPlot*
/// @param eventType const char*
/// @param message void*
/// @param result intptr_t*
bool q_customplot_native_event(void* self, const char* eventType, void* message, intptr_t* result);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#nativeEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCustomPlot*
/// @param eventType const char*
/// @param message void*
/// @param result intptr_t*
bool q_customplot_qbase_native_event(void* self, const char* eventType, void* message, intptr_t* result);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#nativeEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCustomPlot*
/// @param callback bool func(QCustomPlot* self, const char* eventType, void* message, intptr_t* result)
void q_customplot_on_native_event(void* self, bool (*callback)(void*, const char*, void*, intptr_t*));

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#changeEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCustomPlot*
/// @param param1 QEvent*
void q_customplot_change_event(void* self, void* param1);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#changeEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCustomPlot*
/// @param param1 QEvent*
void q_customplot_qbase_change_event(void* self, void* param1);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#changeEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCustomPlot*
/// @param callback void func(QCustomPlot* self, QEvent* param1)
void q_customplot_on_change_event(void* self, void (*callback)(void*, void*));

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#metric)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCustomPlot*
/// @param param1 enum QPaintDevice__PaintDeviceMetric
int32_t q_customplot_metric(void* self, int32_t param1);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#metric)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCustomPlot*
/// @param param1 enum QPaintDevice__PaintDeviceMetric
int32_t q_customplot_qbase_metric(void* self, int32_t param1);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#metric)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCustomPlot*
/// @param callback int32_t func(QCustomPlot* self, enum QPaintDevice__PaintDeviceMetric param1)
void q_customplot_on_metric(void* self, int32_t (*callback)(void*, int32_t));

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#initPainter)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCustomPlot*
/// @param painter QPainter*
void q_customplot_init_painter(void* self, void* painter);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#initPainter)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCustomPlot*
/// @param painter QPainter*
void q_customplot_qbase_init_painter(void* self, void* painter);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#initPainter)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCustomPlot*
/// @param callback void func(QCustomPlot* self, QPainter* painter)
void q_customplot_on_init_painter(void* self, void (*callback)(void*, void*));

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#redirected)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCustomPlot*
/// @param offset QPoint*
QPaintDevice* q_customplot_redirected(void* self, void* offset);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#redirected)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCustomPlot*
/// @param offset QPoint*
QPaintDevice* q_customplot_qbase_redirected(void* self, void* offset);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#redirected)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCustomPlot*
/// @param callback QPaintDevice* func(QCustomPlot* self, QPoint* offset)
void q_customplot_on_redirected(void* self, QPaintDevice* (*callback)(void*, void*));

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#sharedPainter)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCustomPlot*
QPainter* q_customplot_shared_painter(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#sharedPainter)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCustomPlot*
QPainter* q_customplot_qbase_shared_painter(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#sharedPainter)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCustomPlot*
/// @param callback QPainter* func()
void q_customplot_on_shared_painter(void* self, QPainter* (*callback)());

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#inputMethodEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCustomPlot*
/// @param param1 QInputMethodEvent*
void q_customplot_input_method_event(void* self, void* param1);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#inputMethodEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCustomPlot*
/// @param param1 QInputMethodEvent*
void q_customplot_qbase_input_method_event(void* self, void* param1);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#inputMethodEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCustomPlot*
/// @param callback void func(QCustomPlot* self, QInputMethodEvent* param1)
void q_customplot_on_input_method_event(void* self, void (*callback)(void*, void*));

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#inputMethodQuery)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCustomPlot*
/// @param param1 enum Qt__InputMethodQuery
QVariant* q_customplot_input_method_query(void* self, int64_t param1);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#inputMethodQuery)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCustomPlot*
/// @param param1 enum Qt__InputMethodQuery
QVariant* q_customplot_qbase_input_method_query(void* self, int64_t param1);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#inputMethodQuery)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCustomPlot*
/// @param callback QVariant* func(QCustomPlot* self, enum Qt__InputMethodQuery param1)
void q_customplot_on_input_method_query(void* self, QVariant* (*callback)(void*, int64_t));

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#focusNextPrevChild)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCustomPlot*
/// @param next bool
bool q_customplot_focus_next_prev_child(void* self, bool next);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#focusNextPrevChild)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCustomPlot*
/// @param next bool
bool q_customplot_qbase_focus_next_prev_child(void* self, bool next);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#focusNextPrevChild)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCustomPlot*
/// @param callback bool func(QCustomPlot* self, bool next)
void q_customplot_on_focus_next_prev_child(void* self, bool (*callback)(void*, bool));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCustomPlot*
/// @param watched QObject*
/// @param event QEvent*
bool q_customplot_event_filter(void* self, void* watched, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCustomPlot*
/// @param watched QObject*
/// @param event QEvent*
bool q_customplot_qbase_event_filter(void* self, void* watched, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCustomPlot*
/// @param callback bool func(QCustomPlot* self, QObject* watched, QEvent* event)
void q_customplot_on_event_filter(void* self, bool (*callback)(void*, void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCustomPlot*
/// @param event QTimerEvent*
void q_customplot_timer_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCustomPlot*
/// @param event QTimerEvent*
void q_customplot_qbase_timer_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCustomPlot*
/// @param callback void func(QCustomPlot* self, QTimerEvent* event)
void q_customplot_on_timer_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCustomPlot*
/// @param event QChildEvent*
void q_customplot_child_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCustomPlot*
/// @param event QChildEvent*
void q_customplot_qbase_child_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCustomPlot*
/// @param callback void func(QCustomPlot* self, QChildEvent* event)
void q_customplot_on_child_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCustomPlot*
/// @param event QEvent*
void q_customplot_custom_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCustomPlot*
/// @param event QEvent*
void q_customplot_qbase_custom_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCustomPlot*
/// @param callback void func(QCustomPlot* self, QEvent* event)
void q_customplot_on_custom_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCustomPlot*
/// @param signal QMetaMethod*
void q_customplot_connect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCustomPlot*
/// @param signal QMetaMethod*
void q_customplot_qbase_connect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCustomPlot*
/// @param callback void func(QCustomPlot* self, QMetaMethod* signal)
void q_customplot_on_connect_notify(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCustomPlot*
/// @param signal QMetaMethod*
void q_customplot_disconnect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCustomPlot*
/// @param signal QMetaMethod*
void q_customplot_qbase_disconnect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCustomPlot*
/// @param callback void func(QCustomPlot* self, QMetaMethod* signal)
void q_customplot_on_disconnect_notify(void* self, void (*callback)(void*, void*));

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#updateMicroFocus)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCustomPlot*
void q_customplot_update_micro_focus(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#updateMicroFocus)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCustomPlot*
void q_customplot_qbase_update_micro_focus(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#updateMicroFocus)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCustomPlot*
/// @param callback void func()
void q_customplot_on_update_micro_focus(void* self, void (*callback)());

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#create)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCustomPlot*
void q_customplot_create(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#create)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCustomPlot*
void q_customplot_qbase_create(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#create)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCustomPlot*
/// @param callback void func()
void q_customplot_on_create(void* self, void (*callback)());

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#destroy)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCustomPlot*
void q_customplot_destroy(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#destroy)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCustomPlot*
void q_customplot_qbase_destroy(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#destroy)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCustomPlot*
/// @param callback void func()
void q_customplot_on_destroy(void* self, void (*callback)());

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#focusNextChild)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCustomPlot*
bool q_customplot_focus_next_child(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#focusNextChild)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCustomPlot*
bool q_customplot_qbase_focus_next_child(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#focusNextChild)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCustomPlot*
/// @param callback bool func()
void q_customplot_on_focus_next_child(void* self, bool (*callback)());

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#focusPreviousChild)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCustomPlot*
bool q_customplot_focus_previous_child(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#focusPreviousChild)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCustomPlot*
bool q_customplot_qbase_focus_previous_child(void* self);

/// Inherited from QWidget
///
/// [Qt documentation](https://doc.qt.io/qt-6/qwidget.html#focusPreviousChild)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCustomPlot*
/// @param callback bool func()
void q_customplot_on_focus_previous_child(void* self, bool (*callback)());

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCustomPlot*
QObject* q_customplot_sender(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCustomPlot*
QObject* q_customplot_qbase_sender(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCustomPlot*
/// @param callback QObject* func()
void q_customplot_on_sender(void* self, QObject* (*callback)());

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCustomPlot*
int32_t q_customplot_sender_signal_index(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCustomPlot*
int32_t q_customplot_qbase_sender_signal_index(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCustomPlot*
/// @param callback int32_t func()
void q_customplot_on_sender_signal_index(void* self, int32_t (*callback)());

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCustomPlot*
/// @param signal const char*
int32_t q_customplot_receivers(void* self, const char* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCustomPlot*
/// @param signal const char*
int32_t q_customplot_qbase_receivers(void* self, const char* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCustomPlot*
/// @param callback int32_t func(QCustomPlot* self, const char* signal)
void q_customplot_on_receivers(void* self, int32_t (*callback)(void*, const char*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCustomPlot*
/// @param signal QMetaMethod*
bool q_customplot_is_signal_connected(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCustomPlot*
/// @param signal QMetaMethod*
bool q_customplot_qbase_is_signal_connected(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCustomPlot*
/// @param callback bool func(QCustomPlot* self, QMetaMethod* signal)
void q_customplot_on_is_signal_connected(void* self, bool (*callback)(void*, void*));

/// Inherited from QPaintDevice
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpaintdevice.html#getDecodedMetricF)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCustomPlot*
/// @param metricA enum QPaintDevice__PaintDeviceMetric
/// @param metricB enum QPaintDevice__PaintDeviceMetric
double q_customplot_get_decoded_metric_f(void* self, int32_t metricA, int32_t metricB);

/// Inherited from QPaintDevice
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpaintdevice.html#getDecodedMetricF)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCustomPlot*
/// @param metricA enum QPaintDevice__PaintDeviceMetric
/// @param metricB enum QPaintDevice__PaintDeviceMetric
double q_customplot_qbase_get_decoded_metric_f(void* self, int32_t metricA, int32_t metricB);

/// Inherited from QPaintDevice
///
/// [Qt documentation](https://doc.qt.io/qt-6/qpaintdevice.html#getDecodedMetricF)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCustomPlot*
/// @param callback double func(QCustomPlot* self, enum QPaintDevice__PaintDeviceMetric metricA, enum QPaintDevice__PaintDeviceMetric metricB)
void q_customplot_on_get_decoded_metric_f(void* self, double (*callback)(void*, int32_t, int32_t));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#objectNameChanged)
///
/// Wrapper to allow calling private signal
///
/// @param self QCustomPlot*
/// @param callback void func(QCustomPlot* self, const char* objectName)
void q_customplot_on_object_name_changed(void* self, void (*callback)(void*, const char*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCustomPlot.html)
///
/// Delete this object from C++ memory.
///
/// @param self QCustomPlot*
void q_customplot_delete(void* self);

/// https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// @param self QCPPlottableInterface1D*
int32_t q_cpplottableinterface1d_data_count(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// @param self QCPPlottableInterface1D*
/// @param index int
double q_cpplottableinterface1d_data_main_key(void* self, int index);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// @param self QCPPlottableInterface1D*
/// @param index int
double q_cpplottableinterface1d_data_sort_key(void* self, int index);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// @param self QCPPlottableInterface1D*
/// @param index int
double q_cpplottableinterface1d_data_main_value(void* self, int index);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// @param self QCPPlottableInterface1D*
/// @param index int
QCPRange* q_cpplottableinterface1d_data_value_range(void* self, int index);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// @param self QCPPlottableInterface1D*
/// @param index int
QPointF* q_cpplottableinterface1d_data_pixel_position(void* self, int index);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// @param self QCPPlottableInterface1D*
bool q_cpplottableinterface1d_sort_key_is_main_key(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// @param self QCPPlottableInterface1D*
/// @param rect QRectF*
/// @param onlySelectable bool
QCPDataSelection* q_cpplottableinterface1d_select_test_rect(void* self, void* rect, bool onlySelectable);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// @param self QCPPlottableInterface1D*
/// @param sortKey double
/// @param expandedRange bool
int32_t q_cpplottableinterface1d_find_begin(void* self, double sortKey, bool expandedRange);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// @param self QCPPlottableInterface1D*
/// @param sortKey double
/// @param expandedRange bool
int32_t q_cpplottableinterface1d_find_end(void* self, double sortKey, bool expandedRange);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// @param self QCPPlottableInterface1D*
/// @param param1 QCPPlottableInterface1D*
void q_cpplottableinterface1d_operator_assign(void* self, void* param1);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Delete this object from C++ memory.
///
/// @param self QCPPlottableInterface1D*
void q_cpplottableinterface1d_delete(void* self);

/// https://www.qcustomplot.com/documentation/classQCPColorGradient.html

/// q_cpcolorgradient_new constructs a new QCPColorGradient object.
///
QCPColorGradient* q_cpcolorgradient_new();

/// q_cpcolorgradient_new2 constructs a new QCPColorGradient object.
///
/// @param preset enum QCPColorGradient__GradientPreset
QCPColorGradient* q_cpcolorgradient_new2(int32_t preset);

/// q_cpcolorgradient_new3 constructs a new QCPColorGradient object.
///
/// @param param1 QCPColorGradient*
QCPColorGradient* q_cpcolorgradient_new3(void* param1);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorGradient.html)
///
/// @param self QCPColorGradient*
/// @param other QCPColorGradient*
bool q_cpcolorgradient_operator_equal(void* self, void* other);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorGradient.html)
///
/// @param self QCPColorGradient*
/// @param other QCPColorGradient*
bool q_cpcolorgradient_operator_not_equal(void* self, void* other);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorGradient.html)
///
/// @param self QCPColorGradient*
int32_t q_cpcolorgradient_level_count(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorGradient.html)
///
/// @param self QCPColorGradient*
libqt_map /* of double to QColor* */ q_cpcolorgradient_color_stops(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorGradient.html)
///
/// @param self QCPColorGradient*
///
/// @return enum QCPColorGradient__ColorInterpolation
int32_t q_cpcolorgradient_color_interpolation(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorGradient.html)
///
/// @param self QCPColorGradient*
///
/// @return enum QCPColorGradient__NanHandling
int32_t q_cpcolorgradient_nan_handling(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorGradient.html)
///
/// @param self QCPColorGradient*
QColor* q_cpcolorgradient_nan_color(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorGradient.html)
///
/// @param self QCPColorGradient*
bool q_cpcolorgradient_periodic(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorGradient.html)
///
/// @param self QCPColorGradient*
/// @param n int
void q_cpcolorgradient_set_level_count(void* self, int n);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorGradient.html)
///
/// @param self QCPColorGradient*
/// @param colorStops libqt_map /* of double to QColor* */
void q_cpcolorgradient_set_color_stops(void* self, libqt_map /* of double to QColor* */ colorStops);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorGradient.html)
///
/// @param self QCPColorGradient*
/// @param position double
/// @param color QColor*
void q_cpcolorgradient_set_color_stop_at(void* self, double position, void* color);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorGradient.html)
///
/// @param self QCPColorGradient*
/// @param interpolation enum QCPColorGradient__ColorInterpolation
void q_cpcolorgradient_set_color_interpolation(void* self, int32_t interpolation);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorGradient.html)
///
/// @param self QCPColorGradient*
/// @param handling enum QCPColorGradient__NanHandling
void q_cpcolorgradient_set_nan_handling(void* self, int32_t handling);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorGradient.html)
///
/// @param self QCPColorGradient*
/// @param color QColor*
void q_cpcolorgradient_set_nan_color(void* self, void* color);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorGradient.html)
///
/// @param self QCPColorGradient*
/// @param enabled bool
void q_cpcolorgradient_set_periodic(void* self, bool enabled);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorGradient.html)
///
/// @param self QCPColorGradient*
/// @param data double*
/// @param range QCPRange*
/// @param scanLine uint32_t*
/// @param n int
void q_cpcolorgradient_colorize(void* self, double* data, void* range, uint32_t* scanLine, int n);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorGradient.html)
///
/// @param self QCPColorGradient*
/// @param data double*
/// @param alpha unsigned char*
/// @param range QCPRange*
/// @param scanLine uint32_t*
/// @param n int
void q_cpcolorgradient_colorize2(void* self, double* data, unsigned char* alpha, void* range, uint32_t* scanLine, int n);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorGradient.html)
///
/// @param self QCPColorGradient*
/// @param position double
/// @param range QCPRange*
uint32_t q_cpcolorgradient_color(void* self, double position, void* range);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorGradient.html)
///
/// @param self QCPColorGradient*
/// @param preset enum QCPColorGradient__GradientPreset
void q_cpcolorgradient_load_preset(void* self, int32_t preset);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorGradient.html)
///
/// @param self QCPColorGradient*
void q_cpcolorgradient_clear_color_stops(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorGradient.html)
///
/// @param self QCPColorGradient*
QCPColorGradient* q_cpcolorgradient_inverted(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorGradient.html)
///
/// @param self QCPColorGradient*
/// @param data double*
/// @param range QCPRange*
/// @param scanLine uint32_t*
/// @param n int
/// @param dataIndexFactor int
void q_cpcolorgradient_colorize5(void* self, double* data, void* range, uint32_t* scanLine, int n, int dataIndexFactor);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorGradient.html)
///
/// @param self QCPColorGradient*
/// @param data double*
/// @param range QCPRange*
/// @param scanLine uint32_t*
/// @param n int
/// @param dataIndexFactor int
/// @param logarithmic bool
void q_cpcolorgradient_colorize6(void* self, double* data, void* range, uint32_t* scanLine, int n, int dataIndexFactor, bool logarithmic);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorGradient.html)
///
/// @param self QCPColorGradient*
/// @param data double*
/// @param alpha unsigned char*
/// @param range QCPRange*
/// @param scanLine uint32_t*
/// @param n int
/// @param dataIndexFactor int
void q_cpcolorgradient_colorize62(void* self, double* data, unsigned char* alpha, void* range, uint32_t* scanLine, int n, int dataIndexFactor);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorGradient.html)
///
/// @param self QCPColorGradient*
/// @param data double*
/// @param alpha unsigned char*
/// @param range QCPRange*
/// @param scanLine uint32_t*
/// @param n int
/// @param dataIndexFactor int
/// @param logarithmic bool
void q_cpcolorgradient_colorize7(void* self, double* data, unsigned char* alpha, void* range, uint32_t* scanLine, int n, int dataIndexFactor, bool logarithmic);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorGradient.html)
///
/// @param self QCPColorGradient*
/// @param position double
/// @param range QCPRange*
/// @param logarithmic bool
uint32_t q_cpcolorgradient_color3(void* self, double position, void* range, bool logarithmic);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorGradient.html)
///
/// Delete this object from C++ memory.
///
/// @param self QCPColorGradient*
void q_cpcolorgradient_delete(void* self);

/// https://www.qcustomplot.com/documentation/classQCPSelectionDecoratorBracket.html

/// q_cpselectiondecoratorbracket_new constructs a new QCPSelectionDecoratorBracket object.
///
QCPSelectionDecoratorBracket* q_cpselectiondecoratorbracket_new();

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPSelectionDecoratorBracket.html)
///
/// @param self QCPSelectionDecoratorBracket*
QPen* q_cpselectiondecoratorbracket_bracket_pen(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPSelectionDecoratorBracket.html)
///
/// @param self QCPSelectionDecoratorBracket*
QBrush* q_cpselectiondecoratorbracket_bracket_brush(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPSelectionDecoratorBracket.html)
///
/// @param self QCPSelectionDecoratorBracket*
int32_t q_cpselectiondecoratorbracket_bracket_width(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPSelectionDecoratorBracket.html)
///
/// @param self QCPSelectionDecoratorBracket*
int32_t q_cpselectiondecoratorbracket_bracket_height(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPSelectionDecoratorBracket.html)
///
/// @param self QCPSelectionDecoratorBracket*
///
/// @return enum QCPSelectionDecoratorBracket__BracketStyle
int32_t q_cpselectiondecoratorbracket_bracket_style(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPSelectionDecoratorBracket.html)
///
/// @param self QCPSelectionDecoratorBracket*
bool q_cpselectiondecoratorbracket_tangent_to_data(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPSelectionDecoratorBracket.html)
///
/// @param self QCPSelectionDecoratorBracket*
int32_t q_cpselectiondecoratorbracket_tangent_average(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPSelectionDecoratorBracket.html)
///
/// @param self QCPSelectionDecoratorBracket*
/// @param pen QPen*
void q_cpselectiondecoratorbracket_set_bracket_pen(void* self, void* pen);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPSelectionDecoratorBracket.html)
///
/// @param self QCPSelectionDecoratorBracket*
/// @param brush QBrush*
void q_cpselectiondecoratorbracket_set_bracket_brush(void* self, void* brush);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPSelectionDecoratorBracket.html)
///
/// @param self QCPSelectionDecoratorBracket*
/// @param width int
void q_cpselectiondecoratorbracket_set_bracket_width(void* self, int width);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPSelectionDecoratorBracket.html)
///
/// @param self QCPSelectionDecoratorBracket*
/// @param height int
void q_cpselectiondecoratorbracket_set_bracket_height(void* self, int height);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPSelectionDecoratorBracket.html)
///
/// @param self QCPSelectionDecoratorBracket*
/// @param style enum QCPSelectionDecoratorBracket__BracketStyle
void q_cpselectiondecoratorbracket_set_bracket_style(void* self, int32_t style);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPSelectionDecoratorBracket.html)
///
/// @param self QCPSelectionDecoratorBracket*
/// @param enabled bool
void q_cpselectiondecoratorbracket_set_tangent_to_data(void* self, bool enabled);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPSelectionDecoratorBracket.html)
///
/// @param self QCPSelectionDecoratorBracket*
/// @param pointCount int
void q_cpselectiondecoratorbracket_set_tangent_average(void* self, int pointCount);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPSelectionDecoratorBracket.html)
///
/// @param self QCPSelectionDecoratorBracket*
/// @param painter QCPPainter*
/// @param direction int
void q_cpselectiondecoratorbracket_draw_bracket(void* self, void* painter, int direction);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPSelectionDecoratorBracket.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPSelectionDecoratorBracket*
/// @param callback void func(QCPSelectionDecoratorBracket* self, QCPPainter* painter, int direction)
void q_cpselectiondecoratorbracket_on_draw_bracket(void* self, void (*callback)(void*, void*, int));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPSelectionDecoratorBracket.html)
///
/// Base class method implementation
///
/// @param self QCPSelectionDecoratorBracket*
/// @param painter QCPPainter*
/// @param direction int
void q_cpselectiondecoratorbracket_qbase_draw_bracket(void* self, void* painter, int direction);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPSelectionDecoratorBracket.html)
///
/// @param self QCPSelectionDecoratorBracket*
/// @param painter QCPPainter*
/// @param selection QCPDataSelection*
void q_cpselectiondecoratorbracket_draw_decoration(void* self, void* painter, void* selection);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPSelectionDecoratorBracket.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPSelectionDecoratorBracket*
/// @param callback void func(QCPSelectionDecoratorBracket* self, QCPPainter* painter, QCPDataSelection* selection)
void q_cpselectiondecoratorbracket_on_draw_decoration(void* self, void (*callback)(void*, void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPSelectionDecoratorBracket.html)
///
/// Base class method implementation
///
/// @param self QCPSelectionDecoratorBracket*
/// @param painter QCPPainter*
/// @param selection QCPDataSelection*
void q_cpselectiondecoratorbracket_qbase_draw_decoration(void* self, void* painter, void* selection);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPSelectionDecoratorBracket.html)
///
/// @param self QCPSelectionDecoratorBracket*
/// @param interface1d QCPPlottableInterface1D*
/// @param dataIndex int
/// @param direction int
double q_cpselectiondecoratorbracket_get_tangent_angle(void* self, void* interface1d, int dataIndex, int direction);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPSelectionDecoratorBracket.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPSelectionDecoratorBracket*
/// @param callback double func(QCPSelectionDecoratorBracket* self, QCPPlottableInterface1D* interface1d, int dataIndex, int direction)
void q_cpselectiondecoratorbracket_on_get_tangent_angle(void* self, double (*callback)(void*, void*, int, int));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPSelectionDecoratorBracket.html)
///
/// Base class method implementation
///
/// @param self QCPSelectionDecoratorBracket*
/// @param interface1d QCPPlottableInterface1D*
/// @param dataIndex int
/// @param direction int
double q_cpselectiondecoratorbracket_qbase_get_tangent_angle(void* self, void* interface1d, int dataIndex, int direction);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPSelectionDecoratorBracket.html)
///
/// @param self QCPSelectionDecoratorBracket*
/// @param interface1d QCPPlottableInterface1D*
/// @param dataIndex int
QPointF* q_cpselectiondecoratorbracket_get_pixel_coordinates(void* self, void* interface1d, int dataIndex);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPSelectionDecoratorBracket.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPSelectionDecoratorBracket*
/// @param callback QPointF* func(QCPSelectionDecoratorBracket* self, QCPPlottableInterface1D* interface1d, int dataIndex)
void q_cpselectiondecoratorbracket_on_get_pixel_coordinates(void* self, QPointF* (*callback)(void*, void*, int));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPSelectionDecoratorBracket.html)
///
/// Base class method implementation
///
/// @param self QCPSelectionDecoratorBracket*
/// @param interface1d QCPPlottableInterface1D*
/// @param dataIndex int
QPointF* q_cpselectiondecoratorbracket_qbase_get_pixel_coordinates(void* self, void* interface1d, int dataIndex);

/// Inherited from QCPSelectionDecorator
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPSelectionDecorator.html)
///
/// @param self QCPSelectionDecoratorBracket*
QPen* q_cpselectiondecoratorbracket_pen(void* self);

/// Inherited from QCPSelectionDecorator
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPSelectionDecorator.html)
///
/// @param self QCPSelectionDecoratorBracket*
QBrush* q_cpselectiondecoratorbracket_brush(void* self);

/// Inherited from QCPSelectionDecorator
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPSelectionDecorator.html)
///
/// @param self QCPSelectionDecoratorBracket*
QCPScatterStyle* q_cpselectiondecoratorbracket_scatter_style(void* self);

/// Inherited from QCPSelectionDecorator
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPSelectionDecorator.html)
///
/// @param self QCPSelectionDecoratorBracket*
///
/// @return flag of enum QCPScatterStyle__ScatterProperty
int32_t q_cpselectiondecoratorbracket_used_scatter_properties(void* self);

/// Inherited from QCPSelectionDecorator
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPSelectionDecorator.html)
///
/// @param self QCPSelectionDecoratorBracket*
/// @param pen QPen*
void q_cpselectiondecoratorbracket_set_pen(void* self, void* pen);

/// Inherited from QCPSelectionDecorator
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPSelectionDecorator.html)
///
/// @param self QCPSelectionDecoratorBracket*
/// @param brush QBrush*
void q_cpselectiondecoratorbracket_set_brush(void* self, void* brush);

/// Inherited from QCPSelectionDecorator
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPSelectionDecorator.html)
///
/// @param self QCPSelectionDecoratorBracket*
/// @param scatterStyle QCPScatterStyle*
void q_cpselectiondecoratorbracket_set_scatter_style(void* self, void* scatterStyle);

/// Inherited from QCPSelectionDecorator
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPSelectionDecorator.html)
///
/// @param self QCPSelectionDecoratorBracket*
/// @param properties flag of enum QCPScatterStyle__ScatterProperty
void q_cpselectiondecoratorbracket_set_used_scatter_properties(void* self, const int32_t* properties);

/// Inherited from QCPSelectionDecorator
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPSelectionDecorator.html)
///
/// @param self QCPSelectionDecoratorBracket*
/// @param painter QCPPainter*
void q_cpselectiondecoratorbracket_apply_pen(void* self, void* painter);

/// Inherited from QCPSelectionDecorator
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPSelectionDecorator.html)
///
/// @param self QCPSelectionDecoratorBracket*
/// @param painter QCPPainter*
void q_cpselectiondecoratorbracket_apply_brush(void* self, void* painter);

/// Inherited from QCPSelectionDecorator
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPSelectionDecorator.html)
///
/// @param self QCPSelectionDecoratorBracket*
/// @param unselectedStyle QCPScatterStyle*
QCPScatterStyle* q_cpselectiondecoratorbracket_get_final_scatter_style(void* self, void* unselectedStyle);

/// Inherited from QCPSelectionDecorator
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPSelectionDecorator.html)
///
/// @param self QCPSelectionDecoratorBracket*
/// @param scatterStyle QCPScatterStyle*
/// @param usedProperties flag of enum QCPScatterStyle__ScatterProperty
void q_cpselectiondecoratorbracket_set_scatter_style2(void* self, void* scatterStyle, int32_t usedProperties);

/// Inherited from QCPSelectionDecorator
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPSelectionDecorator.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPSelectionDecoratorBracket*
/// @param other QCPSelectionDecorator*
void q_cpselectiondecoratorbracket_copy_from(void* self, void* other);

/// Inherited from QCPSelectionDecorator
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPSelectionDecorator.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPSelectionDecoratorBracket*
/// @param other QCPSelectionDecorator*
void q_cpselectiondecoratorbracket_qbase_copy_from(void* self, void* other);

/// Inherited from QCPSelectionDecorator
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPSelectionDecorator.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPSelectionDecoratorBracket*
/// @param callback void func(QCPSelectionDecoratorBracket* self, QCPSelectionDecorator* other)
void q_cpselectiondecoratorbracket_on_copy_from(void* self, void (*callback)(void*, void*));

/// Inherited from QCPSelectionDecorator
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPSelectionDecorator.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPSelectionDecoratorBracket*
/// @param plottable QCPAbstractPlottable*
bool q_cpselectiondecoratorbracket_register_with_plottable(void* self, void* plottable);

/// Inherited from QCPSelectionDecorator
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPSelectionDecorator.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPSelectionDecoratorBracket*
/// @param plottable QCPAbstractPlottable*
bool q_cpselectiondecoratorbracket_qbase_register_with_plottable(void* self, void* plottable);

/// Inherited from QCPSelectionDecorator
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPSelectionDecorator.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPSelectionDecoratorBracket*
/// @param callback bool func(QCPSelectionDecoratorBracket* self, QCPAbstractPlottable* plottable)
void q_cpselectiondecoratorbracket_on_register_with_plottable(void* self, bool (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPSelectionDecoratorBracket.html)
///
/// Delete this object from C++ memory.
///
/// @param self QCPSelectionDecoratorBracket*
void q_cpselectiondecoratorbracket_delete(void* self);

/// https://www.qcustomplot.com/documentation/classQCPAxisRect.html

/// q_cpaxisrect_new constructs a new QCPAxisRect object.
///
/// @param parentPlot QCustomPlot*
QCPAxisRect* q_cpaxisrect_new(void* parentPlot);

/// q_cpaxisrect_new2 constructs a new QCPAxisRect object.
///
/// @param parentPlot QCustomPlot*
/// @param setupDefaultAxes bool
QCPAxisRect* q_cpaxisrect_new2(void* parentPlot, bool setupDefaultAxes);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#metaObject)
///
/// @param self QCPAxisRect*
const QMetaObject* q_cpaxisrect_meta_object(void* self);

/// @param self QCPAxisRect*
/// @param param1 const char*
void* q_cpaxisrect_metacast(void* self, const char* param1);

/// @param self QCPAxisRect*
/// @param param1 enum QMetaObject__Call
/// @param param2 int
/// @param param3 void*
int32_t q_cpaxisrect_metacall(void* self, int32_t param1, int param2, void* param3);

/// Allows for overriding the related default method
///
/// @param self QCPAxisRect*
/// @param callback int32_t func(QCPAxisRect* self, enum QMetaObject__Call param1, int param2, void* param3)
void q_cpaxisrect_on_metacall(void* self, int32_t (*callback)(void*, int32_t, int, void*));

/// Base class method implementation
///
/// @param self QCPAxisRect*
/// @param param1 enum QMetaObject__Call
/// @param param2 int
/// @param param3 void*
int32_t q_cpaxisrect_qbase_metacall(void* self, int32_t param1, int param2, void* param3);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
const char* q_cpaxisrect_tr(const char* s);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisRect.html)
///
/// @param self QCPAxisRect*
QPixmap* q_cpaxisrect_background(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisRect.html)
///
/// @param self QCPAxisRect*
QBrush* q_cpaxisrect_background_brush(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisRect.html)
///
/// @param self QCPAxisRect*
bool q_cpaxisrect_background_scaled(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisRect.html)
///
/// @param self QCPAxisRect*
///
/// @return enum Qt__AspectRatioMode
int32_t q_cpaxisrect_background_scaled_mode(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisRect.html)
///
/// @param self QCPAxisRect*
///
/// @return flag of enum Qt__Orientation
int32_t q_cpaxisrect_range_drag(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisRect.html)
///
/// @param self QCPAxisRect*
///
/// @return flag of enum Qt__Orientation
int32_t q_cpaxisrect_range_zoom(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisRect.html)
///
/// @param self QCPAxisRect*
/// @param orientation enum Qt__Orientation
QCPAxis* q_cpaxisrect_range_drag_axis(void* self, int32_t orientation);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisRect.html)
///
/// @param self QCPAxisRect*
/// @param orientation enum Qt__Orientation
QCPAxis* q_cpaxisrect_range_zoom_axis(void* self, int32_t orientation);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisRect.html)
///
/// @param self QCPAxisRect*
/// @param orientation enum Qt__Orientation
libqt_list /* of QCPAxis* */ q_cpaxisrect_range_drag_axes(void* self, int32_t orientation);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisRect.html)
///
/// @param self QCPAxisRect*
/// @param orientation enum Qt__Orientation
libqt_list /* of QCPAxis* */ q_cpaxisrect_range_zoom_axes(void* self, int32_t orientation);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisRect.html)
///
/// @param self QCPAxisRect*
/// @param orientation enum Qt__Orientation
double q_cpaxisrect_range_zoom_factor(void* self, int32_t orientation);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisRect.html)
///
/// @param self QCPAxisRect*
/// @param pm QPixmap*
void q_cpaxisrect_set_background(void* self, void* pm);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisRect.html)
///
/// @param self QCPAxisRect*
/// @param pm QPixmap*
/// @param scaled bool
void q_cpaxisrect_set_background2(void* self, void* pm, bool scaled);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisRect.html)
///
/// @param self QCPAxisRect*
/// @param brush QBrush*
void q_cpaxisrect_set_background3(void* self, void* brush);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisRect.html)
///
/// @param self QCPAxisRect*
/// @param scaled bool
void q_cpaxisrect_set_background_scaled(void* self, bool scaled);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisRect.html)
///
/// @param self QCPAxisRect*
/// @param mode enum Qt__AspectRatioMode
void q_cpaxisrect_set_background_scaled_mode(void* self, int32_t mode);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisRect.html)
///
/// @param self QCPAxisRect*
/// @param orientations flag of enum Qt__Orientation
void q_cpaxisrect_set_range_drag(void* self, int32_t orientations);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisRect.html)
///
/// @param self QCPAxisRect*
/// @param orientations flag of enum Qt__Orientation
void q_cpaxisrect_set_range_zoom(void* self, int32_t orientations);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisRect.html)
///
/// @param self QCPAxisRect*
/// @param horizontal QCPAxis*
/// @param vertical QCPAxis*
void q_cpaxisrect_set_range_drag_axes(void* self, void* horizontal, void* vertical);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisRect.html)
///
/// @param self QCPAxisRect*
/// @param axes libqt_list /* of QCPAxis* */
void q_cpaxisrect_set_range_drag_axes2(void* self, libqt_list axes);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisRect.html)
///
/// @param self QCPAxisRect*
/// @param horizontal libqt_list /* of QCPAxis* */
/// @param vertical libqt_list /* of QCPAxis* */
void q_cpaxisrect_set_range_drag_axes3(void* self, libqt_list horizontal, libqt_list vertical);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisRect.html)
///
/// @param self QCPAxisRect*
/// @param horizontal QCPAxis*
/// @param vertical QCPAxis*
void q_cpaxisrect_set_range_zoom_axes(void* self, void* horizontal, void* vertical);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisRect.html)
///
/// @param self QCPAxisRect*
/// @param axes libqt_list /* of QCPAxis* */
void q_cpaxisrect_set_range_zoom_axes2(void* self, libqt_list axes);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisRect.html)
///
/// @param self QCPAxisRect*
/// @param horizontal libqt_list /* of QCPAxis* */
/// @param vertical libqt_list /* of QCPAxis* */
void q_cpaxisrect_set_range_zoom_axes3(void* self, libqt_list horizontal, libqt_list vertical);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisRect.html)
///
/// @param self QCPAxisRect*
/// @param horizontalFactor double
/// @param verticalFactor double
void q_cpaxisrect_set_range_zoom_factor(void* self, double horizontalFactor, double verticalFactor);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisRect.html)
///
/// @param self QCPAxisRect*
/// @param factor double
void q_cpaxisrect_set_range_zoom_factor2(void* self, double factor);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisRect.html)
///
/// @param self QCPAxisRect*
/// @param type enum QCPAxis__AxisType
int32_t q_cpaxisrect_axis_count(void* self, int32_t type);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisRect.html)
///
/// @param self QCPAxisRect*
/// @param type enum QCPAxis__AxisType
QCPAxis* q_cpaxisrect_axis(void* self, int32_t type);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisRect.html)
///
/// @param self QCPAxisRect*
/// @param types flag of enum QCPAxis__AxisType
libqt_list /* of QCPAxis* */ q_cpaxisrect_axes(void* self, int32_t types);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisRect.html)
///
/// @param self QCPAxisRect*
libqt_list /* of QCPAxis* */ q_cpaxisrect_axes2(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisRect.html)
///
/// @param self QCPAxisRect*
/// @param type enum QCPAxis__AxisType
QCPAxis* q_cpaxisrect_add_axis(void* self, int32_t type);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisRect.html)
///
/// @param self QCPAxisRect*
/// @param types flag of enum QCPAxis__AxisType
libqt_list /* of QCPAxis* */ q_cpaxisrect_add_axes(void* self, int32_t types);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisRect.html)
///
/// @param self QCPAxisRect*
/// @param axis QCPAxis*
bool q_cpaxisrect_remove_axis(void* self, void* axis);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisRect.html)
///
/// @param self QCPAxisRect*
QCPLayoutInset* q_cpaxisrect_inset_layout(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisRect.html)
///
/// @param self QCPAxisRect*
/// @param pixelRect QRectF*
void q_cpaxisrect_zoom(void* self, void* pixelRect);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisRect.html)
///
/// @param self QCPAxisRect*
/// @param pixelRect QRectF*
/// @param affectedAxes libqt_list /* of QCPAxis* */
void q_cpaxisrect_zoom2(void* self, void* pixelRect, libqt_list affectedAxes);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisRect.html)
///
/// @param self QCPAxisRect*
void q_cpaxisrect_setup_full_axes_box(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisRect.html)
///
/// @param self QCPAxisRect*
libqt_list /* of QCPAbstractPlottable* */ q_cpaxisrect_plottables(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisRect.html)
///
/// @param self QCPAxisRect*
libqt_list /* of QCPGraph* */ q_cpaxisrect_graphs(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisRect.html)
///
/// @param self QCPAxisRect*
libqt_list /* of QCPAbstractItem* */ q_cpaxisrect_items(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisRect.html)
///
/// @param self QCPAxisRect*
int32_t q_cpaxisrect_left(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisRect.html)
///
/// @param self QCPAxisRect*
int32_t q_cpaxisrect_right(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisRect.html)
///
/// @param self QCPAxisRect*
int32_t q_cpaxisrect_top(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisRect.html)
///
/// @param self QCPAxisRect*
int32_t q_cpaxisrect_bottom(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisRect.html)
///
/// @param self QCPAxisRect*
int32_t q_cpaxisrect_width(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisRect.html)
///
/// @param self QCPAxisRect*
int32_t q_cpaxisrect_height(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisRect.html)
///
/// @param self QCPAxisRect*
QSize* q_cpaxisrect_size(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisRect.html)
///
/// @param self QCPAxisRect*
QPoint* q_cpaxisrect_top_left(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisRect.html)
///
/// @param self QCPAxisRect*
QPoint* q_cpaxisrect_top_right(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisRect.html)
///
/// @param self QCPAxisRect*
QPoint* q_cpaxisrect_bottom_left(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisRect.html)
///
/// @param self QCPAxisRect*
QPoint* q_cpaxisrect_bottom_right(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisRect.html)
///
/// @param self QCPAxisRect*
QPoint* q_cpaxisrect_center(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisRect.html)
///
/// @param self QCPAxisRect*
/// @param phase enum QCPLayoutElement__UpdatePhase
void q_cpaxisrect_update(void* self, int32_t phase);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisRect.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPAxisRect*
/// @param callback void func(QCPAxisRect* self, enum QCPLayoutElement__UpdatePhase phase)
void q_cpaxisrect_on_update(void* self, void (*callback)(void*, int32_t));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisRect.html)
///
/// Base class method implementation
///
/// @param self QCPAxisRect*
/// @param phase enum QCPLayoutElement__UpdatePhase
void q_cpaxisrect_qbase_update(void* self, int32_t phase);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisRect.html)
///
/// @param self QCPAxisRect*
/// @param recursive bool
libqt_list /* of QCPLayoutElement* */ q_cpaxisrect_elements(void* self, bool recursive);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisRect.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPAxisRect*
/// @param callback QCPLayoutElement** func(QCPAxisRect* self, bool recursive)
void q_cpaxisrect_on_elements(void* self, QCPLayoutElement** (*callback)(void*, bool));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisRect.html)
///
/// Base class method implementation
///
/// @param self QCPAxisRect*
/// @param recursive bool
libqt_list /* of QCPLayoutElement* */ q_cpaxisrect_qbase_elements(void* self, bool recursive);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisRect.html)
///
/// @param self QCPAxisRect*
/// @param painter QCPPainter*
void q_cpaxisrect_apply_default_antialiasing_hint(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisRect.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPAxisRect*
/// @param callback void func(QCPAxisRect* self, QCPPainter* painter)
void q_cpaxisrect_on_apply_default_antialiasing_hint(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisRect.html)
///
/// Base class method implementation
///
/// @param self QCPAxisRect*
/// @param painter QCPPainter*
void q_cpaxisrect_qbase_apply_default_antialiasing_hint(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisRect.html)
///
/// @param self QCPAxisRect*
/// @param painter QCPPainter*
void q_cpaxisrect_draw(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisRect.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPAxisRect*
/// @param callback void func(QCPAxisRect* self, QCPPainter* painter)
void q_cpaxisrect_on_draw(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisRect.html)
///
/// Base class method implementation
///
/// @param self QCPAxisRect*
/// @param painter QCPPainter*
void q_cpaxisrect_qbase_draw(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisRect.html)
///
/// @param self QCPAxisRect*
/// @param side enum QCP__MarginSide
int32_t q_cpaxisrect_calculate_auto_margin(void* self, int32_t side);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisRect.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPAxisRect*
/// @param callback int32_t func(QCPAxisRect* self, enum QCP__MarginSide side)
void q_cpaxisrect_on_calculate_auto_margin(void* self, int32_t (*callback)(void*, int32_t));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisRect.html)
///
/// Base class method implementation
///
/// @param self QCPAxisRect*
/// @param side enum QCP__MarginSide
int32_t q_cpaxisrect_qbase_calculate_auto_margin(void* self, int32_t side);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisRect.html)
///
/// @param self QCPAxisRect*
void q_cpaxisrect_layout_changed(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisRect.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPAxisRect*
/// @param callback void func()
void q_cpaxisrect_on_layout_changed(void* self, void (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisRect.html)
///
/// Base class method implementation
///
/// @param self QCPAxisRect*
void q_cpaxisrect_qbase_layout_changed(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisRect.html)
///
/// @param self QCPAxisRect*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cpaxisrect_mouse_press_event(void* self, void* event, void* details);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisRect.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPAxisRect*
/// @param callback void func(QCPAxisRect* self, QMouseEvent* event, QVariant* details)
void q_cpaxisrect_on_mouse_press_event(void* self, void (*callback)(void*, void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisRect.html)
///
/// Base class method implementation
///
/// @param self QCPAxisRect*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cpaxisrect_qbase_mouse_press_event(void* self, void* event, void* details);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisRect.html)
///
/// @param self QCPAxisRect*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cpaxisrect_mouse_move_event(void* self, void* event, void* startPos);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisRect.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPAxisRect*
/// @param callback void func(QCPAxisRect* self, QMouseEvent* event, QPointF* startPos)
void q_cpaxisrect_on_mouse_move_event(void* self, void (*callback)(void*, void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisRect.html)
///
/// Base class method implementation
///
/// @param self QCPAxisRect*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cpaxisrect_qbase_mouse_move_event(void* self, void* event, void* startPos);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisRect.html)
///
/// @param self QCPAxisRect*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cpaxisrect_mouse_release_event(void* self, void* event, void* startPos);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisRect.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPAxisRect*
/// @param callback void func(QCPAxisRect* self, QMouseEvent* event, QPointF* startPos)
void q_cpaxisrect_on_mouse_release_event(void* self, void (*callback)(void*, void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisRect.html)
///
/// Base class method implementation
///
/// @param self QCPAxisRect*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cpaxisrect_qbase_mouse_release_event(void* self, void* event, void* startPos);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisRect.html)
///
/// @param self QCPAxisRect*
/// @param event QWheelEvent*
void q_cpaxisrect_wheel_event(void* self, void* event);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisRect.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPAxisRect*
/// @param callback void func(QCPAxisRect* self, QWheelEvent* event)
void q_cpaxisrect_on_wheel_event(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisRect.html)
///
/// Base class method implementation
///
/// @param self QCPAxisRect*
/// @param event QWheelEvent*
void q_cpaxisrect_qbase_wheel_event(void* self, void* event);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisRect.html)
///
/// @param self QCPAxisRect*
/// @param painter QCPPainter*
void q_cpaxisrect_draw_background(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisRect.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPAxisRect*
/// @param callback void func(QCPAxisRect* self, QCPPainter* painter)
void q_cpaxisrect_on_draw_background(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisRect.html)
///
/// Base class method implementation
///
/// @param self QCPAxisRect*
/// @param painter QCPPainter*
void q_cpaxisrect_qbase_draw_background(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisRect.html)
///
/// @param self QCPAxisRect*
/// @param type enum QCPAxis__AxisType
void q_cpaxisrect_update_axes_offset(void* self, int32_t type);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisRect.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPAxisRect*
/// @param callback void func(QCPAxisRect* self, enum QCPAxis__AxisType type)
void q_cpaxisrect_on_update_axes_offset(void* self, void (*callback)(void*, int32_t));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisRect.html)
///
/// Base class method implementation
///
/// @param self QCPAxisRect*
/// @param type enum QCPAxis__AxisType
void q_cpaxisrect_qbase_update_axes_offset(void* self, int32_t type);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
/// @param c const char*
const char* q_cpaxisrect_tr2(const char* s, const char* c);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
/// @param c const char*
/// @param n int
const char* q_cpaxisrect_tr3(const char* s, const char* c, int n);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisRect.html)
///
/// @param self QCPAxisRect*
/// @param pm QPixmap*
/// @param scaled bool
/// @param mode enum Qt__AspectRatioMode
void q_cpaxisrect_set_background32(void* self, void* pm, bool scaled, int32_t mode);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisRect.html)
///
/// @param self QCPAxisRect*
/// @param type enum QCPAxis__AxisType
/// @param index int
QCPAxis* q_cpaxisrect_axis2(void* self, int32_t type, int index);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisRect.html)
///
/// @param self QCPAxisRect*
/// @param type enum QCPAxis__AxisType
/// @param axis QCPAxis*
QCPAxis* q_cpaxisrect_add_axis2(void* self, int32_t type, void* axis);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisRect.html)
///
/// @param self QCPAxisRect*
/// @param connectRanges bool
void q_cpaxisrect_setup_full_axes_box1(void* self, bool connectRanges);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPAxisRect*
QCPLayout* q_cpaxisrect_layout(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPAxisRect*
QRect* q_cpaxisrect_rect(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPAxisRect*
QRect* q_cpaxisrect_outer_rect(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPAxisRect*
QMargins* q_cpaxisrect_margins(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPAxisRect*
QMargins* q_cpaxisrect_minimum_margins(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPAxisRect*
///
/// @return flag of enum QCP__MarginSide
int32_t q_cpaxisrect_auto_margins(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPAxisRect*
QSize* q_cpaxisrect_minimum_size(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPAxisRect*
QSize* q_cpaxisrect_maximum_size(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPAxisRect*
///
/// @return enum QCPLayoutElement__SizeConstraintRect
int32_t q_cpaxisrect_size_constraint_rect(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPAxisRect*
/// @param side enum QCP__MarginSide
QCPMarginGroup* q_cpaxisrect_margin_group(void* self, int32_t side);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPAxisRect*
libqt_map /* of int32_t to QCPMarginGroup* */ q_cpaxisrect_margin_groups(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPAxisRect*
/// @param rect QRect*
void q_cpaxisrect_set_outer_rect(void* self, void* rect);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPAxisRect*
/// @param margins QMargins*
void q_cpaxisrect_set_margins(void* self, void* margins);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPAxisRect*
/// @param margins QMargins*
void q_cpaxisrect_set_minimum_margins(void* self, void* margins);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPAxisRect*
/// @param sides flag of enum QCP__MarginSide
void q_cpaxisrect_set_auto_margins(void* self, int32_t sides);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPAxisRect*
/// @param size QSize*
void q_cpaxisrect_set_minimum_size(void* self, void* size);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPAxisRect*
/// @param width int
/// @param height int
void q_cpaxisrect_set_minimum_size2(void* self, int width, int height);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPAxisRect*
/// @param size QSize*
void q_cpaxisrect_set_maximum_size(void* self, void* size);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPAxisRect*
/// @param width int
/// @param height int
void q_cpaxisrect_set_maximum_size2(void* self, int width, int height);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPAxisRect*
/// @param constraintRect enum QCPLayoutElement__SizeConstraintRect
void q_cpaxisrect_set_size_constraint_rect(void* self, int32_t constraintRect);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPAxisRect*
/// @param sides flag of enum QCP__MarginSide
/// @param group QCPMarginGroup*
void q_cpaxisrect_set_margin_group(void* self, int32_t sides, void* group);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPAxisRect*
bool q_cpaxisrect_visible(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPAxisRect*
QCustomPlot* q_cpaxisrect_parent_plot(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPAxisRect*
QCPLayerable* q_cpaxisrect_parent_layerable(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPAxisRect*
QCPLayer* q_cpaxisrect_layer(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPAxisRect*
bool q_cpaxisrect_antialiased(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPAxisRect*
/// @param on bool
void q_cpaxisrect_set_visible(void* self, bool on);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPAxisRect*
/// @param layer QCPLayer*
bool q_cpaxisrect_set_layer(void* self, void* layer);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPAxisRect*
/// @param layerName const char*
bool q_cpaxisrect_set_layer2(void* self, const char* layerName);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPAxisRect*
/// @param enabled bool
void q_cpaxisrect_set_antialiased(void* self, bool enabled);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPAxisRect*
bool q_cpaxisrect_real_visibility(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPAxisRect*
/// @param newLayer QCPLayer*
void q_cpaxisrect_layer_changed(void* self, void* newLayer);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPAxisRect*
/// @param callback void func(QCPAxisRect* self, QCPLayer* newLayer)
void q_cpaxisrect_on_layer_changed(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#objectName)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPAxisRect*
const char* q_cpaxisrect_object_name(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setObjectName)
///
/// @param self QCPAxisRect*
/// @param name char*
void q_cpaxisrect_set_object_name(void* self, char* name);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isWidgetType)
///
/// @param self QCPAxisRect*
bool q_cpaxisrect_is_widget_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isWindowType)
///
/// @param self QCPAxisRect*
bool q_cpaxisrect_is_window_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isQuickItemType)
///
/// @param self QCPAxisRect*
bool q_cpaxisrect_is_quick_item_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#signalsBlocked)
///
/// @param self QCPAxisRect*
bool q_cpaxisrect_signals_blocked(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#blockSignals)
///
/// @param self QCPAxisRect*
/// @param b bool
bool q_cpaxisrect_block_signals(void* self, bool b);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#thread)
///
/// @param self QCPAxisRect*
QThread* q_cpaxisrect_thread(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#moveToThread)
///
/// @param self QCPAxisRect*
/// @param thread QThread*
bool q_cpaxisrect_move_to_thread(void* self, void* thread);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#startTimer)
///
/// @param self QCPAxisRect*
/// @param interval int
int32_t q_cpaxisrect_start_timer(void* self, int interval);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#killTimer)
///
/// @param self QCPAxisRect*
/// @param id int
void q_cpaxisrect_kill_timer(void* self, int id);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#killTimer)
///
/// @param self QCPAxisRect*
/// @param id enum Qt__TimerId
void q_cpaxisrect_kill_timer2(void* self, int32_t id);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#children)
///
/// @param self QCPAxisRect*
libqt_list /* of QObject* */ q_cpaxisrect_children(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setParent)
///
/// @param self QCPAxisRect*
/// @param parent QObject*
void q_cpaxisrect_set_parent(void* self, void* parent);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#installEventFilter)
///
/// @param self QCPAxisRect*
/// @param filterObj QObject*
void q_cpaxisrect_install_event_filter(void* self, void* filterObj);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#removeEventFilter)
///
/// @param self QCPAxisRect*
/// @param obj QObject*
void q_cpaxisrect_remove_event_filter(void* self, void* obj);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param method QMetaMethod*
QMetaObject__Connection* q_cpaxisrect_connect(void* sender, void* signal, void* receiver, void* method);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param self QCPAxisRect*
/// @param sender QObject*
/// @param signal const char*
/// @param member const char*
QMetaObject__Connection* q_cpaxisrect_connect2(void* self, void* sender, const char* signal, const char* member);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param member QMetaMethod*
bool q_cpaxisrect_disconnect(void* sender, void* signal, void* receiver, void* member);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnect)
///
/// @param param1 QMetaObject__Connection*
bool q_cpaxisrect_disconnect2(void* param1);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dumpObjectTree)
///
/// @param self QCPAxisRect*
void q_cpaxisrect_dump_object_tree(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dumpObjectInfo)
///
/// @param self QCPAxisRect*
void q_cpaxisrect_dump_object_info(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setProperty)
///
/// @param self QCPAxisRect*
/// @param name const char*
/// @param value QVariant*
bool q_cpaxisrect_set_property(void* self, const char* name, void* value);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#property)
///
/// @param self QCPAxisRect*
/// @param name const char*
QVariant* q_cpaxisrect_property(void* self, const char* name);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dynamicPropertyNames)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPAxisRect*
const char** q_cpaxisrect_dynamic_property_names(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#bindingStorage)
///
/// @param self QCPAxisRect*
QBindingStorage* q_cpaxisrect_binding_storage(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#bindingStorage)
///
/// @param self QCPAxisRect*
const QBindingStorage* q_cpaxisrect_binding_storage2(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPAxisRect*
void q_cpaxisrect_destroyed(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPAxisRect*
/// @param callback void func(QCPAxisRect* self)
void q_cpaxisrect_on_destroyed(void* self, void (*callback)(void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#parent)
///
/// @param self QCPAxisRect*
QObject* q_cpaxisrect_parent(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#inherits)
///
/// @param self QCPAxisRect*
/// @param classname const char*
bool q_cpaxisrect_inherits(void* self, const char* classname);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#deleteLater)
///
/// @param self QCPAxisRect*
void q_cpaxisrect_delete_later(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#moveToThread)
///
/// @param self QCPAxisRect*
/// @param thread QThread*
/// @param param2 Disambiguated_t*
bool q_cpaxisrect_move_to_thread2(void* self, void* thread, void* param2);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#startTimer)
///
/// @param self QCPAxisRect*
/// @param interval int
/// @param timerType enum Qt__TimerType
int32_t q_cpaxisrect_start_timer22(void* self, int interval, int32_t timerType);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param method QMetaMethod*
/// @param type enum Qt__ConnectionType
QMetaObject__Connection* q_cpaxisrect_connect5(void* sender, void* signal, void* receiver, void* method, int32_t type);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param self QCPAxisRect*
/// @param sender QObject*
/// @param signal const char*
/// @param member const char*
/// @param type enum Qt__ConnectionType
QMetaObject__Connection* q_cpaxisrect_connect4(void* self, void* sender, const char* signal, const char* member, int32_t type);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPAxisRect*
/// @param param1 QObject*
void q_cpaxisrect_destroyed1(void* self, void* param1);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPAxisRect*
/// @param callback void func(QCPAxisRect* self, QObject* param1)
void q_cpaxisrect_on_destroyed1(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAxisRect*
QSize* q_cpaxisrect_minimum_outer_size_hint(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAxisRect*
QSize* q_cpaxisrect_qbase_minimum_outer_size_hint(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAxisRect*
/// @param callback QSize* func()
void q_cpaxisrect_on_minimum_outer_size_hint(void* self, QSize* (*callback)());

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAxisRect*
QSize* q_cpaxisrect_maximum_outer_size_hint(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAxisRect*
QSize* q_cpaxisrect_qbase_maximum_outer_size_hint(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAxisRect*
/// @param callback QSize* func()
void q_cpaxisrect_on_maximum_outer_size_hint(void* self, QSize* (*callback)());

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAxisRect*
/// @param pos QPointF*
/// @param onlySelectable bool
/// @param details QVariant*
double q_cpaxisrect_select_test(void* self, void* pos, bool onlySelectable, void* details);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAxisRect*
/// @param pos QPointF*
/// @param onlySelectable bool
/// @param details QVariant*
double q_cpaxisrect_qbase_select_test(void* self, void* pos, bool onlySelectable, void* details);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAxisRect*
/// @param callback double func(QCPAxisRect* self, QPointF* pos, bool onlySelectable, QVariant* details)
void q_cpaxisrect_on_select_test(void* self, double (*callback)(void*, void*, bool, void*));

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAxisRect*
/// @param parentPlot QCustomPlot*
void q_cpaxisrect_parent_plot_initialized(void* self, void* parentPlot);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAxisRect*
/// @param parentPlot QCustomPlot*
void q_cpaxisrect_qbase_parent_plot_initialized(void* self, void* parentPlot);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAxisRect*
/// @param callback void func(QCPAxisRect* self, QCustomPlot* parentPlot)
void q_cpaxisrect_on_parent_plot_initialized(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAxisRect*
///
/// @return enum QCP__Interaction
int32_t q_cpaxisrect_selection_category(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAxisRect*
///
/// @return enum QCP__Interaction
int32_t q_cpaxisrect_qbase_selection_category(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAxisRect*
/// @param callback int32_t func()
void q_cpaxisrect_on_selection_category(void* self, int32_t (*callback)());

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAxisRect*
QRect* q_cpaxisrect_clip_rect(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAxisRect*
QRect* q_cpaxisrect_qbase_clip_rect(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAxisRect*
/// @param callback QRect* func()
void q_cpaxisrect_on_clip_rect(void* self, QRect* (*callback)());

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAxisRect*
/// @param event QMouseEvent*
/// @param additive bool
/// @param details QVariant*
/// @param selectionStateChanged bool*
void q_cpaxisrect_select_event(void* self, void* event, bool additive, void* details, bool* selectionStateChanged);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAxisRect*
/// @param event QMouseEvent*
/// @param additive bool
/// @param details QVariant*
/// @param selectionStateChanged bool*
void q_cpaxisrect_qbase_select_event(void* self, void* event, bool additive, void* details, bool* selectionStateChanged);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAxisRect*
/// @param callback void func(QCPAxisRect* self, QMouseEvent* event, bool additive, QVariant* details, bool* selectionStateChanged)
void q_cpaxisrect_on_select_event(void* self, void (*callback)(void*, void*, bool, void*, bool*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAxisRect*
/// @param selectionStateChanged bool*
void q_cpaxisrect_deselect_event(void* self, bool* selectionStateChanged);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAxisRect*
/// @param selectionStateChanged bool*
void q_cpaxisrect_qbase_deselect_event(void* self, bool* selectionStateChanged);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAxisRect*
/// @param callback void func(QCPAxisRect* self, bool* selectionStateChanged)
void q_cpaxisrect_on_deselect_event(void* self, void (*callback)(void*, bool*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAxisRect*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cpaxisrect_mouse_double_click_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAxisRect*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cpaxisrect_qbase_mouse_double_click_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAxisRect*
/// @param callback void func(QCPAxisRect* self, QMouseEvent* event, QVariant* details)
void q_cpaxisrect_on_mouse_double_click_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAxisRect*
/// @param event QEvent*
bool q_cpaxisrect_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAxisRect*
/// @param event QEvent*
bool q_cpaxisrect_qbase_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAxisRect*
/// @param callback bool func(QCPAxisRect* self, QEvent* event)
void q_cpaxisrect_on_event(void* self, bool (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAxisRect*
/// @param watched QObject*
/// @param event QEvent*
bool q_cpaxisrect_event_filter(void* self, void* watched, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAxisRect*
/// @param watched QObject*
/// @param event QEvent*
bool q_cpaxisrect_qbase_event_filter(void* self, void* watched, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAxisRect*
/// @param callback bool func(QCPAxisRect* self, QObject* watched, QEvent* event)
void q_cpaxisrect_on_event_filter(void* self, bool (*callback)(void*, void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAxisRect*
/// @param event QTimerEvent*
void q_cpaxisrect_timer_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAxisRect*
/// @param event QTimerEvent*
void q_cpaxisrect_qbase_timer_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAxisRect*
/// @param callback void func(QCPAxisRect* self, QTimerEvent* event)
void q_cpaxisrect_on_timer_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAxisRect*
/// @param event QChildEvent*
void q_cpaxisrect_child_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAxisRect*
/// @param event QChildEvent*
void q_cpaxisrect_qbase_child_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAxisRect*
/// @param callback void func(QCPAxisRect* self, QChildEvent* event)
void q_cpaxisrect_on_child_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAxisRect*
/// @param event QEvent*
void q_cpaxisrect_custom_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAxisRect*
/// @param event QEvent*
void q_cpaxisrect_qbase_custom_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAxisRect*
/// @param callback void func(QCPAxisRect* self, QEvent* event)
void q_cpaxisrect_on_custom_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAxisRect*
/// @param signal QMetaMethod*
void q_cpaxisrect_connect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAxisRect*
/// @param signal QMetaMethod*
void q_cpaxisrect_qbase_connect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAxisRect*
/// @param callback void func(QCPAxisRect* self, QMetaMethod* signal)
void q_cpaxisrect_on_connect_notify(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAxisRect*
/// @param signal QMetaMethod*
void q_cpaxisrect_disconnect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAxisRect*
/// @param signal QMetaMethod*
void q_cpaxisrect_qbase_disconnect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAxisRect*
/// @param callback void func(QCPAxisRect* self, QMetaMethod* signal)
void q_cpaxisrect_on_disconnect_notify(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAxisRect*
/// @param parentPlot QCustomPlot*
void q_cpaxisrect_initialize_parent_plot(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAxisRect*
/// @param parentPlot QCustomPlot*
void q_cpaxisrect_qbase_initialize_parent_plot(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAxisRect*
/// @param callback void func(QCPAxisRect* self, QCustomPlot* parentPlot)
void q_cpaxisrect_on_initialize_parent_plot(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAxisRect*
/// @param parentLayerable QCPLayerable*
void q_cpaxisrect_set_parent_layerable(void* self, void* parentLayerable);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAxisRect*
/// @param parentLayerable QCPLayerable*
void q_cpaxisrect_qbase_set_parent_layerable(void* self, void* parentLayerable);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAxisRect*
/// @param callback void func(QCPAxisRect* self, QCPLayerable* parentLayerable)
void q_cpaxisrect_on_set_parent_layerable(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAxisRect*
/// @param layer QCPLayer*
/// @param prepend bool
bool q_cpaxisrect_move_to_layer(void* self, void* layer, bool prepend);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAxisRect*
/// @param layer QCPLayer*
/// @param prepend bool
bool q_cpaxisrect_qbase_move_to_layer(void* self, void* layer, bool prepend);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAxisRect*
/// @param callback bool func(QCPAxisRect* self, QCPLayer* layer, bool prepend)
void q_cpaxisrect_on_move_to_layer(void* self, bool (*callback)(void*, void*, bool));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAxisRect*
/// @param painter QCPPainter*
/// @param localAntialiased bool
/// @param overrideElement enum QCP__AntialiasedElement
void q_cpaxisrect_apply_antialiasing_hint(void* self, void* painter, bool localAntialiased, int32_t overrideElement);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAxisRect*
/// @param painter QCPPainter*
/// @param localAntialiased bool
/// @param overrideElement enum QCP__AntialiasedElement
void q_cpaxisrect_qbase_apply_antialiasing_hint(void* self, void* painter, bool localAntialiased, int32_t overrideElement);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAxisRect*
/// @param callback void func(QCPAxisRect* self, QCPPainter* painter, bool localAntialiased, enum QCP__AntialiasedElement overrideElement)
void q_cpaxisrect_on_apply_antialiasing_hint(void* self, void (*callback)(void*, void*, bool, int32_t));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAxisRect*
QObject* q_cpaxisrect_sender(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAxisRect*
QObject* q_cpaxisrect_qbase_sender(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAxisRect*
/// @param callback QObject* func()
void q_cpaxisrect_on_sender(void* self, QObject* (*callback)());

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAxisRect*
int32_t q_cpaxisrect_sender_signal_index(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAxisRect*
int32_t q_cpaxisrect_qbase_sender_signal_index(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAxisRect*
/// @param callback int32_t func()
void q_cpaxisrect_on_sender_signal_index(void* self, int32_t (*callback)());

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAxisRect*
/// @param signal const char*
int32_t q_cpaxisrect_receivers(void* self, const char* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAxisRect*
/// @param signal const char*
int32_t q_cpaxisrect_qbase_receivers(void* self, const char* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAxisRect*
/// @param callback int32_t func(QCPAxisRect* self, const char* signal)
void q_cpaxisrect_on_receivers(void* self, int32_t (*callback)(void*, const char*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAxisRect*
/// @param signal QMetaMethod*
bool q_cpaxisrect_is_signal_connected(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAxisRect*
/// @param signal QMetaMethod*
bool q_cpaxisrect_qbase_is_signal_connected(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAxisRect*
/// @param callback bool func(QCPAxisRect* self, QMetaMethod* signal)
void q_cpaxisrect_on_is_signal_connected(void* self, bool (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#objectNameChanged)
///
/// Wrapper to allow calling private signal
///
/// @param self QCPAxisRect*
/// @param callback void func(QCPAxisRect* self, const char* objectName)
void q_cpaxisrect_on_object_name_changed(void* self, void (*callback)(void*, const char*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAxisRect.html)
///
/// Delete this object from C++ memory.
///
/// @param self QCPAxisRect*
void q_cpaxisrect_delete(void* self);

/// https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html

/// q_cpabstractlegenditem_new constructs a new QCPAbstractLegendItem object.
///
/// @param parent QCPLegend*
QCPAbstractLegendItem* q_cpabstractlegenditem_new(void* parent);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#metaObject)
///
/// @param self QCPAbstractLegendItem*
const QMetaObject* q_cpabstractlegenditem_meta_object(void* self);

/// @param self QCPAbstractLegendItem*
/// @param param1 const char*
void* q_cpabstractlegenditem_metacast(void* self, const char* param1);

/// @param self QCPAbstractLegendItem*
/// @param param1 enum QMetaObject__Call
/// @param param2 int
/// @param param3 void*
int32_t q_cpabstractlegenditem_metacall(void* self, int32_t param1, int param2, void* param3);

/// Allows for overriding the related default method
///
/// @param self QCPAbstractLegendItem*
/// @param callback int32_t func(QCPAbstractLegendItem* self, enum QMetaObject__Call param1, int param2, void* param3)
void q_cpabstractlegenditem_on_metacall(void* self, int32_t (*callback)(void*, int32_t, int, void*));

/// Base class method implementation
///
/// @param self QCPAbstractLegendItem*
/// @param param1 enum QMetaObject__Call
/// @param param2 int
/// @param param3 void*
int32_t q_cpabstractlegenditem_qbase_metacall(void* self, int32_t param1, int param2, void* param3);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
const char* q_cpabstractlegenditem_tr(const char* s);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// @param self QCPAbstractLegendItem*
QCPLegend* q_cpabstractlegenditem_parent_legend(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// @param self QCPAbstractLegendItem*
QFont* q_cpabstractlegenditem_font(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// @param self QCPAbstractLegendItem*
QColor* q_cpabstractlegenditem_text_color(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// @param self QCPAbstractLegendItem*
QFont* q_cpabstractlegenditem_selected_font(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// @param self QCPAbstractLegendItem*
QColor* q_cpabstractlegenditem_selected_text_color(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// @param self QCPAbstractLegendItem*
bool q_cpabstractlegenditem_selectable(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// @param self QCPAbstractLegendItem*
bool q_cpabstractlegenditem_selected(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// @param self QCPAbstractLegendItem*
/// @param font QFont*
void q_cpabstractlegenditem_set_font(void* self, void* font);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// @param self QCPAbstractLegendItem*
/// @param color QColor*
void q_cpabstractlegenditem_set_text_color(void* self, void* color);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// @param self QCPAbstractLegendItem*
/// @param font QFont*
void q_cpabstractlegenditem_set_selected_font(void* self, void* font);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// @param self QCPAbstractLegendItem*
/// @param color QColor*
void q_cpabstractlegenditem_set_selected_text_color(void* self, void* color);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// @param self QCPAbstractLegendItem*
/// @param selectable bool
void q_cpabstractlegenditem_set_selectable(void* self, bool selectable);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// @param self QCPAbstractLegendItem*
/// @param selected bool
void q_cpabstractlegenditem_set_selected(void* self, bool selected);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// @param self QCPAbstractLegendItem*
/// @param pos QPointF*
/// @param onlySelectable bool
/// @param details QVariant*
double q_cpabstractlegenditem_select_test(void* self, void* pos, bool onlySelectable, void* details);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPAbstractLegendItem*
/// @param callback double func(QCPAbstractLegendItem* self, QPointF* pos, bool onlySelectable, QVariant* details)
void q_cpabstractlegenditem_on_select_test(void* self, double (*callback)(void*, void*, bool, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// Base class method implementation
///
/// @param self QCPAbstractLegendItem*
/// @param pos QPointF*
/// @param onlySelectable bool
/// @param details QVariant*
double q_cpabstractlegenditem_qbase_select_test(void* self, void* pos, bool onlySelectable, void* details);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// @param self QCPAbstractLegendItem*
/// @param selected bool
void q_cpabstractlegenditem_selection_changed(void* self, bool selected);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// @param self QCPAbstractLegendItem*
/// @param callback void func(QCPAbstractLegendItem* self, bool selected)
void q_cpabstractlegenditem_on_selection_changed(void* self, void (*callback)(void*, bool));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// @param self QCPAbstractLegendItem*
/// @param selectable bool
void q_cpabstractlegenditem_selectable_changed(void* self, bool selectable);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// @param self QCPAbstractLegendItem*
/// @param callback void func(QCPAbstractLegendItem* self, bool selectable)
void q_cpabstractlegenditem_on_selectable_changed(void* self, void (*callback)(void*, bool));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// @param self QCPAbstractLegendItem*
///
/// @return enum QCP__Interaction
int32_t q_cpabstractlegenditem_selection_category(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPAbstractLegendItem*
/// @param callback int32_t func()
void q_cpabstractlegenditem_on_selection_category(void* self, int32_t (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// Base class method implementation
///
/// @param self QCPAbstractLegendItem*
///
/// @return enum QCP__Interaction
int32_t q_cpabstractlegenditem_qbase_selection_category(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// @param self QCPAbstractLegendItem*
/// @param painter QCPPainter*
void q_cpabstractlegenditem_apply_default_antialiasing_hint(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPAbstractLegendItem*
/// @param callback void func(QCPAbstractLegendItem* self, QCPPainter* painter)
void q_cpabstractlegenditem_on_apply_default_antialiasing_hint(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// Base class method implementation
///
/// @param self QCPAbstractLegendItem*
/// @param painter QCPPainter*
void q_cpabstractlegenditem_qbase_apply_default_antialiasing_hint(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// @param self QCPAbstractLegendItem*
QRect* q_cpabstractlegenditem_clip_rect(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPAbstractLegendItem*
/// @param callback QRect* func()
void q_cpabstractlegenditem_on_clip_rect(void* self, QRect* (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// Base class method implementation
///
/// @param self QCPAbstractLegendItem*
QRect* q_cpabstractlegenditem_qbase_clip_rect(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// @param self QCPAbstractLegendItem*
/// @param painter QCPPainter*
void q_cpabstractlegenditem_draw(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPAbstractLegendItem*
/// @param callback void func(QCPAbstractLegendItem* self, QCPPainter* painter)
void q_cpabstractlegenditem_on_draw(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// Base class method implementation
///
/// @param self QCPAbstractLegendItem*
/// @param painter QCPPainter*
void q_cpabstractlegenditem_qbase_draw(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// @param self QCPAbstractLegendItem*
/// @param event QMouseEvent*
/// @param additive bool
/// @param details QVariant*
/// @param selectionStateChanged bool*
void q_cpabstractlegenditem_select_event(void* self, void* event, bool additive, void* details, bool* selectionStateChanged);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPAbstractLegendItem*
/// @param callback void func(QCPAbstractLegendItem* self, QMouseEvent* event, bool additive, QVariant* details, bool* selectionStateChanged)
void q_cpabstractlegenditem_on_select_event(void* self, void (*callback)(void*, void*, bool, void*, bool*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// Base class method implementation
///
/// @param self QCPAbstractLegendItem*
/// @param event QMouseEvent*
/// @param additive bool
/// @param details QVariant*
/// @param selectionStateChanged bool*
void q_cpabstractlegenditem_qbase_select_event(void* self, void* event, bool additive, void* details, bool* selectionStateChanged);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// @param self QCPAbstractLegendItem*
/// @param selectionStateChanged bool*
void q_cpabstractlegenditem_deselect_event(void* self, bool* selectionStateChanged);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPAbstractLegendItem*
/// @param callback void func(QCPAbstractLegendItem* self, bool* selectionStateChanged)
void q_cpabstractlegenditem_on_deselect_event(void* self, void (*callback)(void*, bool*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// Base class method implementation
///
/// @param self QCPAbstractLegendItem*
/// @param selectionStateChanged bool*
void q_cpabstractlegenditem_qbase_deselect_event(void* self, bool* selectionStateChanged);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
/// @param c const char*
const char* q_cpabstractlegenditem_tr2(const char* s, const char* c);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
/// @param c const char*
/// @param n int
const char* q_cpabstractlegenditem_tr3(const char* s, const char* c, int n);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPAbstractLegendItem*
QCPLayout* q_cpabstractlegenditem_layout(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPAbstractLegendItem*
QRect* q_cpabstractlegenditem_rect(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPAbstractLegendItem*
QRect* q_cpabstractlegenditem_outer_rect(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPAbstractLegendItem*
QMargins* q_cpabstractlegenditem_margins(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPAbstractLegendItem*
QMargins* q_cpabstractlegenditem_minimum_margins(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPAbstractLegendItem*
///
/// @return flag of enum QCP__MarginSide
int32_t q_cpabstractlegenditem_auto_margins(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPAbstractLegendItem*
QSize* q_cpabstractlegenditem_minimum_size(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPAbstractLegendItem*
QSize* q_cpabstractlegenditem_maximum_size(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPAbstractLegendItem*
///
/// @return enum QCPLayoutElement__SizeConstraintRect
int32_t q_cpabstractlegenditem_size_constraint_rect(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPAbstractLegendItem*
/// @param side enum QCP__MarginSide
QCPMarginGroup* q_cpabstractlegenditem_margin_group(void* self, int32_t side);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPAbstractLegendItem*
libqt_map /* of int32_t to QCPMarginGroup* */ q_cpabstractlegenditem_margin_groups(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPAbstractLegendItem*
/// @param rect QRect*
void q_cpabstractlegenditem_set_outer_rect(void* self, void* rect);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPAbstractLegendItem*
/// @param margins QMargins*
void q_cpabstractlegenditem_set_margins(void* self, void* margins);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPAbstractLegendItem*
/// @param margins QMargins*
void q_cpabstractlegenditem_set_minimum_margins(void* self, void* margins);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPAbstractLegendItem*
/// @param sides flag of enum QCP__MarginSide
void q_cpabstractlegenditem_set_auto_margins(void* self, int32_t sides);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPAbstractLegendItem*
/// @param size QSize*
void q_cpabstractlegenditem_set_minimum_size(void* self, void* size);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPAbstractLegendItem*
/// @param width int
/// @param height int
void q_cpabstractlegenditem_set_minimum_size2(void* self, int width, int height);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPAbstractLegendItem*
/// @param size QSize*
void q_cpabstractlegenditem_set_maximum_size(void* self, void* size);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPAbstractLegendItem*
/// @param width int
/// @param height int
void q_cpabstractlegenditem_set_maximum_size2(void* self, int width, int height);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPAbstractLegendItem*
/// @param constraintRect enum QCPLayoutElement__SizeConstraintRect
void q_cpabstractlegenditem_set_size_constraint_rect(void* self, int32_t constraintRect);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPAbstractLegendItem*
/// @param sides flag of enum QCP__MarginSide
/// @param group QCPMarginGroup*
void q_cpabstractlegenditem_set_margin_group(void* self, int32_t sides, void* group);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPAbstractLegendItem*
bool q_cpabstractlegenditem_visible(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPAbstractLegendItem*
QCustomPlot* q_cpabstractlegenditem_parent_plot(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPAbstractLegendItem*
QCPLayerable* q_cpabstractlegenditem_parent_layerable(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPAbstractLegendItem*
QCPLayer* q_cpabstractlegenditem_layer(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPAbstractLegendItem*
bool q_cpabstractlegenditem_antialiased(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPAbstractLegendItem*
/// @param on bool
void q_cpabstractlegenditem_set_visible(void* self, bool on);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPAbstractLegendItem*
/// @param layer QCPLayer*
bool q_cpabstractlegenditem_set_layer(void* self, void* layer);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPAbstractLegendItem*
/// @param layerName const char*
bool q_cpabstractlegenditem_set_layer2(void* self, const char* layerName);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPAbstractLegendItem*
/// @param enabled bool
void q_cpabstractlegenditem_set_antialiased(void* self, bool enabled);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPAbstractLegendItem*
bool q_cpabstractlegenditem_real_visibility(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPAbstractLegendItem*
/// @param newLayer QCPLayer*
void q_cpabstractlegenditem_layer_changed(void* self, void* newLayer);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPAbstractLegendItem*
/// @param callback void func(QCPAbstractLegendItem* self, QCPLayer* newLayer)
void q_cpabstractlegenditem_on_layer_changed(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#objectName)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPAbstractLegendItem*
const char* q_cpabstractlegenditem_object_name(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setObjectName)
///
/// @param self QCPAbstractLegendItem*
/// @param name char*
void q_cpabstractlegenditem_set_object_name(void* self, char* name);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isWidgetType)
///
/// @param self QCPAbstractLegendItem*
bool q_cpabstractlegenditem_is_widget_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isWindowType)
///
/// @param self QCPAbstractLegendItem*
bool q_cpabstractlegenditem_is_window_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isQuickItemType)
///
/// @param self QCPAbstractLegendItem*
bool q_cpabstractlegenditem_is_quick_item_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#signalsBlocked)
///
/// @param self QCPAbstractLegendItem*
bool q_cpabstractlegenditem_signals_blocked(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#blockSignals)
///
/// @param self QCPAbstractLegendItem*
/// @param b bool
bool q_cpabstractlegenditem_block_signals(void* self, bool b);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#thread)
///
/// @param self QCPAbstractLegendItem*
QThread* q_cpabstractlegenditem_thread(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#moveToThread)
///
/// @param self QCPAbstractLegendItem*
/// @param thread QThread*
bool q_cpabstractlegenditem_move_to_thread(void* self, void* thread);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#startTimer)
///
/// @param self QCPAbstractLegendItem*
/// @param interval int
int32_t q_cpabstractlegenditem_start_timer(void* self, int interval);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#killTimer)
///
/// @param self QCPAbstractLegendItem*
/// @param id int
void q_cpabstractlegenditem_kill_timer(void* self, int id);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#killTimer)
///
/// @param self QCPAbstractLegendItem*
/// @param id enum Qt__TimerId
void q_cpabstractlegenditem_kill_timer2(void* self, int32_t id);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#children)
///
/// @param self QCPAbstractLegendItem*
libqt_list /* of QObject* */ q_cpabstractlegenditem_children(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setParent)
///
/// @param self QCPAbstractLegendItem*
/// @param parent QObject*
void q_cpabstractlegenditem_set_parent(void* self, void* parent);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#installEventFilter)
///
/// @param self QCPAbstractLegendItem*
/// @param filterObj QObject*
void q_cpabstractlegenditem_install_event_filter(void* self, void* filterObj);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#removeEventFilter)
///
/// @param self QCPAbstractLegendItem*
/// @param obj QObject*
void q_cpabstractlegenditem_remove_event_filter(void* self, void* obj);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param method QMetaMethod*
QMetaObject__Connection* q_cpabstractlegenditem_connect(void* sender, void* signal, void* receiver, void* method);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param self QCPAbstractLegendItem*
/// @param sender QObject*
/// @param signal const char*
/// @param member const char*
QMetaObject__Connection* q_cpabstractlegenditem_connect2(void* self, void* sender, const char* signal, const char* member);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param member QMetaMethod*
bool q_cpabstractlegenditem_disconnect(void* sender, void* signal, void* receiver, void* member);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnect)
///
/// @param param1 QMetaObject__Connection*
bool q_cpabstractlegenditem_disconnect2(void* param1);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dumpObjectTree)
///
/// @param self QCPAbstractLegendItem*
void q_cpabstractlegenditem_dump_object_tree(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dumpObjectInfo)
///
/// @param self QCPAbstractLegendItem*
void q_cpabstractlegenditem_dump_object_info(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setProperty)
///
/// @param self QCPAbstractLegendItem*
/// @param name const char*
/// @param value QVariant*
bool q_cpabstractlegenditem_set_property(void* self, const char* name, void* value);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#property)
///
/// @param self QCPAbstractLegendItem*
/// @param name const char*
QVariant* q_cpabstractlegenditem_property(void* self, const char* name);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dynamicPropertyNames)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPAbstractLegendItem*
const char** q_cpabstractlegenditem_dynamic_property_names(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#bindingStorage)
///
/// @param self QCPAbstractLegendItem*
QBindingStorage* q_cpabstractlegenditem_binding_storage(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#bindingStorage)
///
/// @param self QCPAbstractLegendItem*
const QBindingStorage* q_cpabstractlegenditem_binding_storage2(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPAbstractLegendItem*
void q_cpabstractlegenditem_destroyed(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPAbstractLegendItem*
/// @param callback void func(QCPAbstractLegendItem* self)
void q_cpabstractlegenditem_on_destroyed(void* self, void (*callback)(void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#parent)
///
/// @param self QCPAbstractLegendItem*
QObject* q_cpabstractlegenditem_parent(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#inherits)
///
/// @param self QCPAbstractLegendItem*
/// @param classname const char*
bool q_cpabstractlegenditem_inherits(void* self, const char* classname);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#deleteLater)
///
/// @param self QCPAbstractLegendItem*
void q_cpabstractlegenditem_delete_later(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#moveToThread)
///
/// @param self QCPAbstractLegendItem*
/// @param thread QThread*
/// @param param2 Disambiguated_t*
bool q_cpabstractlegenditem_move_to_thread2(void* self, void* thread, void* param2);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#startTimer)
///
/// @param self QCPAbstractLegendItem*
/// @param interval int
/// @param timerType enum Qt__TimerType
int32_t q_cpabstractlegenditem_start_timer22(void* self, int interval, int32_t timerType);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param method QMetaMethod*
/// @param type enum Qt__ConnectionType
QMetaObject__Connection* q_cpabstractlegenditem_connect5(void* sender, void* signal, void* receiver, void* method, int32_t type);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param self QCPAbstractLegendItem*
/// @param sender QObject*
/// @param signal const char*
/// @param member const char*
/// @param type enum Qt__ConnectionType
QMetaObject__Connection* q_cpabstractlegenditem_connect4(void* self, void* sender, const char* signal, const char* member, int32_t type);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPAbstractLegendItem*
/// @param param1 QObject*
void q_cpabstractlegenditem_destroyed1(void* self, void* param1);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPAbstractLegendItem*
/// @param callback void func(QCPAbstractLegendItem* self, QObject* param1)
void q_cpabstractlegenditem_on_destroyed1(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAbstractLegendItem*
/// @param phase enum QCPLayoutElement__UpdatePhase
void q_cpabstractlegenditem_update(void* self, int32_t phase);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAbstractLegendItem*
/// @param phase enum QCPLayoutElement__UpdatePhase
void q_cpabstractlegenditem_qbase_update(void* self, int32_t phase);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAbstractLegendItem*
/// @param callback void func(QCPAbstractLegendItem* self, enum QCPLayoutElement__UpdatePhase phase)
void q_cpabstractlegenditem_on_update(void* self, void (*callback)(void*, int32_t));

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAbstractLegendItem*
QSize* q_cpabstractlegenditem_minimum_outer_size_hint(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAbstractLegendItem*
QSize* q_cpabstractlegenditem_qbase_minimum_outer_size_hint(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAbstractLegendItem*
/// @param callback QSize* func()
void q_cpabstractlegenditem_on_minimum_outer_size_hint(void* self, QSize* (*callback)());

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAbstractLegendItem*
QSize* q_cpabstractlegenditem_maximum_outer_size_hint(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAbstractLegendItem*
QSize* q_cpabstractlegenditem_qbase_maximum_outer_size_hint(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAbstractLegendItem*
/// @param callback QSize* func()
void q_cpabstractlegenditem_on_maximum_outer_size_hint(void* self, QSize* (*callback)());

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAbstractLegendItem*
/// @param recursive bool
libqt_list /* of QCPLayoutElement* */ q_cpabstractlegenditem_elements(void* self, bool recursive);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAbstractLegendItem*
/// @param recursive bool
libqt_list /* of QCPLayoutElement* */ q_cpabstractlegenditem_qbase_elements(void* self, bool recursive);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAbstractLegendItem*
/// @param callback QCPLayoutElement** func(QCPAbstractLegendItem* self, bool recursive)
void q_cpabstractlegenditem_on_elements(void* self, QCPLayoutElement** (*callback)(void*, bool));

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAbstractLegendItem*
/// @param side enum QCP__MarginSide
int32_t q_cpabstractlegenditem_calculate_auto_margin(void* self, int32_t side);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAbstractLegendItem*
/// @param side enum QCP__MarginSide
int32_t q_cpabstractlegenditem_qbase_calculate_auto_margin(void* self, int32_t side);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAbstractLegendItem*
/// @param callback int32_t func(QCPAbstractLegendItem* self, enum QCP__MarginSide side)
void q_cpabstractlegenditem_on_calculate_auto_margin(void* self, int32_t (*callback)(void*, int32_t));

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAbstractLegendItem*
void q_cpabstractlegenditem_layout_changed(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAbstractLegendItem*
void q_cpabstractlegenditem_qbase_layout_changed(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAbstractLegendItem*
/// @param callback void func()
void q_cpabstractlegenditem_on_layout_changed(void* self, void (*callback)());

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAbstractLegendItem*
/// @param parentPlot QCustomPlot*
void q_cpabstractlegenditem_parent_plot_initialized(void* self, void* parentPlot);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAbstractLegendItem*
/// @param parentPlot QCustomPlot*
void q_cpabstractlegenditem_qbase_parent_plot_initialized(void* self, void* parentPlot);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAbstractLegendItem*
/// @param callback void func(QCPAbstractLegendItem* self, QCustomPlot* parentPlot)
void q_cpabstractlegenditem_on_parent_plot_initialized(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAbstractLegendItem*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cpabstractlegenditem_mouse_press_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAbstractLegendItem*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cpabstractlegenditem_qbase_mouse_press_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAbstractLegendItem*
/// @param callback void func(QCPAbstractLegendItem* self, QMouseEvent* event, QVariant* details)
void q_cpabstractlegenditem_on_mouse_press_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAbstractLegendItem*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cpabstractlegenditem_mouse_move_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAbstractLegendItem*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cpabstractlegenditem_qbase_mouse_move_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAbstractLegendItem*
/// @param callback void func(QCPAbstractLegendItem* self, QMouseEvent* event, QPointF* startPos)
void q_cpabstractlegenditem_on_mouse_move_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAbstractLegendItem*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cpabstractlegenditem_mouse_release_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAbstractLegendItem*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cpabstractlegenditem_qbase_mouse_release_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAbstractLegendItem*
/// @param callback void func(QCPAbstractLegendItem* self, QMouseEvent* event, QPointF* startPos)
void q_cpabstractlegenditem_on_mouse_release_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAbstractLegendItem*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cpabstractlegenditem_mouse_double_click_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAbstractLegendItem*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cpabstractlegenditem_qbase_mouse_double_click_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAbstractLegendItem*
/// @param callback void func(QCPAbstractLegendItem* self, QMouseEvent* event, QVariant* details)
void q_cpabstractlegenditem_on_mouse_double_click_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAbstractLegendItem*
/// @param event QWheelEvent*
void q_cpabstractlegenditem_wheel_event(void* self, void* event);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAbstractLegendItem*
/// @param event QWheelEvent*
void q_cpabstractlegenditem_qbase_wheel_event(void* self, void* event);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAbstractLegendItem*
/// @param callback void func(QCPAbstractLegendItem* self, QWheelEvent* event)
void q_cpabstractlegenditem_on_wheel_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAbstractLegendItem*
/// @param event QEvent*
bool q_cpabstractlegenditem_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAbstractLegendItem*
/// @param event QEvent*
bool q_cpabstractlegenditem_qbase_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAbstractLegendItem*
/// @param callback bool func(QCPAbstractLegendItem* self, QEvent* event)
void q_cpabstractlegenditem_on_event(void* self, bool (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAbstractLegendItem*
/// @param watched QObject*
/// @param event QEvent*
bool q_cpabstractlegenditem_event_filter(void* self, void* watched, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAbstractLegendItem*
/// @param watched QObject*
/// @param event QEvent*
bool q_cpabstractlegenditem_qbase_event_filter(void* self, void* watched, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAbstractLegendItem*
/// @param callback bool func(QCPAbstractLegendItem* self, QObject* watched, QEvent* event)
void q_cpabstractlegenditem_on_event_filter(void* self, bool (*callback)(void*, void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAbstractLegendItem*
/// @param event QTimerEvent*
void q_cpabstractlegenditem_timer_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAbstractLegendItem*
/// @param event QTimerEvent*
void q_cpabstractlegenditem_qbase_timer_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAbstractLegendItem*
/// @param callback void func(QCPAbstractLegendItem* self, QTimerEvent* event)
void q_cpabstractlegenditem_on_timer_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAbstractLegendItem*
/// @param event QChildEvent*
void q_cpabstractlegenditem_child_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAbstractLegendItem*
/// @param event QChildEvent*
void q_cpabstractlegenditem_qbase_child_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAbstractLegendItem*
/// @param callback void func(QCPAbstractLegendItem* self, QChildEvent* event)
void q_cpabstractlegenditem_on_child_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAbstractLegendItem*
/// @param event QEvent*
void q_cpabstractlegenditem_custom_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAbstractLegendItem*
/// @param event QEvent*
void q_cpabstractlegenditem_qbase_custom_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAbstractLegendItem*
/// @param callback void func(QCPAbstractLegendItem* self, QEvent* event)
void q_cpabstractlegenditem_on_custom_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAbstractLegendItem*
/// @param signal QMetaMethod*
void q_cpabstractlegenditem_connect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAbstractLegendItem*
/// @param signal QMetaMethod*
void q_cpabstractlegenditem_qbase_connect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAbstractLegendItem*
/// @param callback void func(QCPAbstractLegendItem* self, QMetaMethod* signal)
void q_cpabstractlegenditem_on_connect_notify(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAbstractLegendItem*
/// @param signal QMetaMethod*
void q_cpabstractlegenditem_disconnect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAbstractLegendItem*
/// @param signal QMetaMethod*
void q_cpabstractlegenditem_qbase_disconnect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAbstractLegendItem*
/// @param callback void func(QCPAbstractLegendItem* self, QMetaMethod* signal)
void q_cpabstractlegenditem_on_disconnect_notify(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAbstractLegendItem*
/// @param parentPlot QCustomPlot*
void q_cpabstractlegenditem_initialize_parent_plot(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAbstractLegendItem*
/// @param parentPlot QCustomPlot*
void q_cpabstractlegenditem_qbase_initialize_parent_plot(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAbstractLegendItem*
/// @param callback void func(QCPAbstractLegendItem* self, QCustomPlot* parentPlot)
void q_cpabstractlegenditem_on_initialize_parent_plot(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAbstractLegendItem*
/// @param parentLayerable QCPLayerable*
void q_cpabstractlegenditem_set_parent_layerable(void* self, void* parentLayerable);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAbstractLegendItem*
/// @param parentLayerable QCPLayerable*
void q_cpabstractlegenditem_qbase_set_parent_layerable(void* self, void* parentLayerable);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAbstractLegendItem*
/// @param callback void func(QCPAbstractLegendItem* self, QCPLayerable* parentLayerable)
void q_cpabstractlegenditem_on_set_parent_layerable(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAbstractLegendItem*
/// @param layer QCPLayer*
/// @param prepend bool
bool q_cpabstractlegenditem_move_to_layer(void* self, void* layer, bool prepend);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAbstractLegendItem*
/// @param layer QCPLayer*
/// @param prepend bool
bool q_cpabstractlegenditem_qbase_move_to_layer(void* self, void* layer, bool prepend);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAbstractLegendItem*
/// @param callback bool func(QCPAbstractLegendItem* self, QCPLayer* layer, bool prepend)
void q_cpabstractlegenditem_on_move_to_layer(void* self, bool (*callback)(void*, void*, bool));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAbstractLegendItem*
/// @param painter QCPPainter*
/// @param localAntialiased bool
/// @param overrideElement enum QCP__AntialiasedElement
void q_cpabstractlegenditem_apply_antialiasing_hint(void* self, void* painter, bool localAntialiased, int32_t overrideElement);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAbstractLegendItem*
/// @param painter QCPPainter*
/// @param localAntialiased bool
/// @param overrideElement enum QCP__AntialiasedElement
void q_cpabstractlegenditem_qbase_apply_antialiasing_hint(void* self, void* painter, bool localAntialiased, int32_t overrideElement);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAbstractLegendItem*
/// @param callback void func(QCPAbstractLegendItem* self, QCPPainter* painter, bool localAntialiased, enum QCP__AntialiasedElement overrideElement)
void q_cpabstractlegenditem_on_apply_antialiasing_hint(void* self, void (*callback)(void*, void*, bool, int32_t));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAbstractLegendItem*
QObject* q_cpabstractlegenditem_sender(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAbstractLegendItem*
QObject* q_cpabstractlegenditem_qbase_sender(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAbstractLegendItem*
/// @param callback QObject* func()
void q_cpabstractlegenditem_on_sender(void* self, QObject* (*callback)());

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAbstractLegendItem*
int32_t q_cpabstractlegenditem_sender_signal_index(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAbstractLegendItem*
int32_t q_cpabstractlegenditem_qbase_sender_signal_index(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAbstractLegendItem*
/// @param callback int32_t func()
void q_cpabstractlegenditem_on_sender_signal_index(void* self, int32_t (*callback)());

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAbstractLegendItem*
/// @param signal const char*
int32_t q_cpabstractlegenditem_receivers(void* self, const char* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAbstractLegendItem*
/// @param signal const char*
int32_t q_cpabstractlegenditem_qbase_receivers(void* self, const char* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAbstractLegendItem*
/// @param callback int32_t func(QCPAbstractLegendItem* self, const char* signal)
void q_cpabstractlegenditem_on_receivers(void* self, int32_t (*callback)(void*, const char*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPAbstractLegendItem*
/// @param signal QMetaMethod*
bool q_cpabstractlegenditem_is_signal_connected(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPAbstractLegendItem*
/// @param signal QMetaMethod*
bool q_cpabstractlegenditem_qbase_is_signal_connected(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPAbstractLegendItem*
/// @param callback bool func(QCPAbstractLegendItem* self, QMetaMethod* signal)
void q_cpabstractlegenditem_on_is_signal_connected(void* self, bool (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#objectNameChanged)
///
/// Wrapper to allow calling private signal
///
/// @param self QCPAbstractLegendItem*
/// @param callback void func(QCPAbstractLegendItem* self, const char* objectName)
void q_cpabstractlegenditem_on_object_name_changed(void* self, void (*callback)(void*, const char*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// Delete this object from C++ memory.
///
/// @param self QCPAbstractLegendItem*
void q_cpabstractlegenditem_delete(void* self);

/// https://www.qcustomplot.com/documentation/classQCPPlottableLegendItem.html

/// q_cpplottablelegenditem_new constructs a new QCPPlottableLegendItem object.
///
/// @param parent QCPLegend*
/// @param plottable QCPAbstractPlottable*
QCPPlottableLegendItem* q_cpplottablelegenditem_new(void* parent, void* plottable);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#metaObject)
///
/// @param self QCPPlottableLegendItem*
const QMetaObject* q_cpplottablelegenditem_meta_object(void* self);

/// @param self QCPPlottableLegendItem*
/// @param param1 const char*
void* q_cpplottablelegenditem_metacast(void* self, const char* param1);

/// @param self QCPPlottableLegendItem*
/// @param param1 enum QMetaObject__Call
/// @param param2 int
/// @param param3 void*
int32_t q_cpplottablelegenditem_metacall(void* self, int32_t param1, int param2, void* param3);

/// Allows for overriding the related default method
///
/// @param self QCPPlottableLegendItem*
/// @param callback int32_t func(QCPPlottableLegendItem* self, enum QMetaObject__Call param1, int param2, void* param3)
void q_cpplottablelegenditem_on_metacall(void* self, int32_t (*callback)(void*, int32_t, int, void*));

/// Base class method implementation
///
/// @param self QCPPlottableLegendItem*
/// @param param1 enum QMetaObject__Call
/// @param param2 int
/// @param param3 void*
int32_t q_cpplottablelegenditem_qbase_metacall(void* self, int32_t param1, int param2, void* param3);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
const char* q_cpplottablelegenditem_tr(const char* s);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableLegendItem.html)
///
/// @param self QCPPlottableLegendItem*
QCPAbstractPlottable* q_cpplottablelegenditem_plottable(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableLegendItem.html)
///
/// @param self QCPPlottableLegendItem*
/// @param painter QCPPainter*
void q_cpplottablelegenditem_draw(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableLegendItem.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPPlottableLegendItem*
/// @param callback void func(QCPPlottableLegendItem* self, QCPPainter* painter)
void q_cpplottablelegenditem_on_draw(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableLegendItem.html)
///
/// Base class method implementation
///
/// @param self QCPPlottableLegendItem*
/// @param painter QCPPainter*
void q_cpplottablelegenditem_qbase_draw(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableLegendItem.html)
///
/// @param self QCPPlottableLegendItem*
QSize* q_cpplottablelegenditem_minimum_outer_size_hint(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableLegendItem.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPPlottableLegendItem*
/// @param callback QSize* func()
void q_cpplottablelegenditem_on_minimum_outer_size_hint(void* self, QSize* (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableLegendItem.html)
///
/// Base class method implementation
///
/// @param self QCPPlottableLegendItem*
QSize* q_cpplottablelegenditem_qbase_minimum_outer_size_hint(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableLegendItem.html)
///
/// @param self QCPPlottableLegendItem*
QPen* q_cpplottablelegenditem_get_icon_border_pen(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableLegendItem.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPPlottableLegendItem*
/// @param callback QPen* func()
void q_cpplottablelegenditem_on_get_icon_border_pen(void* self, QPen* (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableLegendItem.html)
///
/// Base class method implementation
///
/// @param self QCPPlottableLegendItem*
QPen* q_cpplottablelegenditem_qbase_get_icon_border_pen(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableLegendItem.html)
///
/// @param self QCPPlottableLegendItem*
QColor* q_cpplottablelegenditem_get_text_color(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableLegendItem.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPPlottableLegendItem*
/// @param callback QColor* func()
void q_cpplottablelegenditem_on_get_text_color(void* self, QColor* (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableLegendItem.html)
///
/// Base class method implementation
///
/// @param self QCPPlottableLegendItem*
QColor* q_cpplottablelegenditem_qbase_get_text_color(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableLegendItem.html)
///
/// @param self QCPPlottableLegendItem*
QFont* q_cpplottablelegenditem_get_font(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableLegendItem.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPPlottableLegendItem*
/// @param callback QFont* func()
void q_cpplottablelegenditem_on_get_font(void* self, QFont* (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableLegendItem.html)
///
/// Base class method implementation
///
/// @param self QCPPlottableLegendItem*
QFont* q_cpplottablelegenditem_qbase_get_font(void* self);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
/// @param c const char*
const char* q_cpplottablelegenditem_tr2(const char* s, const char* c);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
/// @param c const char*
/// @param n int
const char* q_cpplottablelegenditem_tr3(const char* s, const char* c, int n);

/// Inherited from QCPAbstractLegendItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// @param self QCPPlottableLegendItem*
QCPLegend* q_cpplottablelegenditem_parent_legend(void* self);

/// Inherited from QCPAbstractLegendItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// @param self QCPPlottableLegendItem*
QFont* q_cpplottablelegenditem_font(void* self);

/// Inherited from QCPAbstractLegendItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// @param self QCPPlottableLegendItem*
QColor* q_cpplottablelegenditem_text_color(void* self);

/// Inherited from QCPAbstractLegendItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// @param self QCPPlottableLegendItem*
QFont* q_cpplottablelegenditem_selected_font(void* self);

/// Inherited from QCPAbstractLegendItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// @param self QCPPlottableLegendItem*
QColor* q_cpplottablelegenditem_selected_text_color(void* self);

/// Inherited from QCPAbstractLegendItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// @param self QCPPlottableLegendItem*
bool q_cpplottablelegenditem_selectable(void* self);

/// Inherited from QCPAbstractLegendItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// @param self QCPPlottableLegendItem*
bool q_cpplottablelegenditem_selected(void* self);

/// Inherited from QCPAbstractLegendItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// @param self QCPPlottableLegendItem*
/// @param font QFont*
void q_cpplottablelegenditem_set_font(void* self, void* font);

/// Inherited from QCPAbstractLegendItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// @param self QCPPlottableLegendItem*
/// @param color QColor*
void q_cpplottablelegenditem_set_text_color(void* self, void* color);

/// Inherited from QCPAbstractLegendItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// @param self QCPPlottableLegendItem*
/// @param font QFont*
void q_cpplottablelegenditem_set_selected_font(void* self, void* font);

/// Inherited from QCPAbstractLegendItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// @param self QCPPlottableLegendItem*
/// @param color QColor*
void q_cpplottablelegenditem_set_selected_text_color(void* self, void* color);

/// Inherited from QCPAbstractLegendItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// @param self QCPPlottableLegendItem*
/// @param selectable bool
void q_cpplottablelegenditem_set_selectable(void* self, bool selectable);

/// Inherited from QCPAbstractLegendItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// @param self QCPPlottableLegendItem*
/// @param selected bool
void q_cpplottablelegenditem_set_selected(void* self, bool selected);

/// Inherited from QCPAbstractLegendItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// @param self QCPPlottableLegendItem*
/// @param selected bool
void q_cpplottablelegenditem_selection_changed(void* self, bool selected);

/// Inherited from QCPAbstractLegendItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// @param self QCPPlottableLegendItem*
/// @param callback void func(QCPPlottableLegendItem* self, bool selected)
void q_cpplottablelegenditem_on_selection_changed(void* self, void (*callback)(void*, bool));

/// Inherited from QCPAbstractLegendItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// @param self QCPPlottableLegendItem*
/// @param selectable bool
void q_cpplottablelegenditem_selectable_changed(void* self, bool selectable);

/// Inherited from QCPAbstractLegendItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// @param self QCPPlottableLegendItem*
/// @param callback void func(QCPPlottableLegendItem* self, bool selectable)
void q_cpplottablelegenditem_on_selectable_changed(void* self, void (*callback)(void*, bool));

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPPlottableLegendItem*
QCPLayout* q_cpplottablelegenditem_layout(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPPlottableLegendItem*
QRect* q_cpplottablelegenditem_rect(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPPlottableLegendItem*
QRect* q_cpplottablelegenditem_outer_rect(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPPlottableLegendItem*
QMargins* q_cpplottablelegenditem_margins(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPPlottableLegendItem*
QMargins* q_cpplottablelegenditem_minimum_margins(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPPlottableLegendItem*
///
/// @return flag of enum QCP__MarginSide
int32_t q_cpplottablelegenditem_auto_margins(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPPlottableLegendItem*
QSize* q_cpplottablelegenditem_minimum_size(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPPlottableLegendItem*
QSize* q_cpplottablelegenditem_maximum_size(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPPlottableLegendItem*
///
/// @return enum QCPLayoutElement__SizeConstraintRect
int32_t q_cpplottablelegenditem_size_constraint_rect(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPPlottableLegendItem*
/// @param side enum QCP__MarginSide
QCPMarginGroup* q_cpplottablelegenditem_margin_group(void* self, int32_t side);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPPlottableLegendItem*
libqt_map /* of int32_t to QCPMarginGroup* */ q_cpplottablelegenditem_margin_groups(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPPlottableLegendItem*
/// @param rect QRect*
void q_cpplottablelegenditem_set_outer_rect(void* self, void* rect);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPPlottableLegendItem*
/// @param margins QMargins*
void q_cpplottablelegenditem_set_margins(void* self, void* margins);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPPlottableLegendItem*
/// @param margins QMargins*
void q_cpplottablelegenditem_set_minimum_margins(void* self, void* margins);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPPlottableLegendItem*
/// @param sides flag of enum QCP__MarginSide
void q_cpplottablelegenditem_set_auto_margins(void* self, int32_t sides);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPPlottableLegendItem*
/// @param size QSize*
void q_cpplottablelegenditem_set_minimum_size(void* self, void* size);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPPlottableLegendItem*
/// @param width int
/// @param height int
void q_cpplottablelegenditem_set_minimum_size2(void* self, int width, int height);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPPlottableLegendItem*
/// @param size QSize*
void q_cpplottablelegenditem_set_maximum_size(void* self, void* size);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPPlottableLegendItem*
/// @param width int
/// @param height int
void q_cpplottablelegenditem_set_maximum_size2(void* self, int width, int height);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPPlottableLegendItem*
/// @param constraintRect enum QCPLayoutElement__SizeConstraintRect
void q_cpplottablelegenditem_set_size_constraint_rect(void* self, int32_t constraintRect);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPPlottableLegendItem*
/// @param sides flag of enum QCP__MarginSide
/// @param group QCPMarginGroup*
void q_cpplottablelegenditem_set_margin_group(void* self, int32_t sides, void* group);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPPlottableLegendItem*
bool q_cpplottablelegenditem_visible(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPPlottableLegendItem*
QCustomPlot* q_cpplottablelegenditem_parent_plot(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPPlottableLegendItem*
QCPLayerable* q_cpplottablelegenditem_parent_layerable(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPPlottableLegendItem*
QCPLayer* q_cpplottablelegenditem_layer(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPPlottableLegendItem*
bool q_cpplottablelegenditem_antialiased(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPPlottableLegendItem*
/// @param on bool
void q_cpplottablelegenditem_set_visible(void* self, bool on);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPPlottableLegendItem*
/// @param layer QCPLayer*
bool q_cpplottablelegenditem_set_layer(void* self, void* layer);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPPlottableLegendItem*
/// @param layerName const char*
bool q_cpplottablelegenditem_set_layer2(void* self, const char* layerName);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPPlottableLegendItem*
/// @param enabled bool
void q_cpplottablelegenditem_set_antialiased(void* self, bool enabled);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPPlottableLegendItem*
bool q_cpplottablelegenditem_real_visibility(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPPlottableLegendItem*
/// @param newLayer QCPLayer*
void q_cpplottablelegenditem_layer_changed(void* self, void* newLayer);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPPlottableLegendItem*
/// @param callback void func(QCPPlottableLegendItem* self, QCPLayer* newLayer)
void q_cpplottablelegenditem_on_layer_changed(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#objectName)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPPlottableLegendItem*
const char* q_cpplottablelegenditem_object_name(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setObjectName)
///
/// @param self QCPPlottableLegendItem*
/// @param name char*
void q_cpplottablelegenditem_set_object_name(void* self, char* name);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isWidgetType)
///
/// @param self QCPPlottableLegendItem*
bool q_cpplottablelegenditem_is_widget_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isWindowType)
///
/// @param self QCPPlottableLegendItem*
bool q_cpplottablelegenditem_is_window_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isQuickItemType)
///
/// @param self QCPPlottableLegendItem*
bool q_cpplottablelegenditem_is_quick_item_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#signalsBlocked)
///
/// @param self QCPPlottableLegendItem*
bool q_cpplottablelegenditem_signals_blocked(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#blockSignals)
///
/// @param self QCPPlottableLegendItem*
/// @param b bool
bool q_cpplottablelegenditem_block_signals(void* self, bool b);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#thread)
///
/// @param self QCPPlottableLegendItem*
QThread* q_cpplottablelegenditem_thread(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#moveToThread)
///
/// @param self QCPPlottableLegendItem*
/// @param thread QThread*
bool q_cpplottablelegenditem_move_to_thread(void* self, void* thread);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#startTimer)
///
/// @param self QCPPlottableLegendItem*
/// @param interval int
int32_t q_cpplottablelegenditem_start_timer(void* self, int interval);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#killTimer)
///
/// @param self QCPPlottableLegendItem*
/// @param id int
void q_cpplottablelegenditem_kill_timer(void* self, int id);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#killTimer)
///
/// @param self QCPPlottableLegendItem*
/// @param id enum Qt__TimerId
void q_cpplottablelegenditem_kill_timer2(void* self, int32_t id);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#children)
///
/// @param self QCPPlottableLegendItem*
libqt_list /* of QObject* */ q_cpplottablelegenditem_children(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setParent)
///
/// @param self QCPPlottableLegendItem*
/// @param parent QObject*
void q_cpplottablelegenditem_set_parent(void* self, void* parent);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#installEventFilter)
///
/// @param self QCPPlottableLegendItem*
/// @param filterObj QObject*
void q_cpplottablelegenditem_install_event_filter(void* self, void* filterObj);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#removeEventFilter)
///
/// @param self QCPPlottableLegendItem*
/// @param obj QObject*
void q_cpplottablelegenditem_remove_event_filter(void* self, void* obj);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param method QMetaMethod*
QMetaObject__Connection* q_cpplottablelegenditem_connect(void* sender, void* signal, void* receiver, void* method);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param self QCPPlottableLegendItem*
/// @param sender QObject*
/// @param signal const char*
/// @param member const char*
QMetaObject__Connection* q_cpplottablelegenditem_connect2(void* self, void* sender, const char* signal, const char* member);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param member QMetaMethod*
bool q_cpplottablelegenditem_disconnect(void* sender, void* signal, void* receiver, void* member);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnect)
///
/// @param param1 QMetaObject__Connection*
bool q_cpplottablelegenditem_disconnect2(void* param1);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dumpObjectTree)
///
/// @param self QCPPlottableLegendItem*
void q_cpplottablelegenditem_dump_object_tree(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dumpObjectInfo)
///
/// @param self QCPPlottableLegendItem*
void q_cpplottablelegenditem_dump_object_info(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setProperty)
///
/// @param self QCPPlottableLegendItem*
/// @param name const char*
/// @param value QVariant*
bool q_cpplottablelegenditem_set_property(void* self, const char* name, void* value);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#property)
///
/// @param self QCPPlottableLegendItem*
/// @param name const char*
QVariant* q_cpplottablelegenditem_property(void* self, const char* name);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dynamicPropertyNames)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPPlottableLegendItem*
const char** q_cpplottablelegenditem_dynamic_property_names(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#bindingStorage)
///
/// @param self QCPPlottableLegendItem*
QBindingStorage* q_cpplottablelegenditem_binding_storage(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#bindingStorage)
///
/// @param self QCPPlottableLegendItem*
const QBindingStorage* q_cpplottablelegenditem_binding_storage2(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPPlottableLegendItem*
void q_cpplottablelegenditem_destroyed(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPPlottableLegendItem*
/// @param callback void func(QCPPlottableLegendItem* self)
void q_cpplottablelegenditem_on_destroyed(void* self, void (*callback)(void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#parent)
///
/// @param self QCPPlottableLegendItem*
QObject* q_cpplottablelegenditem_parent(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#inherits)
///
/// @param self QCPPlottableLegendItem*
/// @param classname const char*
bool q_cpplottablelegenditem_inherits(void* self, const char* classname);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#deleteLater)
///
/// @param self QCPPlottableLegendItem*
void q_cpplottablelegenditem_delete_later(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#moveToThread)
///
/// @param self QCPPlottableLegendItem*
/// @param thread QThread*
/// @param param2 Disambiguated_t*
bool q_cpplottablelegenditem_move_to_thread2(void* self, void* thread, void* param2);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#startTimer)
///
/// @param self QCPPlottableLegendItem*
/// @param interval int
/// @param timerType enum Qt__TimerType
int32_t q_cpplottablelegenditem_start_timer22(void* self, int interval, int32_t timerType);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param method QMetaMethod*
/// @param type enum Qt__ConnectionType
QMetaObject__Connection* q_cpplottablelegenditem_connect5(void* sender, void* signal, void* receiver, void* method, int32_t type);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param self QCPPlottableLegendItem*
/// @param sender QObject*
/// @param signal const char*
/// @param member const char*
/// @param type enum Qt__ConnectionType
QMetaObject__Connection* q_cpplottablelegenditem_connect4(void* self, void* sender, const char* signal, const char* member, int32_t type);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPPlottableLegendItem*
/// @param param1 QObject*
void q_cpplottablelegenditem_destroyed1(void* self, void* param1);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPPlottableLegendItem*
/// @param callback void func(QCPPlottableLegendItem* self, QObject* param1)
void q_cpplottablelegenditem_on_destroyed1(void* self, void (*callback)(void*, void*));

/// Inherited from QCPAbstractLegendItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPlottableLegendItem*
/// @param pos QPointF*
/// @param onlySelectable bool
/// @param details QVariant*
double q_cpplottablelegenditem_select_test(void* self, void* pos, bool onlySelectable, void* details);

/// Inherited from QCPAbstractLegendItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPlottableLegendItem*
/// @param pos QPointF*
/// @param onlySelectable bool
/// @param details QVariant*
double q_cpplottablelegenditem_qbase_select_test(void* self, void* pos, bool onlySelectable, void* details);

/// Inherited from QCPAbstractLegendItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPlottableLegendItem*
/// @param callback double func(QCPPlottableLegendItem* self, QPointF* pos, bool onlySelectable, QVariant* details)
void q_cpplottablelegenditem_on_select_test(void* self, double (*callback)(void*, void*, bool, void*));

/// Inherited from QCPAbstractLegendItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPlottableLegendItem*
///
/// @return enum QCP__Interaction
int32_t q_cpplottablelegenditem_selection_category(void* self);

/// Inherited from QCPAbstractLegendItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPlottableLegendItem*
///
/// @return enum QCP__Interaction
int32_t q_cpplottablelegenditem_qbase_selection_category(void* self);

/// Inherited from QCPAbstractLegendItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPlottableLegendItem*
/// @param callback int32_t func()
void q_cpplottablelegenditem_on_selection_category(void* self, int32_t (*callback)());

/// Inherited from QCPAbstractLegendItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPlottableLegendItem*
/// @param painter QCPPainter*
void q_cpplottablelegenditem_apply_default_antialiasing_hint(void* self, void* painter);

/// Inherited from QCPAbstractLegendItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPlottableLegendItem*
/// @param painter QCPPainter*
void q_cpplottablelegenditem_qbase_apply_default_antialiasing_hint(void* self, void* painter);

/// Inherited from QCPAbstractLegendItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPlottableLegendItem*
/// @param callback void func(QCPPlottableLegendItem* self, QCPPainter* painter)
void q_cpplottablelegenditem_on_apply_default_antialiasing_hint(void* self, void (*callback)(void*, void*));

/// Inherited from QCPAbstractLegendItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPlottableLegendItem*
QRect* q_cpplottablelegenditem_clip_rect(void* self);

/// Inherited from QCPAbstractLegendItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPlottableLegendItem*
QRect* q_cpplottablelegenditem_qbase_clip_rect(void* self);

/// Inherited from QCPAbstractLegendItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPlottableLegendItem*
/// @param callback QRect* func()
void q_cpplottablelegenditem_on_clip_rect(void* self, QRect* (*callback)());

/// Inherited from QCPAbstractLegendItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPlottableLegendItem*
/// @param event QMouseEvent*
/// @param additive bool
/// @param details QVariant*
/// @param selectionStateChanged bool*
void q_cpplottablelegenditem_select_event(void* self, void* event, bool additive, void* details, bool* selectionStateChanged);

/// Inherited from QCPAbstractLegendItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPlottableLegendItem*
/// @param event QMouseEvent*
/// @param additive bool
/// @param details QVariant*
/// @param selectionStateChanged bool*
void q_cpplottablelegenditem_qbase_select_event(void* self, void* event, bool additive, void* details, bool* selectionStateChanged);

/// Inherited from QCPAbstractLegendItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPlottableLegendItem*
/// @param callback void func(QCPPlottableLegendItem* self, QMouseEvent* event, bool additive, QVariant* details, bool* selectionStateChanged)
void q_cpplottablelegenditem_on_select_event(void* self, void (*callback)(void*, void*, bool, void*, bool*));

/// Inherited from QCPAbstractLegendItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPlottableLegendItem*
/// @param selectionStateChanged bool*
void q_cpplottablelegenditem_deselect_event(void* self, bool* selectionStateChanged);

/// Inherited from QCPAbstractLegendItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPlottableLegendItem*
/// @param selectionStateChanged bool*
void q_cpplottablelegenditem_qbase_deselect_event(void* self, bool* selectionStateChanged);

/// Inherited from QCPAbstractLegendItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPlottableLegendItem*
/// @param callback void func(QCPPlottableLegendItem* self, bool* selectionStateChanged)
void q_cpplottablelegenditem_on_deselect_event(void* self, void (*callback)(void*, bool*));

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPlottableLegendItem*
/// @param phase enum QCPLayoutElement__UpdatePhase
void q_cpplottablelegenditem_update(void* self, int32_t phase);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPlottableLegendItem*
/// @param phase enum QCPLayoutElement__UpdatePhase
void q_cpplottablelegenditem_qbase_update(void* self, int32_t phase);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPlottableLegendItem*
/// @param callback void func(QCPPlottableLegendItem* self, enum QCPLayoutElement__UpdatePhase phase)
void q_cpplottablelegenditem_on_update(void* self, void (*callback)(void*, int32_t));

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPlottableLegendItem*
QSize* q_cpplottablelegenditem_maximum_outer_size_hint(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPlottableLegendItem*
QSize* q_cpplottablelegenditem_qbase_maximum_outer_size_hint(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPlottableLegendItem*
/// @param callback QSize* func()
void q_cpplottablelegenditem_on_maximum_outer_size_hint(void* self, QSize* (*callback)());

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPlottableLegendItem*
/// @param recursive bool
libqt_list /* of QCPLayoutElement* */ q_cpplottablelegenditem_elements(void* self, bool recursive);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPlottableLegendItem*
/// @param recursive bool
libqt_list /* of QCPLayoutElement* */ q_cpplottablelegenditem_qbase_elements(void* self, bool recursive);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPlottableLegendItem*
/// @param callback QCPLayoutElement** func(QCPPlottableLegendItem* self, bool recursive)
void q_cpplottablelegenditem_on_elements(void* self, QCPLayoutElement** (*callback)(void*, bool));

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPlottableLegendItem*
/// @param side enum QCP__MarginSide
int32_t q_cpplottablelegenditem_calculate_auto_margin(void* self, int32_t side);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPlottableLegendItem*
/// @param side enum QCP__MarginSide
int32_t q_cpplottablelegenditem_qbase_calculate_auto_margin(void* self, int32_t side);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPlottableLegendItem*
/// @param callback int32_t func(QCPPlottableLegendItem* self, enum QCP__MarginSide side)
void q_cpplottablelegenditem_on_calculate_auto_margin(void* self, int32_t (*callback)(void*, int32_t));

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPlottableLegendItem*
void q_cpplottablelegenditem_layout_changed(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPlottableLegendItem*
void q_cpplottablelegenditem_qbase_layout_changed(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPlottableLegendItem*
/// @param callback void func()
void q_cpplottablelegenditem_on_layout_changed(void* self, void (*callback)());

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPlottableLegendItem*
/// @param parentPlot QCustomPlot*
void q_cpplottablelegenditem_parent_plot_initialized(void* self, void* parentPlot);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPlottableLegendItem*
/// @param parentPlot QCustomPlot*
void q_cpplottablelegenditem_qbase_parent_plot_initialized(void* self, void* parentPlot);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPlottableLegendItem*
/// @param callback void func(QCPPlottableLegendItem* self, QCustomPlot* parentPlot)
void q_cpplottablelegenditem_on_parent_plot_initialized(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPlottableLegendItem*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cpplottablelegenditem_mouse_press_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPlottableLegendItem*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cpplottablelegenditem_qbase_mouse_press_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPlottableLegendItem*
/// @param callback void func(QCPPlottableLegendItem* self, QMouseEvent* event, QVariant* details)
void q_cpplottablelegenditem_on_mouse_press_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPlottableLegendItem*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cpplottablelegenditem_mouse_move_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPlottableLegendItem*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cpplottablelegenditem_qbase_mouse_move_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPlottableLegendItem*
/// @param callback void func(QCPPlottableLegendItem* self, QMouseEvent* event, QPointF* startPos)
void q_cpplottablelegenditem_on_mouse_move_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPlottableLegendItem*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cpplottablelegenditem_mouse_release_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPlottableLegendItem*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cpplottablelegenditem_qbase_mouse_release_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPlottableLegendItem*
/// @param callback void func(QCPPlottableLegendItem* self, QMouseEvent* event, QPointF* startPos)
void q_cpplottablelegenditem_on_mouse_release_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPlottableLegendItem*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cpplottablelegenditem_mouse_double_click_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPlottableLegendItem*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cpplottablelegenditem_qbase_mouse_double_click_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPlottableLegendItem*
/// @param callback void func(QCPPlottableLegendItem* self, QMouseEvent* event, QVariant* details)
void q_cpplottablelegenditem_on_mouse_double_click_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPlottableLegendItem*
/// @param event QWheelEvent*
void q_cpplottablelegenditem_wheel_event(void* self, void* event);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPlottableLegendItem*
/// @param event QWheelEvent*
void q_cpplottablelegenditem_qbase_wheel_event(void* self, void* event);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPlottableLegendItem*
/// @param callback void func(QCPPlottableLegendItem* self, QWheelEvent* event)
void q_cpplottablelegenditem_on_wheel_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPlottableLegendItem*
/// @param event QEvent*
bool q_cpplottablelegenditem_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPlottableLegendItem*
/// @param event QEvent*
bool q_cpplottablelegenditem_qbase_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPlottableLegendItem*
/// @param callback bool func(QCPPlottableLegendItem* self, QEvent* event)
void q_cpplottablelegenditem_on_event(void* self, bool (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPlottableLegendItem*
/// @param watched QObject*
/// @param event QEvent*
bool q_cpplottablelegenditem_event_filter(void* self, void* watched, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPlottableLegendItem*
/// @param watched QObject*
/// @param event QEvent*
bool q_cpplottablelegenditem_qbase_event_filter(void* self, void* watched, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPlottableLegendItem*
/// @param callback bool func(QCPPlottableLegendItem* self, QObject* watched, QEvent* event)
void q_cpplottablelegenditem_on_event_filter(void* self, bool (*callback)(void*, void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPlottableLegendItem*
/// @param event QTimerEvent*
void q_cpplottablelegenditem_timer_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPlottableLegendItem*
/// @param event QTimerEvent*
void q_cpplottablelegenditem_qbase_timer_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPlottableLegendItem*
/// @param callback void func(QCPPlottableLegendItem* self, QTimerEvent* event)
void q_cpplottablelegenditem_on_timer_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPlottableLegendItem*
/// @param event QChildEvent*
void q_cpplottablelegenditem_child_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPlottableLegendItem*
/// @param event QChildEvent*
void q_cpplottablelegenditem_qbase_child_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPlottableLegendItem*
/// @param callback void func(QCPPlottableLegendItem* self, QChildEvent* event)
void q_cpplottablelegenditem_on_child_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPlottableLegendItem*
/// @param event QEvent*
void q_cpplottablelegenditem_custom_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPlottableLegendItem*
/// @param event QEvent*
void q_cpplottablelegenditem_qbase_custom_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPlottableLegendItem*
/// @param callback void func(QCPPlottableLegendItem* self, QEvent* event)
void q_cpplottablelegenditem_on_custom_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPlottableLegendItem*
/// @param signal QMetaMethod*
void q_cpplottablelegenditem_connect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPlottableLegendItem*
/// @param signal QMetaMethod*
void q_cpplottablelegenditem_qbase_connect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPlottableLegendItem*
/// @param callback void func(QCPPlottableLegendItem* self, QMetaMethod* signal)
void q_cpplottablelegenditem_on_connect_notify(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPlottableLegendItem*
/// @param signal QMetaMethod*
void q_cpplottablelegenditem_disconnect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPlottableLegendItem*
/// @param signal QMetaMethod*
void q_cpplottablelegenditem_qbase_disconnect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPlottableLegendItem*
/// @param callback void func(QCPPlottableLegendItem* self, QMetaMethod* signal)
void q_cpplottablelegenditem_on_disconnect_notify(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPlottableLegendItem*
/// @param parentPlot QCustomPlot*
void q_cpplottablelegenditem_initialize_parent_plot(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPlottableLegendItem*
/// @param parentPlot QCustomPlot*
void q_cpplottablelegenditem_qbase_initialize_parent_plot(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPlottableLegendItem*
/// @param callback void func(QCPPlottableLegendItem* self, QCustomPlot* parentPlot)
void q_cpplottablelegenditem_on_initialize_parent_plot(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPlottableLegendItem*
/// @param parentLayerable QCPLayerable*
void q_cpplottablelegenditem_set_parent_layerable(void* self, void* parentLayerable);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPlottableLegendItem*
/// @param parentLayerable QCPLayerable*
void q_cpplottablelegenditem_qbase_set_parent_layerable(void* self, void* parentLayerable);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPlottableLegendItem*
/// @param callback void func(QCPPlottableLegendItem* self, QCPLayerable* parentLayerable)
void q_cpplottablelegenditem_on_set_parent_layerable(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPlottableLegendItem*
/// @param layer QCPLayer*
/// @param prepend bool
bool q_cpplottablelegenditem_move_to_layer(void* self, void* layer, bool prepend);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPlottableLegendItem*
/// @param layer QCPLayer*
/// @param prepend bool
bool q_cpplottablelegenditem_qbase_move_to_layer(void* self, void* layer, bool prepend);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPlottableLegendItem*
/// @param callback bool func(QCPPlottableLegendItem* self, QCPLayer* layer, bool prepend)
void q_cpplottablelegenditem_on_move_to_layer(void* self, bool (*callback)(void*, void*, bool));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPlottableLegendItem*
/// @param painter QCPPainter*
/// @param localAntialiased bool
/// @param overrideElement enum QCP__AntialiasedElement
void q_cpplottablelegenditem_apply_antialiasing_hint(void* self, void* painter, bool localAntialiased, int32_t overrideElement);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPlottableLegendItem*
/// @param painter QCPPainter*
/// @param localAntialiased bool
/// @param overrideElement enum QCP__AntialiasedElement
void q_cpplottablelegenditem_qbase_apply_antialiasing_hint(void* self, void* painter, bool localAntialiased, int32_t overrideElement);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPlottableLegendItem*
/// @param callback void func(QCPPlottableLegendItem* self, QCPPainter* painter, bool localAntialiased, enum QCP__AntialiasedElement overrideElement)
void q_cpplottablelegenditem_on_apply_antialiasing_hint(void* self, void (*callback)(void*, void*, bool, int32_t));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPlottableLegendItem*
QObject* q_cpplottablelegenditem_sender(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPlottableLegendItem*
QObject* q_cpplottablelegenditem_qbase_sender(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPlottableLegendItem*
/// @param callback QObject* func()
void q_cpplottablelegenditem_on_sender(void* self, QObject* (*callback)());

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPlottableLegendItem*
int32_t q_cpplottablelegenditem_sender_signal_index(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPlottableLegendItem*
int32_t q_cpplottablelegenditem_qbase_sender_signal_index(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPlottableLegendItem*
/// @param callback int32_t func()
void q_cpplottablelegenditem_on_sender_signal_index(void* self, int32_t (*callback)());

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPlottableLegendItem*
/// @param signal const char*
int32_t q_cpplottablelegenditem_receivers(void* self, const char* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPlottableLegendItem*
/// @param signal const char*
int32_t q_cpplottablelegenditem_qbase_receivers(void* self, const char* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPlottableLegendItem*
/// @param callback int32_t func(QCPPlottableLegendItem* self, const char* signal)
void q_cpplottablelegenditem_on_receivers(void* self, int32_t (*callback)(void*, const char*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPlottableLegendItem*
/// @param signal QMetaMethod*
bool q_cpplottablelegenditem_is_signal_connected(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPlottableLegendItem*
/// @param signal QMetaMethod*
bool q_cpplottablelegenditem_qbase_is_signal_connected(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPlottableLegendItem*
/// @param callback bool func(QCPPlottableLegendItem* self, QMetaMethod* signal)
void q_cpplottablelegenditem_on_is_signal_connected(void* self, bool (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#objectNameChanged)
///
/// Wrapper to allow calling private signal
///
/// @param self QCPPlottableLegendItem*
/// @param callback void func(QCPPlottableLegendItem* self, const char* objectName)
void q_cpplottablelegenditem_on_object_name_changed(void* self, void (*callback)(void*, const char*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableLegendItem.html)
///
/// Delete this object from C++ memory.
///
/// @param self QCPPlottableLegendItem*
void q_cpplottablelegenditem_delete(void* self);

/// https://www.qcustomplot.com/documentation/classQCPLegend.html

/// q_cplegend_new constructs a new QCPLegend object.
///
QCPLegend* q_cplegend_new();

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#metaObject)
///
/// @param self QCPLegend*
const QMetaObject* q_cplegend_meta_object(void* self);

/// @param self QCPLegend*
/// @param param1 const char*
void* q_cplegend_metacast(void* self, const char* param1);

/// @param self QCPLegend*
/// @param param1 enum QMetaObject__Call
/// @param param2 int
/// @param param3 void*
int32_t q_cplegend_metacall(void* self, int32_t param1, int param2, void* param3);

/// Allows for overriding the related default method
///
/// @param self QCPLegend*
/// @param callback int32_t func(QCPLegend* self, enum QMetaObject__Call param1, int param2, void* param3)
void q_cplegend_on_metacall(void* self, int32_t (*callback)(void*, int32_t, int, void*));

/// Base class method implementation
///
/// @param self QCPLegend*
/// @param param1 enum QMetaObject__Call
/// @param param2 int
/// @param param3 void*
int32_t q_cplegend_qbase_metacall(void* self, int32_t param1, int param2, void* param3);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
const char* q_cplegend_tr(const char* s);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLegend.html)
///
/// @param self QCPLegend*
QPen* q_cplegend_border_pen(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLegend.html)
///
/// @param self QCPLegend*
QBrush* q_cplegend_brush(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLegend.html)
///
/// @param self QCPLegend*
QFont* q_cplegend_font(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLegend.html)
///
/// @param self QCPLegend*
QColor* q_cplegend_text_color(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLegend.html)
///
/// @param self QCPLegend*
QSize* q_cplegend_icon_size(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLegend.html)
///
/// @param self QCPLegend*
int32_t q_cplegend_icon_text_padding(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLegend.html)
///
/// @param self QCPLegend*
QPen* q_cplegend_icon_border_pen(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLegend.html)
///
/// @param self QCPLegend*
///
/// @return flag of enum QCPLegend__SelectablePart
int32_t q_cplegend_selectable_parts(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLegend.html)
///
/// @param self QCPLegend*
///
/// @return flag of enum QCPLegend__SelectablePart
int32_t q_cplegend_selected_parts(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLegend.html)
///
/// @param self QCPLegend*
QPen* q_cplegend_selected_border_pen(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLegend.html)
///
/// @param self QCPLegend*
QPen* q_cplegend_selected_icon_border_pen(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLegend.html)
///
/// @param self QCPLegend*
QBrush* q_cplegend_selected_brush(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLegend.html)
///
/// @param self QCPLegend*
QFont* q_cplegend_selected_font(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLegend.html)
///
/// @param self QCPLegend*
QColor* q_cplegend_selected_text_color(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLegend.html)
///
/// @param self QCPLegend*
/// @param pen QPen*
void q_cplegend_set_border_pen(void* self, void* pen);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLegend.html)
///
/// @param self QCPLegend*
/// @param brush QBrush*
void q_cplegend_set_brush(void* self, void* brush);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLegend.html)
///
/// @param self QCPLegend*
/// @param font QFont*
void q_cplegend_set_font(void* self, void* font);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLegend.html)
///
/// @param self QCPLegend*
/// @param color QColor*
void q_cplegend_set_text_color(void* self, void* color);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLegend.html)
///
/// @param self QCPLegend*
/// @param size QSize*
void q_cplegend_set_icon_size(void* self, void* size);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLegend.html)
///
/// @param self QCPLegend*
/// @param width int
/// @param height int
void q_cplegend_set_icon_size2(void* self, int width, int height);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLegend.html)
///
/// @param self QCPLegend*
/// @param padding int
void q_cplegend_set_icon_text_padding(void* self, int padding);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLegend.html)
///
/// @param self QCPLegend*
/// @param pen QPen*
void q_cplegend_set_icon_border_pen(void* self, void* pen);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLegend.html)
///
/// @param self QCPLegend*
/// @param selectableParts flag of enum QCPLegend__SelectablePart
void q_cplegend_set_selectable_parts(void* self, const int32_t* selectableParts);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLegend.html)
///
/// @param self QCPLegend*
/// @param selectedParts flag of enum QCPLegend__SelectablePart
void q_cplegend_set_selected_parts(void* self, const int32_t* selectedParts);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLegend.html)
///
/// @param self QCPLegend*
/// @param pen QPen*
void q_cplegend_set_selected_border_pen(void* self, void* pen);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLegend.html)
///
/// @param self QCPLegend*
/// @param pen QPen*
void q_cplegend_set_selected_icon_border_pen(void* self, void* pen);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLegend.html)
///
/// @param self QCPLegend*
/// @param brush QBrush*
void q_cplegend_set_selected_brush(void* self, void* brush);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLegend.html)
///
/// @param self QCPLegend*
/// @param font QFont*
void q_cplegend_set_selected_font(void* self, void* font);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLegend.html)
///
/// @param self QCPLegend*
/// @param color QColor*
void q_cplegend_set_selected_text_color(void* self, void* color);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLegend.html)
///
/// @param self QCPLegend*
/// @param pos QPointF*
/// @param onlySelectable bool
/// @param details QVariant*
double q_cplegend_select_test(void* self, void* pos, bool onlySelectable, void* details);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLegend.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPLegend*
/// @param callback double func(QCPLegend* self, QPointF* pos, bool onlySelectable, QVariant* details)
void q_cplegend_on_select_test(void* self, double (*callback)(void*, void*, bool, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLegend.html)
///
/// Base class method implementation
///
/// @param self QCPLegend*
/// @param pos QPointF*
/// @param onlySelectable bool
/// @param details QVariant*
double q_cplegend_qbase_select_test(void* self, void* pos, bool onlySelectable, void* details);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLegend.html)
///
/// @param self QCPLegend*
/// @param index int
QCPAbstractLegendItem* q_cplegend_item(void* self, int index);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLegend.html)
///
/// @param self QCPLegend*
/// @param plottable QCPAbstractPlottable*
QCPPlottableLegendItem* q_cplegend_item_with_plottable(void* self, void* plottable);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLegend.html)
///
/// @param self QCPLegend*
int32_t q_cplegend_item_count(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLegend.html)
///
/// @param self QCPLegend*
/// @param item QCPAbstractLegendItem*
bool q_cplegend_has_item(void* self, void* item);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLegend.html)
///
/// @param self QCPLegend*
/// @param plottable QCPAbstractPlottable*
bool q_cplegend_has_item_with_plottable(void* self, void* plottable);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLegend.html)
///
/// @param self QCPLegend*
/// @param item QCPAbstractLegendItem*
bool q_cplegend_add_item(void* self, void* item);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLegend.html)
///
/// @param self QCPLegend*
/// @param index int
bool q_cplegend_remove_item(void* self, int index);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLegend.html)
///
/// @param self QCPLegend*
/// @param item QCPAbstractLegendItem*
bool q_cplegend_remove_item2(void* self, void* item);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLegend.html)
///
/// @param self QCPLegend*
void q_cplegend_clear_items(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLegend.html)
///
/// @param self QCPLegend*
libqt_list /* of QCPAbstractLegendItem* */ q_cplegend_selected_items(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLegend.html)
///
/// @param self QCPLegend*
/// @param parts flag of enum QCPLegend__SelectablePart
void q_cplegend_selection_changed(void* self, int32_t parts);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLegend.html)
///
/// @param self QCPLegend*
/// @param callback void func(QCPLegend* self, flag of enum QCPLegend__SelectablePart parts)
void q_cplegend_on_selection_changed(void* self, void (*callback)(void*, int32_t));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLegend.html)
///
/// @param self QCPLegend*
/// @param parts flag of enum QCPLegend__SelectablePart
void q_cplegend_selectable_changed(void* self, int32_t parts);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLegend.html)
///
/// @param self QCPLegend*
/// @param callback void func(QCPLegend* self, flag of enum QCPLegend__SelectablePart parts)
void q_cplegend_on_selectable_changed(void* self, void (*callback)(void*, int32_t));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLegend.html)
///
/// @param self QCPLegend*
/// @param parentPlot QCustomPlot*
void q_cplegend_parent_plot_initialized(void* self, void* parentPlot);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLegend.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPLegend*
/// @param callback void func(QCPLegend* self, QCustomPlot* parentPlot)
void q_cplegend_on_parent_plot_initialized(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLegend.html)
///
/// Base class method implementation
///
/// @param self QCPLegend*
/// @param parentPlot QCustomPlot*
void q_cplegend_qbase_parent_plot_initialized(void* self, void* parentPlot);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLegend.html)
///
/// @param self QCPLegend*
///
/// @return enum QCP__Interaction
int32_t q_cplegend_selection_category(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLegend.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPLegend*
/// @param callback int32_t func()
void q_cplegend_on_selection_category(void* self, int32_t (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLegend.html)
///
/// Base class method implementation
///
/// @param self QCPLegend*
///
/// @return enum QCP__Interaction
int32_t q_cplegend_qbase_selection_category(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLegend.html)
///
/// @param self QCPLegend*
/// @param painter QCPPainter*
void q_cplegend_apply_default_antialiasing_hint(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLegend.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPLegend*
/// @param callback void func(QCPLegend* self, QCPPainter* painter)
void q_cplegend_on_apply_default_antialiasing_hint(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLegend.html)
///
/// Base class method implementation
///
/// @param self QCPLegend*
/// @param painter QCPPainter*
void q_cplegend_qbase_apply_default_antialiasing_hint(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLegend.html)
///
/// @param self QCPLegend*
/// @param painter QCPPainter*
void q_cplegend_draw(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLegend.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPLegend*
/// @param callback void func(QCPLegend* self, QCPPainter* painter)
void q_cplegend_on_draw(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLegend.html)
///
/// Base class method implementation
///
/// @param self QCPLegend*
/// @param painter QCPPainter*
void q_cplegend_qbase_draw(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLegend.html)
///
/// @param self QCPLegend*
/// @param event QMouseEvent*
/// @param additive bool
/// @param details QVariant*
/// @param selectionStateChanged bool*
void q_cplegend_select_event(void* self, void* event, bool additive, void* details, bool* selectionStateChanged);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLegend.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPLegend*
/// @param callback void func(QCPLegend* self, QMouseEvent* event, bool additive, QVariant* details, bool* selectionStateChanged)
void q_cplegend_on_select_event(void* self, void (*callback)(void*, void*, bool, void*, bool*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLegend.html)
///
/// Base class method implementation
///
/// @param self QCPLegend*
/// @param event QMouseEvent*
/// @param additive bool
/// @param details QVariant*
/// @param selectionStateChanged bool*
void q_cplegend_qbase_select_event(void* self, void* event, bool additive, void* details, bool* selectionStateChanged);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLegend.html)
///
/// @param self QCPLegend*
/// @param selectionStateChanged bool*
void q_cplegend_deselect_event(void* self, bool* selectionStateChanged);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLegend.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPLegend*
/// @param callback void func(QCPLegend* self, bool* selectionStateChanged)
void q_cplegend_on_deselect_event(void* self, void (*callback)(void*, bool*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLegend.html)
///
/// Base class method implementation
///
/// @param self QCPLegend*
/// @param selectionStateChanged bool*
void q_cplegend_qbase_deselect_event(void* self, bool* selectionStateChanged);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLegend.html)
///
/// @param self QCPLegend*
QPen* q_cplegend_get_border_pen(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLegend.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPLegend*
/// @param callback QPen* func()
void q_cplegend_on_get_border_pen(void* self, QPen* (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLegend.html)
///
/// Base class method implementation
///
/// @param self QCPLegend*
QPen* q_cplegend_qbase_get_border_pen(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLegend.html)
///
/// @param self QCPLegend*
QBrush* q_cplegend_get_brush(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLegend.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPLegend*
/// @param callback QBrush* func()
void q_cplegend_on_get_brush(void* self, QBrush* (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLegend.html)
///
/// Base class method implementation
///
/// @param self QCPLegend*
QBrush* q_cplegend_qbase_get_brush(void* self);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
/// @param c const char*
const char* q_cplegend_tr2(const char* s, const char* c);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
/// @param c const char*
/// @param n int
const char* q_cplegend_tr3(const char* s, const char* c, int n);

/// Inherited from QCPLayoutGrid
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// @param self QCPLegend*
int32_t q_cplegend_row_count(void* self);

/// Inherited from QCPLayoutGrid
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// @param self QCPLegend*
int32_t q_cplegend_column_count(void* self);

/// Inherited from QCPLayoutGrid
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// @param self QCPLegend*
libqt_list /* of double */ q_cplegend_column_stretch_factors(void* self);

/// Inherited from QCPLayoutGrid
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// @param self QCPLegend*
libqt_list /* of double */ q_cplegend_row_stretch_factors(void* self);

/// Inherited from QCPLayoutGrid
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// @param self QCPLegend*
int32_t q_cplegend_column_spacing(void* self);

/// Inherited from QCPLayoutGrid
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// @param self QCPLegend*
int32_t q_cplegend_row_spacing(void* self);

/// Inherited from QCPLayoutGrid
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// @param self QCPLegend*
int32_t q_cplegend_wrap(void* self);

/// Inherited from QCPLayoutGrid
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// @param self QCPLegend*
///
/// @return enum QCPLayoutGrid__FillOrder
int32_t q_cplegend_fill_order(void* self);

/// Inherited from QCPLayoutGrid
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// @param self QCPLegend*
/// @param column int
/// @param factor double
void q_cplegend_set_column_stretch_factor(void* self, int column, double factor);

/// Inherited from QCPLayoutGrid
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// @param self QCPLegend*
/// @param factors libqt_list /* of double */
void q_cplegend_set_column_stretch_factors(void* self, libqt_list factors);

/// Inherited from QCPLayoutGrid
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// @param self QCPLegend*
/// @param row int
/// @param factor double
void q_cplegend_set_row_stretch_factor(void* self, int row, double factor);

/// Inherited from QCPLayoutGrid
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// @param self QCPLegend*
/// @param factors libqt_list /* of double */
void q_cplegend_set_row_stretch_factors(void* self, libqt_list factors);

/// Inherited from QCPLayoutGrid
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// @param self QCPLegend*
/// @param pixels int
void q_cplegend_set_column_spacing(void* self, int pixels);

/// Inherited from QCPLayoutGrid
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// @param self QCPLegend*
/// @param pixels int
void q_cplegend_set_row_spacing(void* self, int pixels);

/// Inherited from QCPLayoutGrid
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// @param self QCPLegend*
/// @param count int
void q_cplegend_set_wrap(void* self, int count);

/// Inherited from QCPLayoutGrid
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// @param self QCPLegend*
/// @param order enum QCPLayoutGrid__FillOrder
void q_cplegend_set_fill_order(void* self, int32_t order);

/// Inherited from QCPLayoutGrid
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// @param self QCPLegend*
/// @param row int
/// @param column int
QCPLayoutElement* q_cplegend_element(void* self, int row, int column);

/// Inherited from QCPLayoutGrid
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// @param self QCPLegend*
/// @param row int
/// @param column int
/// @param element QCPLayoutElement*
bool q_cplegend_add_element(void* self, int row, int column, void* element);

/// Inherited from QCPLayoutGrid
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// @param self QCPLegend*
/// @param element QCPLayoutElement*
bool q_cplegend_add_element2(void* self, void* element);

/// Inherited from QCPLayoutGrid
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// @param self QCPLegend*
/// @param row int
/// @param column int
bool q_cplegend_has_element(void* self, int row, int column);

/// Inherited from QCPLayoutGrid
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// @param self QCPLegend*
/// @param newRowCount int
/// @param newColumnCount int
void q_cplegend_expand_to(void* self, int newRowCount, int newColumnCount);

/// Inherited from QCPLayoutGrid
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// @param self QCPLegend*
/// @param newIndex int
void q_cplegend_insert_row(void* self, int newIndex);

/// Inherited from QCPLayoutGrid
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// @param self QCPLegend*
/// @param newIndex int
void q_cplegend_insert_column(void* self, int newIndex);

/// Inherited from QCPLayoutGrid
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// @param self QCPLegend*
/// @param row int
/// @param column int
int32_t q_cplegend_row_col_to_index(void* self, int row, int column);

/// Inherited from QCPLayoutGrid
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// @param self QCPLegend*
/// @param index int
/// @param row int*
/// @param column int*
void q_cplegend_index_to_row_col(void* self, int index, int* row, int* column);

/// Inherited from QCPLayoutGrid
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// @param self QCPLegend*
/// @param order enum QCPLayoutGrid__FillOrder
/// @param rearrange bool
void q_cplegend_set_fill_order2(void* self, int32_t order, bool rearrange);

/// Inherited from QCPLayout
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayout.html)
///
/// @param self QCPLegend*
/// @param index int
bool q_cplegend_remove_at(void* self, int index);

/// Inherited from QCPLayout
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayout.html)
///
/// @param self QCPLegend*
/// @param element QCPLayoutElement*
bool q_cplegend_remove(void* self, void* element);

/// Inherited from QCPLayout
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayout.html)
///
/// @param self QCPLegend*
void q_cplegend_clear(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLegend*
QCPLayout* q_cplegend_layout(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLegend*
QRect* q_cplegend_rect(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLegend*
QRect* q_cplegend_outer_rect(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLegend*
QMargins* q_cplegend_margins(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLegend*
QMargins* q_cplegend_minimum_margins(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLegend*
///
/// @return flag of enum QCP__MarginSide
int32_t q_cplegend_auto_margins(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLegend*
QSize* q_cplegend_minimum_size(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLegend*
QSize* q_cplegend_maximum_size(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLegend*
///
/// @return enum QCPLayoutElement__SizeConstraintRect
int32_t q_cplegend_size_constraint_rect(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLegend*
/// @param side enum QCP__MarginSide
QCPMarginGroup* q_cplegend_margin_group(void* self, int32_t side);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLegend*
libqt_map /* of int32_t to QCPMarginGroup* */ q_cplegend_margin_groups(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLegend*
/// @param rect QRect*
void q_cplegend_set_outer_rect(void* self, void* rect);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLegend*
/// @param margins QMargins*
void q_cplegend_set_margins(void* self, void* margins);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLegend*
/// @param margins QMargins*
void q_cplegend_set_minimum_margins(void* self, void* margins);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLegend*
/// @param sides flag of enum QCP__MarginSide
void q_cplegend_set_auto_margins(void* self, int32_t sides);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLegend*
/// @param size QSize*
void q_cplegend_set_minimum_size(void* self, void* size);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLegend*
/// @param width int
/// @param height int
void q_cplegend_set_minimum_size2(void* self, int width, int height);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLegend*
/// @param size QSize*
void q_cplegend_set_maximum_size(void* self, void* size);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLegend*
/// @param width int
/// @param height int
void q_cplegend_set_maximum_size2(void* self, int width, int height);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLegend*
/// @param constraintRect enum QCPLayoutElement__SizeConstraintRect
void q_cplegend_set_size_constraint_rect(void* self, int32_t constraintRect);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPLegend*
/// @param sides flag of enum QCP__MarginSide
/// @param group QCPMarginGroup*
void q_cplegend_set_margin_group(void* self, int32_t sides, void* group);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPLegend*
bool q_cplegend_visible(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPLegend*
QCustomPlot* q_cplegend_parent_plot(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPLegend*
QCPLayerable* q_cplegend_parent_layerable(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPLegend*
QCPLayer* q_cplegend_layer(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPLegend*
bool q_cplegend_antialiased(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPLegend*
/// @param on bool
void q_cplegend_set_visible(void* self, bool on);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPLegend*
/// @param layer QCPLayer*
bool q_cplegend_set_layer(void* self, void* layer);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPLegend*
/// @param layerName const char*
bool q_cplegend_set_layer2(void* self, const char* layerName);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPLegend*
/// @param enabled bool
void q_cplegend_set_antialiased(void* self, bool enabled);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPLegend*
bool q_cplegend_real_visibility(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPLegend*
/// @param newLayer QCPLayer*
void q_cplegend_layer_changed(void* self, void* newLayer);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPLegend*
/// @param callback void func(QCPLegend* self, QCPLayer* newLayer)
void q_cplegend_on_layer_changed(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#objectName)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPLegend*
const char* q_cplegend_object_name(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setObjectName)
///
/// @param self QCPLegend*
/// @param name char*
void q_cplegend_set_object_name(void* self, char* name);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isWidgetType)
///
/// @param self QCPLegend*
bool q_cplegend_is_widget_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isWindowType)
///
/// @param self QCPLegend*
bool q_cplegend_is_window_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isQuickItemType)
///
/// @param self QCPLegend*
bool q_cplegend_is_quick_item_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#signalsBlocked)
///
/// @param self QCPLegend*
bool q_cplegend_signals_blocked(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#blockSignals)
///
/// @param self QCPLegend*
/// @param b bool
bool q_cplegend_block_signals(void* self, bool b);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#thread)
///
/// @param self QCPLegend*
QThread* q_cplegend_thread(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#moveToThread)
///
/// @param self QCPLegend*
/// @param thread QThread*
bool q_cplegend_move_to_thread(void* self, void* thread);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#startTimer)
///
/// @param self QCPLegend*
/// @param interval int
int32_t q_cplegend_start_timer(void* self, int interval);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#killTimer)
///
/// @param self QCPLegend*
/// @param id int
void q_cplegend_kill_timer(void* self, int id);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#killTimer)
///
/// @param self QCPLegend*
/// @param id enum Qt__TimerId
void q_cplegend_kill_timer2(void* self, int32_t id);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#children)
///
/// @param self QCPLegend*
libqt_list /* of QObject* */ q_cplegend_children(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setParent)
///
/// @param self QCPLegend*
/// @param parent QObject*
void q_cplegend_set_parent(void* self, void* parent);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#installEventFilter)
///
/// @param self QCPLegend*
/// @param filterObj QObject*
void q_cplegend_install_event_filter(void* self, void* filterObj);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#removeEventFilter)
///
/// @param self QCPLegend*
/// @param obj QObject*
void q_cplegend_remove_event_filter(void* self, void* obj);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param method QMetaMethod*
QMetaObject__Connection* q_cplegend_connect(void* sender, void* signal, void* receiver, void* method);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param self QCPLegend*
/// @param sender QObject*
/// @param signal const char*
/// @param member const char*
QMetaObject__Connection* q_cplegend_connect2(void* self, void* sender, const char* signal, const char* member);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param member QMetaMethod*
bool q_cplegend_disconnect(void* sender, void* signal, void* receiver, void* member);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnect)
///
/// @param param1 QMetaObject__Connection*
bool q_cplegend_disconnect2(void* param1);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dumpObjectTree)
///
/// @param self QCPLegend*
void q_cplegend_dump_object_tree(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dumpObjectInfo)
///
/// @param self QCPLegend*
void q_cplegend_dump_object_info(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setProperty)
///
/// @param self QCPLegend*
/// @param name const char*
/// @param value QVariant*
bool q_cplegend_set_property(void* self, const char* name, void* value);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#property)
///
/// @param self QCPLegend*
/// @param name const char*
QVariant* q_cplegend_property(void* self, const char* name);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dynamicPropertyNames)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPLegend*
const char** q_cplegend_dynamic_property_names(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#bindingStorage)
///
/// @param self QCPLegend*
QBindingStorage* q_cplegend_binding_storage(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#bindingStorage)
///
/// @param self QCPLegend*
const QBindingStorage* q_cplegend_binding_storage2(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPLegend*
void q_cplegend_destroyed(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPLegend*
/// @param callback void func(QCPLegend* self)
void q_cplegend_on_destroyed(void* self, void (*callback)(void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#parent)
///
/// @param self QCPLegend*
QObject* q_cplegend_parent(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#inherits)
///
/// @param self QCPLegend*
/// @param classname const char*
bool q_cplegend_inherits(void* self, const char* classname);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#deleteLater)
///
/// @param self QCPLegend*
void q_cplegend_delete_later(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#moveToThread)
///
/// @param self QCPLegend*
/// @param thread QThread*
/// @param param2 Disambiguated_t*
bool q_cplegend_move_to_thread2(void* self, void* thread, void* param2);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#startTimer)
///
/// @param self QCPLegend*
/// @param interval int
/// @param timerType enum Qt__TimerType
int32_t q_cplegend_start_timer22(void* self, int interval, int32_t timerType);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param method QMetaMethod*
/// @param type enum Qt__ConnectionType
QMetaObject__Connection* q_cplegend_connect5(void* sender, void* signal, void* receiver, void* method, int32_t type);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param self QCPLegend*
/// @param sender QObject*
/// @param signal const char*
/// @param member const char*
/// @param type enum Qt__ConnectionType
QMetaObject__Connection* q_cplegend_connect4(void* self, void* sender, const char* signal, const char* member, int32_t type);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPLegend*
/// @param param1 QObject*
void q_cplegend_destroyed1(void* self, void* param1);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPLegend*
/// @param callback void func(QCPLegend* self, QObject* param1)
void q_cplegend_on_destroyed1(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayoutGrid
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLegend*
void q_cplegend_update_layout(void* self);

/// Inherited from QCPLayoutGrid
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLegend*
void q_cplegend_qbase_update_layout(void* self);

/// Inherited from QCPLayoutGrid
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLegend*
/// @param callback void func()
void q_cplegend_on_update_layout(void* self, void (*callback)());

/// Inherited from QCPLayoutGrid
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLegend*
int32_t q_cplegend_element_count(void* self);

/// Inherited from QCPLayoutGrid
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLegend*
int32_t q_cplegend_qbase_element_count(void* self);

/// Inherited from QCPLayoutGrid
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLegend*
/// @param callback int32_t func()
void q_cplegend_on_element_count(void* self, int32_t (*callback)());

/// Inherited from QCPLayoutGrid
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLegend*
/// @param index int
QCPLayoutElement* q_cplegend_element_at(void* self, int index);

/// Inherited from QCPLayoutGrid
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLegend*
/// @param index int
QCPLayoutElement* q_cplegend_qbase_element_at(void* self, int index);

/// Inherited from QCPLayoutGrid
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLegend*
/// @param callback QCPLayoutElement* func(QCPLegend* self, int index)
void q_cplegend_on_element_at(void* self, QCPLayoutElement* (*callback)(void*, int));

/// Inherited from QCPLayoutGrid
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLegend*
/// @param index int
QCPLayoutElement* q_cplegend_take_at(void* self, int index);

/// Inherited from QCPLayoutGrid
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLegend*
/// @param index int
QCPLayoutElement* q_cplegend_qbase_take_at(void* self, int index);

/// Inherited from QCPLayoutGrid
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLegend*
/// @param callback QCPLayoutElement* func(QCPLegend* self, int index)
void q_cplegend_on_take_at(void* self, QCPLayoutElement* (*callback)(void*, int));

/// Inherited from QCPLayoutGrid
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLegend*
/// @param element QCPLayoutElement*
bool q_cplegend_take(void* self, void* element);

/// Inherited from QCPLayoutGrid
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLegend*
/// @param element QCPLayoutElement*
bool q_cplegend_qbase_take(void* self, void* element);

/// Inherited from QCPLayoutGrid
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLegend*
/// @param callback bool func(QCPLegend* self, QCPLayoutElement* element)
void q_cplegend_on_take(void* self, bool (*callback)(void*, void*));

/// Inherited from QCPLayoutGrid
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLegend*
/// @param recursive bool
libqt_list /* of QCPLayoutElement* */ q_cplegend_elements(void* self, bool recursive);

/// Inherited from QCPLayoutGrid
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLegend*
/// @param recursive bool
libqt_list /* of QCPLayoutElement* */ q_cplegend_qbase_elements(void* self, bool recursive);

/// Inherited from QCPLayoutGrid
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLegend*
/// @param callback QCPLayoutElement** func(QCPLegend* self, bool recursive)
void q_cplegend_on_elements(void* self, QCPLayoutElement** (*callback)(void*, bool));

/// Inherited from QCPLayoutGrid
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLegend*
void q_cplegend_simplify(void* self);

/// Inherited from QCPLayoutGrid
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLegend*
void q_cplegend_qbase_simplify(void* self);

/// Inherited from QCPLayoutGrid
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLegend*
/// @param callback void func()
void q_cplegend_on_simplify(void* self, void (*callback)());

/// Inherited from QCPLayoutGrid
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLegend*
QSize* q_cplegend_minimum_outer_size_hint(void* self);

/// Inherited from QCPLayoutGrid
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLegend*
QSize* q_cplegend_qbase_minimum_outer_size_hint(void* self);

/// Inherited from QCPLayoutGrid
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLegend*
/// @param callback QSize* func()
void q_cplegend_on_minimum_outer_size_hint(void* self, QSize* (*callback)());

/// Inherited from QCPLayoutGrid
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLegend*
QSize* q_cplegend_maximum_outer_size_hint(void* self);

/// Inherited from QCPLayoutGrid
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLegend*
QSize* q_cplegend_qbase_maximum_outer_size_hint(void* self);

/// Inherited from QCPLayoutGrid
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLegend*
/// @param callback QSize* func()
void q_cplegend_on_maximum_outer_size_hint(void* self, QSize* (*callback)());

/// Inherited from QCPLayout
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayout.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLegend*
/// @param phase enum QCPLayoutElement__UpdatePhase
void q_cplegend_update(void* self, int32_t phase);

/// Inherited from QCPLayout
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayout.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLegend*
/// @param phase enum QCPLayoutElement__UpdatePhase
void q_cplegend_qbase_update(void* self, int32_t phase);

/// Inherited from QCPLayout
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayout.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLegend*
/// @param callback void func(QCPLegend* self, enum QCPLayoutElement__UpdatePhase phase)
void q_cplegend_on_update(void* self, void (*callback)(void*, int32_t));

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLegend*
/// @param side enum QCP__MarginSide
int32_t q_cplegend_calculate_auto_margin(void* self, int32_t side);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLegend*
/// @param side enum QCP__MarginSide
int32_t q_cplegend_qbase_calculate_auto_margin(void* self, int32_t side);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLegend*
/// @param callback int32_t func(QCPLegend* self, enum QCP__MarginSide side)
void q_cplegend_on_calculate_auto_margin(void* self, int32_t (*callback)(void*, int32_t));

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLegend*
void q_cplegend_layout_changed(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLegend*
void q_cplegend_qbase_layout_changed(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLegend*
/// @param callback void func()
void q_cplegend_on_layout_changed(void* self, void (*callback)());

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLegend*
QRect* q_cplegend_clip_rect(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLegend*
QRect* q_cplegend_qbase_clip_rect(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLegend*
/// @param callback QRect* func()
void q_cplegend_on_clip_rect(void* self, QRect* (*callback)());

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLegend*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cplegend_mouse_press_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLegend*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cplegend_qbase_mouse_press_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLegend*
/// @param callback void func(QCPLegend* self, QMouseEvent* event, QVariant* details)
void q_cplegend_on_mouse_press_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLegend*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cplegend_mouse_move_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLegend*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cplegend_qbase_mouse_move_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLegend*
/// @param callback void func(QCPLegend* self, QMouseEvent* event, QPointF* startPos)
void q_cplegend_on_mouse_move_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLegend*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cplegend_mouse_release_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLegend*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cplegend_qbase_mouse_release_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLegend*
/// @param callback void func(QCPLegend* self, QMouseEvent* event, QPointF* startPos)
void q_cplegend_on_mouse_release_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLegend*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cplegend_mouse_double_click_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLegend*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cplegend_qbase_mouse_double_click_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLegend*
/// @param callback void func(QCPLegend* self, QMouseEvent* event, QVariant* details)
void q_cplegend_on_mouse_double_click_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLegend*
/// @param event QWheelEvent*
void q_cplegend_wheel_event(void* self, void* event);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLegend*
/// @param event QWheelEvent*
void q_cplegend_qbase_wheel_event(void* self, void* event);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLegend*
/// @param callback void func(QCPLegend* self, QWheelEvent* event)
void q_cplegend_on_wheel_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLegend*
/// @param event QEvent*
bool q_cplegend_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLegend*
/// @param event QEvent*
bool q_cplegend_qbase_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLegend*
/// @param callback bool func(QCPLegend* self, QEvent* event)
void q_cplegend_on_event(void* self, bool (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLegend*
/// @param watched QObject*
/// @param event QEvent*
bool q_cplegend_event_filter(void* self, void* watched, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLegend*
/// @param watched QObject*
/// @param event QEvent*
bool q_cplegend_qbase_event_filter(void* self, void* watched, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLegend*
/// @param callback bool func(QCPLegend* self, QObject* watched, QEvent* event)
void q_cplegend_on_event_filter(void* self, bool (*callback)(void*, void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLegend*
/// @param event QTimerEvent*
void q_cplegend_timer_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLegend*
/// @param event QTimerEvent*
void q_cplegend_qbase_timer_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLegend*
/// @param callback void func(QCPLegend* self, QTimerEvent* event)
void q_cplegend_on_timer_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLegend*
/// @param event QChildEvent*
void q_cplegend_child_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLegend*
/// @param event QChildEvent*
void q_cplegend_qbase_child_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLegend*
/// @param callback void func(QCPLegend* self, QChildEvent* event)
void q_cplegend_on_child_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLegend*
/// @param event QEvent*
void q_cplegend_custom_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLegend*
/// @param event QEvent*
void q_cplegend_qbase_custom_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLegend*
/// @param callback void func(QCPLegend* self, QEvent* event)
void q_cplegend_on_custom_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLegend*
/// @param signal QMetaMethod*
void q_cplegend_connect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLegend*
/// @param signal QMetaMethod*
void q_cplegend_qbase_connect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLegend*
/// @param callback void func(QCPLegend* self, QMetaMethod* signal)
void q_cplegend_on_connect_notify(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLegend*
/// @param signal QMetaMethod*
void q_cplegend_disconnect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLegend*
/// @param signal QMetaMethod*
void q_cplegend_qbase_disconnect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLegend*
/// @param callback void func(QCPLegend* self, QMetaMethod* signal)
void q_cplegend_on_disconnect_notify(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayoutGrid
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLegend*
/// @param minColWidths libqt_list /* of int */
/// @param minRowHeights libqt_list /* of int */
void q_cplegend_get_minimum_row_col_sizes(void* self, libqt_list minColWidths, libqt_list minRowHeights);

/// Inherited from QCPLayoutGrid
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLegend*
/// @param minColWidths libqt_list /* of int */
/// @param minRowHeights libqt_list /* of int */
void q_cplegend_qbase_get_minimum_row_col_sizes(void* self, libqt_list minColWidths, libqt_list minRowHeights);

/// Inherited from QCPLayoutGrid
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLegend*
/// @param callback void func(QCPLegend* self, int* /* of int */, int* /* of int */)
void q_cplegend_on_get_minimum_row_col_sizes(void* self, void (*callback)(void*, int*, int*));

/// Inherited from QCPLayoutGrid
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLegend*
/// @param maxColWidths libqt_list /* of int */
/// @param maxRowHeights libqt_list /* of int */
void q_cplegend_get_maximum_row_col_sizes(void* self, libqt_list maxColWidths, libqt_list maxRowHeights);

/// Inherited from QCPLayoutGrid
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLegend*
/// @param maxColWidths libqt_list /* of int */
/// @param maxRowHeights libqt_list /* of int */
void q_cplegend_qbase_get_maximum_row_col_sizes(void* self, libqt_list maxColWidths, libqt_list maxRowHeights);

/// Inherited from QCPLayoutGrid
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutGrid.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLegend*
/// @param callback void func(QCPLegend* self, int* /* of int */, int* /* of int */)
void q_cplegend_on_get_maximum_row_col_sizes(void* self, void (*callback)(void*, int*, int*));

/// Inherited from QCPLayout
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayout.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLegend*
void q_cplegend_size_constraints_changed(void* self);

/// Inherited from QCPLayout
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayout.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLegend*
void q_cplegend_qbase_size_constraints_changed(void* self);

/// Inherited from QCPLayout
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayout.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLegend*
/// @param callback void func()
void q_cplegend_on_size_constraints_changed(void* self, void (*callback)());

/// Inherited from QCPLayout
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayout.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLegend*
/// @param el QCPLayoutElement*
void q_cplegend_adopt_element(void* self, void* el);

/// Inherited from QCPLayout
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayout.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLegend*
/// @param el QCPLayoutElement*
void q_cplegend_qbase_adopt_element(void* self, void* el);

/// Inherited from QCPLayout
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayout.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLegend*
/// @param callback void func(QCPLegend* self, QCPLayoutElement* el)
void q_cplegend_on_adopt_element(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayout
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayout.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLegend*
/// @param el QCPLayoutElement*
void q_cplegend_release_element(void* self, void* el);

/// Inherited from QCPLayout
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayout.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLegend*
/// @param el QCPLayoutElement*
void q_cplegend_qbase_release_element(void* self, void* el);

/// Inherited from QCPLayout
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayout.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLegend*
/// @param callback void func(QCPLegend* self, QCPLayoutElement* el)
void q_cplegend_on_release_element(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayout
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayout.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLegend*
/// @param maxSizes libqt_list /* of int */
/// @param minSizes libqt_list /* of int */
/// @param stretchFactors libqt_list /* of double */
/// @param totalSize int
libqt_list /* of int */ q_cplegend_get_section_sizes(void* self, libqt_list maxSizes, libqt_list minSizes, libqt_list stretchFactors, int totalSize);

/// Inherited from QCPLayout
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayout.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLegend*
/// @param maxSizes libqt_list /* of int */
/// @param minSizes libqt_list /* of int */
/// @param stretchFactors libqt_list /* of double */
/// @param totalSize int
libqt_list /* of int */ q_cplegend_qbase_get_section_sizes(void* self, libqt_list maxSizes, libqt_list minSizes, libqt_list stretchFactors, int totalSize);

/// Inherited from QCPLayout
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayout.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLegend*
/// @param callback int* func(QCPLegend* self, int* /* of int */, int* /* of int */, libqt_list /* of double */ /* of double */, int totalSize)
void q_cplegend_on_get_section_sizes(void* self, int* (*callback)(void*, int*, int*, libqt_list, int));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLegend*
/// @param parentPlot QCustomPlot*
void q_cplegend_initialize_parent_plot(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLegend*
/// @param parentPlot QCustomPlot*
void q_cplegend_qbase_initialize_parent_plot(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLegend*
/// @param callback void func(QCPLegend* self, QCustomPlot* parentPlot)
void q_cplegend_on_initialize_parent_plot(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLegend*
/// @param parentLayerable QCPLayerable*
void q_cplegend_set_parent_layerable(void* self, void* parentLayerable);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLegend*
/// @param parentLayerable QCPLayerable*
void q_cplegend_qbase_set_parent_layerable(void* self, void* parentLayerable);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLegend*
/// @param callback void func(QCPLegend* self, QCPLayerable* parentLayerable)
void q_cplegend_on_set_parent_layerable(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLegend*
/// @param layer QCPLayer*
/// @param prepend bool
bool q_cplegend_move_to_layer(void* self, void* layer, bool prepend);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLegend*
/// @param layer QCPLayer*
/// @param prepend bool
bool q_cplegend_qbase_move_to_layer(void* self, void* layer, bool prepend);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLegend*
/// @param callback bool func(QCPLegend* self, QCPLayer* layer, bool prepend)
void q_cplegend_on_move_to_layer(void* self, bool (*callback)(void*, void*, bool));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLegend*
/// @param painter QCPPainter*
/// @param localAntialiased bool
/// @param overrideElement enum QCP__AntialiasedElement
void q_cplegend_apply_antialiasing_hint(void* self, void* painter, bool localAntialiased, int32_t overrideElement);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLegend*
/// @param painter QCPPainter*
/// @param localAntialiased bool
/// @param overrideElement enum QCP__AntialiasedElement
void q_cplegend_qbase_apply_antialiasing_hint(void* self, void* painter, bool localAntialiased, int32_t overrideElement);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLegend*
/// @param callback void func(QCPLegend* self, QCPPainter* painter, bool localAntialiased, enum QCP__AntialiasedElement overrideElement)
void q_cplegend_on_apply_antialiasing_hint(void* self, void (*callback)(void*, void*, bool, int32_t));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLegend*
QObject* q_cplegend_sender(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLegend*
QObject* q_cplegend_qbase_sender(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLegend*
/// @param callback QObject* func()
void q_cplegend_on_sender(void* self, QObject* (*callback)());

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLegend*
int32_t q_cplegend_sender_signal_index(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLegend*
int32_t q_cplegend_qbase_sender_signal_index(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLegend*
/// @param callback int32_t func()
void q_cplegend_on_sender_signal_index(void* self, int32_t (*callback)());

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLegend*
/// @param signal const char*
int32_t q_cplegend_receivers(void* self, const char* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLegend*
/// @param signal const char*
int32_t q_cplegend_qbase_receivers(void* self, const char* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLegend*
/// @param callback int32_t func(QCPLegend* self, const char* signal)
void q_cplegend_on_receivers(void* self, int32_t (*callback)(void*, const char*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPLegend*
/// @param signal QMetaMethod*
bool q_cplegend_is_signal_connected(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPLegend*
/// @param signal QMetaMethod*
bool q_cplegend_qbase_is_signal_connected(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPLegend*
/// @param callback bool func(QCPLegend* self, QMetaMethod* signal)
void q_cplegend_on_is_signal_connected(void* self, bool (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#objectNameChanged)
///
/// Wrapper to allow calling private signal
///
/// @param self QCPLegend*
/// @param callback void func(QCPLegend* self, const char* objectName)
void q_cplegend_on_object_name_changed(void* self, void (*callback)(void*, const char*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLegend.html)
///
/// Delete this object from C++ memory.
///
/// @param self QCPLegend*
void q_cplegend_delete(void* self);

/// https://www.qcustomplot.com/documentation/classQCPTextElement.html

/// q_cptextelement_new constructs a new QCPTextElement object.
///
/// @param parentPlot QCustomPlot*
QCPTextElement* q_cptextelement_new(void* parentPlot);

/// q_cptextelement_new2 constructs a new QCPTextElement object.
///
/// @param parentPlot QCustomPlot*
/// @param text const char*
QCPTextElement* q_cptextelement_new2(void* parentPlot, const char* text);

/// q_cptextelement_new3 constructs a new QCPTextElement object.
///
/// @param parentPlot QCustomPlot*
/// @param text const char*
/// @param pointSize double
QCPTextElement* q_cptextelement_new3(void* parentPlot, const char* text, double pointSize);

/// q_cptextelement_new4 constructs a new QCPTextElement object.
///
/// @param parentPlot QCustomPlot*
/// @param text const char*
/// @param fontFamily const char*
/// @param pointSize double
QCPTextElement* q_cptextelement_new4(void* parentPlot, const char* text, const char* fontFamily, double pointSize);

/// q_cptextelement_new5 constructs a new QCPTextElement object.
///
/// @param parentPlot QCustomPlot*
/// @param text const char*
/// @param font QFont*
QCPTextElement* q_cptextelement_new5(void* parentPlot, const char* text, void* font);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#metaObject)
///
/// @param self QCPTextElement*
const QMetaObject* q_cptextelement_meta_object(void* self);

/// @param self QCPTextElement*
/// @param param1 const char*
void* q_cptextelement_metacast(void* self, const char* param1);

/// @param self QCPTextElement*
/// @param param1 enum QMetaObject__Call
/// @param param2 int
/// @param param3 void*
int32_t q_cptextelement_metacall(void* self, int32_t param1, int param2, void* param3);

/// Allows for overriding the related default method
///
/// @param self QCPTextElement*
/// @param callback int32_t func(QCPTextElement* self, enum QMetaObject__Call param1, int param2, void* param3)
void q_cptextelement_on_metacall(void* self, int32_t (*callback)(void*, int32_t, int, void*));

/// Base class method implementation
///
/// @param self QCPTextElement*
/// @param param1 enum QMetaObject__Call
/// @param param2 int
/// @param param3 void*
int32_t q_cptextelement_qbase_metacall(void* self, int32_t param1, int param2, void* param3);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
const char* q_cptextelement_tr(const char* s);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPTextElement.html)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPTextElement*
const char* q_cptextelement_text(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPTextElement.html)
///
/// @param self QCPTextElement*
int32_t q_cptextelement_text_flags(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPTextElement.html)
///
/// @param self QCPTextElement*
QFont* q_cptextelement_font(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPTextElement.html)
///
/// @param self QCPTextElement*
QColor* q_cptextelement_text_color(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPTextElement.html)
///
/// @param self QCPTextElement*
QFont* q_cptextelement_selected_font(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPTextElement.html)
///
/// @param self QCPTextElement*
QColor* q_cptextelement_selected_text_color(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPTextElement.html)
///
/// @param self QCPTextElement*
bool q_cptextelement_selectable(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPTextElement.html)
///
/// @param self QCPTextElement*
bool q_cptextelement_selected(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPTextElement.html)
///
/// @param self QCPTextElement*
/// @param text const char*
void q_cptextelement_set_text(void* self, const char* text);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPTextElement.html)
///
/// @param self QCPTextElement*
/// @param flags int
void q_cptextelement_set_text_flags(void* self, int flags);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPTextElement.html)
///
/// @param self QCPTextElement*
/// @param font QFont*
void q_cptextelement_set_font(void* self, void* font);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPTextElement.html)
///
/// @param self QCPTextElement*
/// @param color QColor*
void q_cptextelement_set_text_color(void* self, void* color);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPTextElement.html)
///
/// @param self QCPTextElement*
/// @param font QFont*
void q_cptextelement_set_selected_font(void* self, void* font);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPTextElement.html)
///
/// @param self QCPTextElement*
/// @param color QColor*
void q_cptextelement_set_selected_text_color(void* self, void* color);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPTextElement.html)
///
/// @param self QCPTextElement*
/// @param selectable bool
void q_cptextelement_set_selectable(void* self, bool selectable);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPTextElement.html)
///
/// @param self QCPTextElement*
/// @param selected bool
void q_cptextelement_set_selected(void* self, bool selected);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPTextElement.html)
///
/// @param self QCPTextElement*
/// @param pos QPointF*
/// @param onlySelectable bool
/// @param details QVariant*
double q_cptextelement_select_test(void* self, void* pos, bool onlySelectable, void* details);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPTextElement.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPTextElement*
/// @param callback double func(QCPTextElement* self, QPointF* pos, bool onlySelectable, QVariant* details)
void q_cptextelement_on_select_test(void* self, double (*callback)(void*, void*, bool, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPTextElement.html)
///
/// Base class method implementation
///
/// @param self QCPTextElement*
/// @param pos QPointF*
/// @param onlySelectable bool
/// @param details QVariant*
double q_cptextelement_qbase_select_test(void* self, void* pos, bool onlySelectable, void* details);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPTextElement.html)
///
/// @param self QCPTextElement*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cptextelement_mouse_press_event(void* self, void* event, void* details);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPTextElement.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPTextElement*
/// @param callback void func(QCPTextElement* self, QMouseEvent* event, QVariant* details)
void q_cptextelement_on_mouse_press_event(void* self, void (*callback)(void*, void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPTextElement.html)
///
/// Base class method implementation
///
/// @param self QCPTextElement*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cptextelement_qbase_mouse_press_event(void* self, void* event, void* details);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPTextElement.html)
///
/// @param self QCPTextElement*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cptextelement_mouse_release_event(void* self, void* event, void* startPos);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPTextElement.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPTextElement*
/// @param callback void func(QCPTextElement* self, QMouseEvent* event, QPointF* startPos)
void q_cptextelement_on_mouse_release_event(void* self, void (*callback)(void*, void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPTextElement.html)
///
/// Base class method implementation
///
/// @param self QCPTextElement*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cptextelement_qbase_mouse_release_event(void* self, void* event, void* startPos);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPTextElement.html)
///
/// @param self QCPTextElement*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cptextelement_mouse_double_click_event(void* self, void* event, void* details);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPTextElement.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPTextElement*
/// @param callback void func(QCPTextElement* self, QMouseEvent* event, QVariant* details)
void q_cptextelement_on_mouse_double_click_event(void* self, void (*callback)(void*, void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPTextElement.html)
///
/// Base class method implementation
///
/// @param self QCPTextElement*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cptextelement_qbase_mouse_double_click_event(void* self, void* event, void* details);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPTextElement.html)
///
/// @param self QCPTextElement*
/// @param selected bool
void q_cptextelement_selection_changed(void* self, bool selected);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPTextElement.html)
///
/// @param self QCPTextElement*
/// @param callback void func(QCPTextElement* self, bool selected)
void q_cptextelement_on_selection_changed(void* self, void (*callback)(void*, bool));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPTextElement.html)
///
/// @param self QCPTextElement*
/// @param selectable bool
void q_cptextelement_selectable_changed(void* self, bool selectable);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPTextElement.html)
///
/// @param self QCPTextElement*
/// @param callback void func(QCPTextElement* self, bool selectable)
void q_cptextelement_on_selectable_changed(void* self, void (*callback)(void*, bool));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPTextElement.html)
///
/// @param self QCPTextElement*
/// @param event QMouseEvent*
void q_cptextelement_clicked(void* self, void* event);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPTextElement.html)
///
/// @param self QCPTextElement*
/// @param callback void func(QCPTextElement* self, QMouseEvent* event)
void q_cptextelement_on_clicked(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPTextElement.html)
///
/// @param self QCPTextElement*
/// @param event QMouseEvent*
void q_cptextelement_double_clicked(void* self, void* event);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPTextElement.html)
///
/// @param self QCPTextElement*
/// @param callback void func(QCPTextElement* self, QMouseEvent* event)
void q_cptextelement_on_double_clicked(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPTextElement.html)
///
/// @param self QCPTextElement*
/// @param painter QCPPainter*
void q_cptextelement_apply_default_antialiasing_hint(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPTextElement.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPTextElement*
/// @param callback void func(QCPTextElement* self, QCPPainter* painter)
void q_cptextelement_on_apply_default_antialiasing_hint(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPTextElement.html)
///
/// Base class method implementation
///
/// @param self QCPTextElement*
/// @param painter QCPPainter*
void q_cptextelement_qbase_apply_default_antialiasing_hint(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPTextElement.html)
///
/// @param self QCPTextElement*
/// @param painter QCPPainter*
void q_cptextelement_draw(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPTextElement.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPTextElement*
/// @param callback void func(QCPTextElement* self, QCPPainter* painter)
void q_cptextelement_on_draw(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPTextElement.html)
///
/// Base class method implementation
///
/// @param self QCPTextElement*
/// @param painter QCPPainter*
void q_cptextelement_qbase_draw(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPTextElement.html)
///
/// @param self QCPTextElement*
QSize* q_cptextelement_minimum_outer_size_hint(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPTextElement.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPTextElement*
/// @param callback QSize* func()
void q_cptextelement_on_minimum_outer_size_hint(void* self, QSize* (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPTextElement.html)
///
/// Base class method implementation
///
/// @param self QCPTextElement*
QSize* q_cptextelement_qbase_minimum_outer_size_hint(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPTextElement.html)
///
/// @param self QCPTextElement*
QSize* q_cptextelement_maximum_outer_size_hint(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPTextElement.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPTextElement*
/// @param callback QSize* func()
void q_cptextelement_on_maximum_outer_size_hint(void* self, QSize* (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPTextElement.html)
///
/// Base class method implementation
///
/// @param self QCPTextElement*
QSize* q_cptextelement_qbase_maximum_outer_size_hint(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPTextElement.html)
///
/// @param self QCPTextElement*
/// @param event QMouseEvent*
/// @param additive bool
/// @param details QVariant*
/// @param selectionStateChanged bool*
void q_cptextelement_select_event(void* self, void* event, bool additive, void* details, bool* selectionStateChanged);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPTextElement.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPTextElement*
/// @param callback void func(QCPTextElement* self, QMouseEvent* event, bool additive, QVariant* details, bool* selectionStateChanged)
void q_cptextelement_on_select_event(void* self, void (*callback)(void*, void*, bool, void*, bool*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPTextElement.html)
///
/// Base class method implementation
///
/// @param self QCPTextElement*
/// @param event QMouseEvent*
/// @param additive bool
/// @param details QVariant*
/// @param selectionStateChanged bool*
void q_cptextelement_qbase_select_event(void* self, void* event, bool additive, void* details, bool* selectionStateChanged);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPTextElement.html)
///
/// @param self QCPTextElement*
/// @param selectionStateChanged bool*
void q_cptextelement_deselect_event(void* self, bool* selectionStateChanged);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPTextElement.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPTextElement*
/// @param callback void func(QCPTextElement* self, bool* selectionStateChanged)
void q_cptextelement_on_deselect_event(void* self, void (*callback)(void*, bool*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPTextElement.html)
///
/// Base class method implementation
///
/// @param self QCPTextElement*
/// @param selectionStateChanged bool*
void q_cptextelement_qbase_deselect_event(void* self, bool* selectionStateChanged);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPTextElement.html)
///
/// @param self QCPTextElement*
QFont* q_cptextelement_main_font(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPTextElement.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPTextElement*
/// @param callback QFont* func()
void q_cptextelement_on_main_font(void* self, QFont* (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPTextElement.html)
///
/// Base class method implementation
///
/// @param self QCPTextElement*
QFont* q_cptextelement_qbase_main_font(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPTextElement.html)
///
/// @param self QCPTextElement*
QColor* q_cptextelement_main_text_color(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPTextElement.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPTextElement*
/// @param callback QColor* func()
void q_cptextelement_on_main_text_color(void* self, QColor* (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPTextElement.html)
///
/// Base class method implementation
///
/// @param self QCPTextElement*
QColor* q_cptextelement_qbase_main_text_color(void* self);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
/// @param c const char*
const char* q_cptextelement_tr2(const char* s, const char* c);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
/// @param c const char*
/// @param n int
const char* q_cptextelement_tr3(const char* s, const char* c, int n);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPTextElement*
QCPLayout* q_cptextelement_layout(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPTextElement*
QRect* q_cptextelement_rect(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPTextElement*
QRect* q_cptextelement_outer_rect(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPTextElement*
QMargins* q_cptextelement_margins(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPTextElement*
QMargins* q_cptextelement_minimum_margins(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPTextElement*
///
/// @return flag of enum QCP__MarginSide
int32_t q_cptextelement_auto_margins(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPTextElement*
QSize* q_cptextelement_minimum_size(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPTextElement*
QSize* q_cptextelement_maximum_size(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPTextElement*
///
/// @return enum QCPLayoutElement__SizeConstraintRect
int32_t q_cptextelement_size_constraint_rect(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPTextElement*
/// @param side enum QCP__MarginSide
QCPMarginGroup* q_cptextelement_margin_group(void* self, int32_t side);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPTextElement*
libqt_map /* of int32_t to QCPMarginGroup* */ q_cptextelement_margin_groups(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPTextElement*
/// @param rect QRect*
void q_cptextelement_set_outer_rect(void* self, void* rect);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPTextElement*
/// @param margins QMargins*
void q_cptextelement_set_margins(void* self, void* margins);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPTextElement*
/// @param margins QMargins*
void q_cptextelement_set_minimum_margins(void* self, void* margins);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPTextElement*
/// @param sides flag of enum QCP__MarginSide
void q_cptextelement_set_auto_margins(void* self, int32_t sides);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPTextElement*
/// @param size QSize*
void q_cptextelement_set_minimum_size(void* self, void* size);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPTextElement*
/// @param width int
/// @param height int
void q_cptextelement_set_minimum_size2(void* self, int width, int height);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPTextElement*
/// @param size QSize*
void q_cptextelement_set_maximum_size(void* self, void* size);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPTextElement*
/// @param width int
/// @param height int
void q_cptextelement_set_maximum_size2(void* self, int width, int height);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPTextElement*
/// @param constraintRect enum QCPLayoutElement__SizeConstraintRect
void q_cptextelement_set_size_constraint_rect(void* self, int32_t constraintRect);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPTextElement*
/// @param sides flag of enum QCP__MarginSide
/// @param group QCPMarginGroup*
void q_cptextelement_set_margin_group(void* self, int32_t sides, void* group);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPTextElement*
bool q_cptextelement_visible(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPTextElement*
QCustomPlot* q_cptextelement_parent_plot(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPTextElement*
QCPLayerable* q_cptextelement_parent_layerable(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPTextElement*
QCPLayer* q_cptextelement_layer(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPTextElement*
bool q_cptextelement_antialiased(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPTextElement*
/// @param on bool
void q_cptextelement_set_visible(void* self, bool on);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPTextElement*
/// @param layer QCPLayer*
bool q_cptextelement_set_layer(void* self, void* layer);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPTextElement*
/// @param layerName const char*
bool q_cptextelement_set_layer2(void* self, const char* layerName);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPTextElement*
/// @param enabled bool
void q_cptextelement_set_antialiased(void* self, bool enabled);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPTextElement*
bool q_cptextelement_real_visibility(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPTextElement*
/// @param newLayer QCPLayer*
void q_cptextelement_layer_changed(void* self, void* newLayer);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPTextElement*
/// @param callback void func(QCPTextElement* self, QCPLayer* newLayer)
void q_cptextelement_on_layer_changed(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#objectName)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPTextElement*
const char* q_cptextelement_object_name(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setObjectName)
///
/// @param self QCPTextElement*
/// @param name char*
void q_cptextelement_set_object_name(void* self, char* name);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isWidgetType)
///
/// @param self QCPTextElement*
bool q_cptextelement_is_widget_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isWindowType)
///
/// @param self QCPTextElement*
bool q_cptextelement_is_window_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isQuickItemType)
///
/// @param self QCPTextElement*
bool q_cptextelement_is_quick_item_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#signalsBlocked)
///
/// @param self QCPTextElement*
bool q_cptextelement_signals_blocked(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#blockSignals)
///
/// @param self QCPTextElement*
/// @param b bool
bool q_cptextelement_block_signals(void* self, bool b);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#thread)
///
/// @param self QCPTextElement*
QThread* q_cptextelement_thread(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#moveToThread)
///
/// @param self QCPTextElement*
/// @param thread QThread*
bool q_cptextelement_move_to_thread(void* self, void* thread);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#startTimer)
///
/// @param self QCPTextElement*
/// @param interval int
int32_t q_cptextelement_start_timer(void* self, int interval);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#killTimer)
///
/// @param self QCPTextElement*
/// @param id int
void q_cptextelement_kill_timer(void* self, int id);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#killTimer)
///
/// @param self QCPTextElement*
/// @param id enum Qt__TimerId
void q_cptextelement_kill_timer2(void* self, int32_t id);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#children)
///
/// @param self QCPTextElement*
libqt_list /* of QObject* */ q_cptextelement_children(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setParent)
///
/// @param self QCPTextElement*
/// @param parent QObject*
void q_cptextelement_set_parent(void* self, void* parent);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#installEventFilter)
///
/// @param self QCPTextElement*
/// @param filterObj QObject*
void q_cptextelement_install_event_filter(void* self, void* filterObj);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#removeEventFilter)
///
/// @param self QCPTextElement*
/// @param obj QObject*
void q_cptextelement_remove_event_filter(void* self, void* obj);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param method QMetaMethod*
QMetaObject__Connection* q_cptextelement_connect(void* sender, void* signal, void* receiver, void* method);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param self QCPTextElement*
/// @param sender QObject*
/// @param signal const char*
/// @param member const char*
QMetaObject__Connection* q_cptextelement_connect2(void* self, void* sender, const char* signal, const char* member);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param member QMetaMethod*
bool q_cptextelement_disconnect(void* sender, void* signal, void* receiver, void* member);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnect)
///
/// @param param1 QMetaObject__Connection*
bool q_cptextelement_disconnect2(void* param1);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dumpObjectTree)
///
/// @param self QCPTextElement*
void q_cptextelement_dump_object_tree(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dumpObjectInfo)
///
/// @param self QCPTextElement*
void q_cptextelement_dump_object_info(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setProperty)
///
/// @param self QCPTextElement*
/// @param name const char*
/// @param value QVariant*
bool q_cptextelement_set_property(void* self, const char* name, void* value);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#property)
///
/// @param self QCPTextElement*
/// @param name const char*
QVariant* q_cptextelement_property(void* self, const char* name);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dynamicPropertyNames)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPTextElement*
const char** q_cptextelement_dynamic_property_names(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#bindingStorage)
///
/// @param self QCPTextElement*
QBindingStorage* q_cptextelement_binding_storage(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#bindingStorage)
///
/// @param self QCPTextElement*
const QBindingStorage* q_cptextelement_binding_storage2(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPTextElement*
void q_cptextelement_destroyed(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPTextElement*
/// @param callback void func(QCPTextElement* self)
void q_cptextelement_on_destroyed(void* self, void (*callback)(void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#parent)
///
/// @param self QCPTextElement*
QObject* q_cptextelement_parent(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#inherits)
///
/// @param self QCPTextElement*
/// @param classname const char*
bool q_cptextelement_inherits(void* self, const char* classname);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#deleteLater)
///
/// @param self QCPTextElement*
void q_cptextelement_delete_later(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#moveToThread)
///
/// @param self QCPTextElement*
/// @param thread QThread*
/// @param param2 Disambiguated_t*
bool q_cptextelement_move_to_thread2(void* self, void* thread, void* param2);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#startTimer)
///
/// @param self QCPTextElement*
/// @param interval int
/// @param timerType enum Qt__TimerType
int32_t q_cptextelement_start_timer22(void* self, int interval, int32_t timerType);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param method QMetaMethod*
/// @param type enum Qt__ConnectionType
QMetaObject__Connection* q_cptextelement_connect5(void* sender, void* signal, void* receiver, void* method, int32_t type);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param self QCPTextElement*
/// @param sender QObject*
/// @param signal const char*
/// @param member const char*
/// @param type enum Qt__ConnectionType
QMetaObject__Connection* q_cptextelement_connect4(void* self, void* sender, const char* signal, const char* member, int32_t type);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPTextElement*
/// @param param1 QObject*
void q_cptextelement_destroyed1(void* self, void* param1);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPTextElement*
/// @param callback void func(QCPTextElement* self, QObject* param1)
void q_cptextelement_on_destroyed1(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPTextElement*
/// @param phase enum QCPLayoutElement__UpdatePhase
void q_cptextelement_update(void* self, int32_t phase);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPTextElement*
/// @param phase enum QCPLayoutElement__UpdatePhase
void q_cptextelement_qbase_update(void* self, int32_t phase);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPTextElement*
/// @param callback void func(QCPTextElement* self, enum QCPLayoutElement__UpdatePhase phase)
void q_cptextelement_on_update(void* self, void (*callback)(void*, int32_t));

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPTextElement*
/// @param recursive bool
libqt_list /* of QCPLayoutElement* */ q_cptextelement_elements(void* self, bool recursive);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPTextElement*
/// @param recursive bool
libqt_list /* of QCPLayoutElement* */ q_cptextelement_qbase_elements(void* self, bool recursive);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPTextElement*
/// @param callback QCPLayoutElement** func(QCPTextElement* self, bool recursive)
void q_cptextelement_on_elements(void* self, QCPLayoutElement** (*callback)(void*, bool));

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPTextElement*
/// @param side enum QCP__MarginSide
int32_t q_cptextelement_calculate_auto_margin(void* self, int32_t side);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPTextElement*
/// @param side enum QCP__MarginSide
int32_t q_cptextelement_qbase_calculate_auto_margin(void* self, int32_t side);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPTextElement*
/// @param callback int32_t func(QCPTextElement* self, enum QCP__MarginSide side)
void q_cptextelement_on_calculate_auto_margin(void* self, int32_t (*callback)(void*, int32_t));

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPTextElement*
void q_cptextelement_layout_changed(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPTextElement*
void q_cptextelement_qbase_layout_changed(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPTextElement*
/// @param callback void func()
void q_cptextelement_on_layout_changed(void* self, void (*callback)());

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPTextElement*
/// @param parentPlot QCustomPlot*
void q_cptextelement_parent_plot_initialized(void* self, void* parentPlot);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPTextElement*
/// @param parentPlot QCustomPlot*
void q_cptextelement_qbase_parent_plot_initialized(void* self, void* parentPlot);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPTextElement*
/// @param callback void func(QCPTextElement* self, QCustomPlot* parentPlot)
void q_cptextelement_on_parent_plot_initialized(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPTextElement*
///
/// @return enum QCP__Interaction
int32_t q_cptextelement_selection_category(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPTextElement*
///
/// @return enum QCP__Interaction
int32_t q_cptextelement_qbase_selection_category(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPTextElement*
/// @param callback int32_t func()
void q_cptextelement_on_selection_category(void* self, int32_t (*callback)());

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPTextElement*
QRect* q_cptextelement_clip_rect(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPTextElement*
QRect* q_cptextelement_qbase_clip_rect(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPTextElement*
/// @param callback QRect* func()
void q_cptextelement_on_clip_rect(void* self, QRect* (*callback)());

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPTextElement*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cptextelement_mouse_move_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPTextElement*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cptextelement_qbase_mouse_move_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPTextElement*
/// @param callback void func(QCPTextElement* self, QMouseEvent* event, QPointF* startPos)
void q_cptextelement_on_mouse_move_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPTextElement*
/// @param event QWheelEvent*
void q_cptextelement_wheel_event(void* self, void* event);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPTextElement*
/// @param event QWheelEvent*
void q_cptextelement_qbase_wheel_event(void* self, void* event);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPTextElement*
/// @param callback void func(QCPTextElement* self, QWheelEvent* event)
void q_cptextelement_on_wheel_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPTextElement*
/// @param event QEvent*
bool q_cptextelement_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPTextElement*
/// @param event QEvent*
bool q_cptextelement_qbase_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPTextElement*
/// @param callback bool func(QCPTextElement* self, QEvent* event)
void q_cptextelement_on_event(void* self, bool (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPTextElement*
/// @param watched QObject*
/// @param event QEvent*
bool q_cptextelement_event_filter(void* self, void* watched, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPTextElement*
/// @param watched QObject*
/// @param event QEvent*
bool q_cptextelement_qbase_event_filter(void* self, void* watched, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPTextElement*
/// @param callback bool func(QCPTextElement* self, QObject* watched, QEvent* event)
void q_cptextelement_on_event_filter(void* self, bool (*callback)(void*, void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPTextElement*
/// @param event QTimerEvent*
void q_cptextelement_timer_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPTextElement*
/// @param event QTimerEvent*
void q_cptextelement_qbase_timer_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPTextElement*
/// @param callback void func(QCPTextElement* self, QTimerEvent* event)
void q_cptextelement_on_timer_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPTextElement*
/// @param event QChildEvent*
void q_cptextelement_child_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPTextElement*
/// @param event QChildEvent*
void q_cptextelement_qbase_child_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPTextElement*
/// @param callback void func(QCPTextElement* self, QChildEvent* event)
void q_cptextelement_on_child_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPTextElement*
/// @param event QEvent*
void q_cptextelement_custom_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPTextElement*
/// @param event QEvent*
void q_cptextelement_qbase_custom_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPTextElement*
/// @param callback void func(QCPTextElement* self, QEvent* event)
void q_cptextelement_on_custom_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPTextElement*
/// @param signal QMetaMethod*
void q_cptextelement_connect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPTextElement*
/// @param signal QMetaMethod*
void q_cptextelement_qbase_connect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPTextElement*
/// @param callback void func(QCPTextElement* self, QMetaMethod* signal)
void q_cptextelement_on_connect_notify(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPTextElement*
/// @param signal QMetaMethod*
void q_cptextelement_disconnect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPTextElement*
/// @param signal QMetaMethod*
void q_cptextelement_qbase_disconnect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPTextElement*
/// @param callback void func(QCPTextElement* self, QMetaMethod* signal)
void q_cptextelement_on_disconnect_notify(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPTextElement*
/// @param parentPlot QCustomPlot*
void q_cptextelement_initialize_parent_plot(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPTextElement*
/// @param parentPlot QCustomPlot*
void q_cptextelement_qbase_initialize_parent_plot(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPTextElement*
/// @param callback void func(QCPTextElement* self, QCustomPlot* parentPlot)
void q_cptextelement_on_initialize_parent_plot(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPTextElement*
/// @param parentLayerable QCPLayerable*
void q_cptextelement_set_parent_layerable(void* self, void* parentLayerable);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPTextElement*
/// @param parentLayerable QCPLayerable*
void q_cptextelement_qbase_set_parent_layerable(void* self, void* parentLayerable);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPTextElement*
/// @param callback void func(QCPTextElement* self, QCPLayerable* parentLayerable)
void q_cptextelement_on_set_parent_layerable(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPTextElement*
/// @param layer QCPLayer*
/// @param prepend bool
bool q_cptextelement_move_to_layer(void* self, void* layer, bool prepend);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPTextElement*
/// @param layer QCPLayer*
/// @param prepend bool
bool q_cptextelement_qbase_move_to_layer(void* self, void* layer, bool prepend);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPTextElement*
/// @param callback bool func(QCPTextElement* self, QCPLayer* layer, bool prepend)
void q_cptextelement_on_move_to_layer(void* self, bool (*callback)(void*, void*, bool));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPTextElement*
/// @param painter QCPPainter*
/// @param localAntialiased bool
/// @param overrideElement enum QCP__AntialiasedElement
void q_cptextelement_apply_antialiasing_hint(void* self, void* painter, bool localAntialiased, int32_t overrideElement);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPTextElement*
/// @param painter QCPPainter*
/// @param localAntialiased bool
/// @param overrideElement enum QCP__AntialiasedElement
void q_cptextelement_qbase_apply_antialiasing_hint(void* self, void* painter, bool localAntialiased, int32_t overrideElement);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPTextElement*
/// @param callback void func(QCPTextElement* self, QCPPainter* painter, bool localAntialiased, enum QCP__AntialiasedElement overrideElement)
void q_cptextelement_on_apply_antialiasing_hint(void* self, void (*callback)(void*, void*, bool, int32_t));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPTextElement*
QObject* q_cptextelement_sender(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPTextElement*
QObject* q_cptextelement_qbase_sender(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPTextElement*
/// @param callback QObject* func()
void q_cptextelement_on_sender(void* self, QObject* (*callback)());

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPTextElement*
int32_t q_cptextelement_sender_signal_index(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPTextElement*
int32_t q_cptextelement_qbase_sender_signal_index(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPTextElement*
/// @param callback int32_t func()
void q_cptextelement_on_sender_signal_index(void* self, int32_t (*callback)());

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPTextElement*
/// @param signal const char*
int32_t q_cptextelement_receivers(void* self, const char* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPTextElement*
/// @param signal const char*
int32_t q_cptextelement_qbase_receivers(void* self, const char* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPTextElement*
/// @param callback int32_t func(QCPTextElement* self, const char* signal)
void q_cptextelement_on_receivers(void* self, int32_t (*callback)(void*, const char*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPTextElement*
/// @param signal QMetaMethod*
bool q_cptextelement_is_signal_connected(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPTextElement*
/// @param signal QMetaMethod*
bool q_cptextelement_qbase_is_signal_connected(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPTextElement*
/// @param callback bool func(QCPTextElement* self, QMetaMethod* signal)
void q_cptextelement_on_is_signal_connected(void* self, bool (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#objectNameChanged)
///
/// Wrapper to allow calling private signal
///
/// @param self QCPTextElement*
/// @param callback void func(QCPTextElement* self, const char* objectName)
void q_cptextelement_on_object_name_changed(void* self, void (*callback)(void*, const char*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPTextElement.html)
///
/// Delete this object from C++ memory.
///
/// @param self QCPTextElement*
void q_cptextelement_delete(void* self);

/// https://www.qcustomplot.com/documentation/classQCPColorScale.html

/// q_cpcolorscale_new constructs a new QCPColorScale object.
///
/// @param parentPlot QCustomPlot*
QCPColorScale* q_cpcolorscale_new(void* parentPlot);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#metaObject)
///
/// @param self QCPColorScale*
const QMetaObject* q_cpcolorscale_meta_object(void* self);

/// @param self QCPColorScale*
/// @param param1 const char*
void* q_cpcolorscale_metacast(void* self, const char* param1);

/// @param self QCPColorScale*
/// @param param1 enum QMetaObject__Call
/// @param param2 int
/// @param param3 void*
int32_t q_cpcolorscale_metacall(void* self, int32_t param1, int param2, void* param3);

/// Allows for overriding the related default method
///
/// @param self QCPColorScale*
/// @param callback int32_t func(QCPColorScale* self, enum QMetaObject__Call param1, int param2, void* param3)
void q_cpcolorscale_on_metacall(void* self, int32_t (*callback)(void*, int32_t, int, void*));

/// Base class method implementation
///
/// @param self QCPColorScale*
/// @param param1 enum QMetaObject__Call
/// @param param2 int
/// @param param3 void*
int32_t q_cpcolorscale_qbase_metacall(void* self, int32_t param1, int param2, void* param3);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
const char* q_cpcolorscale_tr(const char* s);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorScale.html)
///
/// @param self QCPColorScale*
QCPAxis* q_cpcolorscale_axis(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorScale.html)
///
/// @param self QCPColorScale*
///
/// @return enum QCPAxis__AxisType
int32_t q_cpcolorscale_type(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorScale.html)
///
/// @param self QCPColorScale*
QCPRange* q_cpcolorscale_data_range(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorScale.html)
///
/// @param self QCPColorScale*
///
/// @return enum QCPAxis__ScaleType
int32_t q_cpcolorscale_data_scale_type(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorScale.html)
///
/// @param self QCPColorScale*
QCPColorGradient* q_cpcolorscale_gradient(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorScale.html)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPColorScale*
const char* q_cpcolorscale_label(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorScale.html)
///
/// @param self QCPColorScale*
int32_t q_cpcolorscale_bar_width(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorScale.html)
///
/// @param self QCPColorScale*
bool q_cpcolorscale_range_drag(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorScale.html)
///
/// @param self QCPColorScale*
bool q_cpcolorscale_range_zoom(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorScale.html)
///
/// @param self QCPColorScale*
/// @param type enum QCPAxis__AxisType
void q_cpcolorscale_set_type(void* self, int32_t type);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorScale.html)
///
/// @param self QCPColorScale*
/// @param dataRange QCPRange*
void q_cpcolorscale_set_data_range(void* self, void* dataRange);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorScale.html)
///
/// @param self QCPColorScale*
/// @param scaleType enum QCPAxis__ScaleType
void q_cpcolorscale_set_data_scale_type(void* self, int32_t scaleType);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorScale.html)
///
/// @param self QCPColorScale*
/// @param gradient QCPColorGradient*
void q_cpcolorscale_set_gradient(void* self, void* gradient);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorScale.html)
///
/// @param self QCPColorScale*
/// @param str const char*
void q_cpcolorscale_set_label(void* self, const char* str);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorScale.html)
///
/// @param self QCPColorScale*
/// @param width int
void q_cpcolorscale_set_bar_width(void* self, int width);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorScale.html)
///
/// @param self QCPColorScale*
/// @param enabled bool
void q_cpcolorscale_set_range_drag(void* self, bool enabled);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorScale.html)
///
/// @param self QCPColorScale*
/// @param enabled bool
void q_cpcolorscale_set_range_zoom(void* self, bool enabled);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorScale.html)
///
/// @param self QCPColorScale*
libqt_list /* of QCPColorMap* */ q_cpcolorscale_color_maps(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorScale.html)
///
/// @param self QCPColorScale*
/// @param onlyVisibleMaps bool
void q_cpcolorscale_rescale_data_range(void* self, bool onlyVisibleMaps);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorScale.html)
///
/// @param self QCPColorScale*
/// @param phase enum QCPLayoutElement__UpdatePhase
void q_cpcolorscale_update(void* self, int32_t phase);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorScale.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPColorScale*
/// @param callback void func(QCPColorScale* self, enum QCPLayoutElement__UpdatePhase phase)
void q_cpcolorscale_on_update(void* self, void (*callback)(void*, int32_t));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorScale.html)
///
/// Base class method implementation
///
/// @param self QCPColorScale*
/// @param phase enum QCPLayoutElement__UpdatePhase
void q_cpcolorscale_qbase_update(void* self, int32_t phase);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorScale.html)
///
/// @param self QCPColorScale*
/// @param newRange QCPRange*
void q_cpcolorscale_data_range_changed(void* self, void* newRange);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorScale.html)
///
/// @param self QCPColorScale*
/// @param callback void func(QCPColorScale* self, QCPRange* newRange)
void q_cpcolorscale_on_data_range_changed(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorScale.html)
///
/// @param self QCPColorScale*
/// @param scaleType enum QCPAxis__ScaleType
void q_cpcolorscale_data_scale_type_changed(void* self, int32_t scaleType);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorScale.html)
///
/// @param self QCPColorScale*
/// @param callback void func(QCPColorScale* self, enum QCPAxis__ScaleType scaleType)
void q_cpcolorscale_on_data_scale_type_changed(void* self, void (*callback)(void*, int32_t));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorScale.html)
///
/// @param self QCPColorScale*
/// @param newGradient QCPColorGradient*
void q_cpcolorscale_gradient_changed(void* self, void* newGradient);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorScale.html)
///
/// @param self QCPColorScale*
/// @param callback void func(QCPColorScale* self, QCPColorGradient* newGradient)
void q_cpcolorscale_on_gradient_changed(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorScale.html)
///
/// @param self QCPColorScale*
/// @param painter QCPPainter*
void q_cpcolorscale_apply_default_antialiasing_hint(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorScale.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPColorScale*
/// @param callback void func(QCPColorScale* self, QCPPainter* painter)
void q_cpcolorscale_on_apply_default_antialiasing_hint(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorScale.html)
///
/// Base class method implementation
///
/// @param self QCPColorScale*
/// @param painter QCPPainter*
void q_cpcolorscale_qbase_apply_default_antialiasing_hint(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorScale.html)
///
/// @param self QCPColorScale*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cpcolorscale_mouse_press_event(void* self, void* event, void* details);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorScale.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPColorScale*
/// @param callback void func(QCPColorScale* self, QMouseEvent* event, QVariant* details)
void q_cpcolorscale_on_mouse_press_event(void* self, void (*callback)(void*, void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorScale.html)
///
/// Base class method implementation
///
/// @param self QCPColorScale*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cpcolorscale_qbase_mouse_press_event(void* self, void* event, void* details);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorScale.html)
///
/// @param self QCPColorScale*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cpcolorscale_mouse_move_event(void* self, void* event, void* startPos);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorScale.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPColorScale*
/// @param callback void func(QCPColorScale* self, QMouseEvent* event, QPointF* startPos)
void q_cpcolorscale_on_mouse_move_event(void* self, void (*callback)(void*, void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorScale.html)
///
/// Base class method implementation
///
/// @param self QCPColorScale*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cpcolorscale_qbase_mouse_move_event(void* self, void* event, void* startPos);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorScale.html)
///
/// @param self QCPColorScale*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cpcolorscale_mouse_release_event(void* self, void* event, void* startPos);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorScale.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPColorScale*
/// @param callback void func(QCPColorScale* self, QMouseEvent* event, QPointF* startPos)
void q_cpcolorscale_on_mouse_release_event(void* self, void (*callback)(void*, void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorScale.html)
///
/// Base class method implementation
///
/// @param self QCPColorScale*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cpcolorscale_qbase_mouse_release_event(void* self, void* event, void* startPos);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorScale.html)
///
/// @param self QCPColorScale*
/// @param event QWheelEvent*
void q_cpcolorscale_wheel_event(void* self, void* event);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorScale.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPColorScale*
/// @param callback void func(QCPColorScale* self, QWheelEvent* event)
void q_cpcolorscale_on_wheel_event(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorScale.html)
///
/// Base class method implementation
///
/// @param self QCPColorScale*
/// @param event QWheelEvent*
void q_cpcolorscale_qbase_wheel_event(void* self, void* event);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
/// @param c const char*
const char* q_cpcolorscale_tr2(const char* s, const char* c);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
/// @param c const char*
/// @param n int
const char* q_cpcolorscale_tr3(const char* s, const char* c, int n);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPColorScale*
QCPLayout* q_cpcolorscale_layout(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPColorScale*
QRect* q_cpcolorscale_rect(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPColorScale*
QRect* q_cpcolorscale_outer_rect(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPColorScale*
QMargins* q_cpcolorscale_margins(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPColorScale*
QMargins* q_cpcolorscale_minimum_margins(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPColorScale*
///
/// @return flag of enum QCP__MarginSide
int32_t q_cpcolorscale_auto_margins(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPColorScale*
QSize* q_cpcolorscale_minimum_size(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPColorScale*
QSize* q_cpcolorscale_maximum_size(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPColorScale*
///
/// @return enum QCPLayoutElement__SizeConstraintRect
int32_t q_cpcolorscale_size_constraint_rect(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPColorScale*
/// @param side enum QCP__MarginSide
QCPMarginGroup* q_cpcolorscale_margin_group(void* self, int32_t side);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPColorScale*
libqt_map /* of int32_t to QCPMarginGroup* */ q_cpcolorscale_margin_groups(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPColorScale*
/// @param rect QRect*
void q_cpcolorscale_set_outer_rect(void* self, void* rect);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPColorScale*
/// @param margins QMargins*
void q_cpcolorscale_set_margins(void* self, void* margins);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPColorScale*
/// @param margins QMargins*
void q_cpcolorscale_set_minimum_margins(void* self, void* margins);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPColorScale*
/// @param sides flag of enum QCP__MarginSide
void q_cpcolorscale_set_auto_margins(void* self, int32_t sides);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPColorScale*
/// @param size QSize*
void q_cpcolorscale_set_minimum_size(void* self, void* size);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPColorScale*
/// @param width int
/// @param height int
void q_cpcolorscale_set_minimum_size2(void* self, int width, int height);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPColorScale*
/// @param size QSize*
void q_cpcolorscale_set_maximum_size(void* self, void* size);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPColorScale*
/// @param width int
/// @param height int
void q_cpcolorscale_set_maximum_size2(void* self, int width, int height);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPColorScale*
/// @param constraintRect enum QCPLayoutElement__SizeConstraintRect
void q_cpcolorscale_set_size_constraint_rect(void* self, int32_t constraintRect);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPColorScale*
/// @param sides flag of enum QCP__MarginSide
/// @param group QCPMarginGroup*
void q_cpcolorscale_set_margin_group(void* self, int32_t sides, void* group);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPColorScale*
bool q_cpcolorscale_visible(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPColorScale*
QCustomPlot* q_cpcolorscale_parent_plot(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPColorScale*
QCPLayerable* q_cpcolorscale_parent_layerable(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPColorScale*
QCPLayer* q_cpcolorscale_layer(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPColorScale*
bool q_cpcolorscale_antialiased(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPColorScale*
/// @param on bool
void q_cpcolorscale_set_visible(void* self, bool on);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPColorScale*
/// @param layer QCPLayer*
bool q_cpcolorscale_set_layer(void* self, void* layer);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPColorScale*
/// @param layerName const char*
bool q_cpcolorscale_set_layer2(void* self, const char* layerName);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPColorScale*
/// @param enabled bool
void q_cpcolorscale_set_antialiased(void* self, bool enabled);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPColorScale*
bool q_cpcolorscale_real_visibility(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPColorScale*
/// @param newLayer QCPLayer*
void q_cpcolorscale_layer_changed(void* self, void* newLayer);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPColorScale*
/// @param callback void func(QCPColorScale* self, QCPLayer* newLayer)
void q_cpcolorscale_on_layer_changed(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#objectName)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPColorScale*
const char* q_cpcolorscale_object_name(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setObjectName)
///
/// @param self QCPColorScale*
/// @param name char*
void q_cpcolorscale_set_object_name(void* self, char* name);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isWidgetType)
///
/// @param self QCPColorScale*
bool q_cpcolorscale_is_widget_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isWindowType)
///
/// @param self QCPColorScale*
bool q_cpcolorscale_is_window_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isQuickItemType)
///
/// @param self QCPColorScale*
bool q_cpcolorscale_is_quick_item_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#signalsBlocked)
///
/// @param self QCPColorScale*
bool q_cpcolorscale_signals_blocked(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#blockSignals)
///
/// @param self QCPColorScale*
/// @param b bool
bool q_cpcolorscale_block_signals(void* self, bool b);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#thread)
///
/// @param self QCPColorScale*
QThread* q_cpcolorscale_thread(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#moveToThread)
///
/// @param self QCPColorScale*
/// @param thread QThread*
bool q_cpcolorscale_move_to_thread(void* self, void* thread);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#startTimer)
///
/// @param self QCPColorScale*
/// @param interval int
int32_t q_cpcolorscale_start_timer(void* self, int interval);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#killTimer)
///
/// @param self QCPColorScale*
/// @param id int
void q_cpcolorscale_kill_timer(void* self, int id);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#killTimer)
///
/// @param self QCPColorScale*
/// @param id enum Qt__TimerId
void q_cpcolorscale_kill_timer2(void* self, int32_t id);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#children)
///
/// @param self QCPColorScale*
libqt_list /* of QObject* */ q_cpcolorscale_children(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setParent)
///
/// @param self QCPColorScale*
/// @param parent QObject*
void q_cpcolorscale_set_parent(void* self, void* parent);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#installEventFilter)
///
/// @param self QCPColorScale*
/// @param filterObj QObject*
void q_cpcolorscale_install_event_filter(void* self, void* filterObj);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#removeEventFilter)
///
/// @param self QCPColorScale*
/// @param obj QObject*
void q_cpcolorscale_remove_event_filter(void* self, void* obj);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param method QMetaMethod*
QMetaObject__Connection* q_cpcolorscale_connect(void* sender, void* signal, void* receiver, void* method);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param self QCPColorScale*
/// @param sender QObject*
/// @param signal const char*
/// @param member const char*
QMetaObject__Connection* q_cpcolorscale_connect2(void* self, void* sender, const char* signal, const char* member);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param member QMetaMethod*
bool q_cpcolorscale_disconnect(void* sender, void* signal, void* receiver, void* member);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnect)
///
/// @param param1 QMetaObject__Connection*
bool q_cpcolorscale_disconnect2(void* param1);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dumpObjectTree)
///
/// @param self QCPColorScale*
void q_cpcolorscale_dump_object_tree(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dumpObjectInfo)
///
/// @param self QCPColorScale*
void q_cpcolorscale_dump_object_info(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setProperty)
///
/// @param self QCPColorScale*
/// @param name const char*
/// @param value QVariant*
bool q_cpcolorscale_set_property(void* self, const char* name, void* value);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#property)
///
/// @param self QCPColorScale*
/// @param name const char*
QVariant* q_cpcolorscale_property(void* self, const char* name);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dynamicPropertyNames)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPColorScale*
const char** q_cpcolorscale_dynamic_property_names(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#bindingStorage)
///
/// @param self QCPColorScale*
QBindingStorage* q_cpcolorscale_binding_storage(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#bindingStorage)
///
/// @param self QCPColorScale*
const QBindingStorage* q_cpcolorscale_binding_storage2(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPColorScale*
void q_cpcolorscale_destroyed(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPColorScale*
/// @param callback void func(QCPColorScale* self)
void q_cpcolorscale_on_destroyed(void* self, void (*callback)(void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#parent)
///
/// @param self QCPColorScale*
QObject* q_cpcolorscale_parent(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#inherits)
///
/// @param self QCPColorScale*
/// @param classname const char*
bool q_cpcolorscale_inherits(void* self, const char* classname);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#deleteLater)
///
/// @param self QCPColorScale*
void q_cpcolorscale_delete_later(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#moveToThread)
///
/// @param self QCPColorScale*
/// @param thread QThread*
/// @param param2 Disambiguated_t*
bool q_cpcolorscale_move_to_thread2(void* self, void* thread, void* param2);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#startTimer)
///
/// @param self QCPColorScale*
/// @param interval int
/// @param timerType enum Qt__TimerType
int32_t q_cpcolorscale_start_timer22(void* self, int interval, int32_t timerType);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param method QMetaMethod*
/// @param type enum Qt__ConnectionType
QMetaObject__Connection* q_cpcolorscale_connect5(void* sender, void* signal, void* receiver, void* method, int32_t type);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param self QCPColorScale*
/// @param sender QObject*
/// @param signal const char*
/// @param member const char*
/// @param type enum Qt__ConnectionType
QMetaObject__Connection* q_cpcolorscale_connect4(void* self, void* sender, const char* signal, const char* member, int32_t type);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPColorScale*
/// @param param1 QObject*
void q_cpcolorscale_destroyed1(void* self, void* param1);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPColorScale*
/// @param callback void func(QCPColorScale* self, QObject* param1)
void q_cpcolorscale_on_destroyed1(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPColorScale*
QSize* q_cpcolorscale_minimum_outer_size_hint(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPColorScale*
QSize* q_cpcolorscale_qbase_minimum_outer_size_hint(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPColorScale*
/// @param callback QSize* func()
void q_cpcolorscale_on_minimum_outer_size_hint(void* self, QSize* (*callback)());

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPColorScale*
QSize* q_cpcolorscale_maximum_outer_size_hint(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPColorScale*
QSize* q_cpcolorscale_qbase_maximum_outer_size_hint(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPColorScale*
/// @param callback QSize* func()
void q_cpcolorscale_on_maximum_outer_size_hint(void* self, QSize* (*callback)());

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPColorScale*
/// @param recursive bool
libqt_list /* of QCPLayoutElement* */ q_cpcolorscale_elements(void* self, bool recursive);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPColorScale*
/// @param recursive bool
libqt_list /* of QCPLayoutElement* */ q_cpcolorscale_qbase_elements(void* self, bool recursive);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPColorScale*
/// @param callback QCPLayoutElement** func(QCPColorScale* self, bool recursive)
void q_cpcolorscale_on_elements(void* self, QCPLayoutElement** (*callback)(void*, bool));

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPColorScale*
/// @param pos QPointF*
/// @param onlySelectable bool
/// @param details QVariant*
double q_cpcolorscale_select_test(void* self, void* pos, bool onlySelectable, void* details);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPColorScale*
/// @param pos QPointF*
/// @param onlySelectable bool
/// @param details QVariant*
double q_cpcolorscale_qbase_select_test(void* self, void* pos, bool onlySelectable, void* details);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPColorScale*
/// @param callback double func(QCPColorScale* self, QPointF* pos, bool onlySelectable, QVariant* details)
void q_cpcolorscale_on_select_test(void* self, double (*callback)(void*, void*, bool, void*));

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPColorScale*
/// @param side enum QCP__MarginSide
int32_t q_cpcolorscale_calculate_auto_margin(void* self, int32_t side);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPColorScale*
/// @param side enum QCP__MarginSide
int32_t q_cpcolorscale_qbase_calculate_auto_margin(void* self, int32_t side);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPColorScale*
/// @param callback int32_t func(QCPColorScale* self, enum QCP__MarginSide side)
void q_cpcolorscale_on_calculate_auto_margin(void* self, int32_t (*callback)(void*, int32_t));

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPColorScale*
void q_cpcolorscale_layout_changed(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPColorScale*
void q_cpcolorscale_qbase_layout_changed(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPColorScale*
/// @param callback void func()
void q_cpcolorscale_on_layout_changed(void* self, void (*callback)());

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPColorScale*
/// @param painter QCPPainter*
void q_cpcolorscale_draw(void* self, void* painter);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPColorScale*
/// @param painter QCPPainter*
void q_cpcolorscale_qbase_draw(void* self, void* painter);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPColorScale*
/// @param callback void func(QCPColorScale* self, QCPPainter* painter)
void q_cpcolorscale_on_draw(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPColorScale*
/// @param parentPlot QCustomPlot*
void q_cpcolorscale_parent_plot_initialized(void* self, void* parentPlot);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPColorScale*
/// @param parentPlot QCustomPlot*
void q_cpcolorscale_qbase_parent_plot_initialized(void* self, void* parentPlot);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPColorScale*
/// @param callback void func(QCPColorScale* self, QCustomPlot* parentPlot)
void q_cpcolorscale_on_parent_plot_initialized(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPColorScale*
///
/// @return enum QCP__Interaction
int32_t q_cpcolorscale_selection_category(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPColorScale*
///
/// @return enum QCP__Interaction
int32_t q_cpcolorscale_qbase_selection_category(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPColorScale*
/// @param callback int32_t func()
void q_cpcolorscale_on_selection_category(void* self, int32_t (*callback)());

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPColorScale*
QRect* q_cpcolorscale_clip_rect(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPColorScale*
QRect* q_cpcolorscale_qbase_clip_rect(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPColorScale*
/// @param callback QRect* func()
void q_cpcolorscale_on_clip_rect(void* self, QRect* (*callback)());

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPColorScale*
/// @param event QMouseEvent*
/// @param additive bool
/// @param details QVariant*
/// @param selectionStateChanged bool*
void q_cpcolorscale_select_event(void* self, void* event, bool additive, void* details, bool* selectionStateChanged);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPColorScale*
/// @param event QMouseEvent*
/// @param additive bool
/// @param details QVariant*
/// @param selectionStateChanged bool*
void q_cpcolorscale_qbase_select_event(void* self, void* event, bool additive, void* details, bool* selectionStateChanged);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPColorScale*
/// @param callback void func(QCPColorScale* self, QMouseEvent* event, bool additive, QVariant* details, bool* selectionStateChanged)
void q_cpcolorscale_on_select_event(void* self, void (*callback)(void*, void*, bool, void*, bool*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPColorScale*
/// @param selectionStateChanged bool*
void q_cpcolorscale_deselect_event(void* self, bool* selectionStateChanged);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPColorScale*
/// @param selectionStateChanged bool*
void q_cpcolorscale_qbase_deselect_event(void* self, bool* selectionStateChanged);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPColorScale*
/// @param callback void func(QCPColorScale* self, bool* selectionStateChanged)
void q_cpcolorscale_on_deselect_event(void* self, void (*callback)(void*, bool*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPColorScale*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cpcolorscale_mouse_double_click_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPColorScale*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cpcolorscale_qbase_mouse_double_click_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPColorScale*
/// @param callback void func(QCPColorScale* self, QMouseEvent* event, QVariant* details)
void q_cpcolorscale_on_mouse_double_click_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPColorScale*
/// @param event QEvent*
bool q_cpcolorscale_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPColorScale*
/// @param event QEvent*
bool q_cpcolorscale_qbase_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPColorScale*
/// @param callback bool func(QCPColorScale* self, QEvent* event)
void q_cpcolorscale_on_event(void* self, bool (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPColorScale*
/// @param watched QObject*
/// @param event QEvent*
bool q_cpcolorscale_event_filter(void* self, void* watched, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPColorScale*
/// @param watched QObject*
/// @param event QEvent*
bool q_cpcolorscale_qbase_event_filter(void* self, void* watched, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPColorScale*
/// @param callback bool func(QCPColorScale* self, QObject* watched, QEvent* event)
void q_cpcolorscale_on_event_filter(void* self, bool (*callback)(void*, void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPColorScale*
/// @param event QTimerEvent*
void q_cpcolorscale_timer_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPColorScale*
/// @param event QTimerEvent*
void q_cpcolorscale_qbase_timer_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPColorScale*
/// @param callback void func(QCPColorScale* self, QTimerEvent* event)
void q_cpcolorscale_on_timer_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPColorScale*
/// @param event QChildEvent*
void q_cpcolorscale_child_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPColorScale*
/// @param event QChildEvent*
void q_cpcolorscale_qbase_child_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPColorScale*
/// @param callback void func(QCPColorScale* self, QChildEvent* event)
void q_cpcolorscale_on_child_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPColorScale*
/// @param event QEvent*
void q_cpcolorscale_custom_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPColorScale*
/// @param event QEvent*
void q_cpcolorscale_qbase_custom_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPColorScale*
/// @param callback void func(QCPColorScale* self, QEvent* event)
void q_cpcolorscale_on_custom_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPColorScale*
/// @param signal QMetaMethod*
void q_cpcolorscale_connect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPColorScale*
/// @param signal QMetaMethod*
void q_cpcolorscale_qbase_connect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPColorScale*
/// @param callback void func(QCPColorScale* self, QMetaMethod* signal)
void q_cpcolorscale_on_connect_notify(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPColorScale*
/// @param signal QMetaMethod*
void q_cpcolorscale_disconnect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPColorScale*
/// @param signal QMetaMethod*
void q_cpcolorscale_qbase_disconnect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPColorScale*
/// @param callback void func(QCPColorScale* self, QMetaMethod* signal)
void q_cpcolorscale_on_disconnect_notify(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPColorScale*
/// @param parentPlot QCustomPlot*
void q_cpcolorscale_initialize_parent_plot(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPColorScale*
/// @param parentPlot QCustomPlot*
void q_cpcolorscale_qbase_initialize_parent_plot(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPColorScale*
/// @param callback void func(QCPColorScale* self, QCustomPlot* parentPlot)
void q_cpcolorscale_on_initialize_parent_plot(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPColorScale*
/// @param parentLayerable QCPLayerable*
void q_cpcolorscale_set_parent_layerable(void* self, void* parentLayerable);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPColorScale*
/// @param parentLayerable QCPLayerable*
void q_cpcolorscale_qbase_set_parent_layerable(void* self, void* parentLayerable);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPColorScale*
/// @param callback void func(QCPColorScale* self, QCPLayerable* parentLayerable)
void q_cpcolorscale_on_set_parent_layerable(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPColorScale*
/// @param layer QCPLayer*
/// @param prepend bool
bool q_cpcolorscale_move_to_layer(void* self, void* layer, bool prepend);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPColorScale*
/// @param layer QCPLayer*
/// @param prepend bool
bool q_cpcolorscale_qbase_move_to_layer(void* self, void* layer, bool prepend);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPColorScale*
/// @param callback bool func(QCPColorScale* self, QCPLayer* layer, bool prepend)
void q_cpcolorscale_on_move_to_layer(void* self, bool (*callback)(void*, void*, bool));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPColorScale*
/// @param painter QCPPainter*
/// @param localAntialiased bool
/// @param overrideElement enum QCP__AntialiasedElement
void q_cpcolorscale_apply_antialiasing_hint(void* self, void* painter, bool localAntialiased, int32_t overrideElement);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPColorScale*
/// @param painter QCPPainter*
/// @param localAntialiased bool
/// @param overrideElement enum QCP__AntialiasedElement
void q_cpcolorscale_qbase_apply_antialiasing_hint(void* self, void* painter, bool localAntialiased, int32_t overrideElement);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPColorScale*
/// @param callback void func(QCPColorScale* self, QCPPainter* painter, bool localAntialiased, enum QCP__AntialiasedElement overrideElement)
void q_cpcolorscale_on_apply_antialiasing_hint(void* self, void (*callback)(void*, void*, bool, int32_t));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPColorScale*
QObject* q_cpcolorscale_sender(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPColorScale*
QObject* q_cpcolorscale_qbase_sender(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPColorScale*
/// @param callback QObject* func()
void q_cpcolorscale_on_sender(void* self, QObject* (*callback)());

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPColorScale*
int32_t q_cpcolorscale_sender_signal_index(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPColorScale*
int32_t q_cpcolorscale_qbase_sender_signal_index(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPColorScale*
/// @param callback int32_t func()
void q_cpcolorscale_on_sender_signal_index(void* self, int32_t (*callback)());

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPColorScale*
/// @param signal const char*
int32_t q_cpcolorscale_receivers(void* self, const char* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPColorScale*
/// @param signal const char*
int32_t q_cpcolorscale_qbase_receivers(void* self, const char* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPColorScale*
/// @param callback int32_t func(QCPColorScale* self, const char* signal)
void q_cpcolorscale_on_receivers(void* self, int32_t (*callback)(void*, const char*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPColorScale*
/// @param signal QMetaMethod*
bool q_cpcolorscale_is_signal_connected(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPColorScale*
/// @param signal QMetaMethod*
bool q_cpcolorscale_qbase_is_signal_connected(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPColorScale*
/// @param callback bool func(QCPColorScale* self, QMetaMethod* signal)
void q_cpcolorscale_on_is_signal_connected(void* self, bool (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#objectNameChanged)
///
/// Wrapper to allow calling private signal
///
/// @param self QCPColorScale*
/// @param callback void func(QCPColorScale* self, const char* objectName)
void q_cpcolorscale_on_object_name_changed(void* self, void (*callback)(void*, const char*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorScale.html)
///
/// Delete this object from C++ memory.
///
/// @param self QCPColorScale*
void q_cpcolorscale_delete(void* self);

/// https://www.qcustomplot.com/documentation/classQCPGraphData.html

/// q_cpgraphdata_new constructs a new QCPGraphData object.
///
/// @param other QCPGraphData*
QCPGraphData* q_cpgraphdata_new(void* other);

/// q_cpgraphdata_new2 constructs a new QCPGraphData object and invalidates the source QCPGraphData object.
///
/// @param other QCPGraphData*
QCPGraphData* q_cpgraphdata_new2(void* other);

/// q_cpgraphdata_new3 constructs a new QCPGraphData object.
///
QCPGraphData* q_cpgraphdata_new3();

/// q_cpgraphdata_new4 constructs a new QCPGraphData object.
///
/// @param key double
/// @param value double
QCPGraphData* q_cpgraphdata_new4(double key, double value);

/// q_cpgraphdata_new5 constructs a new QCPGraphData object.
///
/// @param param1 QCPGraphData*
QCPGraphData* q_cpgraphdata_new5(void* param1);

/// q_cpgraphdata_copy_assign shallow copies `other` into `self`.
///
/// @param self QCPGraphData*
/// @param other QCPGraphData*
void q_cpgraphdata_copy_assign(void* self, void* other);

/// q_cpgraphdata_move_assign moves `other` into `self` and invalidates `other`.
///
/// @param self QCPGraphData*
/// @param other QCPGraphData*
void q_cpgraphdata_move_assign(void* self, void* other);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGraphData.html)
///
/// @param self QCPGraphData*
double q_cpgraphdata_sort_key(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGraphData.html)
///
/// @param sortKey double
QCPGraphData* q_cpgraphdata_from_sort_key(double sortKey);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGraphData.html)
///
bool q_cpgraphdata_sort_key_is_main_key();

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGraphData.html)
///
/// @param self QCPGraphData*
double q_cpgraphdata_main_key(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGraphData.html)
///
/// @param self QCPGraphData*
double q_cpgraphdata_main_value(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGraphData.html)
///
/// @param self QCPGraphData*
QCPRange* q_cpgraphdata_value_range(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGraphData.html)
///
/// @param self QCPGraphData*
double q_cpgraphdata_key(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGraphData.html)
///
/// @param self QCPGraphData*
/// @param key double
void q_cpgraphdata_set_key(void* self, double key);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGraphData.html)
///
/// @param self QCPGraphData*
double q_cpgraphdata_value(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGraphData.html)
///
/// @param self QCPGraphData*
/// @param value double
void q_cpgraphdata_set_value(void* self, double value);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGraphData.html)
///
/// Delete this object from C++ memory.
///
/// @param self QCPGraphData*
void q_cpgraphdata_delete(void* self);

/// https://www.qcustomplot.com/documentation/classQCPGraph.html

/// q_cpgraph_new constructs a new QCPGraph object.
///
/// @param keyAxis QCPAxis*
/// @param valueAxis QCPAxis*
QCPGraph* q_cpgraph_new(void* keyAxis, void* valueAxis);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#metaObject)
///
/// @param self QCPGraph*
const QMetaObject* q_cpgraph_meta_object(void* self);

/// @param self QCPGraph*
/// @param param1 const char*
void* q_cpgraph_metacast(void* self, const char* param1);

/// @param self QCPGraph*
/// @param param1 enum QMetaObject__Call
/// @param param2 int
/// @param param3 void*
int32_t q_cpgraph_metacall(void* self, int32_t param1, int param2, void* param3);

/// Allows for overriding the related default method
///
/// @param self QCPGraph*
/// @param callback int32_t func(QCPGraph* self, enum QMetaObject__Call param1, int param2, void* param3)
void q_cpgraph_on_metacall(void* self, int32_t (*callback)(void*, int32_t, int, void*));

/// Base class method implementation
///
/// @param self QCPGraph*
/// @param param1 enum QMetaObject__Call
/// @param param2 int
/// @param param3 void*
int32_t q_cpgraph_qbase_metacall(void* self, int32_t param1, int param2, void* param3);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
const char* q_cpgraph_tr(const char* s);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGraph.html)
///
/// @param self QCPGraph*
///
/// @return enum QCPGraph__LineStyle
int32_t q_cpgraph_line_style(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGraph.html)
///
/// @param self QCPGraph*
QCPScatterStyle* q_cpgraph_scatter_style(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGraph.html)
///
/// @param self QCPGraph*
int32_t q_cpgraph_scatter_skip(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGraph.html)
///
/// @param self QCPGraph*
QCPGraph* q_cpgraph_channel_fill_graph(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGraph.html)
///
/// @param self QCPGraph*
bool q_cpgraph_adaptive_sampling(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGraph.html)
///
/// @param self QCPGraph*
/// @param keys libqt_list /* of double */
/// @param values libqt_list /* of double */
void q_cpgraph_set_data2(void* self, libqt_list keys, libqt_list values);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGraph.html)
///
/// @param self QCPGraph*
/// @param ls enum QCPGraph__LineStyle
void q_cpgraph_set_line_style(void* self, int32_t ls);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGraph.html)
///
/// @param self QCPGraph*
/// @param style QCPScatterStyle*
void q_cpgraph_set_scatter_style(void* self, void* style);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGraph.html)
///
/// @param self QCPGraph*
/// @param skip int
void q_cpgraph_set_scatter_skip(void* self, int skip);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGraph.html)
///
/// @param self QCPGraph*
/// @param targetGraph QCPGraph*
void q_cpgraph_set_channel_fill_graph(void* self, void* targetGraph);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGraph.html)
///
/// @param self QCPGraph*
/// @param enabled bool
void q_cpgraph_set_adaptive_sampling(void* self, bool enabled);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGraph.html)
///
/// @param self QCPGraph*
/// @param keys libqt_list /* of double */
/// @param values libqt_list /* of double */
void q_cpgraph_add_data(void* self, libqt_list keys, libqt_list values);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGraph.html)
///
/// @param self QCPGraph*
/// @param key double
/// @param value double
void q_cpgraph_add_data2(void* self, double key, double value);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGraph.html)
///
/// @param self QCPGraph*
/// @param pos QPointF*
/// @param onlySelectable bool
/// @param details QVariant*
double q_cpgraph_select_test(void* self, void* pos, bool onlySelectable, void* details);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGraph.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPGraph*
/// @param callback double func(QCPGraph* self, QPointF* pos, bool onlySelectable, QVariant* details)
void q_cpgraph_on_select_test(void* self, double (*callback)(void*, void*, bool, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGraph.html)
///
/// Base class method implementation
///
/// @param self QCPGraph*
/// @param pos QPointF*
/// @param onlySelectable bool
/// @param details QVariant*
double q_cpgraph_qbase_select_test(void* self, void* pos, bool onlySelectable, void* details);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGraph.html)
///
/// @param self QCPGraph*
/// @param foundRange bool*
/// @param inSignDomain enum QCP__SignDomain
QCPRange* q_cpgraph_get_key_range(void* self, bool* foundRange, int32_t inSignDomain);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGraph.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPGraph*
/// @param callback QCPRange* func(QCPGraph* self, bool* foundRange, enum QCP__SignDomain inSignDomain)
void q_cpgraph_on_get_key_range(void* self, QCPRange* (*callback)(void*, bool*, int32_t));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGraph.html)
///
/// Base class method implementation
///
/// @param self QCPGraph*
/// @param foundRange bool*
/// @param inSignDomain enum QCP__SignDomain
QCPRange* q_cpgraph_qbase_get_key_range(void* self, bool* foundRange, int32_t inSignDomain);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGraph.html)
///
/// @param self QCPGraph*
/// @param foundRange bool*
/// @param inSignDomain enum QCP__SignDomain
/// @param inKeyRange QCPRange*
QCPRange* q_cpgraph_get_value_range(void* self, bool* foundRange, int32_t inSignDomain, void* inKeyRange);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGraph.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPGraph*
/// @param callback QCPRange* func(QCPGraph* self, bool* foundRange, enum QCP__SignDomain inSignDomain, QCPRange* inKeyRange)
void q_cpgraph_on_get_value_range(void* self, QCPRange* (*callback)(void*, bool*, int32_t, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGraph.html)
///
/// Base class method implementation
///
/// @param self QCPGraph*
/// @param foundRange bool*
/// @param inSignDomain enum QCP__SignDomain
/// @param inKeyRange QCPRange*
QCPRange* q_cpgraph_qbase_get_value_range(void* self, bool* foundRange, int32_t inSignDomain, void* inKeyRange);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGraph.html)
///
/// @param self QCPGraph*
/// @param painter QCPPainter*
void q_cpgraph_draw(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGraph.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPGraph*
/// @param callback void func(QCPGraph* self, QCPPainter* painter)
void q_cpgraph_on_draw(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGraph.html)
///
/// Base class method implementation
///
/// @param self QCPGraph*
/// @param painter QCPPainter*
void q_cpgraph_qbase_draw(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGraph.html)
///
/// @param self QCPGraph*
/// @param painter QCPPainter*
/// @param rect QRectF*
void q_cpgraph_draw_legend_icon(void* self, void* painter, void* rect);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGraph.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPGraph*
/// @param callback void func(QCPGraph* self, QCPPainter* painter, QRectF* rect)
void q_cpgraph_on_draw_legend_icon(void* self, void (*callback)(void*, void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGraph.html)
///
/// Base class method implementation
///
/// @param self QCPGraph*
/// @param painter QCPPainter*
/// @param rect QRectF*
void q_cpgraph_qbase_draw_legend_icon(void* self, void* painter, void* rect);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGraph.html)
///
/// @param self QCPGraph*
/// @param painter QCPPainter*
/// @param lines libqt_list /* of QPointF* */
void q_cpgraph_draw_fill(void* self, void* painter, libqt_list lines);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGraph.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPGraph*
/// @param callback void func(QCPGraph* self, QCPPainter* painter, QPointF** lines)
void q_cpgraph_on_draw_fill(void* self, void (*callback)(void*, void*, QPointF**));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGraph.html)
///
/// Base class method implementation
///
/// @param self QCPGraph*
/// @param painter QCPPainter*
/// @param lines libqt_list /* of QPointF* */
void q_cpgraph_qbase_draw_fill(void* self, void* painter, libqt_list lines);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGraph.html)
///
/// @param self QCPGraph*
/// @param painter QCPPainter*
/// @param scatters libqt_list /* of QPointF* */
/// @param style QCPScatterStyle*
void q_cpgraph_draw_scatter_plot(void* self, void* painter, libqt_list scatters, void* style);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGraph.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPGraph*
/// @param callback void func(QCPGraph* self, QCPPainter* painter, QPointF** scatters, QCPScatterStyle* style)
void q_cpgraph_on_draw_scatter_plot(void* self, void (*callback)(void*, void*, QPointF**, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGraph.html)
///
/// Base class method implementation
///
/// @param self QCPGraph*
/// @param painter QCPPainter*
/// @param scatters libqt_list /* of QPointF* */
/// @param style QCPScatterStyle*
void q_cpgraph_qbase_draw_scatter_plot(void* self, void* painter, libqt_list scatters, void* style);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGraph.html)
///
/// @param self QCPGraph*
/// @param painter QCPPainter*
/// @param lines libqt_list /* of QPointF* */
void q_cpgraph_draw_line_plot(void* self, void* painter, libqt_list lines);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGraph.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPGraph*
/// @param callback void func(QCPGraph* self, QCPPainter* painter, QPointF** lines)
void q_cpgraph_on_draw_line_plot(void* self, void (*callback)(void*, void*, QPointF**));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGraph.html)
///
/// Base class method implementation
///
/// @param self QCPGraph*
/// @param painter QCPPainter*
/// @param lines libqt_list /* of QPointF* */
void q_cpgraph_qbase_draw_line_plot(void* self, void* painter, libqt_list lines);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGraph.html)
///
/// @param self QCPGraph*
/// @param painter QCPPainter*
/// @param lines libqt_list /* of QPointF* */
void q_cpgraph_draw_impulse_plot(void* self, void* painter, libqt_list lines);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGraph.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPGraph*
/// @param callback void func(QCPGraph* self, QCPPainter* painter, QPointF** lines)
void q_cpgraph_on_draw_impulse_plot(void* self, void (*callback)(void*, void*, QPointF**));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGraph.html)
///
/// Base class method implementation
///
/// @param self QCPGraph*
/// @param painter QCPPainter*
/// @param lines libqt_list /* of QPointF* */
void q_cpgraph_qbase_draw_impulse_plot(void* self, void* painter, libqt_list lines);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGraph.html)
///
/// @param self QCPGraph*
/// @param lines libqt_list /* of QPointF* */
/// @param dataRange QCPDataRange*
void q_cpgraph_get_lines(void* self, libqt_list lines, void* dataRange);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGraph.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPGraph*
/// @param callback void func(QCPGraph* self, QPointF** lines, QCPDataRange* dataRange)
void q_cpgraph_on_get_lines(void* self, void (*callback)(void*, QPointF**, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGraph.html)
///
/// Base class method implementation
///
/// @param self QCPGraph*
/// @param lines libqt_list /* of QPointF* */
/// @param dataRange QCPDataRange*
void q_cpgraph_qbase_get_lines(void* self, libqt_list lines, void* dataRange);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGraph.html)
///
/// @param self QCPGraph*
/// @param scatters libqt_list /* of QPointF* */
/// @param dataRange QCPDataRange*
void q_cpgraph_get_scatters(void* self, libqt_list scatters, void* dataRange);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGraph.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPGraph*
/// @param callback void func(QCPGraph* self, QPointF** scatters, QCPDataRange* dataRange)
void q_cpgraph_on_get_scatters(void* self, void (*callback)(void*, QPointF**, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGraph.html)
///
/// Base class method implementation
///
/// @param self QCPGraph*
/// @param scatters libqt_list /* of QPointF* */
/// @param dataRange QCPDataRange*
void q_cpgraph_qbase_get_scatters(void* self, libqt_list scatters, void* dataRange);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGraph.html)
///
/// @param self QCPGraph*
/// @param data libqt_list /* of QCPGraphData* */
libqt_list /* of QPointF* */ q_cpgraph_data_to_lines(void* self, libqt_list data);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGraph.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPGraph*
/// @param callback QPointF** func(QCPGraph* self, QCPGraphData** data)
void q_cpgraph_on_data_to_lines(void* self, QPointF** (*callback)(void*, QCPGraphData**));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGraph.html)
///
/// Base class method implementation
///
/// @param self QCPGraph*
/// @param data libqt_list /* of QCPGraphData* */
libqt_list /* of QPointF* */ q_cpgraph_qbase_data_to_lines(void* self, libqt_list data);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGraph.html)
///
/// @param self QCPGraph*
/// @param data libqt_list /* of QCPGraphData* */
libqt_list /* of QPointF* */ q_cpgraph_data_to_step_left_lines(void* self, libqt_list data);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGraph.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPGraph*
/// @param callback QPointF** func(QCPGraph* self, QCPGraphData** data)
void q_cpgraph_on_data_to_step_left_lines(void* self, QPointF** (*callback)(void*, QCPGraphData**));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGraph.html)
///
/// Base class method implementation
///
/// @param self QCPGraph*
/// @param data libqt_list /* of QCPGraphData* */
libqt_list /* of QPointF* */ q_cpgraph_qbase_data_to_step_left_lines(void* self, libqt_list data);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGraph.html)
///
/// @param self QCPGraph*
/// @param data libqt_list /* of QCPGraphData* */
libqt_list /* of QPointF* */ q_cpgraph_data_to_step_right_lines(void* self, libqt_list data);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGraph.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPGraph*
/// @param callback QPointF** func(QCPGraph* self, QCPGraphData** data)
void q_cpgraph_on_data_to_step_right_lines(void* self, QPointF** (*callback)(void*, QCPGraphData**));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGraph.html)
///
/// Base class method implementation
///
/// @param self QCPGraph*
/// @param data libqt_list /* of QCPGraphData* */
libqt_list /* of QPointF* */ q_cpgraph_qbase_data_to_step_right_lines(void* self, libqt_list data);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGraph.html)
///
/// @param self QCPGraph*
/// @param data libqt_list /* of QCPGraphData* */
libqt_list /* of QPointF* */ q_cpgraph_data_to_step_center_lines(void* self, libqt_list data);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGraph.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPGraph*
/// @param callback QPointF** func(QCPGraph* self, QCPGraphData** data)
void q_cpgraph_on_data_to_step_center_lines(void* self, QPointF** (*callback)(void*, QCPGraphData**));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGraph.html)
///
/// Base class method implementation
///
/// @param self QCPGraph*
/// @param data libqt_list /* of QCPGraphData* */
libqt_list /* of QPointF* */ q_cpgraph_qbase_data_to_step_center_lines(void* self, libqt_list data);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGraph.html)
///
/// @param self QCPGraph*
/// @param data libqt_list /* of QCPGraphData* */
libqt_list /* of QPointF* */ q_cpgraph_data_to_impulse_lines(void* self, libqt_list data);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGraph.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPGraph*
/// @param callback QPointF** func(QCPGraph* self, QCPGraphData** data)
void q_cpgraph_on_data_to_impulse_lines(void* self, QPointF** (*callback)(void*, QCPGraphData**));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGraph.html)
///
/// Base class method implementation
///
/// @param self QCPGraph*
/// @param data libqt_list /* of QCPGraphData* */
libqt_list /* of QPointF* */ q_cpgraph_qbase_data_to_impulse_lines(void* self, libqt_list data);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGraph.html)
///
/// @param self QCPGraph*
/// @param lineData libqt_list /* of QPointF* */
/// @param keyOrientation enum Qt__Orientation
libqt_list /* of QCPDataRange* */ q_cpgraph_get_non_nan_segments(void* self, libqt_list lineData, int32_t keyOrientation);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGraph.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPGraph*
/// @param callback QCPDataRange** func(QCPGraph* self, QPointF** lineData, enum Qt__Orientation keyOrientation)
void q_cpgraph_on_get_non_nan_segments(void* self, QCPDataRange** (*callback)(void*, QPointF**, int32_t));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGraph.html)
///
/// Base class method implementation
///
/// @param self QCPGraph*
/// @param lineData libqt_list /* of QPointF* */
/// @param keyOrientation enum Qt__Orientation
libqt_list /* of QCPDataRange* */ q_cpgraph_qbase_get_non_nan_segments(void* self, libqt_list lineData, int32_t keyOrientation);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGraph.html)
///
/// @param self QCPGraph*
/// @param thisSegments libqt_list /* of QCPDataRange* */
/// @param thisData libqt_list /* of QPointF* */
/// @param otherSegments libqt_list /* of QCPDataRange* */
/// @param otherData libqt_list /* of QPointF* */
libqt_list /* of libqt_pair  tuple of QCPDataRange* and QCPDataRange*  */ q_cpgraph_get_overlapping_segments(void* self, libqt_list thisSegments, libqt_list thisData, libqt_list otherSegments, libqt_list otherData);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGraph.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPGraph*
/// @param callback libqt_list /* of libqt_pair  tuple of QCPDataRange* and QCPDataRange*  */ func(QCPGraph* self, QCPDataRange** thisSegments, QPointF** thisData, QCPDataRange** otherSegments, QPointF** otherData)
void q_cpgraph_on_get_overlapping_segments(void* self, libqt_list /* of libqt_pair  tuple of QCPDataRange* and QCPDataRange*  */ (*callback)(void*, QCPDataRange**, QPointF**, QCPDataRange**, QPointF**));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGraph.html)
///
/// Base class method implementation
///
/// @param self QCPGraph*
/// @param thisSegments libqt_list /* of QCPDataRange* */
/// @param thisData libqt_list /* of QPointF* */
/// @param otherSegments libqt_list /* of QCPDataRange* */
/// @param otherData libqt_list /* of QPointF* */
libqt_list /* of libqt_pair  tuple of QCPDataRange* and QCPDataRange*  */ q_cpgraph_qbase_get_overlapping_segments(void* self, libqt_list thisSegments, libqt_list thisData, libqt_list otherSegments, libqt_list otherData);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGraph.html)
///
/// @param self QCPGraph*
/// @param aLower double
/// @param aUpper double
/// @param bLower double
/// @param bUpper double
/// @param bPrecedence int*
bool q_cpgraph_segments_intersect(void* self, double aLower, double aUpper, double bLower, double bUpper, int* bPrecedence);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGraph.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPGraph*
/// @param callback bool func(QCPGraph* self, double aLower, double aUpper, double bLower, double bUpper, int* bPrecedence)
void q_cpgraph_on_segments_intersect(void* self, bool (*callback)(void*, double, double, double, double, int*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGraph.html)
///
/// Base class method implementation
///
/// @param self QCPGraph*
/// @param aLower double
/// @param aUpper double
/// @param bLower double
/// @param bUpper double
/// @param bPrecedence int*
bool q_cpgraph_qbase_segments_intersect(void* self, double aLower, double aUpper, double bLower, double bUpper, int* bPrecedence);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGraph.html)
///
/// @param self QCPGraph*
/// @param matchingDataPoint QPointF*
QPointF* q_cpgraph_get_fill_base_point(void* self, void* matchingDataPoint);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGraph.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPGraph*
/// @param callback QPointF* func(QCPGraph* self, QPointF* matchingDataPoint)
void q_cpgraph_on_get_fill_base_point(void* self, QPointF* (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGraph.html)
///
/// Base class method implementation
///
/// @param self QCPGraph*
/// @param matchingDataPoint QPointF*
QPointF* q_cpgraph_qbase_get_fill_base_point(void* self, void* matchingDataPoint);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGraph.html)
///
/// @param self QCPGraph*
/// @param data libqt_list /* of QPointF* */
/// @param x double
int32_t q_cpgraph_find_index_below_x(void* self, libqt_list data, double x);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGraph.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPGraph*
/// @param callback int32_t func(QCPGraph* self, QPointF** data, double x)
void q_cpgraph_on_find_index_below_x(void* self, int32_t (*callback)(void*, QPointF**, double));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGraph.html)
///
/// Base class method implementation
///
/// @param self QCPGraph*
/// @param data libqt_list /* of QPointF* */
/// @param x double
int32_t q_cpgraph_qbase_find_index_below_x(void* self, libqt_list data, double x);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGraph.html)
///
/// @param self QCPGraph*
/// @param data libqt_list /* of QPointF* */
/// @param x double
int32_t q_cpgraph_find_index_above_x(void* self, libqt_list data, double x);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGraph.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPGraph*
/// @param callback int32_t func(QCPGraph* self, QPointF** data, double x)
void q_cpgraph_on_find_index_above_x(void* self, int32_t (*callback)(void*, QPointF**, double));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGraph.html)
///
/// Base class method implementation
///
/// @param self QCPGraph*
/// @param data libqt_list /* of QPointF* */
/// @param x double
int32_t q_cpgraph_qbase_find_index_above_x(void* self, libqt_list data, double x);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGraph.html)
///
/// @param self QCPGraph*
/// @param data libqt_list /* of QPointF* */
/// @param y double
int32_t q_cpgraph_find_index_below_y(void* self, libqt_list data, double y);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGraph.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPGraph*
/// @param callback int32_t func(QCPGraph* self, QPointF** data, double y)
void q_cpgraph_on_find_index_below_y(void* self, int32_t (*callback)(void*, QPointF**, double));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGraph.html)
///
/// Base class method implementation
///
/// @param self QCPGraph*
/// @param data libqt_list /* of QPointF* */
/// @param y double
int32_t q_cpgraph_qbase_find_index_below_y(void* self, libqt_list data, double y);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGraph.html)
///
/// @param self QCPGraph*
/// @param data libqt_list /* of QPointF* */
/// @param y double
int32_t q_cpgraph_find_index_above_y(void* self, libqt_list data, double y);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGraph.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPGraph*
/// @param callback int32_t func(QCPGraph* self, QPointF** data, double y)
void q_cpgraph_on_find_index_above_y(void* self, int32_t (*callback)(void*, QPointF**, double));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGraph.html)
///
/// Base class method implementation
///
/// @param self QCPGraph*
/// @param data libqt_list /* of QPointF* */
/// @param y double
int32_t q_cpgraph_qbase_find_index_above_y(void* self, libqt_list data, double y);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
/// @param c const char*
const char* q_cpgraph_tr2(const char* s, const char* c);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
/// @param c const char*
/// @param n int
const char* q_cpgraph_tr3(const char* s, const char* c, int n);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGraph.html)
///
/// @param self QCPGraph*
/// @param keys libqt_list /* of double */
/// @param values libqt_list /* of double */
/// @param alreadySorted bool
void q_cpgraph_set_data3(void* self, libqt_list keys, libqt_list values, bool alreadySorted);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGraph.html)
///
/// @param self QCPGraph*
/// @param keys libqt_list /* of double */
/// @param values libqt_list /* of double */
/// @param alreadySorted bool
void q_cpgraph_add_data3(void* self, libqt_list keys, libqt_list values, bool alreadySorted);

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// @param self QCPGraph*
/// @param param1 QCPPlottableInterface1D*
void q_cpgraph_operator_assign(void* self, void* param1);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPGraph*
const char* q_cpgraph_name(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPGraph*
bool q_cpgraph_antialiased_fill(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPGraph*
bool q_cpgraph_antialiased_scatters(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPGraph*
QPen* q_cpgraph_pen(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPGraph*
QBrush* q_cpgraph_brush(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPGraph*
QCPAxis* q_cpgraph_key_axis(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPGraph*
QCPAxis* q_cpgraph_value_axis(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPGraph*
///
/// @return enum QCP__SelectionType
int32_t q_cpgraph_selectable(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPGraph*
bool q_cpgraph_selected(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPGraph*
QCPDataSelection* q_cpgraph_selection(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPGraph*
QCPSelectionDecorator* q_cpgraph_selection_decorator(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPGraph*
/// @param name const char*
void q_cpgraph_set_name(void* self, const char* name);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPGraph*
/// @param enabled bool
void q_cpgraph_set_antialiased_fill(void* self, bool enabled);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPGraph*
/// @param enabled bool
void q_cpgraph_set_antialiased_scatters(void* self, bool enabled);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPGraph*
/// @param pen QPen*
void q_cpgraph_set_pen(void* self, void* pen);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPGraph*
/// @param brush QBrush*
void q_cpgraph_set_brush(void* self, void* brush);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPGraph*
/// @param axis QCPAxis*
void q_cpgraph_set_key_axis(void* self, void* axis);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPGraph*
/// @param axis QCPAxis*
void q_cpgraph_set_value_axis(void* self, void* axis);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPGraph*
/// @param selectable enum QCP__SelectionType
void q_cpgraph_set_selectable(void* self, int32_t selectable);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPGraph*
/// @param selection QCPDataSelection*
void q_cpgraph_set_selection(void* self, void* selection);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPGraph*
/// @param decorator QCPSelectionDecorator*
void q_cpgraph_set_selection_decorator(void* self, void* decorator);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPGraph*
/// @param key double
/// @param value double
/// @param x double*
/// @param y double*
void q_cpgraph_coords_to_pixels(void* self, double key, double value, double* x, double* y);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPGraph*
/// @param key double
/// @param value double
const QPointF* q_cpgraph_coords_to_pixels2(void* self, double key, double value);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPGraph*
/// @param x double
/// @param y double
/// @param key double*
/// @param value double*
void q_cpgraph_pixels_to_coords(void* self, double x, double y, double* key, double* value);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPGraph*
/// @param pixelPos QPointF*
/// @param key double*
/// @param value double*
void q_cpgraph_pixels_to_coords2(void* self, void* pixelPos, double* key, double* value);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPGraph*
void q_cpgraph_rescale_axes(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPGraph*
void q_cpgraph_rescale_key_axis(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPGraph*
void q_cpgraph_rescale_value_axis(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPGraph*
/// @param legend QCPLegend*
bool q_cpgraph_add_to_legend(void* self, void* legend);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPGraph*
bool q_cpgraph_add_to_legend2(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPGraph*
/// @param legend QCPLegend*
bool q_cpgraph_remove_from_legend(void* self, void* legend);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPGraph*
bool q_cpgraph_remove_from_legend2(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPGraph*
/// @param selected bool
void q_cpgraph_selection_changed(void* self, bool selected);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPGraph*
/// @param selection QCPDataSelection*
void q_cpgraph_selection_changed2(void* self, void* selection);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPGraph*
/// @param selectable enum QCP__SelectionType
void q_cpgraph_selectable_changed(void* self, int32_t selectable);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPGraph*
/// @param onlyEnlarge bool
void q_cpgraph_rescale_axes1(void* self, bool onlyEnlarge);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPGraph*
/// @param onlyEnlarge bool
void q_cpgraph_rescale_key_axis1(void* self, bool onlyEnlarge);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPGraph*
/// @param onlyEnlarge bool
void q_cpgraph_rescale_value_axis1(void* self, bool onlyEnlarge);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPGraph*
/// @param onlyEnlarge bool
/// @param inKeyRange bool
void q_cpgraph_rescale_value_axis2(void* self, bool onlyEnlarge, bool inKeyRange);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPGraph*
bool q_cpgraph_visible(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPGraph*
QCustomPlot* q_cpgraph_parent_plot(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPGraph*
QCPLayerable* q_cpgraph_parent_layerable(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPGraph*
QCPLayer* q_cpgraph_layer(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPGraph*
bool q_cpgraph_antialiased(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPGraph*
/// @param on bool
void q_cpgraph_set_visible(void* self, bool on);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPGraph*
/// @param layer QCPLayer*
bool q_cpgraph_set_layer(void* self, void* layer);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPGraph*
/// @param layerName const char*
bool q_cpgraph_set_layer2(void* self, const char* layerName);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPGraph*
/// @param enabled bool
void q_cpgraph_set_antialiased(void* self, bool enabled);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPGraph*
bool q_cpgraph_real_visibility(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPGraph*
/// @param newLayer QCPLayer*
void q_cpgraph_layer_changed(void* self, void* newLayer);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPGraph*
/// @param callback void func(QCPGraph* self, QCPLayer* newLayer)
void q_cpgraph_on_layer_changed(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#objectName)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPGraph*
const char* q_cpgraph_object_name(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setObjectName)
///
/// @param self QCPGraph*
/// @param name char*
void q_cpgraph_set_object_name(void* self, char* name);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isWidgetType)
///
/// @param self QCPGraph*
bool q_cpgraph_is_widget_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isWindowType)
///
/// @param self QCPGraph*
bool q_cpgraph_is_window_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isQuickItemType)
///
/// @param self QCPGraph*
bool q_cpgraph_is_quick_item_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#signalsBlocked)
///
/// @param self QCPGraph*
bool q_cpgraph_signals_blocked(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#blockSignals)
///
/// @param self QCPGraph*
/// @param b bool
bool q_cpgraph_block_signals(void* self, bool b);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#thread)
///
/// @param self QCPGraph*
QThread* q_cpgraph_thread(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#moveToThread)
///
/// @param self QCPGraph*
/// @param thread QThread*
bool q_cpgraph_move_to_thread(void* self, void* thread);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#startTimer)
///
/// @param self QCPGraph*
/// @param interval int
int32_t q_cpgraph_start_timer(void* self, int interval);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#killTimer)
///
/// @param self QCPGraph*
/// @param id int
void q_cpgraph_kill_timer(void* self, int id);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#killTimer)
///
/// @param self QCPGraph*
/// @param id enum Qt__TimerId
void q_cpgraph_kill_timer2(void* self, int32_t id);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#children)
///
/// @param self QCPGraph*
libqt_list /* of QObject* */ q_cpgraph_children(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setParent)
///
/// @param self QCPGraph*
/// @param parent QObject*
void q_cpgraph_set_parent(void* self, void* parent);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#installEventFilter)
///
/// @param self QCPGraph*
/// @param filterObj QObject*
void q_cpgraph_install_event_filter(void* self, void* filterObj);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#removeEventFilter)
///
/// @param self QCPGraph*
/// @param obj QObject*
void q_cpgraph_remove_event_filter(void* self, void* obj);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param method QMetaMethod*
QMetaObject__Connection* q_cpgraph_connect(void* sender, void* signal, void* receiver, void* method);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param self QCPGraph*
/// @param sender QObject*
/// @param signal const char*
/// @param member const char*
QMetaObject__Connection* q_cpgraph_connect2(void* self, void* sender, const char* signal, const char* member);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param member QMetaMethod*
bool q_cpgraph_disconnect(void* sender, void* signal, void* receiver, void* member);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnect)
///
/// @param param1 QMetaObject__Connection*
bool q_cpgraph_disconnect2(void* param1);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dumpObjectTree)
///
/// @param self QCPGraph*
void q_cpgraph_dump_object_tree(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dumpObjectInfo)
///
/// @param self QCPGraph*
void q_cpgraph_dump_object_info(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setProperty)
///
/// @param self QCPGraph*
/// @param name const char*
/// @param value QVariant*
bool q_cpgraph_set_property(void* self, const char* name, void* value);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#property)
///
/// @param self QCPGraph*
/// @param name const char*
QVariant* q_cpgraph_property(void* self, const char* name);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dynamicPropertyNames)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPGraph*
const char** q_cpgraph_dynamic_property_names(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#bindingStorage)
///
/// @param self QCPGraph*
QBindingStorage* q_cpgraph_binding_storage(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#bindingStorage)
///
/// @param self QCPGraph*
const QBindingStorage* q_cpgraph_binding_storage2(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPGraph*
void q_cpgraph_destroyed(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPGraph*
/// @param callback void func(QCPGraph* self)
void q_cpgraph_on_destroyed(void* self, void (*callback)(void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#parent)
///
/// @param self QCPGraph*
QObject* q_cpgraph_parent(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#inherits)
///
/// @param self QCPGraph*
/// @param classname const char*
bool q_cpgraph_inherits(void* self, const char* classname);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#deleteLater)
///
/// @param self QCPGraph*
void q_cpgraph_delete_later(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#moveToThread)
///
/// @param self QCPGraph*
/// @param thread QThread*
/// @param param2 Disambiguated_t*
bool q_cpgraph_move_to_thread2(void* self, void* thread, void* param2);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#startTimer)
///
/// @param self QCPGraph*
/// @param interval int
/// @param timerType enum Qt__TimerType
int32_t q_cpgraph_start_timer22(void* self, int interval, int32_t timerType);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param method QMetaMethod*
/// @param type enum Qt__ConnectionType
QMetaObject__Connection* q_cpgraph_connect5(void* sender, void* signal, void* receiver, void* method, int32_t type);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param self QCPGraph*
/// @param sender QObject*
/// @param signal const char*
/// @param member const char*
/// @param type enum Qt__ConnectionType
QMetaObject__Connection* q_cpgraph_connect4(void* self, void* sender, const char* signal, const char* member, int32_t type);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPGraph*
/// @param param1 QObject*
void q_cpgraph_destroyed1(void* self, void* param1);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPGraph*
/// @param callback void func(QCPGraph* self, QObject* param1)
void q_cpgraph_on_destroyed1(void* self, void (*callback)(void*, void*));

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPGraph*
int32_t q_cpgraph_data_count(void* self);

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPGraph*
int32_t q_cpgraph_qbase_data_count(void* self);

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPGraph*
/// @param callback int32_t func()
void q_cpgraph_on_data_count(void* self, int32_t (*callback)());

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPGraph*
/// @param index int
double q_cpgraph_data_main_key(void* self, int index);

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPGraph*
/// @param index int
double q_cpgraph_qbase_data_main_key(void* self, int index);

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPGraph*
/// @param callback double func(QCPGraph* self, int index)
void q_cpgraph_on_data_main_key(void* self, double (*callback)(void*, int));

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPGraph*
/// @param index int
double q_cpgraph_data_sort_key(void* self, int index);

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPGraph*
/// @param index int
double q_cpgraph_qbase_data_sort_key(void* self, int index);

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPGraph*
/// @param callback double func(QCPGraph* self, int index)
void q_cpgraph_on_data_sort_key(void* self, double (*callback)(void*, int));

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPGraph*
/// @param index int
double q_cpgraph_data_main_value(void* self, int index);

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPGraph*
/// @param index int
double q_cpgraph_qbase_data_main_value(void* self, int index);

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPGraph*
/// @param callback double func(QCPGraph* self, int index)
void q_cpgraph_on_data_main_value(void* self, double (*callback)(void*, int));

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPGraph*
/// @param index int
QCPRange* q_cpgraph_data_value_range(void* self, int index);

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPGraph*
/// @param index int
QCPRange* q_cpgraph_qbase_data_value_range(void* self, int index);

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPGraph*
/// @param callback QCPRange* func(QCPGraph* self, int index)
void q_cpgraph_on_data_value_range(void* self, QCPRange* (*callback)(void*, int));

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPGraph*
/// @param index int
QPointF* q_cpgraph_data_pixel_position(void* self, int index);

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPGraph*
/// @param index int
QPointF* q_cpgraph_qbase_data_pixel_position(void* self, int index);

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPGraph*
/// @param callback QPointF* func(QCPGraph* self, int index)
void q_cpgraph_on_data_pixel_position(void* self, QPointF* (*callback)(void*, int));

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPGraph*
bool q_cpgraph_sort_key_is_main_key(void* self);

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPGraph*
bool q_cpgraph_qbase_sort_key_is_main_key(void* self);

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPGraph*
/// @param callback bool func()
void q_cpgraph_on_sort_key_is_main_key(void* self, bool (*callback)());

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPGraph*
/// @param rect QRectF*
/// @param onlySelectable bool
QCPDataSelection* q_cpgraph_select_test_rect(void* self, void* rect, bool onlySelectable);

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPGraph*
/// @param rect QRectF*
/// @param onlySelectable bool
QCPDataSelection* q_cpgraph_qbase_select_test_rect(void* self, void* rect, bool onlySelectable);

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPGraph*
/// @param callback QCPDataSelection* func(QCPGraph* self, QRectF* rect, bool onlySelectable)
void q_cpgraph_on_select_test_rect(void* self, QCPDataSelection* (*callback)(void*, void*, bool));

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPGraph*
/// @param sortKey double
/// @param expandedRange bool
int32_t q_cpgraph_find_begin(void* self, double sortKey, bool expandedRange);

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPGraph*
/// @param sortKey double
/// @param expandedRange bool
int32_t q_cpgraph_qbase_find_begin(void* self, double sortKey, bool expandedRange);

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPGraph*
/// @param callback int32_t func(QCPGraph* self, double sortKey, bool expandedRange)
void q_cpgraph_on_find_begin(void* self, int32_t (*callback)(void*, double, bool));

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPGraph*
/// @param sortKey double
/// @param expandedRange bool
int32_t q_cpgraph_find_end(void* self, double sortKey, bool expandedRange);

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPGraph*
/// @param sortKey double
/// @param expandedRange bool
int32_t q_cpgraph_qbase_find_end(void* self, double sortKey, bool expandedRange);

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPGraph*
/// @param callback int32_t func(QCPGraph* self, double sortKey, bool expandedRange)
void q_cpgraph_on_find_end(void* self, int32_t (*callback)(void*, double, bool));

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPGraph*
QCPPlottableInterface1D* q_cpgraph_interface1_d(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPGraph*
QCPPlottableInterface1D* q_cpgraph_qbase_interface1_d(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPGraph*
/// @param callback QCPPlottableInterface1D* func()
void q_cpgraph_on_interface1_d(void* self, QCPPlottableInterface1D* (*callback)());

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPGraph*
QRect* q_cpgraph_clip_rect(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPGraph*
QRect* q_cpgraph_qbase_clip_rect(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPGraph*
/// @param callback QRect* func()
void q_cpgraph_on_clip_rect(void* self, QRect* (*callback)());

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPGraph*
///
/// @return enum QCP__Interaction
int32_t q_cpgraph_selection_category(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPGraph*
///
/// @return enum QCP__Interaction
int32_t q_cpgraph_qbase_selection_category(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPGraph*
/// @param callback int32_t func()
void q_cpgraph_on_selection_category(void* self, int32_t (*callback)());

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPGraph*
/// @param painter QCPPainter*
void q_cpgraph_apply_default_antialiasing_hint(void* self, void* painter);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPGraph*
/// @param painter QCPPainter*
void q_cpgraph_qbase_apply_default_antialiasing_hint(void* self, void* painter);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPGraph*
/// @param callback void func(QCPGraph* self, QCPPainter* painter)
void q_cpgraph_on_apply_default_antialiasing_hint(void* self, void (*callback)(void*, void*));

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPGraph*
/// @param event QMouseEvent*
/// @param additive bool
/// @param details QVariant*
/// @param selectionStateChanged bool*
void q_cpgraph_select_event(void* self, void* event, bool additive, void* details, bool* selectionStateChanged);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPGraph*
/// @param event QMouseEvent*
/// @param additive bool
/// @param details QVariant*
/// @param selectionStateChanged bool*
void q_cpgraph_qbase_select_event(void* self, void* event, bool additive, void* details, bool* selectionStateChanged);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPGraph*
/// @param callback void func(QCPGraph* self, QMouseEvent* event, bool additive, QVariant* details, bool* selectionStateChanged)
void q_cpgraph_on_select_event(void* self, void (*callback)(void*, void*, bool, void*, bool*));

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPGraph*
/// @param selectionStateChanged bool*
void q_cpgraph_deselect_event(void* self, bool* selectionStateChanged);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPGraph*
/// @param selectionStateChanged bool*
void q_cpgraph_qbase_deselect_event(void* self, bool* selectionStateChanged);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPGraph*
/// @param callback void func(QCPGraph* self, bool* selectionStateChanged)
void q_cpgraph_on_deselect_event(void* self, void (*callback)(void*, bool*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPGraph*
/// @param parentPlot QCustomPlot*
void q_cpgraph_parent_plot_initialized(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPGraph*
/// @param parentPlot QCustomPlot*
void q_cpgraph_qbase_parent_plot_initialized(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPGraph*
/// @param callback void func(QCPGraph* self, QCustomPlot* parentPlot)
void q_cpgraph_on_parent_plot_initialized(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPGraph*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cpgraph_mouse_press_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPGraph*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cpgraph_qbase_mouse_press_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPGraph*
/// @param callback void func(QCPGraph* self, QMouseEvent* event, QVariant* details)
void q_cpgraph_on_mouse_press_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPGraph*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cpgraph_mouse_move_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPGraph*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cpgraph_qbase_mouse_move_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPGraph*
/// @param callback void func(QCPGraph* self, QMouseEvent* event, QPointF* startPos)
void q_cpgraph_on_mouse_move_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPGraph*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cpgraph_mouse_release_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPGraph*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cpgraph_qbase_mouse_release_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPGraph*
/// @param callback void func(QCPGraph* self, QMouseEvent* event, QPointF* startPos)
void q_cpgraph_on_mouse_release_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPGraph*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cpgraph_mouse_double_click_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPGraph*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cpgraph_qbase_mouse_double_click_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPGraph*
/// @param callback void func(QCPGraph* self, QMouseEvent* event, QVariant* details)
void q_cpgraph_on_mouse_double_click_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPGraph*
/// @param event QWheelEvent*
void q_cpgraph_wheel_event(void* self, void* event);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPGraph*
/// @param event QWheelEvent*
void q_cpgraph_qbase_wheel_event(void* self, void* event);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPGraph*
/// @param callback void func(QCPGraph* self, QWheelEvent* event)
void q_cpgraph_on_wheel_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPGraph*
/// @param event QEvent*
bool q_cpgraph_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPGraph*
/// @param event QEvent*
bool q_cpgraph_qbase_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPGraph*
/// @param callback bool func(QCPGraph* self, QEvent* event)
void q_cpgraph_on_event(void* self, bool (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPGraph*
/// @param watched QObject*
/// @param event QEvent*
bool q_cpgraph_event_filter(void* self, void* watched, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPGraph*
/// @param watched QObject*
/// @param event QEvent*
bool q_cpgraph_qbase_event_filter(void* self, void* watched, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPGraph*
/// @param callback bool func(QCPGraph* self, QObject* watched, QEvent* event)
void q_cpgraph_on_event_filter(void* self, bool (*callback)(void*, void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPGraph*
/// @param event QTimerEvent*
void q_cpgraph_timer_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPGraph*
/// @param event QTimerEvent*
void q_cpgraph_qbase_timer_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPGraph*
/// @param callback void func(QCPGraph* self, QTimerEvent* event)
void q_cpgraph_on_timer_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPGraph*
/// @param event QChildEvent*
void q_cpgraph_child_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPGraph*
/// @param event QChildEvent*
void q_cpgraph_qbase_child_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPGraph*
/// @param callback void func(QCPGraph* self, QChildEvent* event)
void q_cpgraph_on_child_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPGraph*
/// @param event QEvent*
void q_cpgraph_custom_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPGraph*
/// @param event QEvent*
void q_cpgraph_qbase_custom_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPGraph*
/// @param callback void func(QCPGraph* self, QEvent* event)
void q_cpgraph_on_custom_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPGraph*
/// @param signal QMetaMethod*
void q_cpgraph_connect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPGraph*
/// @param signal QMetaMethod*
void q_cpgraph_qbase_connect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPGraph*
/// @param callback void func(QCPGraph* self, QMetaMethod* signal)
void q_cpgraph_on_connect_notify(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPGraph*
/// @param signal QMetaMethod*
void q_cpgraph_disconnect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPGraph*
/// @param signal QMetaMethod*
void q_cpgraph_qbase_disconnect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPGraph*
/// @param callback void func(QCPGraph* self, QMetaMethod* signal)
void q_cpgraph_on_disconnect_notify(void* self, void (*callback)(void*, void*));

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPGraph*
/// @param painter QCPPainter*
void q_cpgraph_apply_fill_antialiasing_hint(void* self, void* painter);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPGraph*
/// @param painter QCPPainter*
void q_cpgraph_qbase_apply_fill_antialiasing_hint(void* self, void* painter);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPGraph*
/// @param callback void func(QCPGraph* self, QCPPainter* painter)
void q_cpgraph_on_apply_fill_antialiasing_hint(void* self, void (*callback)(void*, void*));

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPGraph*
/// @param painter QCPPainter*
void q_cpgraph_apply_scatters_antialiasing_hint(void* self, void* painter);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPGraph*
/// @param painter QCPPainter*
void q_cpgraph_qbase_apply_scatters_antialiasing_hint(void* self, void* painter);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPGraph*
/// @param callback void func(QCPGraph* self, QCPPainter* painter)
void q_cpgraph_on_apply_scatters_antialiasing_hint(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPGraph*
/// @param parentPlot QCustomPlot*
void q_cpgraph_initialize_parent_plot(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPGraph*
/// @param parentPlot QCustomPlot*
void q_cpgraph_qbase_initialize_parent_plot(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPGraph*
/// @param callback void func(QCPGraph* self, QCustomPlot* parentPlot)
void q_cpgraph_on_initialize_parent_plot(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPGraph*
/// @param parentLayerable QCPLayerable*
void q_cpgraph_set_parent_layerable(void* self, void* parentLayerable);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPGraph*
/// @param parentLayerable QCPLayerable*
void q_cpgraph_qbase_set_parent_layerable(void* self, void* parentLayerable);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPGraph*
/// @param callback void func(QCPGraph* self, QCPLayerable* parentLayerable)
void q_cpgraph_on_set_parent_layerable(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPGraph*
/// @param layer QCPLayer*
/// @param prepend bool
bool q_cpgraph_move_to_layer(void* self, void* layer, bool prepend);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPGraph*
/// @param layer QCPLayer*
/// @param prepend bool
bool q_cpgraph_qbase_move_to_layer(void* self, void* layer, bool prepend);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPGraph*
/// @param callback bool func(QCPGraph* self, QCPLayer* layer, bool prepend)
void q_cpgraph_on_move_to_layer(void* self, bool (*callback)(void*, void*, bool));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPGraph*
/// @param painter QCPPainter*
/// @param localAntialiased bool
/// @param overrideElement enum QCP__AntialiasedElement
void q_cpgraph_apply_antialiasing_hint(void* self, void* painter, bool localAntialiased, int32_t overrideElement);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPGraph*
/// @param painter QCPPainter*
/// @param localAntialiased bool
/// @param overrideElement enum QCP__AntialiasedElement
void q_cpgraph_qbase_apply_antialiasing_hint(void* self, void* painter, bool localAntialiased, int32_t overrideElement);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPGraph*
/// @param callback void func(QCPGraph* self, QCPPainter* painter, bool localAntialiased, enum QCP__AntialiasedElement overrideElement)
void q_cpgraph_on_apply_antialiasing_hint(void* self, void (*callback)(void*, void*, bool, int32_t));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPGraph*
QObject* q_cpgraph_sender(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPGraph*
QObject* q_cpgraph_qbase_sender(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPGraph*
/// @param callback QObject* func()
void q_cpgraph_on_sender(void* self, QObject* (*callback)());

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPGraph*
int32_t q_cpgraph_sender_signal_index(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPGraph*
int32_t q_cpgraph_qbase_sender_signal_index(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPGraph*
/// @param callback int32_t func()
void q_cpgraph_on_sender_signal_index(void* self, int32_t (*callback)());

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPGraph*
/// @param signal const char*
int32_t q_cpgraph_receivers(void* self, const char* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPGraph*
/// @param signal const char*
int32_t q_cpgraph_qbase_receivers(void* self, const char* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPGraph*
/// @param callback int32_t func(QCPGraph* self, const char* signal)
void q_cpgraph_on_receivers(void* self, int32_t (*callback)(void*, const char*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPGraph*
/// @param signal QMetaMethod*
bool q_cpgraph_is_signal_connected(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPGraph*
/// @param signal QMetaMethod*
bool q_cpgraph_qbase_is_signal_connected(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPGraph*
/// @param callback bool func(QCPGraph* self, QMetaMethod* signal)
void q_cpgraph_on_is_signal_connected(void* self, bool (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#objectNameChanged)
///
/// Wrapper to allow calling private signal
///
/// @param self QCPGraph*
/// @param callback void func(QCPGraph* self, const char* objectName)
void q_cpgraph_on_object_name_changed(void* self, void (*callback)(void*, const char*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPGraph.html)
///
/// Delete this object from C++ memory.
///
/// @param self QCPGraph*
void q_cpgraph_delete(void* self);

/// https://www.qcustomplot.com/documentation/classQCPCurveData.html

/// q_cpcurvedata_new constructs a new QCPCurveData object.
///
/// @param other QCPCurveData*
QCPCurveData* q_cpcurvedata_new(void* other);

/// q_cpcurvedata_new2 constructs a new QCPCurveData object and invalidates the source QCPCurveData object.
///
/// @param other QCPCurveData*
QCPCurveData* q_cpcurvedata_new2(void* other);

/// q_cpcurvedata_new3 constructs a new QCPCurveData object.
///
QCPCurveData* q_cpcurvedata_new3();

/// q_cpcurvedata_new4 constructs a new QCPCurveData object.
///
/// @param t double
/// @param key double
/// @param value double
QCPCurveData* q_cpcurvedata_new4(double t, double key, double value);

/// q_cpcurvedata_new5 constructs a new QCPCurveData object.
///
/// @param param1 QCPCurveData*
QCPCurveData* q_cpcurvedata_new5(void* param1);

/// q_cpcurvedata_copy_assign shallow copies `other` into `self`.
///
/// @param self QCPCurveData*
/// @param other QCPCurveData*
void q_cpcurvedata_copy_assign(void* self, void* other);

/// q_cpcurvedata_move_assign moves `other` into `self` and invalidates `other`.
///
/// @param self QCPCurveData*
/// @param other QCPCurveData*
void q_cpcurvedata_move_assign(void* self, void* other);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPCurveData.html)
///
/// @param self QCPCurveData*
double q_cpcurvedata_sort_key(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPCurveData.html)
///
/// @param sortKey double
QCPCurveData* q_cpcurvedata_from_sort_key(double sortKey);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPCurveData.html)
///
bool q_cpcurvedata_sort_key_is_main_key();

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPCurveData.html)
///
/// @param self QCPCurveData*
double q_cpcurvedata_main_key(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPCurveData.html)
///
/// @param self QCPCurveData*
double q_cpcurvedata_main_value(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPCurveData.html)
///
/// @param self QCPCurveData*
QCPRange* q_cpcurvedata_value_range(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPCurveData.html)
///
/// @param self QCPCurveData*
double q_cpcurvedata_t(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPCurveData.html)
///
/// @param self QCPCurveData*
/// @param t double
void q_cpcurvedata_set_t(void* self, double t);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPCurveData.html)
///
/// @param self QCPCurveData*
double q_cpcurvedata_key(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPCurveData.html)
///
/// @param self QCPCurveData*
/// @param key double
void q_cpcurvedata_set_key(void* self, double key);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPCurveData.html)
///
/// @param self QCPCurveData*
double q_cpcurvedata_value(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPCurveData.html)
///
/// @param self QCPCurveData*
/// @param value double
void q_cpcurvedata_set_value(void* self, double value);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPCurveData.html)
///
/// Delete this object from C++ memory.
///
/// @param self QCPCurveData*
void q_cpcurvedata_delete(void* self);

/// https://www.qcustomplot.com/documentation/classQCPCurve.html

/// q_cpcurve_new constructs a new QCPCurve object.
///
/// @param keyAxis QCPAxis*
/// @param valueAxis QCPAxis*
QCPCurve* q_cpcurve_new(void* keyAxis, void* valueAxis);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#metaObject)
///
/// @param self QCPCurve*
const QMetaObject* q_cpcurve_meta_object(void* self);

/// @param self QCPCurve*
/// @param param1 const char*
void* q_cpcurve_metacast(void* self, const char* param1);

/// @param self QCPCurve*
/// @param param1 enum QMetaObject__Call
/// @param param2 int
/// @param param3 void*
int32_t q_cpcurve_metacall(void* self, int32_t param1, int param2, void* param3);

/// Allows for overriding the related default method
///
/// @param self QCPCurve*
/// @param callback int32_t func(QCPCurve* self, enum QMetaObject__Call param1, int param2, void* param3)
void q_cpcurve_on_metacall(void* self, int32_t (*callback)(void*, int32_t, int, void*));

/// Base class method implementation
///
/// @param self QCPCurve*
/// @param param1 enum QMetaObject__Call
/// @param param2 int
/// @param param3 void*
int32_t q_cpcurve_qbase_metacall(void* self, int32_t param1, int param2, void* param3);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
const char* q_cpcurve_tr(const char* s);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPCurve.html)
///
/// @param self QCPCurve*
QCPScatterStyle* q_cpcurve_scatter_style(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPCurve.html)
///
/// @param self QCPCurve*
int32_t q_cpcurve_scatter_skip(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPCurve.html)
///
/// @param self QCPCurve*
///
/// @return enum QCPCurve__LineStyle
int32_t q_cpcurve_line_style(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPCurve.html)
///
/// @param self QCPCurve*
/// @param t libqt_list /* of double */
/// @param keys libqt_list /* of double */
/// @param values libqt_list /* of double */
void q_cpcurve_set_data2(void* self, libqt_list t, libqt_list keys, libqt_list values);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPCurve.html)
///
/// @param self QCPCurve*
/// @param keys libqt_list /* of double */
/// @param values libqt_list /* of double */
void q_cpcurve_set_data3(void* self, libqt_list keys, libqt_list values);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPCurve.html)
///
/// @param self QCPCurve*
/// @param style QCPScatterStyle*
void q_cpcurve_set_scatter_style(void* self, void* style);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPCurve.html)
///
/// @param self QCPCurve*
/// @param skip int
void q_cpcurve_set_scatter_skip(void* self, int skip);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPCurve.html)
///
/// @param self QCPCurve*
/// @param style enum QCPCurve__LineStyle
void q_cpcurve_set_line_style(void* self, int32_t style);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPCurve.html)
///
/// @param self QCPCurve*
/// @param t libqt_list /* of double */
/// @param keys libqt_list /* of double */
/// @param values libqt_list /* of double */
void q_cpcurve_add_data(void* self, libqt_list t, libqt_list keys, libqt_list values);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPCurve.html)
///
/// @param self QCPCurve*
/// @param keys libqt_list /* of double */
/// @param values libqt_list /* of double */
void q_cpcurve_add_data2(void* self, libqt_list keys, libqt_list values);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPCurve.html)
///
/// @param self QCPCurve*
/// @param t double
/// @param key double
/// @param value double
void q_cpcurve_add_data3(void* self, double t, double key, double value);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPCurve.html)
///
/// @param self QCPCurve*
/// @param key double
/// @param value double
void q_cpcurve_add_data4(void* self, double key, double value);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPCurve.html)
///
/// @param self QCPCurve*
/// @param pos QPointF*
/// @param onlySelectable bool
/// @param details QVariant*
double q_cpcurve_select_test(void* self, void* pos, bool onlySelectable, void* details);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPCurve.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPCurve*
/// @param callback double func(QCPCurve* self, QPointF* pos, bool onlySelectable, QVariant* details)
void q_cpcurve_on_select_test(void* self, double (*callback)(void*, void*, bool, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPCurve.html)
///
/// Base class method implementation
///
/// @param self QCPCurve*
/// @param pos QPointF*
/// @param onlySelectable bool
/// @param details QVariant*
double q_cpcurve_qbase_select_test(void* self, void* pos, bool onlySelectable, void* details);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPCurve.html)
///
/// @param self QCPCurve*
/// @param foundRange bool*
/// @param inSignDomain enum QCP__SignDomain
QCPRange* q_cpcurve_get_key_range(void* self, bool* foundRange, int32_t inSignDomain);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPCurve.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPCurve*
/// @param callback QCPRange* func(QCPCurve* self, bool* foundRange, enum QCP__SignDomain inSignDomain)
void q_cpcurve_on_get_key_range(void* self, QCPRange* (*callback)(void*, bool*, int32_t));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPCurve.html)
///
/// Base class method implementation
///
/// @param self QCPCurve*
/// @param foundRange bool*
/// @param inSignDomain enum QCP__SignDomain
QCPRange* q_cpcurve_qbase_get_key_range(void* self, bool* foundRange, int32_t inSignDomain);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPCurve.html)
///
/// @param self QCPCurve*
/// @param foundRange bool*
/// @param inSignDomain enum QCP__SignDomain
/// @param inKeyRange QCPRange*
QCPRange* q_cpcurve_get_value_range(void* self, bool* foundRange, int32_t inSignDomain, void* inKeyRange);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPCurve.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPCurve*
/// @param callback QCPRange* func(QCPCurve* self, bool* foundRange, enum QCP__SignDomain inSignDomain, QCPRange* inKeyRange)
void q_cpcurve_on_get_value_range(void* self, QCPRange* (*callback)(void*, bool*, int32_t, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPCurve.html)
///
/// Base class method implementation
///
/// @param self QCPCurve*
/// @param foundRange bool*
/// @param inSignDomain enum QCP__SignDomain
/// @param inKeyRange QCPRange*
QCPRange* q_cpcurve_qbase_get_value_range(void* self, bool* foundRange, int32_t inSignDomain, void* inKeyRange);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPCurve.html)
///
/// @param self QCPCurve*
/// @param painter QCPPainter*
void q_cpcurve_draw(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPCurve.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPCurve*
/// @param callback void func(QCPCurve* self, QCPPainter* painter)
void q_cpcurve_on_draw(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPCurve.html)
///
/// Base class method implementation
///
/// @param self QCPCurve*
/// @param painter QCPPainter*
void q_cpcurve_qbase_draw(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPCurve.html)
///
/// @param self QCPCurve*
/// @param painter QCPPainter*
/// @param rect QRectF*
void q_cpcurve_draw_legend_icon(void* self, void* painter, void* rect);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPCurve.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPCurve*
/// @param callback void func(QCPCurve* self, QCPPainter* painter, QRectF* rect)
void q_cpcurve_on_draw_legend_icon(void* self, void (*callback)(void*, void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPCurve.html)
///
/// Base class method implementation
///
/// @param self QCPCurve*
/// @param painter QCPPainter*
/// @param rect QRectF*
void q_cpcurve_qbase_draw_legend_icon(void* self, void* painter, void* rect);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPCurve.html)
///
/// @param self QCPCurve*
/// @param painter QCPPainter*
/// @param lines libqt_list /* of QPointF* */
void q_cpcurve_draw_curve_line(void* self, void* painter, libqt_list lines);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPCurve.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPCurve*
/// @param callback void func(QCPCurve* self, QCPPainter* painter, QPointF** lines)
void q_cpcurve_on_draw_curve_line(void* self, void (*callback)(void*, void*, QPointF**));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPCurve.html)
///
/// Base class method implementation
///
/// @param self QCPCurve*
/// @param painter QCPPainter*
/// @param lines libqt_list /* of QPointF* */
void q_cpcurve_qbase_draw_curve_line(void* self, void* painter, libqt_list lines);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPCurve.html)
///
/// @param self QCPCurve*
/// @param painter QCPPainter*
/// @param points libqt_list /* of QPointF* */
/// @param style QCPScatterStyle*
void q_cpcurve_draw_scatter_plot(void* self, void* painter, libqt_list points, void* style);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPCurve.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPCurve*
/// @param callback void func(QCPCurve* self, QCPPainter* painter, QPointF** points, QCPScatterStyle* style)
void q_cpcurve_on_draw_scatter_plot(void* self, void (*callback)(void*, void*, QPointF**, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPCurve.html)
///
/// Base class method implementation
///
/// @param self QCPCurve*
/// @param painter QCPPainter*
/// @param points libqt_list /* of QPointF* */
/// @param style QCPScatterStyle*
void q_cpcurve_qbase_draw_scatter_plot(void* self, void* painter, libqt_list points, void* style);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPCurve.html)
///
/// @param self QCPCurve*
/// @param lines libqt_list /* of QPointF* */
/// @param dataRange QCPDataRange*
/// @param penWidth double
void q_cpcurve_get_curve_lines(void* self, libqt_list lines, void* dataRange, double penWidth);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPCurve.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPCurve*
/// @param callback void func(QCPCurve* self, QPointF** lines, QCPDataRange* dataRange, double penWidth)
void q_cpcurve_on_get_curve_lines(void* self, void (*callback)(void*, QPointF**, void*, double));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPCurve.html)
///
/// Base class method implementation
///
/// @param self QCPCurve*
/// @param lines libqt_list /* of QPointF* */
/// @param dataRange QCPDataRange*
/// @param penWidth double
void q_cpcurve_qbase_get_curve_lines(void* self, libqt_list lines, void* dataRange, double penWidth);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPCurve.html)
///
/// @param self QCPCurve*
/// @param scatters libqt_list /* of QPointF* */
/// @param dataRange QCPDataRange*
/// @param scatterWidth double
void q_cpcurve_get_scatters(void* self, libqt_list scatters, void* dataRange, double scatterWidth);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPCurve.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPCurve*
/// @param callback void func(QCPCurve* self, QPointF** scatters, QCPDataRange* dataRange, double scatterWidth)
void q_cpcurve_on_get_scatters(void* self, void (*callback)(void*, QPointF**, void*, double));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPCurve.html)
///
/// Base class method implementation
///
/// @param self QCPCurve*
/// @param scatters libqt_list /* of QPointF* */
/// @param dataRange QCPDataRange*
/// @param scatterWidth double
void q_cpcurve_qbase_get_scatters(void* self, libqt_list scatters, void* dataRange, double scatterWidth);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPCurve.html)
///
/// @param self QCPCurve*
/// @param key double
/// @param value double
/// @param keyMin double
/// @param valueMax double
/// @param keyMax double
/// @param valueMin double
int32_t q_cpcurve_get_region(void* self, double key, double value, double keyMin, double valueMax, double keyMax, double valueMin);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPCurve.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPCurve*
/// @param callback int32_t func(QCPCurve* self, double key, double value, double keyMin, double valueMax, double keyMax, double valueMin)
void q_cpcurve_on_get_region(void* self, int32_t (*callback)(void*, double, double, double, double, double, double));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPCurve.html)
///
/// Base class method implementation
///
/// @param self QCPCurve*
/// @param key double
/// @param value double
/// @param keyMin double
/// @param valueMax double
/// @param keyMax double
/// @param valueMin double
int32_t q_cpcurve_qbase_get_region(void* self, double key, double value, double keyMin, double valueMax, double keyMax, double valueMin);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPCurve.html)
///
/// @param self QCPCurve*
/// @param otherRegion int
/// @param otherKey double
/// @param otherValue double
/// @param key double
/// @param value double
/// @param keyMin double
/// @param valueMax double
/// @param keyMax double
/// @param valueMin double
QPointF* q_cpcurve_get_optimized_point(void* self, int otherRegion, double otherKey, double otherValue, double key, double value, double keyMin, double valueMax, double keyMax, double valueMin);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPCurve.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPCurve*
/// @param callback QPointF* func(QCPCurve* self, int otherRegion, double otherKey, double otherValue, double key, double value, double keyMin, double valueMax, double keyMax, double valueMin)
void q_cpcurve_on_get_optimized_point(void* self, QPointF* (*callback)(void*, int, double, double, double, double, double, double, double, double));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPCurve.html)
///
/// Base class method implementation
///
/// @param self QCPCurve*
/// @param otherRegion int
/// @param otherKey double
/// @param otherValue double
/// @param key double
/// @param value double
/// @param keyMin double
/// @param valueMax double
/// @param keyMax double
/// @param valueMin double
QPointF* q_cpcurve_qbase_get_optimized_point(void* self, int otherRegion, double otherKey, double otherValue, double key, double value, double keyMin, double valueMax, double keyMax, double valueMin);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPCurve.html)
///
/// @param self QCPCurve*
/// @param prevRegion int
/// @param currentRegion int
/// @param prevKey double
/// @param prevValue double
/// @param key double
/// @param value double
/// @param keyMin double
/// @param valueMax double
/// @param keyMax double
/// @param valueMin double
libqt_list /* of QPointF* */ q_cpcurve_get_optimized_corner_points(void* self, int prevRegion, int currentRegion, double prevKey, double prevValue, double key, double value, double keyMin, double valueMax, double keyMax, double valueMin);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPCurve.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPCurve*
/// @param callback QPointF** func(QCPCurve* self, int prevRegion, int currentRegion, double prevKey, double prevValue, double key, double value, double keyMin, double valueMax, double keyMax, double valueMin)
void q_cpcurve_on_get_optimized_corner_points(void* self, QPointF** (*callback)(void*, int, int, double, double, double, double, double, double, double, double));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPCurve.html)
///
/// Base class method implementation
///
/// @param self QCPCurve*
/// @param prevRegion int
/// @param currentRegion int
/// @param prevKey double
/// @param prevValue double
/// @param key double
/// @param value double
/// @param keyMin double
/// @param valueMax double
/// @param keyMax double
/// @param valueMin double
libqt_list /* of QPointF* */ q_cpcurve_qbase_get_optimized_corner_points(void* self, int prevRegion, int currentRegion, double prevKey, double prevValue, double key, double value, double keyMin, double valueMax, double keyMax, double valueMin);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPCurve.html)
///
/// @param self QCPCurve*
/// @param prevRegion int
/// @param currentRegion int
bool q_cpcurve_may_traverse(void* self, int prevRegion, int currentRegion);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPCurve.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPCurve*
/// @param callback bool func(QCPCurve* self, int prevRegion, int currentRegion)
void q_cpcurve_on_may_traverse(void* self, bool (*callback)(void*, int, int));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPCurve.html)
///
/// Base class method implementation
///
/// @param self QCPCurve*
/// @param prevRegion int
/// @param currentRegion int
bool q_cpcurve_qbase_may_traverse(void* self, int prevRegion, int currentRegion);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPCurve.html)
///
/// @param self QCPCurve*
/// @param prevKey double
/// @param prevValue double
/// @param key double
/// @param value double
/// @param keyMin double
/// @param valueMax double
/// @param keyMax double
/// @param valueMin double
/// @param crossA QPointF*
/// @param crossB QPointF*
bool q_cpcurve_get_traverse(void* self, double prevKey, double prevValue, double key, double value, double keyMin, double valueMax, double keyMax, double valueMin, void* crossA, void* crossB);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPCurve.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPCurve*
/// @param callback bool func(QCPCurve* self, double prevKey, double prevValue, double key, double value, double keyMin, double valueMax, double keyMax, double valueMin, QPointF* crossA, QPointF* crossB)
void q_cpcurve_on_get_traverse(void* self, bool (*callback)(void*, double, double, double, double, double, double, double, double, void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPCurve.html)
///
/// Base class method implementation
///
/// @param self QCPCurve*
/// @param prevKey double
/// @param prevValue double
/// @param key double
/// @param value double
/// @param keyMin double
/// @param valueMax double
/// @param keyMax double
/// @param valueMin double
/// @param crossA QPointF*
/// @param crossB QPointF*
bool q_cpcurve_qbase_get_traverse(void* self, double prevKey, double prevValue, double key, double value, double keyMin, double valueMax, double keyMax, double valueMin, void* crossA, void* crossB);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPCurve.html)
///
/// @param self QCPCurve*
/// @param prevRegion int
/// @param currentRegion int
/// @param keyMin double
/// @param valueMax double
/// @param keyMax double
/// @param valueMin double
/// @param beforeTraverse libqt_list /* of QPointF* */
/// @param afterTraverse libqt_list /* of QPointF* */
void q_cpcurve_get_traverse_corner_points(void* self, int prevRegion, int currentRegion, double keyMin, double valueMax, double keyMax, double valueMin, libqt_list beforeTraverse, libqt_list afterTraverse);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPCurve.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPCurve*
/// @param callback void func(QCPCurve* self, int prevRegion, int currentRegion, double keyMin, double valueMax, double keyMax, double valueMin, QPointF** beforeTraverse, QPointF** afterTraverse)
void q_cpcurve_on_get_traverse_corner_points(void* self, void (*callback)(void*, int, int, double, double, double, double, QPointF**, QPointF**));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPCurve.html)
///
/// Base class method implementation
///
/// @param self QCPCurve*
/// @param prevRegion int
/// @param currentRegion int
/// @param keyMin double
/// @param valueMax double
/// @param keyMax double
/// @param valueMin double
/// @param beforeTraverse libqt_list /* of QPointF* */
/// @param afterTraverse libqt_list /* of QPointF* */
void q_cpcurve_qbase_get_traverse_corner_points(void* self, int prevRegion, int currentRegion, double keyMin, double valueMax, double keyMax, double valueMin, libqt_list beforeTraverse, libqt_list afterTraverse);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
/// @param c const char*
const char* q_cpcurve_tr2(const char* s, const char* c);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
/// @param c const char*
/// @param n int
const char* q_cpcurve_tr3(const char* s, const char* c, int n);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPCurve.html)
///
/// @param self QCPCurve*
/// @param t libqt_list /* of double */
/// @param keys libqt_list /* of double */
/// @param values libqt_list /* of double */
/// @param alreadySorted bool
void q_cpcurve_set_data4(void* self, libqt_list t, libqt_list keys, libqt_list values, bool alreadySorted);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPCurve.html)
///
/// @param self QCPCurve*
/// @param t libqt_list /* of double */
/// @param keys libqt_list /* of double */
/// @param values libqt_list /* of double */
/// @param alreadySorted bool
void q_cpcurve_add_data42(void* self, libqt_list t, libqt_list keys, libqt_list values, bool alreadySorted);

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// @param self QCPCurve*
/// @param param1 QCPPlottableInterface1D*
void q_cpcurve_operator_assign(void* self, void* param1);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPCurve*
const char* q_cpcurve_name(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPCurve*
bool q_cpcurve_antialiased_fill(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPCurve*
bool q_cpcurve_antialiased_scatters(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPCurve*
QPen* q_cpcurve_pen(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPCurve*
QBrush* q_cpcurve_brush(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPCurve*
QCPAxis* q_cpcurve_key_axis(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPCurve*
QCPAxis* q_cpcurve_value_axis(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPCurve*
///
/// @return enum QCP__SelectionType
int32_t q_cpcurve_selectable(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPCurve*
bool q_cpcurve_selected(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPCurve*
QCPDataSelection* q_cpcurve_selection(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPCurve*
QCPSelectionDecorator* q_cpcurve_selection_decorator(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPCurve*
/// @param name const char*
void q_cpcurve_set_name(void* self, const char* name);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPCurve*
/// @param enabled bool
void q_cpcurve_set_antialiased_fill(void* self, bool enabled);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPCurve*
/// @param enabled bool
void q_cpcurve_set_antialiased_scatters(void* self, bool enabled);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPCurve*
/// @param pen QPen*
void q_cpcurve_set_pen(void* self, void* pen);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPCurve*
/// @param brush QBrush*
void q_cpcurve_set_brush(void* self, void* brush);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPCurve*
/// @param axis QCPAxis*
void q_cpcurve_set_key_axis(void* self, void* axis);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPCurve*
/// @param axis QCPAxis*
void q_cpcurve_set_value_axis(void* self, void* axis);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPCurve*
/// @param selectable enum QCP__SelectionType
void q_cpcurve_set_selectable(void* self, int32_t selectable);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPCurve*
/// @param selection QCPDataSelection*
void q_cpcurve_set_selection(void* self, void* selection);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPCurve*
/// @param decorator QCPSelectionDecorator*
void q_cpcurve_set_selection_decorator(void* self, void* decorator);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPCurve*
/// @param key double
/// @param value double
/// @param x double*
/// @param y double*
void q_cpcurve_coords_to_pixels(void* self, double key, double value, double* x, double* y);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPCurve*
/// @param key double
/// @param value double
const QPointF* q_cpcurve_coords_to_pixels2(void* self, double key, double value);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPCurve*
/// @param x double
/// @param y double
/// @param key double*
/// @param value double*
void q_cpcurve_pixels_to_coords(void* self, double x, double y, double* key, double* value);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPCurve*
/// @param pixelPos QPointF*
/// @param key double*
/// @param value double*
void q_cpcurve_pixels_to_coords2(void* self, void* pixelPos, double* key, double* value);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPCurve*
void q_cpcurve_rescale_axes(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPCurve*
void q_cpcurve_rescale_key_axis(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPCurve*
void q_cpcurve_rescale_value_axis(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPCurve*
/// @param legend QCPLegend*
bool q_cpcurve_add_to_legend(void* self, void* legend);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPCurve*
bool q_cpcurve_add_to_legend2(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPCurve*
/// @param legend QCPLegend*
bool q_cpcurve_remove_from_legend(void* self, void* legend);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPCurve*
bool q_cpcurve_remove_from_legend2(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPCurve*
/// @param selected bool
void q_cpcurve_selection_changed(void* self, bool selected);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPCurve*
/// @param selection QCPDataSelection*
void q_cpcurve_selection_changed2(void* self, void* selection);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPCurve*
/// @param selectable enum QCP__SelectionType
void q_cpcurve_selectable_changed(void* self, int32_t selectable);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPCurve*
/// @param onlyEnlarge bool
void q_cpcurve_rescale_axes1(void* self, bool onlyEnlarge);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPCurve*
/// @param onlyEnlarge bool
void q_cpcurve_rescale_key_axis1(void* self, bool onlyEnlarge);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPCurve*
/// @param onlyEnlarge bool
void q_cpcurve_rescale_value_axis1(void* self, bool onlyEnlarge);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPCurve*
/// @param onlyEnlarge bool
/// @param inKeyRange bool
void q_cpcurve_rescale_value_axis2(void* self, bool onlyEnlarge, bool inKeyRange);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPCurve*
bool q_cpcurve_visible(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPCurve*
QCustomPlot* q_cpcurve_parent_plot(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPCurve*
QCPLayerable* q_cpcurve_parent_layerable(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPCurve*
QCPLayer* q_cpcurve_layer(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPCurve*
bool q_cpcurve_antialiased(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPCurve*
/// @param on bool
void q_cpcurve_set_visible(void* self, bool on);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPCurve*
/// @param layer QCPLayer*
bool q_cpcurve_set_layer(void* self, void* layer);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPCurve*
/// @param layerName const char*
bool q_cpcurve_set_layer2(void* self, const char* layerName);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPCurve*
/// @param enabled bool
void q_cpcurve_set_antialiased(void* self, bool enabled);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPCurve*
bool q_cpcurve_real_visibility(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPCurve*
/// @param newLayer QCPLayer*
void q_cpcurve_layer_changed(void* self, void* newLayer);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPCurve*
/// @param callback void func(QCPCurve* self, QCPLayer* newLayer)
void q_cpcurve_on_layer_changed(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#objectName)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPCurve*
const char* q_cpcurve_object_name(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setObjectName)
///
/// @param self QCPCurve*
/// @param name char*
void q_cpcurve_set_object_name(void* self, char* name);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isWidgetType)
///
/// @param self QCPCurve*
bool q_cpcurve_is_widget_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isWindowType)
///
/// @param self QCPCurve*
bool q_cpcurve_is_window_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isQuickItemType)
///
/// @param self QCPCurve*
bool q_cpcurve_is_quick_item_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#signalsBlocked)
///
/// @param self QCPCurve*
bool q_cpcurve_signals_blocked(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#blockSignals)
///
/// @param self QCPCurve*
/// @param b bool
bool q_cpcurve_block_signals(void* self, bool b);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#thread)
///
/// @param self QCPCurve*
QThread* q_cpcurve_thread(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#moveToThread)
///
/// @param self QCPCurve*
/// @param thread QThread*
bool q_cpcurve_move_to_thread(void* self, void* thread);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#startTimer)
///
/// @param self QCPCurve*
/// @param interval int
int32_t q_cpcurve_start_timer(void* self, int interval);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#killTimer)
///
/// @param self QCPCurve*
/// @param id int
void q_cpcurve_kill_timer(void* self, int id);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#killTimer)
///
/// @param self QCPCurve*
/// @param id enum Qt__TimerId
void q_cpcurve_kill_timer2(void* self, int32_t id);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#children)
///
/// @param self QCPCurve*
libqt_list /* of QObject* */ q_cpcurve_children(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setParent)
///
/// @param self QCPCurve*
/// @param parent QObject*
void q_cpcurve_set_parent(void* self, void* parent);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#installEventFilter)
///
/// @param self QCPCurve*
/// @param filterObj QObject*
void q_cpcurve_install_event_filter(void* self, void* filterObj);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#removeEventFilter)
///
/// @param self QCPCurve*
/// @param obj QObject*
void q_cpcurve_remove_event_filter(void* self, void* obj);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param method QMetaMethod*
QMetaObject__Connection* q_cpcurve_connect(void* sender, void* signal, void* receiver, void* method);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param self QCPCurve*
/// @param sender QObject*
/// @param signal const char*
/// @param member const char*
QMetaObject__Connection* q_cpcurve_connect2(void* self, void* sender, const char* signal, const char* member);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param member QMetaMethod*
bool q_cpcurve_disconnect(void* sender, void* signal, void* receiver, void* member);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnect)
///
/// @param param1 QMetaObject__Connection*
bool q_cpcurve_disconnect2(void* param1);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dumpObjectTree)
///
/// @param self QCPCurve*
void q_cpcurve_dump_object_tree(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dumpObjectInfo)
///
/// @param self QCPCurve*
void q_cpcurve_dump_object_info(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setProperty)
///
/// @param self QCPCurve*
/// @param name const char*
/// @param value QVariant*
bool q_cpcurve_set_property(void* self, const char* name, void* value);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#property)
///
/// @param self QCPCurve*
/// @param name const char*
QVariant* q_cpcurve_property(void* self, const char* name);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dynamicPropertyNames)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPCurve*
const char** q_cpcurve_dynamic_property_names(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#bindingStorage)
///
/// @param self QCPCurve*
QBindingStorage* q_cpcurve_binding_storage(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#bindingStorage)
///
/// @param self QCPCurve*
const QBindingStorage* q_cpcurve_binding_storage2(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPCurve*
void q_cpcurve_destroyed(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPCurve*
/// @param callback void func(QCPCurve* self)
void q_cpcurve_on_destroyed(void* self, void (*callback)(void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#parent)
///
/// @param self QCPCurve*
QObject* q_cpcurve_parent(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#inherits)
///
/// @param self QCPCurve*
/// @param classname const char*
bool q_cpcurve_inherits(void* self, const char* classname);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#deleteLater)
///
/// @param self QCPCurve*
void q_cpcurve_delete_later(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#moveToThread)
///
/// @param self QCPCurve*
/// @param thread QThread*
/// @param param2 Disambiguated_t*
bool q_cpcurve_move_to_thread2(void* self, void* thread, void* param2);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#startTimer)
///
/// @param self QCPCurve*
/// @param interval int
/// @param timerType enum Qt__TimerType
int32_t q_cpcurve_start_timer22(void* self, int interval, int32_t timerType);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param method QMetaMethod*
/// @param type enum Qt__ConnectionType
QMetaObject__Connection* q_cpcurve_connect5(void* sender, void* signal, void* receiver, void* method, int32_t type);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param self QCPCurve*
/// @param sender QObject*
/// @param signal const char*
/// @param member const char*
/// @param type enum Qt__ConnectionType
QMetaObject__Connection* q_cpcurve_connect4(void* self, void* sender, const char* signal, const char* member, int32_t type);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPCurve*
/// @param param1 QObject*
void q_cpcurve_destroyed1(void* self, void* param1);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPCurve*
/// @param callback void func(QCPCurve* self, QObject* param1)
void q_cpcurve_on_destroyed1(void* self, void (*callback)(void*, void*));

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPCurve*
int32_t q_cpcurve_data_count(void* self);

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPCurve*
int32_t q_cpcurve_qbase_data_count(void* self);

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPCurve*
/// @param callback int32_t func()
void q_cpcurve_on_data_count(void* self, int32_t (*callback)());

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPCurve*
/// @param index int
double q_cpcurve_data_main_key(void* self, int index);

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPCurve*
/// @param index int
double q_cpcurve_qbase_data_main_key(void* self, int index);

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPCurve*
/// @param callback double func(QCPCurve* self, int index)
void q_cpcurve_on_data_main_key(void* self, double (*callback)(void*, int));

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPCurve*
/// @param index int
double q_cpcurve_data_sort_key(void* self, int index);

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPCurve*
/// @param index int
double q_cpcurve_qbase_data_sort_key(void* self, int index);

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPCurve*
/// @param callback double func(QCPCurve* self, int index)
void q_cpcurve_on_data_sort_key(void* self, double (*callback)(void*, int));

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPCurve*
/// @param index int
double q_cpcurve_data_main_value(void* self, int index);

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPCurve*
/// @param index int
double q_cpcurve_qbase_data_main_value(void* self, int index);

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPCurve*
/// @param callback double func(QCPCurve* self, int index)
void q_cpcurve_on_data_main_value(void* self, double (*callback)(void*, int));

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPCurve*
/// @param index int
QCPRange* q_cpcurve_data_value_range(void* self, int index);

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPCurve*
/// @param index int
QCPRange* q_cpcurve_qbase_data_value_range(void* self, int index);

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPCurve*
/// @param callback QCPRange* func(QCPCurve* self, int index)
void q_cpcurve_on_data_value_range(void* self, QCPRange* (*callback)(void*, int));

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPCurve*
/// @param index int
QPointF* q_cpcurve_data_pixel_position(void* self, int index);

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPCurve*
/// @param index int
QPointF* q_cpcurve_qbase_data_pixel_position(void* self, int index);

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPCurve*
/// @param callback QPointF* func(QCPCurve* self, int index)
void q_cpcurve_on_data_pixel_position(void* self, QPointF* (*callback)(void*, int));

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPCurve*
bool q_cpcurve_sort_key_is_main_key(void* self);

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPCurve*
bool q_cpcurve_qbase_sort_key_is_main_key(void* self);

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPCurve*
/// @param callback bool func()
void q_cpcurve_on_sort_key_is_main_key(void* self, bool (*callback)());

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPCurve*
/// @param rect QRectF*
/// @param onlySelectable bool
QCPDataSelection* q_cpcurve_select_test_rect(void* self, void* rect, bool onlySelectable);

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPCurve*
/// @param rect QRectF*
/// @param onlySelectable bool
QCPDataSelection* q_cpcurve_qbase_select_test_rect(void* self, void* rect, bool onlySelectable);

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPCurve*
/// @param callback QCPDataSelection* func(QCPCurve* self, QRectF* rect, bool onlySelectable)
void q_cpcurve_on_select_test_rect(void* self, QCPDataSelection* (*callback)(void*, void*, bool));

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPCurve*
/// @param sortKey double
/// @param expandedRange bool
int32_t q_cpcurve_find_begin(void* self, double sortKey, bool expandedRange);

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPCurve*
/// @param sortKey double
/// @param expandedRange bool
int32_t q_cpcurve_qbase_find_begin(void* self, double sortKey, bool expandedRange);

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPCurve*
/// @param callback int32_t func(QCPCurve* self, double sortKey, bool expandedRange)
void q_cpcurve_on_find_begin(void* self, int32_t (*callback)(void*, double, bool));

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPCurve*
/// @param sortKey double
/// @param expandedRange bool
int32_t q_cpcurve_find_end(void* self, double sortKey, bool expandedRange);

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPCurve*
/// @param sortKey double
/// @param expandedRange bool
int32_t q_cpcurve_qbase_find_end(void* self, double sortKey, bool expandedRange);

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPCurve*
/// @param callback int32_t func(QCPCurve* self, double sortKey, bool expandedRange)
void q_cpcurve_on_find_end(void* self, int32_t (*callback)(void*, double, bool));

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPCurve*
QCPPlottableInterface1D* q_cpcurve_interface1_d(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPCurve*
QCPPlottableInterface1D* q_cpcurve_qbase_interface1_d(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPCurve*
/// @param callback QCPPlottableInterface1D* func()
void q_cpcurve_on_interface1_d(void* self, QCPPlottableInterface1D* (*callback)());

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPCurve*
QRect* q_cpcurve_clip_rect(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPCurve*
QRect* q_cpcurve_qbase_clip_rect(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPCurve*
/// @param callback QRect* func()
void q_cpcurve_on_clip_rect(void* self, QRect* (*callback)());

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPCurve*
///
/// @return enum QCP__Interaction
int32_t q_cpcurve_selection_category(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPCurve*
///
/// @return enum QCP__Interaction
int32_t q_cpcurve_qbase_selection_category(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPCurve*
/// @param callback int32_t func()
void q_cpcurve_on_selection_category(void* self, int32_t (*callback)());

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPCurve*
/// @param painter QCPPainter*
void q_cpcurve_apply_default_antialiasing_hint(void* self, void* painter);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPCurve*
/// @param painter QCPPainter*
void q_cpcurve_qbase_apply_default_antialiasing_hint(void* self, void* painter);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPCurve*
/// @param callback void func(QCPCurve* self, QCPPainter* painter)
void q_cpcurve_on_apply_default_antialiasing_hint(void* self, void (*callback)(void*, void*));

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPCurve*
/// @param event QMouseEvent*
/// @param additive bool
/// @param details QVariant*
/// @param selectionStateChanged bool*
void q_cpcurve_select_event(void* self, void* event, bool additive, void* details, bool* selectionStateChanged);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPCurve*
/// @param event QMouseEvent*
/// @param additive bool
/// @param details QVariant*
/// @param selectionStateChanged bool*
void q_cpcurve_qbase_select_event(void* self, void* event, bool additive, void* details, bool* selectionStateChanged);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPCurve*
/// @param callback void func(QCPCurve* self, QMouseEvent* event, bool additive, QVariant* details, bool* selectionStateChanged)
void q_cpcurve_on_select_event(void* self, void (*callback)(void*, void*, bool, void*, bool*));

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPCurve*
/// @param selectionStateChanged bool*
void q_cpcurve_deselect_event(void* self, bool* selectionStateChanged);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPCurve*
/// @param selectionStateChanged bool*
void q_cpcurve_qbase_deselect_event(void* self, bool* selectionStateChanged);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPCurve*
/// @param callback void func(QCPCurve* self, bool* selectionStateChanged)
void q_cpcurve_on_deselect_event(void* self, void (*callback)(void*, bool*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPCurve*
/// @param parentPlot QCustomPlot*
void q_cpcurve_parent_plot_initialized(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPCurve*
/// @param parentPlot QCustomPlot*
void q_cpcurve_qbase_parent_plot_initialized(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPCurve*
/// @param callback void func(QCPCurve* self, QCustomPlot* parentPlot)
void q_cpcurve_on_parent_plot_initialized(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPCurve*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cpcurve_mouse_press_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPCurve*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cpcurve_qbase_mouse_press_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPCurve*
/// @param callback void func(QCPCurve* self, QMouseEvent* event, QVariant* details)
void q_cpcurve_on_mouse_press_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPCurve*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cpcurve_mouse_move_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPCurve*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cpcurve_qbase_mouse_move_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPCurve*
/// @param callback void func(QCPCurve* self, QMouseEvent* event, QPointF* startPos)
void q_cpcurve_on_mouse_move_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPCurve*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cpcurve_mouse_release_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPCurve*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cpcurve_qbase_mouse_release_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPCurve*
/// @param callback void func(QCPCurve* self, QMouseEvent* event, QPointF* startPos)
void q_cpcurve_on_mouse_release_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPCurve*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cpcurve_mouse_double_click_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPCurve*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cpcurve_qbase_mouse_double_click_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPCurve*
/// @param callback void func(QCPCurve* self, QMouseEvent* event, QVariant* details)
void q_cpcurve_on_mouse_double_click_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPCurve*
/// @param event QWheelEvent*
void q_cpcurve_wheel_event(void* self, void* event);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPCurve*
/// @param event QWheelEvent*
void q_cpcurve_qbase_wheel_event(void* self, void* event);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPCurve*
/// @param callback void func(QCPCurve* self, QWheelEvent* event)
void q_cpcurve_on_wheel_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPCurve*
/// @param event QEvent*
bool q_cpcurve_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPCurve*
/// @param event QEvent*
bool q_cpcurve_qbase_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPCurve*
/// @param callback bool func(QCPCurve* self, QEvent* event)
void q_cpcurve_on_event(void* self, bool (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPCurve*
/// @param watched QObject*
/// @param event QEvent*
bool q_cpcurve_event_filter(void* self, void* watched, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPCurve*
/// @param watched QObject*
/// @param event QEvent*
bool q_cpcurve_qbase_event_filter(void* self, void* watched, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPCurve*
/// @param callback bool func(QCPCurve* self, QObject* watched, QEvent* event)
void q_cpcurve_on_event_filter(void* self, bool (*callback)(void*, void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPCurve*
/// @param event QTimerEvent*
void q_cpcurve_timer_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPCurve*
/// @param event QTimerEvent*
void q_cpcurve_qbase_timer_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPCurve*
/// @param callback void func(QCPCurve* self, QTimerEvent* event)
void q_cpcurve_on_timer_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPCurve*
/// @param event QChildEvent*
void q_cpcurve_child_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPCurve*
/// @param event QChildEvent*
void q_cpcurve_qbase_child_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPCurve*
/// @param callback void func(QCPCurve* self, QChildEvent* event)
void q_cpcurve_on_child_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPCurve*
/// @param event QEvent*
void q_cpcurve_custom_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPCurve*
/// @param event QEvent*
void q_cpcurve_qbase_custom_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPCurve*
/// @param callback void func(QCPCurve* self, QEvent* event)
void q_cpcurve_on_custom_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPCurve*
/// @param signal QMetaMethod*
void q_cpcurve_connect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPCurve*
/// @param signal QMetaMethod*
void q_cpcurve_qbase_connect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPCurve*
/// @param callback void func(QCPCurve* self, QMetaMethod* signal)
void q_cpcurve_on_connect_notify(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPCurve*
/// @param signal QMetaMethod*
void q_cpcurve_disconnect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPCurve*
/// @param signal QMetaMethod*
void q_cpcurve_qbase_disconnect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPCurve*
/// @param callback void func(QCPCurve* self, QMetaMethod* signal)
void q_cpcurve_on_disconnect_notify(void* self, void (*callback)(void*, void*));

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPCurve*
/// @param painter QCPPainter*
void q_cpcurve_apply_fill_antialiasing_hint(void* self, void* painter);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPCurve*
/// @param painter QCPPainter*
void q_cpcurve_qbase_apply_fill_antialiasing_hint(void* self, void* painter);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPCurve*
/// @param callback void func(QCPCurve* self, QCPPainter* painter)
void q_cpcurve_on_apply_fill_antialiasing_hint(void* self, void (*callback)(void*, void*));

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPCurve*
/// @param painter QCPPainter*
void q_cpcurve_apply_scatters_antialiasing_hint(void* self, void* painter);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPCurve*
/// @param painter QCPPainter*
void q_cpcurve_qbase_apply_scatters_antialiasing_hint(void* self, void* painter);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPCurve*
/// @param callback void func(QCPCurve* self, QCPPainter* painter)
void q_cpcurve_on_apply_scatters_antialiasing_hint(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPCurve*
/// @param parentPlot QCustomPlot*
void q_cpcurve_initialize_parent_plot(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPCurve*
/// @param parentPlot QCustomPlot*
void q_cpcurve_qbase_initialize_parent_plot(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPCurve*
/// @param callback void func(QCPCurve* self, QCustomPlot* parentPlot)
void q_cpcurve_on_initialize_parent_plot(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPCurve*
/// @param parentLayerable QCPLayerable*
void q_cpcurve_set_parent_layerable(void* self, void* parentLayerable);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPCurve*
/// @param parentLayerable QCPLayerable*
void q_cpcurve_qbase_set_parent_layerable(void* self, void* parentLayerable);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPCurve*
/// @param callback void func(QCPCurve* self, QCPLayerable* parentLayerable)
void q_cpcurve_on_set_parent_layerable(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPCurve*
/// @param layer QCPLayer*
/// @param prepend bool
bool q_cpcurve_move_to_layer(void* self, void* layer, bool prepend);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPCurve*
/// @param layer QCPLayer*
/// @param prepend bool
bool q_cpcurve_qbase_move_to_layer(void* self, void* layer, bool prepend);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPCurve*
/// @param callback bool func(QCPCurve* self, QCPLayer* layer, bool prepend)
void q_cpcurve_on_move_to_layer(void* self, bool (*callback)(void*, void*, bool));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPCurve*
/// @param painter QCPPainter*
/// @param localAntialiased bool
/// @param overrideElement enum QCP__AntialiasedElement
void q_cpcurve_apply_antialiasing_hint(void* self, void* painter, bool localAntialiased, int32_t overrideElement);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPCurve*
/// @param painter QCPPainter*
/// @param localAntialiased bool
/// @param overrideElement enum QCP__AntialiasedElement
void q_cpcurve_qbase_apply_antialiasing_hint(void* self, void* painter, bool localAntialiased, int32_t overrideElement);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPCurve*
/// @param callback void func(QCPCurve* self, QCPPainter* painter, bool localAntialiased, enum QCP__AntialiasedElement overrideElement)
void q_cpcurve_on_apply_antialiasing_hint(void* self, void (*callback)(void*, void*, bool, int32_t));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPCurve*
QObject* q_cpcurve_sender(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPCurve*
QObject* q_cpcurve_qbase_sender(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPCurve*
/// @param callback QObject* func()
void q_cpcurve_on_sender(void* self, QObject* (*callback)());

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPCurve*
int32_t q_cpcurve_sender_signal_index(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPCurve*
int32_t q_cpcurve_qbase_sender_signal_index(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPCurve*
/// @param callback int32_t func()
void q_cpcurve_on_sender_signal_index(void* self, int32_t (*callback)());

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPCurve*
/// @param signal const char*
int32_t q_cpcurve_receivers(void* self, const char* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPCurve*
/// @param signal const char*
int32_t q_cpcurve_qbase_receivers(void* self, const char* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPCurve*
/// @param callback int32_t func(QCPCurve* self, const char* signal)
void q_cpcurve_on_receivers(void* self, int32_t (*callback)(void*, const char*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPCurve*
/// @param signal QMetaMethod*
bool q_cpcurve_is_signal_connected(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPCurve*
/// @param signal QMetaMethod*
bool q_cpcurve_qbase_is_signal_connected(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPCurve*
/// @param callback bool func(QCPCurve* self, QMetaMethod* signal)
void q_cpcurve_on_is_signal_connected(void* self, bool (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#objectNameChanged)
///
/// Wrapper to allow calling private signal
///
/// @param self QCPCurve*
/// @param callback void func(QCPCurve* self, const char* objectName)
void q_cpcurve_on_object_name_changed(void* self, void (*callback)(void*, const char*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPCurve.html)
///
/// Delete this object from C++ memory.
///
/// @param self QCPCurve*
void q_cpcurve_delete(void* self);

/// https://www.qcustomplot.com/documentation/classQCPBarsGroup.html

/// q_cpbarsgroup_new constructs a new QCPBarsGroup object.
///
/// @param parentPlot QCustomPlot*
QCPBarsGroup* q_cpbarsgroup_new(void* parentPlot);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#metaObject)
///
/// @param self QCPBarsGroup*
const QMetaObject* q_cpbarsgroup_meta_object(void* self);

/// @param self QCPBarsGroup*
/// @param param1 const char*
void* q_cpbarsgroup_metacast(void* self, const char* param1);

/// @param self QCPBarsGroup*
/// @param param1 enum QMetaObject__Call
/// @param param2 int
/// @param param3 void*
int32_t q_cpbarsgroup_metacall(void* self, int32_t param1, int param2, void* param3);

/// Allows for overriding the related default method
///
/// @param self QCPBarsGroup*
/// @param callback int32_t func(QCPBarsGroup* self, enum QMetaObject__Call param1, int param2, void* param3)
void q_cpbarsgroup_on_metacall(void* self, int32_t (*callback)(void*, int32_t, int, void*));

/// Base class method implementation
///
/// @param self QCPBarsGroup*
/// @param param1 enum QMetaObject__Call
/// @param param2 int
/// @param param3 void*
int32_t q_cpbarsgroup_qbase_metacall(void* self, int32_t param1, int param2, void* param3);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
const char* q_cpbarsgroup_tr(const char* s);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPBarsGroup.html)
///
/// @param self QCPBarsGroup*
///
/// @return enum QCPBarsGroup__SpacingType
int32_t q_cpbarsgroup_spacing_type(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPBarsGroup.html)
///
/// @param self QCPBarsGroup*
double q_cpbarsgroup_spacing(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPBarsGroup.html)
///
/// @param self QCPBarsGroup*
/// @param spacingType enum QCPBarsGroup__SpacingType
void q_cpbarsgroup_set_spacing_type(void* self, int32_t spacingType);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPBarsGroup.html)
///
/// @param self QCPBarsGroup*
/// @param spacing double
void q_cpbarsgroup_set_spacing(void* self, double spacing);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPBarsGroup.html)
///
/// @param self QCPBarsGroup*
libqt_list /* of QCPBars* */ q_cpbarsgroup_bars(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPBarsGroup.html)
///
/// @param self QCPBarsGroup*
/// @param index int
QCPBars* q_cpbarsgroup_bars2(void* self, int index);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPBarsGroup.html)
///
/// @param self QCPBarsGroup*
int32_t q_cpbarsgroup_size(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPBarsGroup.html)
///
/// @param self QCPBarsGroup*
bool q_cpbarsgroup_is_empty(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPBarsGroup.html)
///
/// @param self QCPBarsGroup*
void q_cpbarsgroup_clear(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPBarsGroup.html)
///
/// @param self QCPBarsGroup*
/// @param bars QCPBars*
bool q_cpbarsgroup_contains(void* self, void* bars);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPBarsGroup.html)
///
/// @param self QCPBarsGroup*
/// @param bars QCPBars*
void q_cpbarsgroup_append(void* self, void* bars);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPBarsGroup.html)
///
/// @param self QCPBarsGroup*
/// @param i int
/// @param bars QCPBars*
void q_cpbarsgroup_insert(void* self, int i, void* bars);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPBarsGroup.html)
///
/// @param self QCPBarsGroup*
/// @param bars QCPBars*
void q_cpbarsgroup_remove(void* self, void* bars);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPBarsGroup.html)
///
/// @param self QCPBarsGroup*
/// @param bars QCPBars*
void q_cpbarsgroup_register_bars(void* self, void* bars);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPBarsGroup.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPBarsGroup*
/// @param callback void func(QCPBarsGroup* self, QCPBars* bars)
void q_cpbarsgroup_on_register_bars(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPBarsGroup.html)
///
/// Base class method implementation
///
/// @param self QCPBarsGroup*
/// @param bars QCPBars*
void q_cpbarsgroup_qbase_register_bars(void* self, void* bars);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPBarsGroup.html)
///
/// @param self QCPBarsGroup*
/// @param bars QCPBars*
void q_cpbarsgroup_unregister_bars(void* self, void* bars);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPBarsGroup.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPBarsGroup*
/// @param callback void func(QCPBarsGroup* self, QCPBars* bars)
void q_cpbarsgroup_on_unregister_bars(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPBarsGroup.html)
///
/// Base class method implementation
///
/// @param self QCPBarsGroup*
/// @param bars QCPBars*
void q_cpbarsgroup_qbase_unregister_bars(void* self, void* bars);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPBarsGroup.html)
///
/// @param self QCPBarsGroup*
/// @param bars QCPBars*
/// @param keyCoord double
double q_cpbarsgroup_key_pixel_offset(void* self, void* bars, double keyCoord);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPBarsGroup.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPBarsGroup*
/// @param callback double func(QCPBarsGroup* self, QCPBars* bars, double keyCoord)
void q_cpbarsgroup_on_key_pixel_offset(void* self, double (*callback)(void*, void*, double));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPBarsGroup.html)
///
/// Base class method implementation
///
/// @param self QCPBarsGroup*
/// @param bars QCPBars*
/// @param keyCoord double
double q_cpbarsgroup_qbase_key_pixel_offset(void* self, void* bars, double keyCoord);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPBarsGroup.html)
///
/// @param self QCPBarsGroup*
/// @param bars QCPBars*
/// @param keyCoord double
double q_cpbarsgroup_get_pixel_spacing(void* self, void* bars, double keyCoord);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPBarsGroup.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPBarsGroup*
/// @param callback double func(QCPBarsGroup* self, QCPBars* bars, double keyCoord)
void q_cpbarsgroup_on_get_pixel_spacing(void* self, double (*callback)(void*, void*, double));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPBarsGroup.html)
///
/// Base class method implementation
///
/// @param self QCPBarsGroup*
/// @param bars QCPBars*
/// @param keyCoord double
double q_cpbarsgroup_qbase_get_pixel_spacing(void* self, void* bars, double keyCoord);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
/// @param c const char*
const char* q_cpbarsgroup_tr2(const char* s, const char* c);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
/// @param c const char*
/// @param n int
const char* q_cpbarsgroup_tr3(const char* s, const char* c, int n);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#objectName)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPBarsGroup*
const char* q_cpbarsgroup_object_name(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setObjectName)
///
/// @param self QCPBarsGroup*
/// @param name char*
void q_cpbarsgroup_set_object_name(void* self, char* name);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isWidgetType)
///
/// @param self QCPBarsGroup*
bool q_cpbarsgroup_is_widget_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isWindowType)
///
/// @param self QCPBarsGroup*
bool q_cpbarsgroup_is_window_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isQuickItemType)
///
/// @param self QCPBarsGroup*
bool q_cpbarsgroup_is_quick_item_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#signalsBlocked)
///
/// @param self QCPBarsGroup*
bool q_cpbarsgroup_signals_blocked(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#blockSignals)
///
/// @param self QCPBarsGroup*
/// @param b bool
bool q_cpbarsgroup_block_signals(void* self, bool b);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#thread)
///
/// @param self QCPBarsGroup*
QThread* q_cpbarsgroup_thread(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#moveToThread)
///
/// @param self QCPBarsGroup*
/// @param thread QThread*
bool q_cpbarsgroup_move_to_thread(void* self, void* thread);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#startTimer)
///
/// @param self QCPBarsGroup*
/// @param interval int
int32_t q_cpbarsgroup_start_timer(void* self, int interval);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#killTimer)
///
/// @param self QCPBarsGroup*
/// @param id int
void q_cpbarsgroup_kill_timer(void* self, int id);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#killTimer)
///
/// @param self QCPBarsGroup*
/// @param id enum Qt__TimerId
void q_cpbarsgroup_kill_timer2(void* self, int32_t id);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#children)
///
/// @param self QCPBarsGroup*
libqt_list /* of QObject* */ q_cpbarsgroup_children(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setParent)
///
/// @param self QCPBarsGroup*
/// @param parent QObject*
void q_cpbarsgroup_set_parent(void* self, void* parent);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#installEventFilter)
///
/// @param self QCPBarsGroup*
/// @param filterObj QObject*
void q_cpbarsgroup_install_event_filter(void* self, void* filterObj);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#removeEventFilter)
///
/// @param self QCPBarsGroup*
/// @param obj QObject*
void q_cpbarsgroup_remove_event_filter(void* self, void* obj);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param method QMetaMethod*
QMetaObject__Connection* q_cpbarsgroup_connect(void* sender, void* signal, void* receiver, void* method);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param self QCPBarsGroup*
/// @param sender QObject*
/// @param signal const char*
/// @param member const char*
QMetaObject__Connection* q_cpbarsgroup_connect2(void* self, void* sender, const char* signal, const char* member);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param member QMetaMethod*
bool q_cpbarsgroup_disconnect(void* sender, void* signal, void* receiver, void* member);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnect)
///
/// @param param1 QMetaObject__Connection*
bool q_cpbarsgroup_disconnect2(void* param1);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dumpObjectTree)
///
/// @param self QCPBarsGroup*
void q_cpbarsgroup_dump_object_tree(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dumpObjectInfo)
///
/// @param self QCPBarsGroup*
void q_cpbarsgroup_dump_object_info(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setProperty)
///
/// @param self QCPBarsGroup*
/// @param name const char*
/// @param value QVariant*
bool q_cpbarsgroup_set_property(void* self, const char* name, void* value);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#property)
///
/// @param self QCPBarsGroup*
/// @param name const char*
QVariant* q_cpbarsgroup_property(void* self, const char* name);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dynamicPropertyNames)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPBarsGroup*
const char** q_cpbarsgroup_dynamic_property_names(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#bindingStorage)
///
/// @param self QCPBarsGroup*
QBindingStorage* q_cpbarsgroup_binding_storage(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#bindingStorage)
///
/// @param self QCPBarsGroup*
const QBindingStorage* q_cpbarsgroup_binding_storage2(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPBarsGroup*
void q_cpbarsgroup_destroyed(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPBarsGroup*
/// @param callback void func(QCPBarsGroup* self)
void q_cpbarsgroup_on_destroyed(void* self, void (*callback)(void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#parent)
///
/// @param self QCPBarsGroup*
QObject* q_cpbarsgroup_parent(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#inherits)
///
/// @param self QCPBarsGroup*
/// @param classname const char*
bool q_cpbarsgroup_inherits(void* self, const char* classname);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#deleteLater)
///
/// @param self QCPBarsGroup*
void q_cpbarsgroup_delete_later(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#moveToThread)
///
/// @param self QCPBarsGroup*
/// @param thread QThread*
/// @param param2 Disambiguated_t*
bool q_cpbarsgroup_move_to_thread2(void* self, void* thread, void* param2);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#startTimer)
///
/// @param self QCPBarsGroup*
/// @param interval int
/// @param timerType enum Qt__TimerType
int32_t q_cpbarsgroup_start_timer22(void* self, int interval, int32_t timerType);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param method QMetaMethod*
/// @param type enum Qt__ConnectionType
QMetaObject__Connection* q_cpbarsgroup_connect5(void* sender, void* signal, void* receiver, void* method, int32_t type);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param self QCPBarsGroup*
/// @param sender QObject*
/// @param signal const char*
/// @param member const char*
/// @param type enum Qt__ConnectionType
QMetaObject__Connection* q_cpbarsgroup_connect4(void* self, void* sender, const char* signal, const char* member, int32_t type);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPBarsGroup*
/// @param param1 QObject*
void q_cpbarsgroup_destroyed1(void* self, void* param1);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPBarsGroup*
/// @param callback void func(QCPBarsGroup* self, QObject* param1)
void q_cpbarsgroup_on_destroyed1(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPBarsGroup*
/// @param event QEvent*
bool q_cpbarsgroup_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPBarsGroup*
/// @param event QEvent*
bool q_cpbarsgroup_qbase_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPBarsGroup*
/// @param callback bool func(QCPBarsGroup* self, QEvent* event)
void q_cpbarsgroup_on_event(void* self, bool (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPBarsGroup*
/// @param watched QObject*
/// @param event QEvent*
bool q_cpbarsgroup_event_filter(void* self, void* watched, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPBarsGroup*
/// @param watched QObject*
/// @param event QEvent*
bool q_cpbarsgroup_qbase_event_filter(void* self, void* watched, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPBarsGroup*
/// @param callback bool func(QCPBarsGroup* self, QObject* watched, QEvent* event)
void q_cpbarsgroup_on_event_filter(void* self, bool (*callback)(void*, void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPBarsGroup*
/// @param event QTimerEvent*
void q_cpbarsgroup_timer_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPBarsGroup*
/// @param event QTimerEvent*
void q_cpbarsgroup_qbase_timer_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPBarsGroup*
/// @param callback void func(QCPBarsGroup* self, QTimerEvent* event)
void q_cpbarsgroup_on_timer_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPBarsGroup*
/// @param event QChildEvent*
void q_cpbarsgroup_child_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPBarsGroup*
/// @param event QChildEvent*
void q_cpbarsgroup_qbase_child_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPBarsGroup*
/// @param callback void func(QCPBarsGroup* self, QChildEvent* event)
void q_cpbarsgroup_on_child_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPBarsGroup*
/// @param event QEvent*
void q_cpbarsgroup_custom_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPBarsGroup*
/// @param event QEvent*
void q_cpbarsgroup_qbase_custom_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPBarsGroup*
/// @param callback void func(QCPBarsGroup* self, QEvent* event)
void q_cpbarsgroup_on_custom_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPBarsGroup*
/// @param signal QMetaMethod*
void q_cpbarsgroup_connect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPBarsGroup*
/// @param signal QMetaMethod*
void q_cpbarsgroup_qbase_connect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPBarsGroup*
/// @param callback void func(QCPBarsGroup* self, QMetaMethod* signal)
void q_cpbarsgroup_on_connect_notify(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPBarsGroup*
/// @param signal QMetaMethod*
void q_cpbarsgroup_disconnect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPBarsGroup*
/// @param signal QMetaMethod*
void q_cpbarsgroup_qbase_disconnect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPBarsGroup*
/// @param callback void func(QCPBarsGroup* self, QMetaMethod* signal)
void q_cpbarsgroup_on_disconnect_notify(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPBarsGroup*
QObject* q_cpbarsgroup_sender(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPBarsGroup*
QObject* q_cpbarsgroup_qbase_sender(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPBarsGroup*
/// @param callback QObject* func()
void q_cpbarsgroup_on_sender(void* self, QObject* (*callback)());

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPBarsGroup*
int32_t q_cpbarsgroup_sender_signal_index(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPBarsGroup*
int32_t q_cpbarsgroup_qbase_sender_signal_index(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPBarsGroup*
/// @param callback int32_t func()
void q_cpbarsgroup_on_sender_signal_index(void* self, int32_t (*callback)());

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPBarsGroup*
/// @param signal const char*
int32_t q_cpbarsgroup_receivers(void* self, const char* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPBarsGroup*
/// @param signal const char*
int32_t q_cpbarsgroup_qbase_receivers(void* self, const char* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPBarsGroup*
/// @param callback int32_t func(QCPBarsGroup* self, const char* signal)
void q_cpbarsgroup_on_receivers(void* self, int32_t (*callback)(void*, const char*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPBarsGroup*
/// @param signal QMetaMethod*
bool q_cpbarsgroup_is_signal_connected(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPBarsGroup*
/// @param signal QMetaMethod*
bool q_cpbarsgroup_qbase_is_signal_connected(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPBarsGroup*
/// @param callback bool func(QCPBarsGroup* self, QMetaMethod* signal)
void q_cpbarsgroup_on_is_signal_connected(void* self, bool (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#objectNameChanged)
///
/// Wrapper to allow calling private signal
///
/// @param self QCPBarsGroup*
/// @param callback void func(QCPBarsGroup* self, const char* objectName)
void q_cpbarsgroup_on_object_name_changed(void* self, void (*callback)(void*, const char*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPBarsGroup.html)
///
/// Delete this object from C++ memory.
///
/// @param self QCPBarsGroup*
void q_cpbarsgroup_delete(void* self);

/// https://www.qcustomplot.com/documentation/classQCPBarsData.html

/// q_cpbarsdata_new constructs a new QCPBarsData object.
///
/// @param other QCPBarsData*
QCPBarsData* q_cpbarsdata_new(void* other);

/// q_cpbarsdata_new2 constructs a new QCPBarsData object and invalidates the source QCPBarsData object.
///
/// @param other QCPBarsData*
QCPBarsData* q_cpbarsdata_new2(void* other);

/// q_cpbarsdata_new3 constructs a new QCPBarsData object.
///
QCPBarsData* q_cpbarsdata_new3();

/// q_cpbarsdata_new4 constructs a new QCPBarsData object.
///
/// @param key double
/// @param value double
QCPBarsData* q_cpbarsdata_new4(double key, double value);

/// q_cpbarsdata_new5 constructs a new QCPBarsData object.
///
/// @param param1 QCPBarsData*
QCPBarsData* q_cpbarsdata_new5(void* param1);

/// q_cpbarsdata_copy_assign shallow copies `other` into `self`.
///
/// @param self QCPBarsData*
/// @param other QCPBarsData*
void q_cpbarsdata_copy_assign(void* self, void* other);

/// q_cpbarsdata_move_assign moves `other` into `self` and invalidates `other`.
///
/// @param self QCPBarsData*
/// @param other QCPBarsData*
void q_cpbarsdata_move_assign(void* self, void* other);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPBarsData.html)
///
/// @param self QCPBarsData*
double q_cpbarsdata_sort_key(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPBarsData.html)
///
/// @param sortKey double
QCPBarsData* q_cpbarsdata_from_sort_key(double sortKey);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPBarsData.html)
///
bool q_cpbarsdata_sort_key_is_main_key();

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPBarsData.html)
///
/// @param self QCPBarsData*
double q_cpbarsdata_main_key(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPBarsData.html)
///
/// @param self QCPBarsData*
double q_cpbarsdata_main_value(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPBarsData.html)
///
/// @param self QCPBarsData*
QCPRange* q_cpbarsdata_value_range(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPBarsData.html)
///
/// @param self QCPBarsData*
double q_cpbarsdata_key(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPBarsData.html)
///
/// @param self QCPBarsData*
/// @param key double
void q_cpbarsdata_set_key(void* self, double key);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPBarsData.html)
///
/// @param self QCPBarsData*
double q_cpbarsdata_value(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPBarsData.html)
///
/// @param self QCPBarsData*
/// @param value double
void q_cpbarsdata_set_value(void* self, double value);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPBarsData.html)
///
/// Delete this object from C++ memory.
///
/// @param self QCPBarsData*
void q_cpbarsdata_delete(void* self);

/// https://www.qcustomplot.com/documentation/classQCPBars.html

/// q_cpbars_new constructs a new QCPBars object.
///
/// @param keyAxis QCPAxis*
/// @param valueAxis QCPAxis*
QCPBars* q_cpbars_new(void* keyAxis, void* valueAxis);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#metaObject)
///
/// @param self QCPBars*
const QMetaObject* q_cpbars_meta_object(void* self);

/// @param self QCPBars*
/// @param param1 const char*
void* q_cpbars_metacast(void* self, const char* param1);

/// @param self QCPBars*
/// @param param1 enum QMetaObject__Call
/// @param param2 int
/// @param param3 void*
int32_t q_cpbars_metacall(void* self, int32_t param1, int param2, void* param3);

/// Allows for overriding the related default method
///
/// @param self QCPBars*
/// @param callback int32_t func(QCPBars* self, enum QMetaObject__Call param1, int param2, void* param3)
void q_cpbars_on_metacall(void* self, int32_t (*callback)(void*, int32_t, int, void*));

/// Base class method implementation
///
/// @param self QCPBars*
/// @param param1 enum QMetaObject__Call
/// @param param2 int
/// @param param3 void*
int32_t q_cpbars_qbase_metacall(void* self, int32_t param1, int param2, void* param3);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
const char* q_cpbars_tr(const char* s);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPBars.html)
///
/// @param self QCPBars*
double q_cpbars_width(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPBars.html)
///
/// @param self QCPBars*
///
/// @return enum QCPBars__WidthType
int32_t q_cpbars_width_type(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPBars.html)
///
/// @param self QCPBars*
QCPBarsGroup* q_cpbars_bars_group(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPBars.html)
///
/// @param self QCPBars*
double q_cpbars_base_value(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPBars.html)
///
/// @param self QCPBars*
double q_cpbars_stacking_gap(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPBars.html)
///
/// @param self QCPBars*
QCPBars* q_cpbars_bar_below(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPBars.html)
///
/// @param self QCPBars*
QCPBars* q_cpbars_bar_above(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPBars.html)
///
/// @param self QCPBars*
/// @param keys libqt_list /* of double */
/// @param values libqt_list /* of double */
void q_cpbars_set_data2(void* self, libqt_list keys, libqt_list values);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPBars.html)
///
/// @param self QCPBars*
/// @param width double
void q_cpbars_set_width(void* self, double width);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPBars.html)
///
/// @param self QCPBars*
/// @param widthType enum QCPBars__WidthType
void q_cpbars_set_width_type(void* self, int32_t widthType);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPBars.html)
///
/// @param self QCPBars*
/// @param barsGroup QCPBarsGroup*
void q_cpbars_set_bars_group(void* self, void* barsGroup);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPBars.html)
///
/// @param self QCPBars*
/// @param baseValue double
void q_cpbars_set_base_value(void* self, double baseValue);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPBars.html)
///
/// @param self QCPBars*
/// @param pixels double
void q_cpbars_set_stacking_gap(void* self, double pixels);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPBars.html)
///
/// @param self QCPBars*
/// @param keys libqt_list /* of double */
/// @param values libqt_list /* of double */
void q_cpbars_add_data(void* self, libqt_list keys, libqt_list values);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPBars.html)
///
/// @param self QCPBars*
/// @param key double
/// @param value double
void q_cpbars_add_data2(void* self, double key, double value);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPBars.html)
///
/// @param self QCPBars*
/// @param bars QCPBars*
void q_cpbars_move_below(void* self, void* bars);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPBars.html)
///
/// @param self QCPBars*
/// @param bars QCPBars*
void q_cpbars_move_above(void* self, void* bars);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPBars.html)
///
/// @param self QCPBars*
/// @param rect QRectF*
/// @param onlySelectable bool
QCPDataSelection* q_cpbars_select_test_rect(void* self, void* rect, bool onlySelectable);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPBars.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPBars*
/// @param callback QCPDataSelection* func(QCPBars* self, QRectF* rect, bool onlySelectable)
void q_cpbars_on_select_test_rect(void* self, QCPDataSelection* (*callback)(void*, void*, bool));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPBars.html)
///
/// Base class method implementation
///
/// @param self QCPBars*
/// @param rect QRectF*
/// @param onlySelectable bool
QCPDataSelection* q_cpbars_qbase_select_test_rect(void* self, void* rect, bool onlySelectable);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPBars.html)
///
/// @param self QCPBars*
/// @param pos QPointF*
/// @param onlySelectable bool
/// @param details QVariant*
double q_cpbars_select_test(void* self, void* pos, bool onlySelectable, void* details);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPBars.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPBars*
/// @param callback double func(QCPBars* self, QPointF* pos, bool onlySelectable, QVariant* details)
void q_cpbars_on_select_test(void* self, double (*callback)(void*, void*, bool, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPBars.html)
///
/// Base class method implementation
///
/// @param self QCPBars*
/// @param pos QPointF*
/// @param onlySelectable bool
/// @param details QVariant*
double q_cpbars_qbase_select_test(void* self, void* pos, bool onlySelectable, void* details);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPBars.html)
///
/// @param self QCPBars*
/// @param foundRange bool*
/// @param inSignDomain enum QCP__SignDomain
QCPRange* q_cpbars_get_key_range(void* self, bool* foundRange, int32_t inSignDomain);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPBars.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPBars*
/// @param callback QCPRange* func(QCPBars* self, bool* foundRange, enum QCP__SignDomain inSignDomain)
void q_cpbars_on_get_key_range(void* self, QCPRange* (*callback)(void*, bool*, int32_t));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPBars.html)
///
/// Base class method implementation
///
/// @param self QCPBars*
/// @param foundRange bool*
/// @param inSignDomain enum QCP__SignDomain
QCPRange* q_cpbars_qbase_get_key_range(void* self, bool* foundRange, int32_t inSignDomain);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPBars.html)
///
/// @param self QCPBars*
/// @param foundRange bool*
/// @param inSignDomain enum QCP__SignDomain
/// @param inKeyRange QCPRange*
QCPRange* q_cpbars_get_value_range(void* self, bool* foundRange, int32_t inSignDomain, void* inKeyRange);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPBars.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPBars*
/// @param callback QCPRange* func(QCPBars* self, bool* foundRange, enum QCP__SignDomain inSignDomain, QCPRange* inKeyRange)
void q_cpbars_on_get_value_range(void* self, QCPRange* (*callback)(void*, bool*, int32_t, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPBars.html)
///
/// Base class method implementation
///
/// @param self QCPBars*
/// @param foundRange bool*
/// @param inSignDomain enum QCP__SignDomain
/// @param inKeyRange QCPRange*
QCPRange* q_cpbars_qbase_get_value_range(void* self, bool* foundRange, int32_t inSignDomain, void* inKeyRange);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPBars.html)
///
/// @param self QCPBars*
/// @param index int
QPointF* q_cpbars_data_pixel_position(void* self, int index);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPBars.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPBars*
/// @param callback QPointF* func(QCPBars* self, int index)
void q_cpbars_on_data_pixel_position(void* self, QPointF* (*callback)(void*, int));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPBars.html)
///
/// Base class method implementation
///
/// @param self QCPBars*
/// @param index int
QPointF* q_cpbars_qbase_data_pixel_position(void* self, int index);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPBars.html)
///
/// @param self QCPBars*
/// @param painter QCPPainter*
void q_cpbars_draw(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPBars.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPBars*
/// @param callback void func(QCPBars* self, QCPPainter* painter)
void q_cpbars_on_draw(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPBars.html)
///
/// Base class method implementation
///
/// @param self QCPBars*
/// @param painter QCPPainter*
void q_cpbars_qbase_draw(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPBars.html)
///
/// @param self QCPBars*
/// @param painter QCPPainter*
/// @param rect QRectF*
void q_cpbars_draw_legend_icon(void* self, void* painter, void* rect);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPBars.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPBars*
/// @param callback void func(QCPBars* self, QCPPainter* painter, QRectF* rect)
void q_cpbars_on_draw_legend_icon(void* self, void (*callback)(void*, void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPBars.html)
///
/// Base class method implementation
///
/// @param self QCPBars*
/// @param painter QCPPainter*
/// @param rect QRectF*
void q_cpbars_qbase_draw_legend_icon(void* self, void* painter, void* rect);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPBars.html)
///
/// @param self QCPBars*
/// @param key double
/// @param value double
QRectF* q_cpbars_get_bar_rect(void* self, double key, double value);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPBars.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPBars*
/// @param callback QRectF* func(QCPBars* self, double key, double value)
void q_cpbars_on_get_bar_rect(void* self, QRectF* (*callback)(void*, double, double));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPBars.html)
///
/// Base class method implementation
///
/// @param self QCPBars*
/// @param key double
/// @param value double
QRectF* q_cpbars_qbase_get_bar_rect(void* self, double key, double value);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPBars.html)
///
/// @param self QCPBars*
/// @param key double
/// @param lower double*
/// @param upper double*
void q_cpbars_get_pixel_width(void* self, double key, double* lower, double* upper);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPBars.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPBars*
/// @param callback void func(QCPBars* self, double key, double* lower, double* upper)
void q_cpbars_on_get_pixel_width(void* self, void (*callback)(void*, double, double*, double*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPBars.html)
///
/// Base class method implementation
///
/// @param self QCPBars*
/// @param key double
/// @param lower double*
/// @param upper double*
void q_cpbars_qbase_get_pixel_width(void* self, double key, double* lower, double* upper);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPBars.html)
///
/// @param self QCPBars*
/// @param key double
/// @param positive bool
double q_cpbars_get_stacked_base_value(void* self, double key, bool positive);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPBars.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPBars*
/// @param callback double func(QCPBars* self, double key, bool positive)
void q_cpbars_on_get_stacked_base_value(void* self, double (*callback)(void*, double, bool));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPBars.html)
///
/// Base class method implementation
///
/// @param self QCPBars*
/// @param key double
/// @param positive bool
double q_cpbars_qbase_get_stacked_base_value(void* self, double key, bool positive);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPBars.html)
///
/// @param self QCPBars*
/// @param lower QCPBars*
/// @param upper QCPBars*
void q_cpbars_connect_bars(void* self, void* lower, void* upper);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPBars.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPBars*
/// @param callback void func(QCPBars* self, QCPBars* lower, QCPBars* upper)
void q_cpbars_on_connect_bars(void* self, void (*callback)(void*, void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPBars.html)
///
/// Base class method implementation
///
/// @param self QCPBars*
/// @param lower QCPBars*
/// @param upper QCPBars*
void q_cpbars_qbase_connect_bars(void* self, void* lower, void* upper);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
/// @param c const char*
const char* q_cpbars_tr2(const char* s, const char* c);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
/// @param c const char*
/// @param n int
const char* q_cpbars_tr3(const char* s, const char* c, int n);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPBars.html)
///
/// @param self QCPBars*
/// @param keys libqt_list /* of double */
/// @param values libqt_list /* of double */
/// @param alreadySorted bool
void q_cpbars_set_data3(void* self, libqt_list keys, libqt_list values, bool alreadySorted);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPBars.html)
///
/// @param self QCPBars*
/// @param keys libqt_list /* of double */
/// @param values libqt_list /* of double */
/// @param alreadySorted bool
void q_cpbars_add_data3(void* self, libqt_list keys, libqt_list values, bool alreadySorted);

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// @param self QCPBars*
/// @param param1 QCPPlottableInterface1D*
void q_cpbars_operator_assign(void* self, void* param1);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPBars*
const char* q_cpbars_name(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPBars*
bool q_cpbars_antialiased_fill(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPBars*
bool q_cpbars_antialiased_scatters(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPBars*
QPen* q_cpbars_pen(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPBars*
QBrush* q_cpbars_brush(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPBars*
QCPAxis* q_cpbars_key_axis(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPBars*
QCPAxis* q_cpbars_value_axis(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPBars*
///
/// @return enum QCP__SelectionType
int32_t q_cpbars_selectable(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPBars*
bool q_cpbars_selected(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPBars*
QCPDataSelection* q_cpbars_selection(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPBars*
QCPSelectionDecorator* q_cpbars_selection_decorator(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPBars*
/// @param name const char*
void q_cpbars_set_name(void* self, const char* name);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPBars*
/// @param enabled bool
void q_cpbars_set_antialiased_fill(void* self, bool enabled);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPBars*
/// @param enabled bool
void q_cpbars_set_antialiased_scatters(void* self, bool enabled);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPBars*
/// @param pen QPen*
void q_cpbars_set_pen(void* self, void* pen);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPBars*
/// @param brush QBrush*
void q_cpbars_set_brush(void* self, void* brush);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPBars*
/// @param axis QCPAxis*
void q_cpbars_set_key_axis(void* self, void* axis);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPBars*
/// @param axis QCPAxis*
void q_cpbars_set_value_axis(void* self, void* axis);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPBars*
/// @param selectable enum QCP__SelectionType
void q_cpbars_set_selectable(void* self, int32_t selectable);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPBars*
/// @param selection QCPDataSelection*
void q_cpbars_set_selection(void* self, void* selection);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPBars*
/// @param decorator QCPSelectionDecorator*
void q_cpbars_set_selection_decorator(void* self, void* decorator);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPBars*
/// @param key double
/// @param value double
/// @param x double*
/// @param y double*
void q_cpbars_coords_to_pixels(void* self, double key, double value, double* x, double* y);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPBars*
/// @param key double
/// @param value double
const QPointF* q_cpbars_coords_to_pixels2(void* self, double key, double value);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPBars*
/// @param x double
/// @param y double
/// @param key double*
/// @param value double*
void q_cpbars_pixels_to_coords(void* self, double x, double y, double* key, double* value);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPBars*
/// @param pixelPos QPointF*
/// @param key double*
/// @param value double*
void q_cpbars_pixels_to_coords2(void* self, void* pixelPos, double* key, double* value);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPBars*
void q_cpbars_rescale_axes(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPBars*
void q_cpbars_rescale_key_axis(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPBars*
void q_cpbars_rescale_value_axis(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPBars*
/// @param legend QCPLegend*
bool q_cpbars_add_to_legend(void* self, void* legend);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPBars*
bool q_cpbars_add_to_legend2(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPBars*
/// @param legend QCPLegend*
bool q_cpbars_remove_from_legend(void* self, void* legend);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPBars*
bool q_cpbars_remove_from_legend2(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPBars*
/// @param selected bool
void q_cpbars_selection_changed(void* self, bool selected);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPBars*
/// @param selection QCPDataSelection*
void q_cpbars_selection_changed2(void* self, void* selection);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPBars*
/// @param selectable enum QCP__SelectionType
void q_cpbars_selectable_changed(void* self, int32_t selectable);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPBars*
/// @param onlyEnlarge bool
void q_cpbars_rescale_axes1(void* self, bool onlyEnlarge);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPBars*
/// @param onlyEnlarge bool
void q_cpbars_rescale_key_axis1(void* self, bool onlyEnlarge);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPBars*
/// @param onlyEnlarge bool
void q_cpbars_rescale_value_axis1(void* self, bool onlyEnlarge);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPBars*
/// @param onlyEnlarge bool
/// @param inKeyRange bool
void q_cpbars_rescale_value_axis2(void* self, bool onlyEnlarge, bool inKeyRange);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPBars*
bool q_cpbars_visible(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPBars*
QCustomPlot* q_cpbars_parent_plot(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPBars*
QCPLayerable* q_cpbars_parent_layerable(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPBars*
QCPLayer* q_cpbars_layer(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPBars*
bool q_cpbars_antialiased(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPBars*
/// @param on bool
void q_cpbars_set_visible(void* self, bool on);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPBars*
/// @param layer QCPLayer*
bool q_cpbars_set_layer(void* self, void* layer);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPBars*
/// @param layerName const char*
bool q_cpbars_set_layer2(void* self, const char* layerName);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPBars*
/// @param enabled bool
void q_cpbars_set_antialiased(void* self, bool enabled);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPBars*
bool q_cpbars_real_visibility(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPBars*
/// @param newLayer QCPLayer*
void q_cpbars_layer_changed(void* self, void* newLayer);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPBars*
/// @param callback void func(QCPBars* self, QCPLayer* newLayer)
void q_cpbars_on_layer_changed(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#objectName)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPBars*
const char* q_cpbars_object_name(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setObjectName)
///
/// @param self QCPBars*
/// @param name char*
void q_cpbars_set_object_name(void* self, char* name);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isWidgetType)
///
/// @param self QCPBars*
bool q_cpbars_is_widget_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isWindowType)
///
/// @param self QCPBars*
bool q_cpbars_is_window_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isQuickItemType)
///
/// @param self QCPBars*
bool q_cpbars_is_quick_item_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#signalsBlocked)
///
/// @param self QCPBars*
bool q_cpbars_signals_blocked(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#blockSignals)
///
/// @param self QCPBars*
/// @param b bool
bool q_cpbars_block_signals(void* self, bool b);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#thread)
///
/// @param self QCPBars*
QThread* q_cpbars_thread(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#moveToThread)
///
/// @param self QCPBars*
/// @param thread QThread*
bool q_cpbars_move_to_thread(void* self, void* thread);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#startTimer)
///
/// @param self QCPBars*
/// @param interval int
int32_t q_cpbars_start_timer(void* self, int interval);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#killTimer)
///
/// @param self QCPBars*
/// @param id int
void q_cpbars_kill_timer(void* self, int id);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#killTimer)
///
/// @param self QCPBars*
/// @param id enum Qt__TimerId
void q_cpbars_kill_timer2(void* self, int32_t id);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#children)
///
/// @param self QCPBars*
libqt_list /* of QObject* */ q_cpbars_children(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setParent)
///
/// @param self QCPBars*
/// @param parent QObject*
void q_cpbars_set_parent(void* self, void* parent);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#installEventFilter)
///
/// @param self QCPBars*
/// @param filterObj QObject*
void q_cpbars_install_event_filter(void* self, void* filterObj);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#removeEventFilter)
///
/// @param self QCPBars*
/// @param obj QObject*
void q_cpbars_remove_event_filter(void* self, void* obj);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param method QMetaMethod*
QMetaObject__Connection* q_cpbars_connect(void* sender, void* signal, void* receiver, void* method);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param self QCPBars*
/// @param sender QObject*
/// @param signal const char*
/// @param member const char*
QMetaObject__Connection* q_cpbars_connect2(void* self, void* sender, const char* signal, const char* member);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param member QMetaMethod*
bool q_cpbars_disconnect(void* sender, void* signal, void* receiver, void* member);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnect)
///
/// @param param1 QMetaObject__Connection*
bool q_cpbars_disconnect2(void* param1);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dumpObjectTree)
///
/// @param self QCPBars*
void q_cpbars_dump_object_tree(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dumpObjectInfo)
///
/// @param self QCPBars*
void q_cpbars_dump_object_info(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setProperty)
///
/// @param self QCPBars*
/// @param name const char*
/// @param value QVariant*
bool q_cpbars_set_property(void* self, const char* name, void* value);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#property)
///
/// @param self QCPBars*
/// @param name const char*
QVariant* q_cpbars_property(void* self, const char* name);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dynamicPropertyNames)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPBars*
const char** q_cpbars_dynamic_property_names(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#bindingStorage)
///
/// @param self QCPBars*
QBindingStorage* q_cpbars_binding_storage(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#bindingStorage)
///
/// @param self QCPBars*
const QBindingStorage* q_cpbars_binding_storage2(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPBars*
void q_cpbars_destroyed(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPBars*
/// @param callback void func(QCPBars* self)
void q_cpbars_on_destroyed(void* self, void (*callback)(void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#parent)
///
/// @param self QCPBars*
QObject* q_cpbars_parent(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#inherits)
///
/// @param self QCPBars*
/// @param classname const char*
bool q_cpbars_inherits(void* self, const char* classname);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#deleteLater)
///
/// @param self QCPBars*
void q_cpbars_delete_later(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#moveToThread)
///
/// @param self QCPBars*
/// @param thread QThread*
/// @param param2 Disambiguated_t*
bool q_cpbars_move_to_thread2(void* self, void* thread, void* param2);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#startTimer)
///
/// @param self QCPBars*
/// @param interval int
/// @param timerType enum Qt__TimerType
int32_t q_cpbars_start_timer22(void* self, int interval, int32_t timerType);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param method QMetaMethod*
/// @param type enum Qt__ConnectionType
QMetaObject__Connection* q_cpbars_connect5(void* sender, void* signal, void* receiver, void* method, int32_t type);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param self QCPBars*
/// @param sender QObject*
/// @param signal const char*
/// @param member const char*
/// @param type enum Qt__ConnectionType
QMetaObject__Connection* q_cpbars_connect4(void* self, void* sender, const char* signal, const char* member, int32_t type);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPBars*
/// @param param1 QObject*
void q_cpbars_destroyed1(void* self, void* param1);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPBars*
/// @param callback void func(QCPBars* self, QObject* param1)
void q_cpbars_on_destroyed1(void* self, void (*callback)(void*, void*));

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPBars*
int32_t q_cpbars_data_count(void* self);

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPBars*
int32_t q_cpbars_qbase_data_count(void* self);

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPBars*
/// @param callback int32_t func()
void q_cpbars_on_data_count(void* self, int32_t (*callback)());

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPBars*
/// @param index int
double q_cpbars_data_main_key(void* self, int index);

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPBars*
/// @param index int
double q_cpbars_qbase_data_main_key(void* self, int index);

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPBars*
/// @param callback double func(QCPBars* self, int index)
void q_cpbars_on_data_main_key(void* self, double (*callback)(void*, int));

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPBars*
/// @param index int
double q_cpbars_data_sort_key(void* self, int index);

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPBars*
/// @param index int
double q_cpbars_qbase_data_sort_key(void* self, int index);

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPBars*
/// @param callback double func(QCPBars* self, int index)
void q_cpbars_on_data_sort_key(void* self, double (*callback)(void*, int));

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPBars*
/// @param index int
double q_cpbars_data_main_value(void* self, int index);

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPBars*
/// @param index int
double q_cpbars_qbase_data_main_value(void* self, int index);

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPBars*
/// @param callback double func(QCPBars* self, int index)
void q_cpbars_on_data_main_value(void* self, double (*callback)(void*, int));

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPBars*
/// @param index int
QCPRange* q_cpbars_data_value_range(void* self, int index);

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPBars*
/// @param index int
QCPRange* q_cpbars_qbase_data_value_range(void* self, int index);

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPBars*
/// @param callback QCPRange* func(QCPBars* self, int index)
void q_cpbars_on_data_value_range(void* self, QCPRange* (*callback)(void*, int));

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPBars*
bool q_cpbars_sort_key_is_main_key(void* self);

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPBars*
bool q_cpbars_qbase_sort_key_is_main_key(void* self);

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPBars*
/// @param callback bool func()
void q_cpbars_on_sort_key_is_main_key(void* self, bool (*callback)());

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPBars*
/// @param sortKey double
/// @param expandedRange bool
int32_t q_cpbars_find_begin(void* self, double sortKey, bool expandedRange);

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPBars*
/// @param sortKey double
/// @param expandedRange bool
int32_t q_cpbars_qbase_find_begin(void* self, double sortKey, bool expandedRange);

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPBars*
/// @param callback int32_t func(QCPBars* self, double sortKey, bool expandedRange)
void q_cpbars_on_find_begin(void* self, int32_t (*callback)(void*, double, bool));

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPBars*
/// @param sortKey double
/// @param expandedRange bool
int32_t q_cpbars_find_end(void* self, double sortKey, bool expandedRange);

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPBars*
/// @param sortKey double
/// @param expandedRange bool
int32_t q_cpbars_qbase_find_end(void* self, double sortKey, bool expandedRange);

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPBars*
/// @param callback int32_t func(QCPBars* self, double sortKey, bool expandedRange)
void q_cpbars_on_find_end(void* self, int32_t (*callback)(void*, double, bool));

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPBars*
QCPPlottableInterface1D* q_cpbars_interface1_d(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPBars*
QCPPlottableInterface1D* q_cpbars_qbase_interface1_d(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPBars*
/// @param callback QCPPlottableInterface1D* func()
void q_cpbars_on_interface1_d(void* self, QCPPlottableInterface1D* (*callback)());

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPBars*
QRect* q_cpbars_clip_rect(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPBars*
QRect* q_cpbars_qbase_clip_rect(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPBars*
/// @param callback QRect* func()
void q_cpbars_on_clip_rect(void* self, QRect* (*callback)());

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPBars*
///
/// @return enum QCP__Interaction
int32_t q_cpbars_selection_category(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPBars*
///
/// @return enum QCP__Interaction
int32_t q_cpbars_qbase_selection_category(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPBars*
/// @param callback int32_t func()
void q_cpbars_on_selection_category(void* self, int32_t (*callback)());

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPBars*
/// @param painter QCPPainter*
void q_cpbars_apply_default_antialiasing_hint(void* self, void* painter);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPBars*
/// @param painter QCPPainter*
void q_cpbars_qbase_apply_default_antialiasing_hint(void* self, void* painter);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPBars*
/// @param callback void func(QCPBars* self, QCPPainter* painter)
void q_cpbars_on_apply_default_antialiasing_hint(void* self, void (*callback)(void*, void*));

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPBars*
/// @param event QMouseEvent*
/// @param additive bool
/// @param details QVariant*
/// @param selectionStateChanged bool*
void q_cpbars_select_event(void* self, void* event, bool additive, void* details, bool* selectionStateChanged);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPBars*
/// @param event QMouseEvent*
/// @param additive bool
/// @param details QVariant*
/// @param selectionStateChanged bool*
void q_cpbars_qbase_select_event(void* self, void* event, bool additive, void* details, bool* selectionStateChanged);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPBars*
/// @param callback void func(QCPBars* self, QMouseEvent* event, bool additive, QVariant* details, bool* selectionStateChanged)
void q_cpbars_on_select_event(void* self, void (*callback)(void*, void*, bool, void*, bool*));

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPBars*
/// @param selectionStateChanged bool*
void q_cpbars_deselect_event(void* self, bool* selectionStateChanged);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPBars*
/// @param selectionStateChanged bool*
void q_cpbars_qbase_deselect_event(void* self, bool* selectionStateChanged);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPBars*
/// @param callback void func(QCPBars* self, bool* selectionStateChanged)
void q_cpbars_on_deselect_event(void* self, void (*callback)(void*, bool*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPBars*
/// @param parentPlot QCustomPlot*
void q_cpbars_parent_plot_initialized(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPBars*
/// @param parentPlot QCustomPlot*
void q_cpbars_qbase_parent_plot_initialized(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPBars*
/// @param callback void func(QCPBars* self, QCustomPlot* parentPlot)
void q_cpbars_on_parent_plot_initialized(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPBars*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cpbars_mouse_press_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPBars*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cpbars_qbase_mouse_press_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPBars*
/// @param callback void func(QCPBars* self, QMouseEvent* event, QVariant* details)
void q_cpbars_on_mouse_press_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPBars*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cpbars_mouse_move_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPBars*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cpbars_qbase_mouse_move_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPBars*
/// @param callback void func(QCPBars* self, QMouseEvent* event, QPointF* startPos)
void q_cpbars_on_mouse_move_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPBars*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cpbars_mouse_release_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPBars*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cpbars_qbase_mouse_release_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPBars*
/// @param callback void func(QCPBars* self, QMouseEvent* event, QPointF* startPos)
void q_cpbars_on_mouse_release_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPBars*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cpbars_mouse_double_click_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPBars*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cpbars_qbase_mouse_double_click_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPBars*
/// @param callback void func(QCPBars* self, QMouseEvent* event, QVariant* details)
void q_cpbars_on_mouse_double_click_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPBars*
/// @param event QWheelEvent*
void q_cpbars_wheel_event(void* self, void* event);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPBars*
/// @param event QWheelEvent*
void q_cpbars_qbase_wheel_event(void* self, void* event);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPBars*
/// @param callback void func(QCPBars* self, QWheelEvent* event)
void q_cpbars_on_wheel_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPBars*
/// @param event QEvent*
bool q_cpbars_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPBars*
/// @param event QEvent*
bool q_cpbars_qbase_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPBars*
/// @param callback bool func(QCPBars* self, QEvent* event)
void q_cpbars_on_event(void* self, bool (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPBars*
/// @param watched QObject*
/// @param event QEvent*
bool q_cpbars_event_filter(void* self, void* watched, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPBars*
/// @param watched QObject*
/// @param event QEvent*
bool q_cpbars_qbase_event_filter(void* self, void* watched, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPBars*
/// @param callback bool func(QCPBars* self, QObject* watched, QEvent* event)
void q_cpbars_on_event_filter(void* self, bool (*callback)(void*, void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPBars*
/// @param event QTimerEvent*
void q_cpbars_timer_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPBars*
/// @param event QTimerEvent*
void q_cpbars_qbase_timer_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPBars*
/// @param callback void func(QCPBars* self, QTimerEvent* event)
void q_cpbars_on_timer_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPBars*
/// @param event QChildEvent*
void q_cpbars_child_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPBars*
/// @param event QChildEvent*
void q_cpbars_qbase_child_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPBars*
/// @param callback void func(QCPBars* self, QChildEvent* event)
void q_cpbars_on_child_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPBars*
/// @param event QEvent*
void q_cpbars_custom_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPBars*
/// @param event QEvent*
void q_cpbars_qbase_custom_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPBars*
/// @param callback void func(QCPBars* self, QEvent* event)
void q_cpbars_on_custom_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPBars*
/// @param signal QMetaMethod*
void q_cpbars_connect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPBars*
/// @param signal QMetaMethod*
void q_cpbars_qbase_connect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPBars*
/// @param callback void func(QCPBars* self, QMetaMethod* signal)
void q_cpbars_on_connect_notify(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPBars*
/// @param signal QMetaMethod*
void q_cpbars_disconnect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPBars*
/// @param signal QMetaMethod*
void q_cpbars_qbase_disconnect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPBars*
/// @param callback void func(QCPBars* self, QMetaMethod* signal)
void q_cpbars_on_disconnect_notify(void* self, void (*callback)(void*, void*));

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPBars*
/// @param painter QCPPainter*
void q_cpbars_apply_fill_antialiasing_hint(void* self, void* painter);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPBars*
/// @param painter QCPPainter*
void q_cpbars_qbase_apply_fill_antialiasing_hint(void* self, void* painter);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPBars*
/// @param callback void func(QCPBars* self, QCPPainter* painter)
void q_cpbars_on_apply_fill_antialiasing_hint(void* self, void (*callback)(void*, void*));

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPBars*
/// @param painter QCPPainter*
void q_cpbars_apply_scatters_antialiasing_hint(void* self, void* painter);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPBars*
/// @param painter QCPPainter*
void q_cpbars_qbase_apply_scatters_antialiasing_hint(void* self, void* painter);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPBars*
/// @param callback void func(QCPBars* self, QCPPainter* painter)
void q_cpbars_on_apply_scatters_antialiasing_hint(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPBars*
/// @param parentPlot QCustomPlot*
void q_cpbars_initialize_parent_plot(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPBars*
/// @param parentPlot QCustomPlot*
void q_cpbars_qbase_initialize_parent_plot(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPBars*
/// @param callback void func(QCPBars* self, QCustomPlot* parentPlot)
void q_cpbars_on_initialize_parent_plot(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPBars*
/// @param parentLayerable QCPLayerable*
void q_cpbars_set_parent_layerable(void* self, void* parentLayerable);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPBars*
/// @param parentLayerable QCPLayerable*
void q_cpbars_qbase_set_parent_layerable(void* self, void* parentLayerable);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPBars*
/// @param callback void func(QCPBars* self, QCPLayerable* parentLayerable)
void q_cpbars_on_set_parent_layerable(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPBars*
/// @param layer QCPLayer*
/// @param prepend bool
bool q_cpbars_move_to_layer(void* self, void* layer, bool prepend);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPBars*
/// @param layer QCPLayer*
/// @param prepend bool
bool q_cpbars_qbase_move_to_layer(void* self, void* layer, bool prepend);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPBars*
/// @param callback bool func(QCPBars* self, QCPLayer* layer, bool prepend)
void q_cpbars_on_move_to_layer(void* self, bool (*callback)(void*, void*, bool));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPBars*
/// @param painter QCPPainter*
/// @param localAntialiased bool
/// @param overrideElement enum QCP__AntialiasedElement
void q_cpbars_apply_antialiasing_hint(void* self, void* painter, bool localAntialiased, int32_t overrideElement);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPBars*
/// @param painter QCPPainter*
/// @param localAntialiased bool
/// @param overrideElement enum QCP__AntialiasedElement
void q_cpbars_qbase_apply_antialiasing_hint(void* self, void* painter, bool localAntialiased, int32_t overrideElement);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPBars*
/// @param callback void func(QCPBars* self, QCPPainter* painter, bool localAntialiased, enum QCP__AntialiasedElement overrideElement)
void q_cpbars_on_apply_antialiasing_hint(void* self, void (*callback)(void*, void*, bool, int32_t));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPBars*
QObject* q_cpbars_sender(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPBars*
QObject* q_cpbars_qbase_sender(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPBars*
/// @param callback QObject* func()
void q_cpbars_on_sender(void* self, QObject* (*callback)());

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPBars*
int32_t q_cpbars_sender_signal_index(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPBars*
int32_t q_cpbars_qbase_sender_signal_index(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPBars*
/// @param callback int32_t func()
void q_cpbars_on_sender_signal_index(void* self, int32_t (*callback)());

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPBars*
/// @param signal const char*
int32_t q_cpbars_receivers(void* self, const char* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPBars*
/// @param signal const char*
int32_t q_cpbars_qbase_receivers(void* self, const char* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPBars*
/// @param callback int32_t func(QCPBars* self, const char* signal)
void q_cpbars_on_receivers(void* self, int32_t (*callback)(void*, const char*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPBars*
/// @param signal QMetaMethod*
bool q_cpbars_is_signal_connected(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPBars*
/// @param signal QMetaMethod*
bool q_cpbars_qbase_is_signal_connected(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPBars*
/// @param callback bool func(QCPBars* self, QMetaMethod* signal)
void q_cpbars_on_is_signal_connected(void* self, bool (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#objectNameChanged)
///
/// Wrapper to allow calling private signal
///
/// @param self QCPBars*
/// @param callback void func(QCPBars* self, const char* objectName)
void q_cpbars_on_object_name_changed(void* self, void (*callback)(void*, const char*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPBars.html)
///
/// Delete this object from C++ memory.
///
/// @param self QCPBars*
void q_cpbars_delete(void* self);

/// https://www.qcustomplot.com/documentation/classQCPStatisticalBoxData.html

/// q_cpstatisticalboxdata_new constructs a new QCPStatisticalBoxData object.
///
QCPStatisticalBoxData* q_cpstatisticalboxdata_new();

/// q_cpstatisticalboxdata_new2 constructs a new QCPStatisticalBoxData object.
///
/// @param key double
/// @param minimum double
/// @param lowerQuartile double
/// @param median double
/// @param upperQuartile double
/// @param maximum double
QCPStatisticalBoxData* q_cpstatisticalboxdata_new2(double key, double minimum, double lowerQuartile, double median, double upperQuartile, double maximum);

/// q_cpstatisticalboxdata_new3 constructs a new QCPStatisticalBoxData object.
///
/// @param param1 QCPStatisticalBoxData*
QCPStatisticalBoxData* q_cpstatisticalboxdata_new3(void* param1);

/// q_cpstatisticalboxdata_new4 constructs a new QCPStatisticalBoxData object.
///
/// @param key double
/// @param minimum double
/// @param lowerQuartile double
/// @param median double
/// @param upperQuartile double
/// @param maximum double
/// @param outliers libqt_list /* of double */
QCPStatisticalBoxData* q_cpstatisticalboxdata_new4(double key, double minimum, double lowerQuartile, double median, double upperQuartile, double maximum, libqt_list outliers);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPStatisticalBoxData.html)
///
/// @param self QCPStatisticalBoxData*
double q_cpstatisticalboxdata_sort_key(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPStatisticalBoxData.html)
///
/// @param sortKey double
QCPStatisticalBoxData* q_cpstatisticalboxdata_from_sort_key(double sortKey);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPStatisticalBoxData.html)
///
bool q_cpstatisticalboxdata_sort_key_is_main_key();

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPStatisticalBoxData.html)
///
/// @param self QCPStatisticalBoxData*
double q_cpstatisticalboxdata_main_key(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPStatisticalBoxData.html)
///
/// @param self QCPStatisticalBoxData*
double q_cpstatisticalboxdata_main_value(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPStatisticalBoxData.html)
///
/// @param self QCPStatisticalBoxData*
QCPRange* q_cpstatisticalboxdata_value_range(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPStatisticalBoxData.html)
///
/// @param self QCPStatisticalBoxData*
double q_cpstatisticalboxdata_key(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPStatisticalBoxData.html)
///
/// @param self QCPStatisticalBoxData*
/// @param key double
void q_cpstatisticalboxdata_set_key(void* self, double key);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPStatisticalBoxData.html)
///
/// @param self QCPStatisticalBoxData*
double q_cpstatisticalboxdata_minimum(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPStatisticalBoxData.html)
///
/// @param self QCPStatisticalBoxData*
/// @param minimum double
void q_cpstatisticalboxdata_set_minimum(void* self, double minimum);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPStatisticalBoxData.html)
///
/// @param self QCPStatisticalBoxData*
double q_cpstatisticalboxdata_lower_quartile(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPStatisticalBoxData.html)
///
/// @param self QCPStatisticalBoxData*
/// @param lowerQuartile double
void q_cpstatisticalboxdata_set_lower_quartile(void* self, double lowerQuartile);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPStatisticalBoxData.html)
///
/// @param self QCPStatisticalBoxData*
double q_cpstatisticalboxdata_median(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPStatisticalBoxData.html)
///
/// @param self QCPStatisticalBoxData*
/// @param median double
void q_cpstatisticalboxdata_set_median(void* self, double median);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPStatisticalBoxData.html)
///
/// @param self QCPStatisticalBoxData*
double q_cpstatisticalboxdata_upper_quartile(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPStatisticalBoxData.html)
///
/// @param self QCPStatisticalBoxData*
/// @param upperQuartile double
void q_cpstatisticalboxdata_set_upper_quartile(void* self, double upperQuartile);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPStatisticalBoxData.html)
///
/// @param self QCPStatisticalBoxData*
double q_cpstatisticalboxdata_maximum(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPStatisticalBoxData.html)
///
/// @param self QCPStatisticalBoxData*
/// @param maximum double
void q_cpstatisticalboxdata_set_maximum(void* self, double maximum);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPStatisticalBoxData.html)
///
/// @param self QCPStatisticalBoxData*
libqt_list /* of double */ q_cpstatisticalboxdata_outliers(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPStatisticalBoxData.html)
///
/// @param self QCPStatisticalBoxData*
/// @param outliers libqt_list /* of double */
void q_cpstatisticalboxdata_set_outliers(void* self, libqt_list outliers);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPStatisticalBoxData.html)
///
/// Delete this object from C++ memory.
///
/// @param self QCPStatisticalBoxData*
void q_cpstatisticalboxdata_delete(void* self);

/// https://www.qcustomplot.com/documentation/classQCPStatisticalBox.html

/// q_cpstatisticalbox_new constructs a new QCPStatisticalBox object.
///
/// @param keyAxis QCPAxis*
/// @param valueAxis QCPAxis*
QCPStatisticalBox* q_cpstatisticalbox_new(void* keyAxis, void* valueAxis);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#metaObject)
///
/// @param self QCPStatisticalBox*
const QMetaObject* q_cpstatisticalbox_meta_object(void* self);

/// @param self QCPStatisticalBox*
/// @param param1 const char*
void* q_cpstatisticalbox_metacast(void* self, const char* param1);

/// @param self QCPStatisticalBox*
/// @param param1 enum QMetaObject__Call
/// @param param2 int
/// @param param3 void*
int32_t q_cpstatisticalbox_metacall(void* self, int32_t param1, int param2, void* param3);

/// Allows for overriding the related default method
///
/// @param self QCPStatisticalBox*
/// @param callback int32_t func(QCPStatisticalBox* self, enum QMetaObject__Call param1, int param2, void* param3)
void q_cpstatisticalbox_on_metacall(void* self, int32_t (*callback)(void*, int32_t, int, void*));

/// Base class method implementation
///
/// @param self QCPStatisticalBox*
/// @param param1 enum QMetaObject__Call
/// @param param2 int
/// @param param3 void*
int32_t q_cpstatisticalbox_qbase_metacall(void* self, int32_t param1, int param2, void* param3);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
const char* q_cpstatisticalbox_tr(const char* s);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPStatisticalBox.html)
///
/// @param self QCPStatisticalBox*
double q_cpstatisticalbox_width(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPStatisticalBox.html)
///
/// @param self QCPStatisticalBox*
double q_cpstatisticalbox_whisker_width(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPStatisticalBox.html)
///
/// @param self QCPStatisticalBox*
QPen* q_cpstatisticalbox_whisker_pen(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPStatisticalBox.html)
///
/// @param self QCPStatisticalBox*
QPen* q_cpstatisticalbox_whisker_bar_pen(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPStatisticalBox.html)
///
/// @param self QCPStatisticalBox*
bool q_cpstatisticalbox_whisker_antialiased(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPStatisticalBox.html)
///
/// @param self QCPStatisticalBox*
QPen* q_cpstatisticalbox_median_pen(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPStatisticalBox.html)
///
/// @param self QCPStatisticalBox*
QCPScatterStyle* q_cpstatisticalbox_outlier_style(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPStatisticalBox.html)
///
/// @param self QCPStatisticalBox*
/// @param keys libqt_list /* of double */
/// @param minimum libqt_list /* of double */
/// @param lowerQuartile libqt_list /* of double */
/// @param median libqt_list /* of double */
/// @param upperQuartile libqt_list /* of double */
/// @param maximum libqt_list /* of double */
void q_cpstatisticalbox_set_data2(void* self, libqt_list keys, libqt_list minimum, libqt_list lowerQuartile, libqt_list median, libqt_list upperQuartile, libqt_list maximum);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPStatisticalBox.html)
///
/// @param self QCPStatisticalBox*
/// @param width double
void q_cpstatisticalbox_set_width(void* self, double width);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPStatisticalBox.html)
///
/// @param self QCPStatisticalBox*
/// @param width double
void q_cpstatisticalbox_set_whisker_width(void* self, double width);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPStatisticalBox.html)
///
/// @param self QCPStatisticalBox*
/// @param pen QPen*
void q_cpstatisticalbox_set_whisker_pen(void* self, void* pen);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPStatisticalBox.html)
///
/// @param self QCPStatisticalBox*
/// @param pen QPen*
void q_cpstatisticalbox_set_whisker_bar_pen(void* self, void* pen);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPStatisticalBox.html)
///
/// @param self QCPStatisticalBox*
/// @param enabled bool
void q_cpstatisticalbox_set_whisker_antialiased(void* self, bool enabled);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPStatisticalBox.html)
///
/// @param self QCPStatisticalBox*
/// @param pen QPen*
void q_cpstatisticalbox_set_median_pen(void* self, void* pen);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPStatisticalBox.html)
///
/// @param self QCPStatisticalBox*
/// @param style QCPScatterStyle*
void q_cpstatisticalbox_set_outlier_style(void* self, void* style);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPStatisticalBox.html)
///
/// @param self QCPStatisticalBox*
/// @param keys libqt_list /* of double */
/// @param minimum libqt_list /* of double */
/// @param lowerQuartile libqt_list /* of double */
/// @param median libqt_list /* of double */
/// @param upperQuartile libqt_list /* of double */
/// @param maximum libqt_list /* of double */
void q_cpstatisticalbox_add_data(void* self, libqt_list keys, libqt_list minimum, libqt_list lowerQuartile, libqt_list median, libqt_list upperQuartile, libqt_list maximum);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPStatisticalBox.html)
///
/// @param self QCPStatisticalBox*
/// @param key double
/// @param minimum double
/// @param lowerQuartile double
/// @param median double
/// @param upperQuartile double
/// @param maximum double
void q_cpstatisticalbox_add_data2(void* self, double key, double minimum, double lowerQuartile, double median, double upperQuartile, double maximum);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPStatisticalBox.html)
///
/// @param self QCPStatisticalBox*
/// @param rect QRectF*
/// @param onlySelectable bool
QCPDataSelection* q_cpstatisticalbox_select_test_rect(void* self, void* rect, bool onlySelectable);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPStatisticalBox.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPStatisticalBox*
/// @param callback QCPDataSelection* func(QCPStatisticalBox* self, QRectF* rect, bool onlySelectable)
void q_cpstatisticalbox_on_select_test_rect(void* self, QCPDataSelection* (*callback)(void*, void*, bool));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPStatisticalBox.html)
///
/// Base class method implementation
///
/// @param self QCPStatisticalBox*
/// @param rect QRectF*
/// @param onlySelectable bool
QCPDataSelection* q_cpstatisticalbox_qbase_select_test_rect(void* self, void* rect, bool onlySelectable);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPStatisticalBox.html)
///
/// @param self QCPStatisticalBox*
/// @param pos QPointF*
/// @param onlySelectable bool
/// @param details QVariant*
double q_cpstatisticalbox_select_test(void* self, void* pos, bool onlySelectable, void* details);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPStatisticalBox.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPStatisticalBox*
/// @param callback double func(QCPStatisticalBox* self, QPointF* pos, bool onlySelectable, QVariant* details)
void q_cpstatisticalbox_on_select_test(void* self, double (*callback)(void*, void*, bool, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPStatisticalBox.html)
///
/// Base class method implementation
///
/// @param self QCPStatisticalBox*
/// @param pos QPointF*
/// @param onlySelectable bool
/// @param details QVariant*
double q_cpstatisticalbox_qbase_select_test(void* self, void* pos, bool onlySelectable, void* details);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPStatisticalBox.html)
///
/// @param self QCPStatisticalBox*
/// @param foundRange bool*
/// @param inSignDomain enum QCP__SignDomain
QCPRange* q_cpstatisticalbox_get_key_range(void* self, bool* foundRange, int32_t inSignDomain);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPStatisticalBox.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPStatisticalBox*
/// @param callback QCPRange* func(QCPStatisticalBox* self, bool* foundRange, enum QCP__SignDomain inSignDomain)
void q_cpstatisticalbox_on_get_key_range(void* self, QCPRange* (*callback)(void*, bool*, int32_t));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPStatisticalBox.html)
///
/// Base class method implementation
///
/// @param self QCPStatisticalBox*
/// @param foundRange bool*
/// @param inSignDomain enum QCP__SignDomain
QCPRange* q_cpstatisticalbox_qbase_get_key_range(void* self, bool* foundRange, int32_t inSignDomain);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPStatisticalBox.html)
///
/// @param self QCPStatisticalBox*
/// @param foundRange bool*
/// @param inSignDomain enum QCP__SignDomain
/// @param inKeyRange QCPRange*
QCPRange* q_cpstatisticalbox_get_value_range(void* self, bool* foundRange, int32_t inSignDomain, void* inKeyRange);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPStatisticalBox.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPStatisticalBox*
/// @param callback QCPRange* func(QCPStatisticalBox* self, bool* foundRange, enum QCP__SignDomain inSignDomain, QCPRange* inKeyRange)
void q_cpstatisticalbox_on_get_value_range(void* self, QCPRange* (*callback)(void*, bool*, int32_t, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPStatisticalBox.html)
///
/// Base class method implementation
///
/// @param self QCPStatisticalBox*
/// @param foundRange bool*
/// @param inSignDomain enum QCP__SignDomain
/// @param inKeyRange QCPRange*
QCPRange* q_cpstatisticalbox_qbase_get_value_range(void* self, bool* foundRange, int32_t inSignDomain, void* inKeyRange);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPStatisticalBox.html)
///
/// @param self QCPStatisticalBox*
/// @param painter QCPPainter*
void q_cpstatisticalbox_draw(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPStatisticalBox.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPStatisticalBox*
/// @param callback void func(QCPStatisticalBox* self, QCPPainter* painter)
void q_cpstatisticalbox_on_draw(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPStatisticalBox.html)
///
/// Base class method implementation
///
/// @param self QCPStatisticalBox*
/// @param painter QCPPainter*
void q_cpstatisticalbox_qbase_draw(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPStatisticalBox.html)
///
/// @param self QCPStatisticalBox*
/// @param painter QCPPainter*
/// @param rect QRectF*
void q_cpstatisticalbox_draw_legend_icon(void* self, void* painter, void* rect);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPStatisticalBox.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPStatisticalBox*
/// @param callback void func(QCPStatisticalBox* self, QCPPainter* painter, QRectF* rect)
void q_cpstatisticalbox_on_draw_legend_icon(void* self, void (*callback)(void*, void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPStatisticalBox.html)
///
/// Base class method implementation
///
/// @param self QCPStatisticalBox*
/// @param painter QCPPainter*
/// @param rect QRectF*
void q_cpstatisticalbox_qbase_draw_legend_icon(void* self, void* painter, void* rect);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
/// @param c const char*
const char* q_cpstatisticalbox_tr2(const char* s, const char* c);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
/// @param c const char*
/// @param n int
const char* q_cpstatisticalbox_tr3(const char* s, const char* c, int n);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPStatisticalBox.html)
///
/// @param self QCPStatisticalBox*
/// @param keys libqt_list /* of double */
/// @param minimum libqt_list /* of double */
/// @param lowerQuartile libqt_list /* of double */
/// @param median libqt_list /* of double */
/// @param upperQuartile libqt_list /* of double */
/// @param maximum libqt_list /* of double */
/// @param alreadySorted bool
void q_cpstatisticalbox_set_data7(void* self, libqt_list keys, libqt_list minimum, libqt_list lowerQuartile, libqt_list median, libqt_list upperQuartile, libqt_list maximum, bool alreadySorted);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPStatisticalBox.html)
///
/// @param self QCPStatisticalBox*
/// @param keys libqt_list /* of double */
/// @param minimum libqt_list /* of double */
/// @param lowerQuartile libqt_list /* of double */
/// @param median libqt_list /* of double */
/// @param upperQuartile libqt_list /* of double */
/// @param maximum libqt_list /* of double */
/// @param alreadySorted bool
void q_cpstatisticalbox_add_data7(void* self, libqt_list keys, libqt_list minimum, libqt_list lowerQuartile, libqt_list median, libqt_list upperQuartile, libqt_list maximum, bool alreadySorted);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPStatisticalBox.html)
///
/// @param self QCPStatisticalBox*
/// @param key double
/// @param minimum double
/// @param lowerQuartile double
/// @param median double
/// @param upperQuartile double
/// @param maximum double
/// @param outliers libqt_list /* of double */
void q_cpstatisticalbox_add_data72(void* self, double key, double minimum, double lowerQuartile, double median, double upperQuartile, double maximum, libqt_list outliers);

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// @param self QCPStatisticalBox*
/// @param param1 QCPPlottableInterface1D*
void q_cpstatisticalbox_operator_assign(void* self, void* param1);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPStatisticalBox*
const char* q_cpstatisticalbox_name(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPStatisticalBox*
bool q_cpstatisticalbox_antialiased_fill(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPStatisticalBox*
bool q_cpstatisticalbox_antialiased_scatters(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPStatisticalBox*
QPen* q_cpstatisticalbox_pen(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPStatisticalBox*
QBrush* q_cpstatisticalbox_brush(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPStatisticalBox*
QCPAxis* q_cpstatisticalbox_key_axis(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPStatisticalBox*
QCPAxis* q_cpstatisticalbox_value_axis(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPStatisticalBox*
///
/// @return enum QCP__SelectionType
int32_t q_cpstatisticalbox_selectable(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPStatisticalBox*
bool q_cpstatisticalbox_selected(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPStatisticalBox*
QCPDataSelection* q_cpstatisticalbox_selection(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPStatisticalBox*
QCPSelectionDecorator* q_cpstatisticalbox_selection_decorator(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPStatisticalBox*
/// @param name const char*
void q_cpstatisticalbox_set_name(void* self, const char* name);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPStatisticalBox*
/// @param enabled bool
void q_cpstatisticalbox_set_antialiased_fill(void* self, bool enabled);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPStatisticalBox*
/// @param enabled bool
void q_cpstatisticalbox_set_antialiased_scatters(void* self, bool enabled);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPStatisticalBox*
/// @param pen QPen*
void q_cpstatisticalbox_set_pen(void* self, void* pen);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPStatisticalBox*
/// @param brush QBrush*
void q_cpstatisticalbox_set_brush(void* self, void* brush);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPStatisticalBox*
/// @param axis QCPAxis*
void q_cpstatisticalbox_set_key_axis(void* self, void* axis);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPStatisticalBox*
/// @param axis QCPAxis*
void q_cpstatisticalbox_set_value_axis(void* self, void* axis);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPStatisticalBox*
/// @param selectable enum QCP__SelectionType
void q_cpstatisticalbox_set_selectable(void* self, int32_t selectable);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPStatisticalBox*
/// @param selection QCPDataSelection*
void q_cpstatisticalbox_set_selection(void* self, void* selection);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPStatisticalBox*
/// @param decorator QCPSelectionDecorator*
void q_cpstatisticalbox_set_selection_decorator(void* self, void* decorator);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPStatisticalBox*
/// @param key double
/// @param value double
/// @param x double*
/// @param y double*
void q_cpstatisticalbox_coords_to_pixels(void* self, double key, double value, double* x, double* y);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPStatisticalBox*
/// @param key double
/// @param value double
const QPointF* q_cpstatisticalbox_coords_to_pixels2(void* self, double key, double value);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPStatisticalBox*
/// @param x double
/// @param y double
/// @param key double*
/// @param value double*
void q_cpstatisticalbox_pixels_to_coords(void* self, double x, double y, double* key, double* value);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPStatisticalBox*
/// @param pixelPos QPointF*
/// @param key double*
/// @param value double*
void q_cpstatisticalbox_pixels_to_coords2(void* self, void* pixelPos, double* key, double* value);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPStatisticalBox*
void q_cpstatisticalbox_rescale_axes(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPStatisticalBox*
void q_cpstatisticalbox_rescale_key_axis(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPStatisticalBox*
void q_cpstatisticalbox_rescale_value_axis(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPStatisticalBox*
/// @param legend QCPLegend*
bool q_cpstatisticalbox_add_to_legend(void* self, void* legend);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPStatisticalBox*
bool q_cpstatisticalbox_add_to_legend2(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPStatisticalBox*
/// @param legend QCPLegend*
bool q_cpstatisticalbox_remove_from_legend(void* self, void* legend);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPStatisticalBox*
bool q_cpstatisticalbox_remove_from_legend2(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPStatisticalBox*
/// @param selected bool
void q_cpstatisticalbox_selection_changed(void* self, bool selected);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPStatisticalBox*
/// @param selection QCPDataSelection*
void q_cpstatisticalbox_selection_changed2(void* self, void* selection);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPStatisticalBox*
/// @param selectable enum QCP__SelectionType
void q_cpstatisticalbox_selectable_changed(void* self, int32_t selectable);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPStatisticalBox*
/// @param onlyEnlarge bool
void q_cpstatisticalbox_rescale_axes1(void* self, bool onlyEnlarge);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPStatisticalBox*
/// @param onlyEnlarge bool
void q_cpstatisticalbox_rescale_key_axis1(void* self, bool onlyEnlarge);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPStatisticalBox*
/// @param onlyEnlarge bool
void q_cpstatisticalbox_rescale_value_axis1(void* self, bool onlyEnlarge);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPStatisticalBox*
/// @param onlyEnlarge bool
/// @param inKeyRange bool
void q_cpstatisticalbox_rescale_value_axis2(void* self, bool onlyEnlarge, bool inKeyRange);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPStatisticalBox*
bool q_cpstatisticalbox_visible(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPStatisticalBox*
QCustomPlot* q_cpstatisticalbox_parent_plot(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPStatisticalBox*
QCPLayerable* q_cpstatisticalbox_parent_layerable(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPStatisticalBox*
QCPLayer* q_cpstatisticalbox_layer(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPStatisticalBox*
bool q_cpstatisticalbox_antialiased(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPStatisticalBox*
/// @param on bool
void q_cpstatisticalbox_set_visible(void* self, bool on);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPStatisticalBox*
/// @param layer QCPLayer*
bool q_cpstatisticalbox_set_layer(void* self, void* layer);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPStatisticalBox*
/// @param layerName const char*
bool q_cpstatisticalbox_set_layer2(void* self, const char* layerName);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPStatisticalBox*
/// @param enabled bool
void q_cpstatisticalbox_set_antialiased(void* self, bool enabled);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPStatisticalBox*
bool q_cpstatisticalbox_real_visibility(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPStatisticalBox*
/// @param newLayer QCPLayer*
void q_cpstatisticalbox_layer_changed(void* self, void* newLayer);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPStatisticalBox*
/// @param callback void func(QCPStatisticalBox* self, QCPLayer* newLayer)
void q_cpstatisticalbox_on_layer_changed(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#objectName)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPStatisticalBox*
const char* q_cpstatisticalbox_object_name(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setObjectName)
///
/// @param self QCPStatisticalBox*
/// @param name char*
void q_cpstatisticalbox_set_object_name(void* self, char* name);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isWidgetType)
///
/// @param self QCPStatisticalBox*
bool q_cpstatisticalbox_is_widget_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isWindowType)
///
/// @param self QCPStatisticalBox*
bool q_cpstatisticalbox_is_window_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isQuickItemType)
///
/// @param self QCPStatisticalBox*
bool q_cpstatisticalbox_is_quick_item_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#signalsBlocked)
///
/// @param self QCPStatisticalBox*
bool q_cpstatisticalbox_signals_blocked(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#blockSignals)
///
/// @param self QCPStatisticalBox*
/// @param b bool
bool q_cpstatisticalbox_block_signals(void* self, bool b);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#thread)
///
/// @param self QCPStatisticalBox*
QThread* q_cpstatisticalbox_thread(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#moveToThread)
///
/// @param self QCPStatisticalBox*
/// @param thread QThread*
bool q_cpstatisticalbox_move_to_thread(void* self, void* thread);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#startTimer)
///
/// @param self QCPStatisticalBox*
/// @param interval int
int32_t q_cpstatisticalbox_start_timer(void* self, int interval);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#killTimer)
///
/// @param self QCPStatisticalBox*
/// @param id int
void q_cpstatisticalbox_kill_timer(void* self, int id);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#killTimer)
///
/// @param self QCPStatisticalBox*
/// @param id enum Qt__TimerId
void q_cpstatisticalbox_kill_timer2(void* self, int32_t id);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#children)
///
/// @param self QCPStatisticalBox*
libqt_list /* of QObject* */ q_cpstatisticalbox_children(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setParent)
///
/// @param self QCPStatisticalBox*
/// @param parent QObject*
void q_cpstatisticalbox_set_parent(void* self, void* parent);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#installEventFilter)
///
/// @param self QCPStatisticalBox*
/// @param filterObj QObject*
void q_cpstatisticalbox_install_event_filter(void* self, void* filterObj);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#removeEventFilter)
///
/// @param self QCPStatisticalBox*
/// @param obj QObject*
void q_cpstatisticalbox_remove_event_filter(void* self, void* obj);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param method QMetaMethod*
QMetaObject__Connection* q_cpstatisticalbox_connect(void* sender, void* signal, void* receiver, void* method);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param self QCPStatisticalBox*
/// @param sender QObject*
/// @param signal const char*
/// @param member const char*
QMetaObject__Connection* q_cpstatisticalbox_connect2(void* self, void* sender, const char* signal, const char* member);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param member QMetaMethod*
bool q_cpstatisticalbox_disconnect(void* sender, void* signal, void* receiver, void* member);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnect)
///
/// @param param1 QMetaObject__Connection*
bool q_cpstatisticalbox_disconnect2(void* param1);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dumpObjectTree)
///
/// @param self QCPStatisticalBox*
void q_cpstatisticalbox_dump_object_tree(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dumpObjectInfo)
///
/// @param self QCPStatisticalBox*
void q_cpstatisticalbox_dump_object_info(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setProperty)
///
/// @param self QCPStatisticalBox*
/// @param name const char*
/// @param value QVariant*
bool q_cpstatisticalbox_set_property(void* self, const char* name, void* value);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#property)
///
/// @param self QCPStatisticalBox*
/// @param name const char*
QVariant* q_cpstatisticalbox_property(void* self, const char* name);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dynamicPropertyNames)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPStatisticalBox*
const char** q_cpstatisticalbox_dynamic_property_names(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#bindingStorage)
///
/// @param self QCPStatisticalBox*
QBindingStorage* q_cpstatisticalbox_binding_storage(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#bindingStorage)
///
/// @param self QCPStatisticalBox*
const QBindingStorage* q_cpstatisticalbox_binding_storage2(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPStatisticalBox*
void q_cpstatisticalbox_destroyed(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPStatisticalBox*
/// @param callback void func(QCPStatisticalBox* self)
void q_cpstatisticalbox_on_destroyed(void* self, void (*callback)(void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#parent)
///
/// @param self QCPStatisticalBox*
QObject* q_cpstatisticalbox_parent(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#inherits)
///
/// @param self QCPStatisticalBox*
/// @param classname const char*
bool q_cpstatisticalbox_inherits(void* self, const char* classname);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#deleteLater)
///
/// @param self QCPStatisticalBox*
void q_cpstatisticalbox_delete_later(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#moveToThread)
///
/// @param self QCPStatisticalBox*
/// @param thread QThread*
/// @param param2 Disambiguated_t*
bool q_cpstatisticalbox_move_to_thread2(void* self, void* thread, void* param2);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#startTimer)
///
/// @param self QCPStatisticalBox*
/// @param interval int
/// @param timerType enum Qt__TimerType
int32_t q_cpstatisticalbox_start_timer22(void* self, int interval, int32_t timerType);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param method QMetaMethod*
/// @param type enum Qt__ConnectionType
QMetaObject__Connection* q_cpstatisticalbox_connect5(void* sender, void* signal, void* receiver, void* method, int32_t type);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param self QCPStatisticalBox*
/// @param sender QObject*
/// @param signal const char*
/// @param member const char*
/// @param type enum Qt__ConnectionType
QMetaObject__Connection* q_cpstatisticalbox_connect4(void* self, void* sender, const char* signal, const char* member, int32_t type);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPStatisticalBox*
/// @param param1 QObject*
void q_cpstatisticalbox_destroyed1(void* self, void* param1);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPStatisticalBox*
/// @param callback void func(QCPStatisticalBox* self, QObject* param1)
void q_cpstatisticalbox_on_destroyed1(void* self, void (*callback)(void*, void*));

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPStatisticalBox*
int32_t q_cpstatisticalbox_data_count(void* self);

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPStatisticalBox*
int32_t q_cpstatisticalbox_qbase_data_count(void* self);

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPStatisticalBox*
/// @param callback int32_t func()
void q_cpstatisticalbox_on_data_count(void* self, int32_t (*callback)());

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPStatisticalBox*
/// @param index int
double q_cpstatisticalbox_data_main_key(void* self, int index);

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPStatisticalBox*
/// @param index int
double q_cpstatisticalbox_qbase_data_main_key(void* self, int index);

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPStatisticalBox*
/// @param callback double func(QCPStatisticalBox* self, int index)
void q_cpstatisticalbox_on_data_main_key(void* self, double (*callback)(void*, int));

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPStatisticalBox*
/// @param index int
double q_cpstatisticalbox_data_sort_key(void* self, int index);

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPStatisticalBox*
/// @param index int
double q_cpstatisticalbox_qbase_data_sort_key(void* self, int index);

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPStatisticalBox*
/// @param callback double func(QCPStatisticalBox* self, int index)
void q_cpstatisticalbox_on_data_sort_key(void* self, double (*callback)(void*, int));

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPStatisticalBox*
/// @param index int
double q_cpstatisticalbox_data_main_value(void* self, int index);

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPStatisticalBox*
/// @param index int
double q_cpstatisticalbox_qbase_data_main_value(void* self, int index);

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPStatisticalBox*
/// @param callback double func(QCPStatisticalBox* self, int index)
void q_cpstatisticalbox_on_data_main_value(void* self, double (*callback)(void*, int));

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPStatisticalBox*
/// @param index int
QCPRange* q_cpstatisticalbox_data_value_range(void* self, int index);

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPStatisticalBox*
/// @param index int
QCPRange* q_cpstatisticalbox_qbase_data_value_range(void* self, int index);

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPStatisticalBox*
/// @param callback QCPRange* func(QCPStatisticalBox* self, int index)
void q_cpstatisticalbox_on_data_value_range(void* self, QCPRange* (*callback)(void*, int));

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPStatisticalBox*
/// @param index int
QPointF* q_cpstatisticalbox_data_pixel_position(void* self, int index);

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPStatisticalBox*
/// @param index int
QPointF* q_cpstatisticalbox_qbase_data_pixel_position(void* self, int index);

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPStatisticalBox*
/// @param callback QPointF* func(QCPStatisticalBox* self, int index)
void q_cpstatisticalbox_on_data_pixel_position(void* self, QPointF* (*callback)(void*, int));

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPStatisticalBox*
bool q_cpstatisticalbox_sort_key_is_main_key(void* self);

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPStatisticalBox*
bool q_cpstatisticalbox_qbase_sort_key_is_main_key(void* self);

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPStatisticalBox*
/// @param callback bool func()
void q_cpstatisticalbox_on_sort_key_is_main_key(void* self, bool (*callback)());

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPStatisticalBox*
/// @param sortKey double
/// @param expandedRange bool
int32_t q_cpstatisticalbox_find_begin(void* self, double sortKey, bool expandedRange);

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPStatisticalBox*
/// @param sortKey double
/// @param expandedRange bool
int32_t q_cpstatisticalbox_qbase_find_begin(void* self, double sortKey, bool expandedRange);

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPStatisticalBox*
/// @param callback int32_t func(QCPStatisticalBox* self, double sortKey, bool expandedRange)
void q_cpstatisticalbox_on_find_begin(void* self, int32_t (*callback)(void*, double, bool));

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPStatisticalBox*
/// @param sortKey double
/// @param expandedRange bool
int32_t q_cpstatisticalbox_find_end(void* self, double sortKey, bool expandedRange);

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPStatisticalBox*
/// @param sortKey double
/// @param expandedRange bool
int32_t q_cpstatisticalbox_qbase_find_end(void* self, double sortKey, bool expandedRange);

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPStatisticalBox*
/// @param callback int32_t func(QCPStatisticalBox* self, double sortKey, bool expandedRange)
void q_cpstatisticalbox_on_find_end(void* self, int32_t (*callback)(void*, double, bool));

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPStatisticalBox*
QCPPlottableInterface1D* q_cpstatisticalbox_interface1_d(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPStatisticalBox*
QCPPlottableInterface1D* q_cpstatisticalbox_qbase_interface1_d(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPStatisticalBox*
/// @param callback QCPPlottableInterface1D* func()
void q_cpstatisticalbox_on_interface1_d(void* self, QCPPlottableInterface1D* (*callback)());

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPStatisticalBox*
QRect* q_cpstatisticalbox_clip_rect(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPStatisticalBox*
QRect* q_cpstatisticalbox_qbase_clip_rect(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPStatisticalBox*
/// @param callback QRect* func()
void q_cpstatisticalbox_on_clip_rect(void* self, QRect* (*callback)());

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPStatisticalBox*
///
/// @return enum QCP__Interaction
int32_t q_cpstatisticalbox_selection_category(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPStatisticalBox*
///
/// @return enum QCP__Interaction
int32_t q_cpstatisticalbox_qbase_selection_category(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPStatisticalBox*
/// @param callback int32_t func()
void q_cpstatisticalbox_on_selection_category(void* self, int32_t (*callback)());

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPStatisticalBox*
/// @param painter QCPPainter*
void q_cpstatisticalbox_apply_default_antialiasing_hint(void* self, void* painter);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPStatisticalBox*
/// @param painter QCPPainter*
void q_cpstatisticalbox_qbase_apply_default_antialiasing_hint(void* self, void* painter);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPStatisticalBox*
/// @param callback void func(QCPStatisticalBox* self, QCPPainter* painter)
void q_cpstatisticalbox_on_apply_default_antialiasing_hint(void* self, void (*callback)(void*, void*));

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPStatisticalBox*
/// @param event QMouseEvent*
/// @param additive bool
/// @param details QVariant*
/// @param selectionStateChanged bool*
void q_cpstatisticalbox_select_event(void* self, void* event, bool additive, void* details, bool* selectionStateChanged);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPStatisticalBox*
/// @param event QMouseEvent*
/// @param additive bool
/// @param details QVariant*
/// @param selectionStateChanged bool*
void q_cpstatisticalbox_qbase_select_event(void* self, void* event, bool additive, void* details, bool* selectionStateChanged);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPStatisticalBox*
/// @param callback void func(QCPStatisticalBox* self, QMouseEvent* event, bool additive, QVariant* details, bool* selectionStateChanged)
void q_cpstatisticalbox_on_select_event(void* self, void (*callback)(void*, void*, bool, void*, bool*));

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPStatisticalBox*
/// @param selectionStateChanged bool*
void q_cpstatisticalbox_deselect_event(void* self, bool* selectionStateChanged);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPStatisticalBox*
/// @param selectionStateChanged bool*
void q_cpstatisticalbox_qbase_deselect_event(void* self, bool* selectionStateChanged);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPStatisticalBox*
/// @param callback void func(QCPStatisticalBox* self, bool* selectionStateChanged)
void q_cpstatisticalbox_on_deselect_event(void* self, void (*callback)(void*, bool*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPStatisticalBox*
/// @param parentPlot QCustomPlot*
void q_cpstatisticalbox_parent_plot_initialized(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPStatisticalBox*
/// @param parentPlot QCustomPlot*
void q_cpstatisticalbox_qbase_parent_plot_initialized(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPStatisticalBox*
/// @param callback void func(QCPStatisticalBox* self, QCustomPlot* parentPlot)
void q_cpstatisticalbox_on_parent_plot_initialized(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPStatisticalBox*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cpstatisticalbox_mouse_press_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPStatisticalBox*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cpstatisticalbox_qbase_mouse_press_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPStatisticalBox*
/// @param callback void func(QCPStatisticalBox* self, QMouseEvent* event, QVariant* details)
void q_cpstatisticalbox_on_mouse_press_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPStatisticalBox*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cpstatisticalbox_mouse_move_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPStatisticalBox*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cpstatisticalbox_qbase_mouse_move_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPStatisticalBox*
/// @param callback void func(QCPStatisticalBox* self, QMouseEvent* event, QPointF* startPos)
void q_cpstatisticalbox_on_mouse_move_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPStatisticalBox*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cpstatisticalbox_mouse_release_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPStatisticalBox*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cpstatisticalbox_qbase_mouse_release_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPStatisticalBox*
/// @param callback void func(QCPStatisticalBox* self, QMouseEvent* event, QPointF* startPos)
void q_cpstatisticalbox_on_mouse_release_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPStatisticalBox*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cpstatisticalbox_mouse_double_click_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPStatisticalBox*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cpstatisticalbox_qbase_mouse_double_click_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPStatisticalBox*
/// @param callback void func(QCPStatisticalBox* self, QMouseEvent* event, QVariant* details)
void q_cpstatisticalbox_on_mouse_double_click_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPStatisticalBox*
/// @param event QWheelEvent*
void q_cpstatisticalbox_wheel_event(void* self, void* event);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPStatisticalBox*
/// @param event QWheelEvent*
void q_cpstatisticalbox_qbase_wheel_event(void* self, void* event);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPStatisticalBox*
/// @param callback void func(QCPStatisticalBox* self, QWheelEvent* event)
void q_cpstatisticalbox_on_wheel_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPStatisticalBox*
/// @param event QEvent*
bool q_cpstatisticalbox_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPStatisticalBox*
/// @param event QEvent*
bool q_cpstatisticalbox_qbase_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPStatisticalBox*
/// @param callback bool func(QCPStatisticalBox* self, QEvent* event)
void q_cpstatisticalbox_on_event(void* self, bool (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPStatisticalBox*
/// @param watched QObject*
/// @param event QEvent*
bool q_cpstatisticalbox_event_filter(void* self, void* watched, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPStatisticalBox*
/// @param watched QObject*
/// @param event QEvent*
bool q_cpstatisticalbox_qbase_event_filter(void* self, void* watched, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPStatisticalBox*
/// @param callback bool func(QCPStatisticalBox* self, QObject* watched, QEvent* event)
void q_cpstatisticalbox_on_event_filter(void* self, bool (*callback)(void*, void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPStatisticalBox*
/// @param event QTimerEvent*
void q_cpstatisticalbox_timer_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPStatisticalBox*
/// @param event QTimerEvent*
void q_cpstatisticalbox_qbase_timer_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPStatisticalBox*
/// @param callback void func(QCPStatisticalBox* self, QTimerEvent* event)
void q_cpstatisticalbox_on_timer_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPStatisticalBox*
/// @param event QChildEvent*
void q_cpstatisticalbox_child_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPStatisticalBox*
/// @param event QChildEvent*
void q_cpstatisticalbox_qbase_child_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPStatisticalBox*
/// @param callback void func(QCPStatisticalBox* self, QChildEvent* event)
void q_cpstatisticalbox_on_child_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPStatisticalBox*
/// @param event QEvent*
void q_cpstatisticalbox_custom_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPStatisticalBox*
/// @param event QEvent*
void q_cpstatisticalbox_qbase_custom_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPStatisticalBox*
/// @param callback void func(QCPStatisticalBox* self, QEvent* event)
void q_cpstatisticalbox_on_custom_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPStatisticalBox*
/// @param signal QMetaMethod*
void q_cpstatisticalbox_connect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPStatisticalBox*
/// @param signal QMetaMethod*
void q_cpstatisticalbox_qbase_connect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPStatisticalBox*
/// @param callback void func(QCPStatisticalBox* self, QMetaMethod* signal)
void q_cpstatisticalbox_on_connect_notify(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPStatisticalBox*
/// @param signal QMetaMethod*
void q_cpstatisticalbox_disconnect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPStatisticalBox*
/// @param signal QMetaMethod*
void q_cpstatisticalbox_qbase_disconnect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPStatisticalBox*
/// @param callback void func(QCPStatisticalBox* self, QMetaMethod* signal)
void q_cpstatisticalbox_on_disconnect_notify(void* self, void (*callback)(void*, void*));

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPStatisticalBox*
/// @param painter QCPPainter*
void q_cpstatisticalbox_apply_fill_antialiasing_hint(void* self, void* painter);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPStatisticalBox*
/// @param painter QCPPainter*
void q_cpstatisticalbox_qbase_apply_fill_antialiasing_hint(void* self, void* painter);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPStatisticalBox*
/// @param callback void func(QCPStatisticalBox* self, QCPPainter* painter)
void q_cpstatisticalbox_on_apply_fill_antialiasing_hint(void* self, void (*callback)(void*, void*));

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPStatisticalBox*
/// @param painter QCPPainter*
void q_cpstatisticalbox_apply_scatters_antialiasing_hint(void* self, void* painter);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPStatisticalBox*
/// @param painter QCPPainter*
void q_cpstatisticalbox_qbase_apply_scatters_antialiasing_hint(void* self, void* painter);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPStatisticalBox*
/// @param callback void func(QCPStatisticalBox* self, QCPPainter* painter)
void q_cpstatisticalbox_on_apply_scatters_antialiasing_hint(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPStatisticalBox*
/// @param parentPlot QCustomPlot*
void q_cpstatisticalbox_initialize_parent_plot(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPStatisticalBox*
/// @param parentPlot QCustomPlot*
void q_cpstatisticalbox_qbase_initialize_parent_plot(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPStatisticalBox*
/// @param callback void func(QCPStatisticalBox* self, QCustomPlot* parentPlot)
void q_cpstatisticalbox_on_initialize_parent_plot(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPStatisticalBox*
/// @param parentLayerable QCPLayerable*
void q_cpstatisticalbox_set_parent_layerable(void* self, void* parentLayerable);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPStatisticalBox*
/// @param parentLayerable QCPLayerable*
void q_cpstatisticalbox_qbase_set_parent_layerable(void* self, void* parentLayerable);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPStatisticalBox*
/// @param callback void func(QCPStatisticalBox* self, QCPLayerable* parentLayerable)
void q_cpstatisticalbox_on_set_parent_layerable(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPStatisticalBox*
/// @param layer QCPLayer*
/// @param prepend bool
bool q_cpstatisticalbox_move_to_layer(void* self, void* layer, bool prepend);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPStatisticalBox*
/// @param layer QCPLayer*
/// @param prepend bool
bool q_cpstatisticalbox_qbase_move_to_layer(void* self, void* layer, bool prepend);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPStatisticalBox*
/// @param callback bool func(QCPStatisticalBox* self, QCPLayer* layer, bool prepend)
void q_cpstatisticalbox_on_move_to_layer(void* self, bool (*callback)(void*, void*, bool));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPStatisticalBox*
/// @param painter QCPPainter*
/// @param localAntialiased bool
/// @param overrideElement enum QCP__AntialiasedElement
void q_cpstatisticalbox_apply_antialiasing_hint(void* self, void* painter, bool localAntialiased, int32_t overrideElement);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPStatisticalBox*
/// @param painter QCPPainter*
/// @param localAntialiased bool
/// @param overrideElement enum QCP__AntialiasedElement
void q_cpstatisticalbox_qbase_apply_antialiasing_hint(void* self, void* painter, bool localAntialiased, int32_t overrideElement);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPStatisticalBox*
/// @param callback void func(QCPStatisticalBox* self, QCPPainter* painter, bool localAntialiased, enum QCP__AntialiasedElement overrideElement)
void q_cpstatisticalbox_on_apply_antialiasing_hint(void* self, void (*callback)(void*, void*, bool, int32_t));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPStatisticalBox*
QObject* q_cpstatisticalbox_sender(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPStatisticalBox*
QObject* q_cpstatisticalbox_qbase_sender(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPStatisticalBox*
/// @param callback QObject* func()
void q_cpstatisticalbox_on_sender(void* self, QObject* (*callback)());

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPStatisticalBox*
int32_t q_cpstatisticalbox_sender_signal_index(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPStatisticalBox*
int32_t q_cpstatisticalbox_qbase_sender_signal_index(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPStatisticalBox*
/// @param callback int32_t func()
void q_cpstatisticalbox_on_sender_signal_index(void* self, int32_t (*callback)());

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPStatisticalBox*
/// @param signal const char*
int32_t q_cpstatisticalbox_receivers(void* self, const char* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPStatisticalBox*
/// @param signal const char*
int32_t q_cpstatisticalbox_qbase_receivers(void* self, const char* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPStatisticalBox*
/// @param callback int32_t func(QCPStatisticalBox* self, const char* signal)
void q_cpstatisticalbox_on_receivers(void* self, int32_t (*callback)(void*, const char*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPStatisticalBox*
/// @param signal QMetaMethod*
bool q_cpstatisticalbox_is_signal_connected(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPStatisticalBox*
/// @param signal QMetaMethod*
bool q_cpstatisticalbox_qbase_is_signal_connected(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPStatisticalBox*
/// @param callback bool func(QCPStatisticalBox* self, QMetaMethod* signal)
void q_cpstatisticalbox_on_is_signal_connected(void* self, bool (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#objectNameChanged)
///
/// Wrapper to allow calling private signal
///
/// @param self QCPStatisticalBox*
/// @param callback void func(QCPStatisticalBox* self, const char* objectName)
void q_cpstatisticalbox_on_object_name_changed(void* self, void (*callback)(void*, const char*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPStatisticalBox.html)
///
/// Delete this object from C++ memory.
///
/// @param self QCPStatisticalBox*
void q_cpstatisticalbox_delete(void* self);

/// https://www.qcustomplot.com/documentation/classQCPColorMapData.html

/// q_cpcolormapdata_new constructs a new QCPColorMapData object.
///
/// @param keySize int
/// @param valueSize int
/// @param keyRange QCPRange*
/// @param valueRange QCPRange*
QCPColorMapData* q_cpcolormapdata_new(int keySize, int valueSize, void* keyRange, void* valueRange);

/// q_cpcolormapdata_new2 constructs a new QCPColorMapData object.
///
/// @param other QCPColorMapData*
QCPColorMapData* q_cpcolormapdata_new2(void* other);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorMapData.html)
///
/// @param self QCPColorMapData*
/// @param other QCPColorMapData*
void q_cpcolormapdata_operator_assign(void* self, void* other);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorMapData.html)
///
/// @param self QCPColorMapData*
int32_t q_cpcolormapdata_key_size(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorMapData.html)
///
/// @param self QCPColorMapData*
int32_t q_cpcolormapdata_value_size(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorMapData.html)
///
/// @param self QCPColorMapData*
QCPRange* q_cpcolormapdata_key_range(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorMapData.html)
///
/// @param self QCPColorMapData*
QCPRange* q_cpcolormapdata_value_range(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorMapData.html)
///
/// @param self QCPColorMapData*
QCPRange* q_cpcolormapdata_data_bounds(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorMapData.html)
///
/// @param self QCPColorMapData*
/// @param key double
/// @param value double
double q_cpcolormapdata_data(void* self, double key, double value);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorMapData.html)
///
/// @param self QCPColorMapData*
/// @param keyIndex int
/// @param valueIndex int
double q_cpcolormapdata_cell(void* self, int keyIndex, int valueIndex);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorMapData.html)
///
/// @param self QCPColorMapData*
/// @param keyIndex int
/// @param valueIndex int
unsigned char q_cpcolormapdata_alpha(void* self, int keyIndex, int valueIndex);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorMapData.html)
///
/// @param self QCPColorMapData*
/// @param keySize int
/// @param valueSize int
void q_cpcolormapdata_set_size(void* self, int keySize, int valueSize);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorMapData.html)
///
/// @param self QCPColorMapData*
/// @param keySize int
void q_cpcolormapdata_set_key_size(void* self, int keySize);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorMapData.html)
///
/// @param self QCPColorMapData*
/// @param valueSize int
void q_cpcolormapdata_set_value_size(void* self, int valueSize);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorMapData.html)
///
/// @param self QCPColorMapData*
/// @param keyRange QCPRange*
/// @param valueRange QCPRange*
void q_cpcolormapdata_set_range(void* self, void* keyRange, void* valueRange);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorMapData.html)
///
/// @param self QCPColorMapData*
/// @param keyRange QCPRange*
void q_cpcolormapdata_set_key_range(void* self, void* keyRange);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorMapData.html)
///
/// @param self QCPColorMapData*
/// @param valueRange QCPRange*
void q_cpcolormapdata_set_value_range(void* self, void* valueRange);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorMapData.html)
///
/// @param self QCPColorMapData*
/// @param key double
/// @param value double
/// @param z double
void q_cpcolormapdata_set_data(void* self, double key, double value, double z);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorMapData.html)
///
/// @param self QCPColorMapData*
/// @param keyIndex int
/// @param valueIndex int
/// @param z double
void q_cpcolormapdata_set_cell(void* self, int keyIndex, int valueIndex, double z);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorMapData.html)
///
/// @param self QCPColorMapData*
/// @param keyIndex int
/// @param valueIndex int
/// @param alpha unsigned char
void q_cpcolormapdata_set_alpha(void* self, int keyIndex, int valueIndex, unsigned char alpha);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorMapData.html)
///
/// @param self QCPColorMapData*
void q_cpcolormapdata_recalculate_data_bounds(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorMapData.html)
///
/// @param self QCPColorMapData*
void q_cpcolormapdata_clear(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorMapData.html)
///
/// @param self QCPColorMapData*
void q_cpcolormapdata_clear_alpha(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorMapData.html)
///
/// @param self QCPColorMapData*
/// @param z double
void q_cpcolormapdata_fill(void* self, double z);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorMapData.html)
///
/// @param self QCPColorMapData*
/// @param alpha unsigned char
void q_cpcolormapdata_fill_alpha(void* self, unsigned char alpha);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorMapData.html)
///
/// @param self QCPColorMapData*
bool q_cpcolormapdata_is_empty(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorMapData.html)
///
/// @param self QCPColorMapData*
/// @param key double
/// @param value double
/// @param keyIndex int*
/// @param valueIndex int*
void q_cpcolormapdata_coord_to_cell(void* self, double key, double value, int* keyIndex, int* valueIndex);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorMapData.html)
///
/// @param self QCPColorMapData*
/// @param keyIndex int
/// @param valueIndex int
/// @param key double*
/// @param value double*
void q_cpcolormapdata_cell_to_coord(void* self, int keyIndex, int valueIndex, double* key, double* value);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorMapData.html)
///
/// Delete this object from C++ memory.
///
/// @param self QCPColorMapData*
void q_cpcolormapdata_delete(void* self);

/// https://www.qcustomplot.com/documentation/classQCPColorMap.html

/// q_cpcolormap_new constructs a new QCPColorMap object.
///
/// @param keyAxis QCPAxis*
/// @param valueAxis QCPAxis*
QCPColorMap* q_cpcolormap_new(void* keyAxis, void* valueAxis);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#metaObject)
///
/// @param self QCPColorMap*
const QMetaObject* q_cpcolormap_meta_object(void* self);

/// @param self QCPColorMap*
/// @param param1 const char*
void* q_cpcolormap_metacast(void* self, const char* param1);

/// @param self QCPColorMap*
/// @param param1 enum QMetaObject__Call
/// @param param2 int
/// @param param3 void*
int32_t q_cpcolormap_metacall(void* self, int32_t param1, int param2, void* param3);

/// Allows for overriding the related default method
///
/// @param self QCPColorMap*
/// @param callback int32_t func(QCPColorMap* self, enum QMetaObject__Call param1, int param2, void* param3)
void q_cpcolormap_on_metacall(void* self, int32_t (*callback)(void*, int32_t, int, void*));

/// Base class method implementation
///
/// @param self QCPColorMap*
/// @param param1 enum QMetaObject__Call
/// @param param2 int
/// @param param3 void*
int32_t q_cpcolormap_qbase_metacall(void* self, int32_t param1, int param2, void* param3);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
const char* q_cpcolormap_tr(const char* s);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorMap.html)
///
/// @param self QCPColorMap*
QCPColorMapData* q_cpcolormap_data(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorMap.html)
///
/// @param self QCPColorMap*
QCPRange* q_cpcolormap_data_range(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorMap.html)
///
/// @param self QCPColorMap*
///
/// @return enum QCPAxis__ScaleType
int32_t q_cpcolormap_data_scale_type(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorMap.html)
///
/// @param self QCPColorMap*
bool q_cpcolormap_interpolate(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorMap.html)
///
/// @param self QCPColorMap*
bool q_cpcolormap_tight_boundary(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorMap.html)
///
/// @param self QCPColorMap*
QCPColorGradient* q_cpcolormap_gradient(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorMap.html)
///
/// @param self QCPColorMap*
QCPColorScale* q_cpcolormap_color_scale(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorMap.html)
///
/// @param self QCPColorMap*
/// @param data QCPColorMapData*
void q_cpcolormap_set_data(void* self, void* data);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorMap.html)
///
/// @param self QCPColorMap*
/// @param dataRange QCPRange*
void q_cpcolormap_set_data_range(void* self, void* dataRange);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorMap.html)
///
/// @param self QCPColorMap*
/// @param scaleType enum QCPAxis__ScaleType
void q_cpcolormap_set_data_scale_type(void* self, int32_t scaleType);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorMap.html)
///
/// @param self QCPColorMap*
/// @param gradient QCPColorGradient*
void q_cpcolormap_set_gradient(void* self, void* gradient);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorMap.html)
///
/// @param self QCPColorMap*
/// @param enabled bool
void q_cpcolormap_set_interpolate(void* self, bool enabled);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorMap.html)
///
/// @param self QCPColorMap*
/// @param enabled bool
void q_cpcolormap_set_tight_boundary(void* self, bool enabled);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorMap.html)
///
/// @param self QCPColorMap*
/// @param colorScale QCPColorScale*
void q_cpcolormap_set_color_scale(void* self, void* colorScale);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorMap.html)
///
/// @param self QCPColorMap*
void q_cpcolormap_rescale_data_range(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorMap.html)
///
/// @param self QCPColorMap*
void q_cpcolormap_update_legend_icon(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorMap.html)
///
/// @param self QCPColorMap*
/// @param pos QPointF*
/// @param onlySelectable bool
/// @param details QVariant*
double q_cpcolormap_select_test(void* self, void* pos, bool onlySelectable, void* details);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorMap.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPColorMap*
/// @param callback double func(QCPColorMap* self, QPointF* pos, bool onlySelectable, QVariant* details)
void q_cpcolormap_on_select_test(void* self, double (*callback)(void*, void*, bool, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorMap.html)
///
/// Base class method implementation
///
/// @param self QCPColorMap*
/// @param pos QPointF*
/// @param onlySelectable bool
/// @param details QVariant*
double q_cpcolormap_qbase_select_test(void* self, void* pos, bool onlySelectable, void* details);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorMap.html)
///
/// @param self QCPColorMap*
/// @param foundRange bool*
/// @param inSignDomain enum QCP__SignDomain
QCPRange* q_cpcolormap_get_key_range(void* self, bool* foundRange, int32_t inSignDomain);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorMap.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPColorMap*
/// @param callback QCPRange* func(QCPColorMap* self, bool* foundRange, enum QCP__SignDomain inSignDomain)
void q_cpcolormap_on_get_key_range(void* self, QCPRange* (*callback)(void*, bool*, int32_t));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorMap.html)
///
/// Base class method implementation
///
/// @param self QCPColorMap*
/// @param foundRange bool*
/// @param inSignDomain enum QCP__SignDomain
QCPRange* q_cpcolormap_qbase_get_key_range(void* self, bool* foundRange, int32_t inSignDomain);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorMap.html)
///
/// @param self QCPColorMap*
/// @param foundRange bool*
/// @param inSignDomain enum QCP__SignDomain
/// @param inKeyRange QCPRange*
QCPRange* q_cpcolormap_get_value_range(void* self, bool* foundRange, int32_t inSignDomain, void* inKeyRange);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorMap.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPColorMap*
/// @param callback QCPRange* func(QCPColorMap* self, bool* foundRange, enum QCP__SignDomain inSignDomain, QCPRange* inKeyRange)
void q_cpcolormap_on_get_value_range(void* self, QCPRange* (*callback)(void*, bool*, int32_t, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorMap.html)
///
/// Base class method implementation
///
/// @param self QCPColorMap*
/// @param foundRange bool*
/// @param inSignDomain enum QCP__SignDomain
/// @param inKeyRange QCPRange*
QCPRange* q_cpcolormap_qbase_get_value_range(void* self, bool* foundRange, int32_t inSignDomain, void* inKeyRange);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorMap.html)
///
/// @param self QCPColorMap*
/// @param newRange QCPRange*
void q_cpcolormap_data_range_changed(void* self, void* newRange);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorMap.html)
///
/// @param self QCPColorMap*
/// @param callback void func(QCPColorMap* self, QCPRange* newRange)
void q_cpcolormap_on_data_range_changed(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorMap.html)
///
/// @param self QCPColorMap*
/// @param scaleType enum QCPAxis__ScaleType
void q_cpcolormap_data_scale_type_changed(void* self, int32_t scaleType);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorMap.html)
///
/// @param self QCPColorMap*
/// @param callback void func(QCPColorMap* self, enum QCPAxis__ScaleType scaleType)
void q_cpcolormap_on_data_scale_type_changed(void* self, void (*callback)(void*, int32_t));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorMap.html)
///
/// @param self QCPColorMap*
/// @param newGradient QCPColorGradient*
void q_cpcolormap_gradient_changed(void* self, void* newGradient);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorMap.html)
///
/// @param self QCPColorMap*
/// @param callback void func(QCPColorMap* self, QCPColorGradient* newGradient)
void q_cpcolormap_on_gradient_changed(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorMap.html)
///
/// @param self QCPColorMap*
void q_cpcolormap_update_map_image(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorMap.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPColorMap*
/// @param callback void func()
void q_cpcolormap_on_update_map_image(void* self, void (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorMap.html)
///
/// Base class method implementation
///
/// @param self QCPColorMap*
void q_cpcolormap_qbase_update_map_image(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorMap.html)
///
/// @param self QCPColorMap*
/// @param painter QCPPainter*
void q_cpcolormap_draw(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorMap.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPColorMap*
/// @param callback void func(QCPColorMap* self, QCPPainter* painter)
void q_cpcolormap_on_draw(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorMap.html)
///
/// Base class method implementation
///
/// @param self QCPColorMap*
/// @param painter QCPPainter*
void q_cpcolormap_qbase_draw(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorMap.html)
///
/// @param self QCPColorMap*
/// @param painter QCPPainter*
/// @param rect QRectF*
void q_cpcolormap_draw_legend_icon(void* self, void* painter, void* rect);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorMap.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPColorMap*
/// @param callback void func(QCPColorMap* self, QCPPainter* painter, QRectF* rect)
void q_cpcolormap_on_draw_legend_icon(void* self, void (*callback)(void*, void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorMap.html)
///
/// Base class method implementation
///
/// @param self QCPColorMap*
/// @param painter QCPPainter*
/// @param rect QRectF*
void q_cpcolormap_qbase_draw_legend_icon(void* self, void* painter, void* rect);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
/// @param c const char*
const char* q_cpcolormap_tr2(const char* s, const char* c);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
/// @param c const char*
/// @param n int
const char* q_cpcolormap_tr3(const char* s, const char* c, int n);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorMap.html)
///
/// @param self QCPColorMap*
/// @param data QCPColorMapData*
/// @param copyVal bool
void q_cpcolormap_set_data2(void* self, void* data, bool copyVal);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorMap.html)
///
/// @param self QCPColorMap*
/// @param recalculateDataBounds bool
void q_cpcolormap_rescale_data_range1(void* self, bool recalculateDataBounds);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorMap.html)
///
/// @param self QCPColorMap*
/// @param transformMode enum Qt__TransformationMode
void q_cpcolormap_update_legend_icon1(void* self, int32_t transformMode);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorMap.html)
///
/// @param self QCPColorMap*
/// @param transformMode enum Qt__TransformationMode
/// @param thumbSize QSize*
void q_cpcolormap_update_legend_icon2(void* self, int32_t transformMode, void* thumbSize);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPColorMap*
const char* q_cpcolormap_name(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPColorMap*
bool q_cpcolormap_antialiased_fill(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPColorMap*
bool q_cpcolormap_antialiased_scatters(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPColorMap*
QPen* q_cpcolormap_pen(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPColorMap*
QBrush* q_cpcolormap_brush(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPColorMap*
QCPAxis* q_cpcolormap_key_axis(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPColorMap*
QCPAxis* q_cpcolormap_value_axis(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPColorMap*
///
/// @return enum QCP__SelectionType
int32_t q_cpcolormap_selectable(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPColorMap*
bool q_cpcolormap_selected(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPColorMap*
QCPDataSelection* q_cpcolormap_selection(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPColorMap*
QCPSelectionDecorator* q_cpcolormap_selection_decorator(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPColorMap*
/// @param name const char*
void q_cpcolormap_set_name(void* self, const char* name);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPColorMap*
/// @param enabled bool
void q_cpcolormap_set_antialiased_fill(void* self, bool enabled);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPColorMap*
/// @param enabled bool
void q_cpcolormap_set_antialiased_scatters(void* self, bool enabled);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPColorMap*
/// @param pen QPen*
void q_cpcolormap_set_pen(void* self, void* pen);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPColorMap*
/// @param brush QBrush*
void q_cpcolormap_set_brush(void* self, void* brush);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPColorMap*
/// @param axis QCPAxis*
void q_cpcolormap_set_key_axis(void* self, void* axis);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPColorMap*
/// @param axis QCPAxis*
void q_cpcolormap_set_value_axis(void* self, void* axis);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPColorMap*
/// @param selectable enum QCP__SelectionType
void q_cpcolormap_set_selectable(void* self, int32_t selectable);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPColorMap*
/// @param selection QCPDataSelection*
void q_cpcolormap_set_selection(void* self, void* selection);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPColorMap*
/// @param decorator QCPSelectionDecorator*
void q_cpcolormap_set_selection_decorator(void* self, void* decorator);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPColorMap*
/// @param key double
/// @param value double
/// @param x double*
/// @param y double*
void q_cpcolormap_coords_to_pixels(void* self, double key, double value, double* x, double* y);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPColorMap*
/// @param key double
/// @param value double
const QPointF* q_cpcolormap_coords_to_pixels2(void* self, double key, double value);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPColorMap*
/// @param x double
/// @param y double
/// @param key double*
/// @param value double*
void q_cpcolormap_pixels_to_coords(void* self, double x, double y, double* key, double* value);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPColorMap*
/// @param pixelPos QPointF*
/// @param key double*
/// @param value double*
void q_cpcolormap_pixels_to_coords2(void* self, void* pixelPos, double* key, double* value);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPColorMap*
void q_cpcolormap_rescale_axes(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPColorMap*
void q_cpcolormap_rescale_key_axis(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPColorMap*
void q_cpcolormap_rescale_value_axis(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPColorMap*
/// @param legend QCPLegend*
bool q_cpcolormap_add_to_legend(void* self, void* legend);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPColorMap*
bool q_cpcolormap_add_to_legend2(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPColorMap*
/// @param legend QCPLegend*
bool q_cpcolormap_remove_from_legend(void* self, void* legend);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPColorMap*
bool q_cpcolormap_remove_from_legend2(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPColorMap*
/// @param selected bool
void q_cpcolormap_selection_changed(void* self, bool selected);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPColorMap*
/// @param selection QCPDataSelection*
void q_cpcolormap_selection_changed2(void* self, void* selection);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPColorMap*
/// @param selectable enum QCP__SelectionType
void q_cpcolormap_selectable_changed(void* self, int32_t selectable);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPColorMap*
/// @param onlyEnlarge bool
void q_cpcolormap_rescale_axes1(void* self, bool onlyEnlarge);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPColorMap*
/// @param onlyEnlarge bool
void q_cpcolormap_rescale_key_axis1(void* self, bool onlyEnlarge);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPColorMap*
/// @param onlyEnlarge bool
void q_cpcolormap_rescale_value_axis1(void* self, bool onlyEnlarge);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPColorMap*
/// @param onlyEnlarge bool
/// @param inKeyRange bool
void q_cpcolormap_rescale_value_axis2(void* self, bool onlyEnlarge, bool inKeyRange);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPColorMap*
bool q_cpcolormap_visible(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPColorMap*
QCustomPlot* q_cpcolormap_parent_plot(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPColorMap*
QCPLayerable* q_cpcolormap_parent_layerable(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPColorMap*
QCPLayer* q_cpcolormap_layer(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPColorMap*
bool q_cpcolormap_antialiased(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPColorMap*
/// @param on bool
void q_cpcolormap_set_visible(void* self, bool on);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPColorMap*
/// @param layer QCPLayer*
bool q_cpcolormap_set_layer(void* self, void* layer);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPColorMap*
/// @param layerName const char*
bool q_cpcolormap_set_layer2(void* self, const char* layerName);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPColorMap*
/// @param enabled bool
void q_cpcolormap_set_antialiased(void* self, bool enabled);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPColorMap*
bool q_cpcolormap_real_visibility(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPColorMap*
/// @param newLayer QCPLayer*
void q_cpcolormap_layer_changed(void* self, void* newLayer);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPColorMap*
/// @param callback void func(QCPColorMap* self, QCPLayer* newLayer)
void q_cpcolormap_on_layer_changed(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#objectName)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPColorMap*
const char* q_cpcolormap_object_name(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setObjectName)
///
/// @param self QCPColorMap*
/// @param name char*
void q_cpcolormap_set_object_name(void* self, char* name);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isWidgetType)
///
/// @param self QCPColorMap*
bool q_cpcolormap_is_widget_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isWindowType)
///
/// @param self QCPColorMap*
bool q_cpcolormap_is_window_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isQuickItemType)
///
/// @param self QCPColorMap*
bool q_cpcolormap_is_quick_item_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#signalsBlocked)
///
/// @param self QCPColorMap*
bool q_cpcolormap_signals_blocked(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#blockSignals)
///
/// @param self QCPColorMap*
/// @param b bool
bool q_cpcolormap_block_signals(void* self, bool b);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#thread)
///
/// @param self QCPColorMap*
QThread* q_cpcolormap_thread(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#moveToThread)
///
/// @param self QCPColorMap*
/// @param thread QThread*
bool q_cpcolormap_move_to_thread(void* self, void* thread);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#startTimer)
///
/// @param self QCPColorMap*
/// @param interval int
int32_t q_cpcolormap_start_timer(void* self, int interval);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#killTimer)
///
/// @param self QCPColorMap*
/// @param id int
void q_cpcolormap_kill_timer(void* self, int id);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#killTimer)
///
/// @param self QCPColorMap*
/// @param id enum Qt__TimerId
void q_cpcolormap_kill_timer2(void* self, int32_t id);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#children)
///
/// @param self QCPColorMap*
libqt_list /* of QObject* */ q_cpcolormap_children(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setParent)
///
/// @param self QCPColorMap*
/// @param parent QObject*
void q_cpcolormap_set_parent(void* self, void* parent);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#installEventFilter)
///
/// @param self QCPColorMap*
/// @param filterObj QObject*
void q_cpcolormap_install_event_filter(void* self, void* filterObj);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#removeEventFilter)
///
/// @param self QCPColorMap*
/// @param obj QObject*
void q_cpcolormap_remove_event_filter(void* self, void* obj);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param method QMetaMethod*
QMetaObject__Connection* q_cpcolormap_connect(void* sender, void* signal, void* receiver, void* method);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param self QCPColorMap*
/// @param sender QObject*
/// @param signal const char*
/// @param member const char*
QMetaObject__Connection* q_cpcolormap_connect2(void* self, void* sender, const char* signal, const char* member);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param member QMetaMethod*
bool q_cpcolormap_disconnect(void* sender, void* signal, void* receiver, void* member);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnect)
///
/// @param param1 QMetaObject__Connection*
bool q_cpcolormap_disconnect2(void* param1);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dumpObjectTree)
///
/// @param self QCPColorMap*
void q_cpcolormap_dump_object_tree(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dumpObjectInfo)
///
/// @param self QCPColorMap*
void q_cpcolormap_dump_object_info(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setProperty)
///
/// @param self QCPColorMap*
/// @param name const char*
/// @param value QVariant*
bool q_cpcolormap_set_property(void* self, const char* name, void* value);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#property)
///
/// @param self QCPColorMap*
/// @param name const char*
QVariant* q_cpcolormap_property(void* self, const char* name);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dynamicPropertyNames)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPColorMap*
const char** q_cpcolormap_dynamic_property_names(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#bindingStorage)
///
/// @param self QCPColorMap*
QBindingStorage* q_cpcolormap_binding_storage(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#bindingStorage)
///
/// @param self QCPColorMap*
const QBindingStorage* q_cpcolormap_binding_storage2(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPColorMap*
void q_cpcolormap_destroyed(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPColorMap*
/// @param callback void func(QCPColorMap* self)
void q_cpcolormap_on_destroyed(void* self, void (*callback)(void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#parent)
///
/// @param self QCPColorMap*
QObject* q_cpcolormap_parent(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#inherits)
///
/// @param self QCPColorMap*
/// @param classname const char*
bool q_cpcolormap_inherits(void* self, const char* classname);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#deleteLater)
///
/// @param self QCPColorMap*
void q_cpcolormap_delete_later(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#moveToThread)
///
/// @param self QCPColorMap*
/// @param thread QThread*
/// @param param2 Disambiguated_t*
bool q_cpcolormap_move_to_thread2(void* self, void* thread, void* param2);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#startTimer)
///
/// @param self QCPColorMap*
/// @param interval int
/// @param timerType enum Qt__TimerType
int32_t q_cpcolormap_start_timer22(void* self, int interval, int32_t timerType);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param method QMetaMethod*
/// @param type enum Qt__ConnectionType
QMetaObject__Connection* q_cpcolormap_connect5(void* sender, void* signal, void* receiver, void* method, int32_t type);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param self QCPColorMap*
/// @param sender QObject*
/// @param signal const char*
/// @param member const char*
/// @param type enum Qt__ConnectionType
QMetaObject__Connection* q_cpcolormap_connect4(void* self, void* sender, const char* signal, const char* member, int32_t type);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPColorMap*
/// @param param1 QObject*
void q_cpcolormap_destroyed1(void* self, void* param1);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPColorMap*
/// @param callback void func(QCPColorMap* self, QObject* param1)
void q_cpcolormap_on_destroyed1(void* self, void (*callback)(void*, void*));

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPColorMap*
QCPPlottableInterface1D* q_cpcolormap_interface1_d(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPColorMap*
QCPPlottableInterface1D* q_cpcolormap_qbase_interface1_d(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPColorMap*
/// @param callback QCPPlottableInterface1D* func()
void q_cpcolormap_on_interface1_d(void* self, QCPPlottableInterface1D* (*callback)());

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPColorMap*
QRect* q_cpcolormap_clip_rect(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPColorMap*
QRect* q_cpcolormap_qbase_clip_rect(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPColorMap*
/// @param callback QRect* func()
void q_cpcolormap_on_clip_rect(void* self, QRect* (*callback)());

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPColorMap*
///
/// @return enum QCP__Interaction
int32_t q_cpcolormap_selection_category(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPColorMap*
///
/// @return enum QCP__Interaction
int32_t q_cpcolormap_qbase_selection_category(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPColorMap*
/// @param callback int32_t func()
void q_cpcolormap_on_selection_category(void* self, int32_t (*callback)());

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPColorMap*
/// @param painter QCPPainter*
void q_cpcolormap_apply_default_antialiasing_hint(void* self, void* painter);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPColorMap*
/// @param painter QCPPainter*
void q_cpcolormap_qbase_apply_default_antialiasing_hint(void* self, void* painter);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPColorMap*
/// @param callback void func(QCPColorMap* self, QCPPainter* painter)
void q_cpcolormap_on_apply_default_antialiasing_hint(void* self, void (*callback)(void*, void*));

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPColorMap*
/// @param event QMouseEvent*
/// @param additive bool
/// @param details QVariant*
/// @param selectionStateChanged bool*
void q_cpcolormap_select_event(void* self, void* event, bool additive, void* details, bool* selectionStateChanged);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPColorMap*
/// @param event QMouseEvent*
/// @param additive bool
/// @param details QVariant*
/// @param selectionStateChanged bool*
void q_cpcolormap_qbase_select_event(void* self, void* event, bool additive, void* details, bool* selectionStateChanged);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPColorMap*
/// @param callback void func(QCPColorMap* self, QMouseEvent* event, bool additive, QVariant* details, bool* selectionStateChanged)
void q_cpcolormap_on_select_event(void* self, void (*callback)(void*, void*, bool, void*, bool*));

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPColorMap*
/// @param selectionStateChanged bool*
void q_cpcolormap_deselect_event(void* self, bool* selectionStateChanged);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPColorMap*
/// @param selectionStateChanged bool*
void q_cpcolormap_qbase_deselect_event(void* self, bool* selectionStateChanged);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPColorMap*
/// @param callback void func(QCPColorMap* self, bool* selectionStateChanged)
void q_cpcolormap_on_deselect_event(void* self, void (*callback)(void*, bool*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPColorMap*
/// @param parentPlot QCustomPlot*
void q_cpcolormap_parent_plot_initialized(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPColorMap*
/// @param parentPlot QCustomPlot*
void q_cpcolormap_qbase_parent_plot_initialized(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPColorMap*
/// @param callback void func(QCPColorMap* self, QCustomPlot* parentPlot)
void q_cpcolormap_on_parent_plot_initialized(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPColorMap*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cpcolormap_mouse_press_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPColorMap*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cpcolormap_qbase_mouse_press_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPColorMap*
/// @param callback void func(QCPColorMap* self, QMouseEvent* event, QVariant* details)
void q_cpcolormap_on_mouse_press_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPColorMap*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cpcolormap_mouse_move_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPColorMap*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cpcolormap_qbase_mouse_move_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPColorMap*
/// @param callback void func(QCPColorMap* self, QMouseEvent* event, QPointF* startPos)
void q_cpcolormap_on_mouse_move_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPColorMap*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cpcolormap_mouse_release_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPColorMap*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cpcolormap_qbase_mouse_release_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPColorMap*
/// @param callback void func(QCPColorMap* self, QMouseEvent* event, QPointF* startPos)
void q_cpcolormap_on_mouse_release_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPColorMap*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cpcolormap_mouse_double_click_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPColorMap*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cpcolormap_qbase_mouse_double_click_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPColorMap*
/// @param callback void func(QCPColorMap* self, QMouseEvent* event, QVariant* details)
void q_cpcolormap_on_mouse_double_click_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPColorMap*
/// @param event QWheelEvent*
void q_cpcolormap_wheel_event(void* self, void* event);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPColorMap*
/// @param event QWheelEvent*
void q_cpcolormap_qbase_wheel_event(void* self, void* event);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPColorMap*
/// @param callback void func(QCPColorMap* self, QWheelEvent* event)
void q_cpcolormap_on_wheel_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPColorMap*
/// @param event QEvent*
bool q_cpcolormap_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPColorMap*
/// @param event QEvent*
bool q_cpcolormap_qbase_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPColorMap*
/// @param callback bool func(QCPColorMap* self, QEvent* event)
void q_cpcolormap_on_event(void* self, bool (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPColorMap*
/// @param watched QObject*
/// @param event QEvent*
bool q_cpcolormap_event_filter(void* self, void* watched, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPColorMap*
/// @param watched QObject*
/// @param event QEvent*
bool q_cpcolormap_qbase_event_filter(void* self, void* watched, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPColorMap*
/// @param callback bool func(QCPColorMap* self, QObject* watched, QEvent* event)
void q_cpcolormap_on_event_filter(void* self, bool (*callback)(void*, void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPColorMap*
/// @param event QTimerEvent*
void q_cpcolormap_timer_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPColorMap*
/// @param event QTimerEvent*
void q_cpcolormap_qbase_timer_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPColorMap*
/// @param callback void func(QCPColorMap* self, QTimerEvent* event)
void q_cpcolormap_on_timer_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPColorMap*
/// @param event QChildEvent*
void q_cpcolormap_child_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPColorMap*
/// @param event QChildEvent*
void q_cpcolormap_qbase_child_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPColorMap*
/// @param callback void func(QCPColorMap* self, QChildEvent* event)
void q_cpcolormap_on_child_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPColorMap*
/// @param event QEvent*
void q_cpcolormap_custom_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPColorMap*
/// @param event QEvent*
void q_cpcolormap_qbase_custom_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPColorMap*
/// @param callback void func(QCPColorMap* self, QEvent* event)
void q_cpcolormap_on_custom_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPColorMap*
/// @param signal QMetaMethod*
void q_cpcolormap_connect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPColorMap*
/// @param signal QMetaMethod*
void q_cpcolormap_qbase_connect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPColorMap*
/// @param callback void func(QCPColorMap* self, QMetaMethod* signal)
void q_cpcolormap_on_connect_notify(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPColorMap*
/// @param signal QMetaMethod*
void q_cpcolormap_disconnect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPColorMap*
/// @param signal QMetaMethod*
void q_cpcolormap_qbase_disconnect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPColorMap*
/// @param callback void func(QCPColorMap* self, QMetaMethod* signal)
void q_cpcolormap_on_disconnect_notify(void* self, void (*callback)(void*, void*));

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPColorMap*
/// @param painter QCPPainter*
void q_cpcolormap_apply_fill_antialiasing_hint(void* self, void* painter);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPColorMap*
/// @param painter QCPPainter*
void q_cpcolormap_qbase_apply_fill_antialiasing_hint(void* self, void* painter);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPColorMap*
/// @param callback void func(QCPColorMap* self, QCPPainter* painter)
void q_cpcolormap_on_apply_fill_antialiasing_hint(void* self, void (*callback)(void*, void*));

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPColorMap*
/// @param painter QCPPainter*
void q_cpcolormap_apply_scatters_antialiasing_hint(void* self, void* painter);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPColorMap*
/// @param painter QCPPainter*
void q_cpcolormap_qbase_apply_scatters_antialiasing_hint(void* self, void* painter);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPColorMap*
/// @param callback void func(QCPColorMap* self, QCPPainter* painter)
void q_cpcolormap_on_apply_scatters_antialiasing_hint(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPColorMap*
/// @param parentPlot QCustomPlot*
void q_cpcolormap_initialize_parent_plot(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPColorMap*
/// @param parentPlot QCustomPlot*
void q_cpcolormap_qbase_initialize_parent_plot(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPColorMap*
/// @param callback void func(QCPColorMap* self, QCustomPlot* parentPlot)
void q_cpcolormap_on_initialize_parent_plot(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPColorMap*
/// @param parentLayerable QCPLayerable*
void q_cpcolormap_set_parent_layerable(void* self, void* parentLayerable);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPColorMap*
/// @param parentLayerable QCPLayerable*
void q_cpcolormap_qbase_set_parent_layerable(void* self, void* parentLayerable);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPColorMap*
/// @param callback void func(QCPColorMap* self, QCPLayerable* parentLayerable)
void q_cpcolormap_on_set_parent_layerable(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPColorMap*
/// @param layer QCPLayer*
/// @param prepend bool
bool q_cpcolormap_move_to_layer(void* self, void* layer, bool prepend);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPColorMap*
/// @param layer QCPLayer*
/// @param prepend bool
bool q_cpcolormap_qbase_move_to_layer(void* self, void* layer, bool prepend);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPColorMap*
/// @param callback bool func(QCPColorMap* self, QCPLayer* layer, bool prepend)
void q_cpcolormap_on_move_to_layer(void* self, bool (*callback)(void*, void*, bool));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPColorMap*
/// @param painter QCPPainter*
/// @param localAntialiased bool
/// @param overrideElement enum QCP__AntialiasedElement
void q_cpcolormap_apply_antialiasing_hint(void* self, void* painter, bool localAntialiased, int32_t overrideElement);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPColorMap*
/// @param painter QCPPainter*
/// @param localAntialiased bool
/// @param overrideElement enum QCP__AntialiasedElement
void q_cpcolormap_qbase_apply_antialiasing_hint(void* self, void* painter, bool localAntialiased, int32_t overrideElement);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPColorMap*
/// @param callback void func(QCPColorMap* self, QCPPainter* painter, bool localAntialiased, enum QCP__AntialiasedElement overrideElement)
void q_cpcolormap_on_apply_antialiasing_hint(void* self, void (*callback)(void*, void*, bool, int32_t));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPColorMap*
QObject* q_cpcolormap_sender(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPColorMap*
QObject* q_cpcolormap_qbase_sender(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPColorMap*
/// @param callback QObject* func()
void q_cpcolormap_on_sender(void* self, QObject* (*callback)());

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPColorMap*
int32_t q_cpcolormap_sender_signal_index(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPColorMap*
int32_t q_cpcolormap_qbase_sender_signal_index(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPColorMap*
/// @param callback int32_t func()
void q_cpcolormap_on_sender_signal_index(void* self, int32_t (*callback)());

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPColorMap*
/// @param signal const char*
int32_t q_cpcolormap_receivers(void* self, const char* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPColorMap*
/// @param signal const char*
int32_t q_cpcolormap_qbase_receivers(void* self, const char* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPColorMap*
/// @param callback int32_t func(QCPColorMap* self, const char* signal)
void q_cpcolormap_on_receivers(void* self, int32_t (*callback)(void*, const char*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPColorMap*
/// @param signal QMetaMethod*
bool q_cpcolormap_is_signal_connected(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPColorMap*
/// @param signal QMetaMethod*
bool q_cpcolormap_qbase_is_signal_connected(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPColorMap*
/// @param callback bool func(QCPColorMap* self, QMetaMethod* signal)
void q_cpcolormap_on_is_signal_connected(void* self, bool (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#objectNameChanged)
///
/// Wrapper to allow calling private signal
///
/// @param self QCPColorMap*
/// @param callback void func(QCPColorMap* self, const char* objectName)
void q_cpcolormap_on_object_name_changed(void* self, void (*callback)(void*, const char*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPColorMap.html)
///
/// Delete this object from C++ memory.
///
/// @param self QCPColorMap*
void q_cpcolormap_delete(void* self);

/// https://www.qcustomplot.com/documentation/classQCPFinancialData.html

/// q_cpfinancialdata_new constructs a new QCPFinancialData object.
///
/// @param other QCPFinancialData*
QCPFinancialData* q_cpfinancialdata_new(void* other);

/// q_cpfinancialdata_new2 constructs a new QCPFinancialData object and invalidates the source QCPFinancialData object.
///
/// @param other QCPFinancialData*
QCPFinancialData* q_cpfinancialdata_new2(void* other);

/// q_cpfinancialdata_new3 constructs a new QCPFinancialData object.
///
QCPFinancialData* q_cpfinancialdata_new3();

/// q_cpfinancialdata_new4 constructs a new QCPFinancialData object.
///
/// @param key double
/// @param open double
/// @param high double
/// @param low double
/// @param close double
QCPFinancialData* q_cpfinancialdata_new4(double key, double open, double high, double low, double close);

/// q_cpfinancialdata_new5 constructs a new QCPFinancialData object.
///
/// @param param1 QCPFinancialData*
QCPFinancialData* q_cpfinancialdata_new5(void* param1);

/// q_cpfinancialdata_copy_assign shallow copies `other` into `self`.
///
/// @param self QCPFinancialData*
/// @param other QCPFinancialData*
void q_cpfinancialdata_copy_assign(void* self, void* other);

/// q_cpfinancialdata_move_assign moves `other` into `self` and invalidates `other`.
///
/// @param self QCPFinancialData*
/// @param other QCPFinancialData*
void q_cpfinancialdata_move_assign(void* self, void* other);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPFinancialData.html)
///
/// @param self QCPFinancialData*
double q_cpfinancialdata_sort_key(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPFinancialData.html)
///
/// @param sortKey double
QCPFinancialData* q_cpfinancialdata_from_sort_key(double sortKey);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPFinancialData.html)
///
bool q_cpfinancialdata_sort_key_is_main_key();

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPFinancialData.html)
///
/// @param self QCPFinancialData*
double q_cpfinancialdata_main_key(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPFinancialData.html)
///
/// @param self QCPFinancialData*
double q_cpfinancialdata_main_value(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPFinancialData.html)
///
/// @param self QCPFinancialData*
QCPRange* q_cpfinancialdata_value_range(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPFinancialData.html)
///
/// @param self QCPFinancialData*
double q_cpfinancialdata_key(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPFinancialData.html)
///
/// @param self QCPFinancialData*
/// @param key double
void q_cpfinancialdata_set_key(void* self, double key);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPFinancialData.html)
///
/// @param self QCPFinancialData*
double q_cpfinancialdata_open(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPFinancialData.html)
///
/// @param self QCPFinancialData*
/// @param open double
void q_cpfinancialdata_set_open(void* self, double open);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPFinancialData.html)
///
/// @param self QCPFinancialData*
double q_cpfinancialdata_high(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPFinancialData.html)
///
/// @param self QCPFinancialData*
/// @param high double
void q_cpfinancialdata_set_high(void* self, double high);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPFinancialData.html)
///
/// @param self QCPFinancialData*
double q_cpfinancialdata_low(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPFinancialData.html)
///
/// @param self QCPFinancialData*
/// @param low double
void q_cpfinancialdata_set_low(void* self, double low);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPFinancialData.html)
///
/// @param self QCPFinancialData*
double q_cpfinancialdata_close(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPFinancialData.html)
///
/// @param self QCPFinancialData*
/// @param close double
void q_cpfinancialdata_set_close(void* self, double close);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPFinancialData.html)
///
/// Delete this object from C++ memory.
///
/// @param self QCPFinancialData*
void q_cpfinancialdata_delete(void* self);

/// https://www.qcustomplot.com/documentation/classQCPFinancial.html

/// q_cpfinancial_new constructs a new QCPFinancial object.
///
/// @param keyAxis QCPAxis*
/// @param valueAxis QCPAxis*
QCPFinancial* q_cpfinancial_new(void* keyAxis, void* valueAxis);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#metaObject)
///
/// @param self QCPFinancial*
const QMetaObject* q_cpfinancial_meta_object(void* self);

/// @param self QCPFinancial*
/// @param param1 const char*
void* q_cpfinancial_metacast(void* self, const char* param1);

/// @param self QCPFinancial*
/// @param param1 enum QMetaObject__Call
/// @param param2 int
/// @param param3 void*
int32_t q_cpfinancial_metacall(void* self, int32_t param1, int param2, void* param3);

/// Allows for overriding the related default method
///
/// @param self QCPFinancial*
/// @param callback int32_t func(QCPFinancial* self, enum QMetaObject__Call param1, int param2, void* param3)
void q_cpfinancial_on_metacall(void* self, int32_t (*callback)(void*, int32_t, int, void*));

/// Base class method implementation
///
/// @param self QCPFinancial*
/// @param param1 enum QMetaObject__Call
/// @param param2 int
/// @param param3 void*
int32_t q_cpfinancial_qbase_metacall(void* self, int32_t param1, int param2, void* param3);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
const char* q_cpfinancial_tr(const char* s);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPFinancial.html)
///
/// @param self QCPFinancial*
///
/// @return enum QCPFinancial__ChartStyle
int32_t q_cpfinancial_chart_style(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPFinancial.html)
///
/// @param self QCPFinancial*
double q_cpfinancial_width(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPFinancial.html)
///
/// @param self QCPFinancial*
///
/// @return enum QCPFinancial__WidthType
int32_t q_cpfinancial_width_type(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPFinancial.html)
///
/// @param self QCPFinancial*
bool q_cpfinancial_two_colored(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPFinancial.html)
///
/// @param self QCPFinancial*
QBrush* q_cpfinancial_brush_positive(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPFinancial.html)
///
/// @param self QCPFinancial*
QBrush* q_cpfinancial_brush_negative(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPFinancial.html)
///
/// @param self QCPFinancial*
QPen* q_cpfinancial_pen_positive(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPFinancial.html)
///
/// @param self QCPFinancial*
QPen* q_cpfinancial_pen_negative(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPFinancial.html)
///
/// @param self QCPFinancial*
/// @param keys libqt_list /* of double */
/// @param open libqt_list /* of double */
/// @param high libqt_list /* of double */
/// @param low libqt_list /* of double */
/// @param close libqt_list /* of double */
void q_cpfinancial_set_data2(void* self, libqt_list keys, libqt_list open, libqt_list high, libqt_list low, libqt_list close);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPFinancial.html)
///
/// @param self QCPFinancial*
/// @param style enum QCPFinancial__ChartStyle
void q_cpfinancial_set_chart_style(void* self, int32_t style);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPFinancial.html)
///
/// @param self QCPFinancial*
/// @param width double
void q_cpfinancial_set_width(void* self, double width);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPFinancial.html)
///
/// @param self QCPFinancial*
/// @param widthType enum QCPFinancial__WidthType
void q_cpfinancial_set_width_type(void* self, int32_t widthType);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPFinancial.html)
///
/// @param self QCPFinancial*
/// @param twoColored bool
void q_cpfinancial_set_two_colored(void* self, bool twoColored);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPFinancial.html)
///
/// @param self QCPFinancial*
/// @param brush QBrush*
void q_cpfinancial_set_brush_positive(void* self, void* brush);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPFinancial.html)
///
/// @param self QCPFinancial*
/// @param brush QBrush*
void q_cpfinancial_set_brush_negative(void* self, void* brush);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPFinancial.html)
///
/// @param self QCPFinancial*
/// @param pen QPen*
void q_cpfinancial_set_pen_positive(void* self, void* pen);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPFinancial.html)
///
/// @param self QCPFinancial*
/// @param pen QPen*
void q_cpfinancial_set_pen_negative(void* self, void* pen);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPFinancial.html)
///
/// @param self QCPFinancial*
/// @param keys libqt_list /* of double */
/// @param open libqt_list /* of double */
/// @param high libqt_list /* of double */
/// @param low libqt_list /* of double */
/// @param close libqt_list /* of double */
void q_cpfinancial_add_data(void* self, libqt_list keys, libqt_list open, libqt_list high, libqt_list low, libqt_list close);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPFinancial.html)
///
/// @param self QCPFinancial*
/// @param key double
/// @param open double
/// @param high double
/// @param low double
/// @param close double
void q_cpfinancial_add_data2(void* self, double key, double open, double high, double low, double close);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPFinancial.html)
///
/// @param self QCPFinancial*
/// @param rect QRectF*
/// @param onlySelectable bool
QCPDataSelection* q_cpfinancial_select_test_rect(void* self, void* rect, bool onlySelectable);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPFinancial.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPFinancial*
/// @param callback QCPDataSelection* func(QCPFinancial* self, QRectF* rect, bool onlySelectable)
void q_cpfinancial_on_select_test_rect(void* self, QCPDataSelection* (*callback)(void*, void*, bool));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPFinancial.html)
///
/// Base class method implementation
///
/// @param self QCPFinancial*
/// @param rect QRectF*
/// @param onlySelectable bool
QCPDataSelection* q_cpfinancial_qbase_select_test_rect(void* self, void* rect, bool onlySelectable);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPFinancial.html)
///
/// @param self QCPFinancial*
/// @param pos QPointF*
/// @param onlySelectable bool
/// @param details QVariant*
double q_cpfinancial_select_test(void* self, void* pos, bool onlySelectable, void* details);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPFinancial.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPFinancial*
/// @param callback double func(QCPFinancial* self, QPointF* pos, bool onlySelectable, QVariant* details)
void q_cpfinancial_on_select_test(void* self, double (*callback)(void*, void*, bool, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPFinancial.html)
///
/// Base class method implementation
///
/// @param self QCPFinancial*
/// @param pos QPointF*
/// @param onlySelectable bool
/// @param details QVariant*
double q_cpfinancial_qbase_select_test(void* self, void* pos, bool onlySelectable, void* details);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPFinancial.html)
///
/// @param self QCPFinancial*
/// @param foundRange bool*
/// @param inSignDomain enum QCP__SignDomain
QCPRange* q_cpfinancial_get_key_range(void* self, bool* foundRange, int32_t inSignDomain);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPFinancial.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPFinancial*
/// @param callback QCPRange* func(QCPFinancial* self, bool* foundRange, enum QCP__SignDomain inSignDomain)
void q_cpfinancial_on_get_key_range(void* self, QCPRange* (*callback)(void*, bool*, int32_t));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPFinancial.html)
///
/// Base class method implementation
///
/// @param self QCPFinancial*
/// @param foundRange bool*
/// @param inSignDomain enum QCP__SignDomain
QCPRange* q_cpfinancial_qbase_get_key_range(void* self, bool* foundRange, int32_t inSignDomain);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPFinancial.html)
///
/// @param self QCPFinancial*
/// @param foundRange bool*
/// @param inSignDomain enum QCP__SignDomain
/// @param inKeyRange QCPRange*
QCPRange* q_cpfinancial_get_value_range(void* self, bool* foundRange, int32_t inSignDomain, void* inKeyRange);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPFinancial.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPFinancial*
/// @param callback QCPRange* func(QCPFinancial* self, bool* foundRange, enum QCP__SignDomain inSignDomain, QCPRange* inKeyRange)
void q_cpfinancial_on_get_value_range(void* self, QCPRange* (*callback)(void*, bool*, int32_t, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPFinancial.html)
///
/// Base class method implementation
///
/// @param self QCPFinancial*
/// @param foundRange bool*
/// @param inSignDomain enum QCP__SignDomain
/// @param inKeyRange QCPRange*
QCPRange* q_cpfinancial_qbase_get_value_range(void* self, bool* foundRange, int32_t inSignDomain, void* inKeyRange);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPFinancial.html)
///
/// @param self QCPFinancial*
/// @param painter QCPPainter*
void q_cpfinancial_draw(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPFinancial.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPFinancial*
/// @param callback void func(QCPFinancial* self, QCPPainter* painter)
void q_cpfinancial_on_draw(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPFinancial.html)
///
/// Base class method implementation
///
/// @param self QCPFinancial*
/// @param painter QCPPainter*
void q_cpfinancial_qbase_draw(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPFinancial.html)
///
/// @param self QCPFinancial*
/// @param painter QCPPainter*
/// @param rect QRectF*
void q_cpfinancial_draw_legend_icon(void* self, void* painter, void* rect);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPFinancial.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPFinancial*
/// @param callback void func(QCPFinancial* self, QCPPainter* painter, QRectF* rect)
void q_cpfinancial_on_draw_legend_icon(void* self, void (*callback)(void*, void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPFinancial.html)
///
/// Base class method implementation
///
/// @param self QCPFinancial*
/// @param painter QCPPainter*
/// @param rect QRectF*
void q_cpfinancial_qbase_draw_legend_icon(void* self, void* painter, void* rect);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPFinancial.html)
///
/// @param self QCPFinancial*
/// @param key double
/// @param keyPixel double
double q_cpfinancial_get_pixel_width(void* self, double key, double keyPixel);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPFinancial.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPFinancial*
/// @param callback double func(QCPFinancial* self, double key, double keyPixel)
void q_cpfinancial_on_get_pixel_width(void* self, double (*callback)(void*, double, double));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPFinancial.html)
///
/// Base class method implementation
///
/// @param self QCPFinancial*
/// @param key double
/// @param keyPixel double
double q_cpfinancial_qbase_get_pixel_width(void* self, double key, double keyPixel);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
/// @param c const char*
const char* q_cpfinancial_tr2(const char* s, const char* c);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
/// @param c const char*
/// @param n int
const char* q_cpfinancial_tr3(const char* s, const char* c, int n);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPFinancial.html)
///
/// @param self QCPFinancial*
/// @param keys libqt_list /* of double */
/// @param open libqt_list /* of double */
/// @param high libqt_list /* of double */
/// @param low libqt_list /* of double */
/// @param close libqt_list /* of double */
/// @param alreadySorted bool
void q_cpfinancial_set_data6(void* self, libqt_list keys, libqt_list open, libqt_list high, libqt_list low, libqt_list close, bool alreadySorted);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPFinancial.html)
///
/// @param self QCPFinancial*
/// @param keys libqt_list /* of double */
/// @param open libqt_list /* of double */
/// @param high libqt_list /* of double */
/// @param low libqt_list /* of double */
/// @param close libqt_list /* of double */
/// @param alreadySorted bool
void q_cpfinancial_add_data6(void* self, libqt_list keys, libqt_list open, libqt_list high, libqt_list low, libqt_list close, bool alreadySorted);

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// @param self QCPFinancial*
/// @param param1 QCPPlottableInterface1D*
void q_cpfinancial_operator_assign(void* self, void* param1);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPFinancial*
const char* q_cpfinancial_name(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPFinancial*
bool q_cpfinancial_antialiased_fill(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPFinancial*
bool q_cpfinancial_antialiased_scatters(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPFinancial*
QPen* q_cpfinancial_pen(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPFinancial*
QBrush* q_cpfinancial_brush(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPFinancial*
QCPAxis* q_cpfinancial_key_axis(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPFinancial*
QCPAxis* q_cpfinancial_value_axis(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPFinancial*
///
/// @return enum QCP__SelectionType
int32_t q_cpfinancial_selectable(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPFinancial*
bool q_cpfinancial_selected(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPFinancial*
QCPDataSelection* q_cpfinancial_selection(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPFinancial*
QCPSelectionDecorator* q_cpfinancial_selection_decorator(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPFinancial*
/// @param name const char*
void q_cpfinancial_set_name(void* self, const char* name);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPFinancial*
/// @param enabled bool
void q_cpfinancial_set_antialiased_fill(void* self, bool enabled);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPFinancial*
/// @param enabled bool
void q_cpfinancial_set_antialiased_scatters(void* self, bool enabled);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPFinancial*
/// @param pen QPen*
void q_cpfinancial_set_pen(void* self, void* pen);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPFinancial*
/// @param brush QBrush*
void q_cpfinancial_set_brush(void* self, void* brush);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPFinancial*
/// @param axis QCPAxis*
void q_cpfinancial_set_key_axis(void* self, void* axis);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPFinancial*
/// @param axis QCPAxis*
void q_cpfinancial_set_value_axis(void* self, void* axis);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPFinancial*
/// @param selectable enum QCP__SelectionType
void q_cpfinancial_set_selectable(void* self, int32_t selectable);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPFinancial*
/// @param selection QCPDataSelection*
void q_cpfinancial_set_selection(void* self, void* selection);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPFinancial*
/// @param decorator QCPSelectionDecorator*
void q_cpfinancial_set_selection_decorator(void* self, void* decorator);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPFinancial*
/// @param key double
/// @param value double
/// @param x double*
/// @param y double*
void q_cpfinancial_coords_to_pixels(void* self, double key, double value, double* x, double* y);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPFinancial*
/// @param key double
/// @param value double
const QPointF* q_cpfinancial_coords_to_pixels2(void* self, double key, double value);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPFinancial*
/// @param x double
/// @param y double
/// @param key double*
/// @param value double*
void q_cpfinancial_pixels_to_coords(void* self, double x, double y, double* key, double* value);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPFinancial*
/// @param pixelPos QPointF*
/// @param key double*
/// @param value double*
void q_cpfinancial_pixels_to_coords2(void* self, void* pixelPos, double* key, double* value);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPFinancial*
void q_cpfinancial_rescale_axes(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPFinancial*
void q_cpfinancial_rescale_key_axis(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPFinancial*
void q_cpfinancial_rescale_value_axis(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPFinancial*
/// @param legend QCPLegend*
bool q_cpfinancial_add_to_legend(void* self, void* legend);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPFinancial*
bool q_cpfinancial_add_to_legend2(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPFinancial*
/// @param legend QCPLegend*
bool q_cpfinancial_remove_from_legend(void* self, void* legend);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPFinancial*
bool q_cpfinancial_remove_from_legend2(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPFinancial*
/// @param selected bool
void q_cpfinancial_selection_changed(void* self, bool selected);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPFinancial*
/// @param selection QCPDataSelection*
void q_cpfinancial_selection_changed2(void* self, void* selection);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPFinancial*
/// @param selectable enum QCP__SelectionType
void q_cpfinancial_selectable_changed(void* self, int32_t selectable);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPFinancial*
/// @param onlyEnlarge bool
void q_cpfinancial_rescale_axes1(void* self, bool onlyEnlarge);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPFinancial*
/// @param onlyEnlarge bool
void q_cpfinancial_rescale_key_axis1(void* self, bool onlyEnlarge);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPFinancial*
/// @param onlyEnlarge bool
void q_cpfinancial_rescale_value_axis1(void* self, bool onlyEnlarge);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPFinancial*
/// @param onlyEnlarge bool
/// @param inKeyRange bool
void q_cpfinancial_rescale_value_axis2(void* self, bool onlyEnlarge, bool inKeyRange);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPFinancial*
bool q_cpfinancial_visible(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPFinancial*
QCustomPlot* q_cpfinancial_parent_plot(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPFinancial*
QCPLayerable* q_cpfinancial_parent_layerable(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPFinancial*
QCPLayer* q_cpfinancial_layer(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPFinancial*
bool q_cpfinancial_antialiased(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPFinancial*
/// @param on bool
void q_cpfinancial_set_visible(void* self, bool on);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPFinancial*
/// @param layer QCPLayer*
bool q_cpfinancial_set_layer(void* self, void* layer);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPFinancial*
/// @param layerName const char*
bool q_cpfinancial_set_layer2(void* self, const char* layerName);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPFinancial*
/// @param enabled bool
void q_cpfinancial_set_antialiased(void* self, bool enabled);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPFinancial*
bool q_cpfinancial_real_visibility(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPFinancial*
/// @param newLayer QCPLayer*
void q_cpfinancial_layer_changed(void* self, void* newLayer);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPFinancial*
/// @param callback void func(QCPFinancial* self, QCPLayer* newLayer)
void q_cpfinancial_on_layer_changed(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#objectName)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPFinancial*
const char* q_cpfinancial_object_name(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setObjectName)
///
/// @param self QCPFinancial*
/// @param name char*
void q_cpfinancial_set_object_name(void* self, char* name);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isWidgetType)
///
/// @param self QCPFinancial*
bool q_cpfinancial_is_widget_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isWindowType)
///
/// @param self QCPFinancial*
bool q_cpfinancial_is_window_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isQuickItemType)
///
/// @param self QCPFinancial*
bool q_cpfinancial_is_quick_item_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#signalsBlocked)
///
/// @param self QCPFinancial*
bool q_cpfinancial_signals_blocked(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#blockSignals)
///
/// @param self QCPFinancial*
/// @param b bool
bool q_cpfinancial_block_signals(void* self, bool b);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#thread)
///
/// @param self QCPFinancial*
QThread* q_cpfinancial_thread(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#moveToThread)
///
/// @param self QCPFinancial*
/// @param thread QThread*
bool q_cpfinancial_move_to_thread(void* self, void* thread);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#startTimer)
///
/// @param self QCPFinancial*
/// @param interval int
int32_t q_cpfinancial_start_timer(void* self, int interval);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#killTimer)
///
/// @param self QCPFinancial*
/// @param id int
void q_cpfinancial_kill_timer(void* self, int id);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#killTimer)
///
/// @param self QCPFinancial*
/// @param id enum Qt__TimerId
void q_cpfinancial_kill_timer2(void* self, int32_t id);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#children)
///
/// @param self QCPFinancial*
libqt_list /* of QObject* */ q_cpfinancial_children(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setParent)
///
/// @param self QCPFinancial*
/// @param parent QObject*
void q_cpfinancial_set_parent(void* self, void* parent);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#installEventFilter)
///
/// @param self QCPFinancial*
/// @param filterObj QObject*
void q_cpfinancial_install_event_filter(void* self, void* filterObj);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#removeEventFilter)
///
/// @param self QCPFinancial*
/// @param obj QObject*
void q_cpfinancial_remove_event_filter(void* self, void* obj);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param method QMetaMethod*
QMetaObject__Connection* q_cpfinancial_connect(void* sender, void* signal, void* receiver, void* method);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param self QCPFinancial*
/// @param sender QObject*
/// @param signal const char*
/// @param member const char*
QMetaObject__Connection* q_cpfinancial_connect2(void* self, void* sender, const char* signal, const char* member);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param member QMetaMethod*
bool q_cpfinancial_disconnect(void* sender, void* signal, void* receiver, void* member);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnect)
///
/// @param param1 QMetaObject__Connection*
bool q_cpfinancial_disconnect2(void* param1);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dumpObjectTree)
///
/// @param self QCPFinancial*
void q_cpfinancial_dump_object_tree(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dumpObjectInfo)
///
/// @param self QCPFinancial*
void q_cpfinancial_dump_object_info(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setProperty)
///
/// @param self QCPFinancial*
/// @param name const char*
/// @param value QVariant*
bool q_cpfinancial_set_property(void* self, const char* name, void* value);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#property)
///
/// @param self QCPFinancial*
/// @param name const char*
QVariant* q_cpfinancial_property(void* self, const char* name);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dynamicPropertyNames)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPFinancial*
const char** q_cpfinancial_dynamic_property_names(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#bindingStorage)
///
/// @param self QCPFinancial*
QBindingStorage* q_cpfinancial_binding_storage(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#bindingStorage)
///
/// @param self QCPFinancial*
const QBindingStorage* q_cpfinancial_binding_storage2(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPFinancial*
void q_cpfinancial_destroyed(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPFinancial*
/// @param callback void func(QCPFinancial* self)
void q_cpfinancial_on_destroyed(void* self, void (*callback)(void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#parent)
///
/// @param self QCPFinancial*
QObject* q_cpfinancial_parent(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#inherits)
///
/// @param self QCPFinancial*
/// @param classname const char*
bool q_cpfinancial_inherits(void* self, const char* classname);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#deleteLater)
///
/// @param self QCPFinancial*
void q_cpfinancial_delete_later(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#moveToThread)
///
/// @param self QCPFinancial*
/// @param thread QThread*
/// @param param2 Disambiguated_t*
bool q_cpfinancial_move_to_thread2(void* self, void* thread, void* param2);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#startTimer)
///
/// @param self QCPFinancial*
/// @param interval int
/// @param timerType enum Qt__TimerType
int32_t q_cpfinancial_start_timer22(void* self, int interval, int32_t timerType);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param method QMetaMethod*
/// @param type enum Qt__ConnectionType
QMetaObject__Connection* q_cpfinancial_connect5(void* sender, void* signal, void* receiver, void* method, int32_t type);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param self QCPFinancial*
/// @param sender QObject*
/// @param signal const char*
/// @param member const char*
/// @param type enum Qt__ConnectionType
QMetaObject__Connection* q_cpfinancial_connect4(void* self, void* sender, const char* signal, const char* member, int32_t type);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPFinancial*
/// @param param1 QObject*
void q_cpfinancial_destroyed1(void* self, void* param1);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPFinancial*
/// @param callback void func(QCPFinancial* self, QObject* param1)
void q_cpfinancial_on_destroyed1(void* self, void (*callback)(void*, void*));

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPFinancial*
int32_t q_cpfinancial_data_count(void* self);

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPFinancial*
int32_t q_cpfinancial_qbase_data_count(void* self);

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPFinancial*
/// @param callback int32_t func()
void q_cpfinancial_on_data_count(void* self, int32_t (*callback)());

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPFinancial*
/// @param index int
double q_cpfinancial_data_main_key(void* self, int index);

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPFinancial*
/// @param index int
double q_cpfinancial_qbase_data_main_key(void* self, int index);

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPFinancial*
/// @param callback double func(QCPFinancial* self, int index)
void q_cpfinancial_on_data_main_key(void* self, double (*callback)(void*, int));

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPFinancial*
/// @param index int
double q_cpfinancial_data_sort_key(void* self, int index);

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPFinancial*
/// @param index int
double q_cpfinancial_qbase_data_sort_key(void* self, int index);

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPFinancial*
/// @param callback double func(QCPFinancial* self, int index)
void q_cpfinancial_on_data_sort_key(void* self, double (*callback)(void*, int));

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPFinancial*
/// @param index int
double q_cpfinancial_data_main_value(void* self, int index);

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPFinancial*
/// @param index int
double q_cpfinancial_qbase_data_main_value(void* self, int index);

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPFinancial*
/// @param callback double func(QCPFinancial* self, int index)
void q_cpfinancial_on_data_main_value(void* self, double (*callback)(void*, int));

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPFinancial*
/// @param index int
QCPRange* q_cpfinancial_data_value_range(void* self, int index);

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPFinancial*
/// @param index int
QCPRange* q_cpfinancial_qbase_data_value_range(void* self, int index);

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPFinancial*
/// @param callback QCPRange* func(QCPFinancial* self, int index)
void q_cpfinancial_on_data_value_range(void* self, QCPRange* (*callback)(void*, int));

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPFinancial*
/// @param index int
QPointF* q_cpfinancial_data_pixel_position(void* self, int index);

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPFinancial*
/// @param index int
QPointF* q_cpfinancial_qbase_data_pixel_position(void* self, int index);

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPFinancial*
/// @param callback QPointF* func(QCPFinancial* self, int index)
void q_cpfinancial_on_data_pixel_position(void* self, QPointF* (*callback)(void*, int));

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPFinancial*
bool q_cpfinancial_sort_key_is_main_key(void* self);

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPFinancial*
bool q_cpfinancial_qbase_sort_key_is_main_key(void* self);

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPFinancial*
/// @param callback bool func()
void q_cpfinancial_on_sort_key_is_main_key(void* self, bool (*callback)());

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPFinancial*
/// @param sortKey double
/// @param expandedRange bool
int32_t q_cpfinancial_find_begin(void* self, double sortKey, bool expandedRange);

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPFinancial*
/// @param sortKey double
/// @param expandedRange bool
int32_t q_cpfinancial_qbase_find_begin(void* self, double sortKey, bool expandedRange);

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPFinancial*
/// @param callback int32_t func(QCPFinancial* self, double sortKey, bool expandedRange)
void q_cpfinancial_on_find_begin(void* self, int32_t (*callback)(void*, double, bool));

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPFinancial*
/// @param sortKey double
/// @param expandedRange bool
int32_t q_cpfinancial_find_end(void* self, double sortKey, bool expandedRange);

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPFinancial*
/// @param sortKey double
/// @param expandedRange bool
int32_t q_cpfinancial_qbase_find_end(void* self, double sortKey, bool expandedRange);

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPFinancial*
/// @param callback int32_t func(QCPFinancial* self, double sortKey, bool expandedRange)
void q_cpfinancial_on_find_end(void* self, int32_t (*callback)(void*, double, bool));

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPFinancial*
QCPPlottableInterface1D* q_cpfinancial_interface1_d(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPFinancial*
QCPPlottableInterface1D* q_cpfinancial_qbase_interface1_d(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPFinancial*
/// @param callback QCPPlottableInterface1D* func()
void q_cpfinancial_on_interface1_d(void* self, QCPPlottableInterface1D* (*callback)());

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPFinancial*
QRect* q_cpfinancial_clip_rect(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPFinancial*
QRect* q_cpfinancial_qbase_clip_rect(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPFinancial*
/// @param callback QRect* func()
void q_cpfinancial_on_clip_rect(void* self, QRect* (*callback)());

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPFinancial*
///
/// @return enum QCP__Interaction
int32_t q_cpfinancial_selection_category(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPFinancial*
///
/// @return enum QCP__Interaction
int32_t q_cpfinancial_qbase_selection_category(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPFinancial*
/// @param callback int32_t func()
void q_cpfinancial_on_selection_category(void* self, int32_t (*callback)());

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPFinancial*
/// @param painter QCPPainter*
void q_cpfinancial_apply_default_antialiasing_hint(void* self, void* painter);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPFinancial*
/// @param painter QCPPainter*
void q_cpfinancial_qbase_apply_default_antialiasing_hint(void* self, void* painter);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPFinancial*
/// @param callback void func(QCPFinancial* self, QCPPainter* painter)
void q_cpfinancial_on_apply_default_antialiasing_hint(void* self, void (*callback)(void*, void*));

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPFinancial*
/// @param event QMouseEvent*
/// @param additive bool
/// @param details QVariant*
/// @param selectionStateChanged bool*
void q_cpfinancial_select_event(void* self, void* event, bool additive, void* details, bool* selectionStateChanged);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPFinancial*
/// @param event QMouseEvent*
/// @param additive bool
/// @param details QVariant*
/// @param selectionStateChanged bool*
void q_cpfinancial_qbase_select_event(void* self, void* event, bool additive, void* details, bool* selectionStateChanged);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPFinancial*
/// @param callback void func(QCPFinancial* self, QMouseEvent* event, bool additive, QVariant* details, bool* selectionStateChanged)
void q_cpfinancial_on_select_event(void* self, void (*callback)(void*, void*, bool, void*, bool*));

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPFinancial*
/// @param selectionStateChanged bool*
void q_cpfinancial_deselect_event(void* self, bool* selectionStateChanged);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPFinancial*
/// @param selectionStateChanged bool*
void q_cpfinancial_qbase_deselect_event(void* self, bool* selectionStateChanged);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPFinancial*
/// @param callback void func(QCPFinancial* self, bool* selectionStateChanged)
void q_cpfinancial_on_deselect_event(void* self, void (*callback)(void*, bool*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPFinancial*
/// @param parentPlot QCustomPlot*
void q_cpfinancial_parent_plot_initialized(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPFinancial*
/// @param parentPlot QCustomPlot*
void q_cpfinancial_qbase_parent_plot_initialized(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPFinancial*
/// @param callback void func(QCPFinancial* self, QCustomPlot* parentPlot)
void q_cpfinancial_on_parent_plot_initialized(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPFinancial*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cpfinancial_mouse_press_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPFinancial*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cpfinancial_qbase_mouse_press_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPFinancial*
/// @param callback void func(QCPFinancial* self, QMouseEvent* event, QVariant* details)
void q_cpfinancial_on_mouse_press_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPFinancial*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cpfinancial_mouse_move_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPFinancial*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cpfinancial_qbase_mouse_move_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPFinancial*
/// @param callback void func(QCPFinancial* self, QMouseEvent* event, QPointF* startPos)
void q_cpfinancial_on_mouse_move_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPFinancial*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cpfinancial_mouse_release_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPFinancial*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cpfinancial_qbase_mouse_release_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPFinancial*
/// @param callback void func(QCPFinancial* self, QMouseEvent* event, QPointF* startPos)
void q_cpfinancial_on_mouse_release_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPFinancial*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cpfinancial_mouse_double_click_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPFinancial*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cpfinancial_qbase_mouse_double_click_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPFinancial*
/// @param callback void func(QCPFinancial* self, QMouseEvent* event, QVariant* details)
void q_cpfinancial_on_mouse_double_click_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPFinancial*
/// @param event QWheelEvent*
void q_cpfinancial_wheel_event(void* self, void* event);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPFinancial*
/// @param event QWheelEvent*
void q_cpfinancial_qbase_wheel_event(void* self, void* event);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPFinancial*
/// @param callback void func(QCPFinancial* self, QWheelEvent* event)
void q_cpfinancial_on_wheel_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPFinancial*
/// @param event QEvent*
bool q_cpfinancial_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPFinancial*
/// @param event QEvent*
bool q_cpfinancial_qbase_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPFinancial*
/// @param callback bool func(QCPFinancial* self, QEvent* event)
void q_cpfinancial_on_event(void* self, bool (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPFinancial*
/// @param watched QObject*
/// @param event QEvent*
bool q_cpfinancial_event_filter(void* self, void* watched, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPFinancial*
/// @param watched QObject*
/// @param event QEvent*
bool q_cpfinancial_qbase_event_filter(void* self, void* watched, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPFinancial*
/// @param callback bool func(QCPFinancial* self, QObject* watched, QEvent* event)
void q_cpfinancial_on_event_filter(void* self, bool (*callback)(void*, void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPFinancial*
/// @param event QTimerEvent*
void q_cpfinancial_timer_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPFinancial*
/// @param event QTimerEvent*
void q_cpfinancial_qbase_timer_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPFinancial*
/// @param callback void func(QCPFinancial* self, QTimerEvent* event)
void q_cpfinancial_on_timer_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPFinancial*
/// @param event QChildEvent*
void q_cpfinancial_child_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPFinancial*
/// @param event QChildEvent*
void q_cpfinancial_qbase_child_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPFinancial*
/// @param callback void func(QCPFinancial* self, QChildEvent* event)
void q_cpfinancial_on_child_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPFinancial*
/// @param event QEvent*
void q_cpfinancial_custom_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPFinancial*
/// @param event QEvent*
void q_cpfinancial_qbase_custom_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPFinancial*
/// @param callback void func(QCPFinancial* self, QEvent* event)
void q_cpfinancial_on_custom_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPFinancial*
/// @param signal QMetaMethod*
void q_cpfinancial_connect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPFinancial*
/// @param signal QMetaMethod*
void q_cpfinancial_qbase_connect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPFinancial*
/// @param callback void func(QCPFinancial* self, QMetaMethod* signal)
void q_cpfinancial_on_connect_notify(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPFinancial*
/// @param signal QMetaMethod*
void q_cpfinancial_disconnect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPFinancial*
/// @param signal QMetaMethod*
void q_cpfinancial_qbase_disconnect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPFinancial*
/// @param callback void func(QCPFinancial* self, QMetaMethod* signal)
void q_cpfinancial_on_disconnect_notify(void* self, void (*callback)(void*, void*));

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPFinancial*
/// @param painter QCPPainter*
void q_cpfinancial_apply_fill_antialiasing_hint(void* self, void* painter);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPFinancial*
/// @param painter QCPPainter*
void q_cpfinancial_qbase_apply_fill_antialiasing_hint(void* self, void* painter);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPFinancial*
/// @param callback void func(QCPFinancial* self, QCPPainter* painter)
void q_cpfinancial_on_apply_fill_antialiasing_hint(void* self, void (*callback)(void*, void*));

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPFinancial*
/// @param painter QCPPainter*
void q_cpfinancial_apply_scatters_antialiasing_hint(void* self, void* painter);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPFinancial*
/// @param painter QCPPainter*
void q_cpfinancial_qbase_apply_scatters_antialiasing_hint(void* self, void* painter);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPFinancial*
/// @param callback void func(QCPFinancial* self, QCPPainter* painter)
void q_cpfinancial_on_apply_scatters_antialiasing_hint(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPFinancial*
/// @param parentPlot QCustomPlot*
void q_cpfinancial_initialize_parent_plot(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPFinancial*
/// @param parentPlot QCustomPlot*
void q_cpfinancial_qbase_initialize_parent_plot(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPFinancial*
/// @param callback void func(QCPFinancial* self, QCustomPlot* parentPlot)
void q_cpfinancial_on_initialize_parent_plot(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPFinancial*
/// @param parentLayerable QCPLayerable*
void q_cpfinancial_set_parent_layerable(void* self, void* parentLayerable);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPFinancial*
/// @param parentLayerable QCPLayerable*
void q_cpfinancial_qbase_set_parent_layerable(void* self, void* parentLayerable);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPFinancial*
/// @param callback void func(QCPFinancial* self, QCPLayerable* parentLayerable)
void q_cpfinancial_on_set_parent_layerable(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPFinancial*
/// @param layer QCPLayer*
/// @param prepend bool
bool q_cpfinancial_move_to_layer(void* self, void* layer, bool prepend);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPFinancial*
/// @param layer QCPLayer*
/// @param prepend bool
bool q_cpfinancial_qbase_move_to_layer(void* self, void* layer, bool prepend);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPFinancial*
/// @param callback bool func(QCPFinancial* self, QCPLayer* layer, bool prepend)
void q_cpfinancial_on_move_to_layer(void* self, bool (*callback)(void*, void*, bool));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPFinancial*
/// @param painter QCPPainter*
/// @param localAntialiased bool
/// @param overrideElement enum QCP__AntialiasedElement
void q_cpfinancial_apply_antialiasing_hint(void* self, void* painter, bool localAntialiased, int32_t overrideElement);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPFinancial*
/// @param painter QCPPainter*
/// @param localAntialiased bool
/// @param overrideElement enum QCP__AntialiasedElement
void q_cpfinancial_qbase_apply_antialiasing_hint(void* self, void* painter, bool localAntialiased, int32_t overrideElement);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPFinancial*
/// @param callback void func(QCPFinancial* self, QCPPainter* painter, bool localAntialiased, enum QCP__AntialiasedElement overrideElement)
void q_cpfinancial_on_apply_antialiasing_hint(void* self, void (*callback)(void*, void*, bool, int32_t));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPFinancial*
QObject* q_cpfinancial_sender(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPFinancial*
QObject* q_cpfinancial_qbase_sender(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPFinancial*
/// @param callback QObject* func()
void q_cpfinancial_on_sender(void* self, QObject* (*callback)());

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPFinancial*
int32_t q_cpfinancial_sender_signal_index(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPFinancial*
int32_t q_cpfinancial_qbase_sender_signal_index(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPFinancial*
/// @param callback int32_t func()
void q_cpfinancial_on_sender_signal_index(void* self, int32_t (*callback)());

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPFinancial*
/// @param signal const char*
int32_t q_cpfinancial_receivers(void* self, const char* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPFinancial*
/// @param signal const char*
int32_t q_cpfinancial_qbase_receivers(void* self, const char* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPFinancial*
/// @param callback int32_t func(QCPFinancial* self, const char* signal)
void q_cpfinancial_on_receivers(void* self, int32_t (*callback)(void*, const char*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPFinancial*
/// @param signal QMetaMethod*
bool q_cpfinancial_is_signal_connected(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPFinancial*
/// @param signal QMetaMethod*
bool q_cpfinancial_qbase_is_signal_connected(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPFinancial*
/// @param callback bool func(QCPFinancial* self, QMetaMethod* signal)
void q_cpfinancial_on_is_signal_connected(void* self, bool (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#objectNameChanged)
///
/// Wrapper to allow calling private signal
///
/// @param self QCPFinancial*
/// @param callback void func(QCPFinancial* self, const char* objectName)
void q_cpfinancial_on_object_name_changed(void* self, void (*callback)(void*, const char*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPFinancial.html)
///
/// Delete this object from C++ memory.
///
/// @param self QCPFinancial*
void q_cpfinancial_delete(void* self);

/// https://www.qcustomplot.com/documentation/classQCPErrorBarsData.html

/// q_cperrorbarsdata_new constructs a new QCPErrorBarsData object.
///
/// @param other QCPErrorBarsData*
QCPErrorBarsData* q_cperrorbarsdata_new(void* other);

/// q_cperrorbarsdata_new2 constructs a new QCPErrorBarsData object and invalidates the source QCPErrorBarsData object.
///
/// @param other QCPErrorBarsData*
QCPErrorBarsData* q_cperrorbarsdata_new2(void* other);

/// q_cperrorbarsdata_new3 constructs a new QCPErrorBarsData object.
///
QCPErrorBarsData* q_cperrorbarsdata_new3();

/// q_cperrorbarsdata_new4 constructs a new QCPErrorBarsData object.
///
/// @param error double
QCPErrorBarsData* q_cperrorbarsdata_new4(double error);

/// q_cperrorbarsdata_new5 constructs a new QCPErrorBarsData object.
///
/// @param errorMinus double
/// @param errorPlus double
QCPErrorBarsData* q_cperrorbarsdata_new5(double errorMinus, double errorPlus);

/// q_cperrorbarsdata_new6 constructs a new QCPErrorBarsData object.
///
/// @param param1 QCPErrorBarsData*
QCPErrorBarsData* q_cperrorbarsdata_new6(void* param1);

/// q_cperrorbarsdata_copy_assign shallow copies `other` into `self`.
///
/// @param self QCPErrorBarsData*
/// @param other QCPErrorBarsData*
void q_cperrorbarsdata_copy_assign(void* self, void* other);

/// q_cperrorbarsdata_move_assign moves `other` into `self` and invalidates `other`.
///
/// @param self QCPErrorBarsData*
/// @param other QCPErrorBarsData*
void q_cperrorbarsdata_move_assign(void* self, void* other);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPErrorBarsData.html)
///
/// @param self QCPErrorBarsData*
double q_cperrorbarsdata_error_minus(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPErrorBarsData.html)
///
/// @param self QCPErrorBarsData*
/// @param errorMinus double
void q_cperrorbarsdata_set_error_minus(void* self, double errorMinus);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPErrorBarsData.html)
///
/// @param self QCPErrorBarsData*
double q_cperrorbarsdata_error_plus(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPErrorBarsData.html)
///
/// @param self QCPErrorBarsData*
/// @param errorPlus double
void q_cperrorbarsdata_set_error_plus(void* self, double errorPlus);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPErrorBarsData.html)
///
/// Delete this object from C++ memory.
///
/// @param self QCPErrorBarsData*
void q_cperrorbarsdata_delete(void* self);

/// https://www.qcustomplot.com/documentation/classQCPErrorBars.html

/// q_cperrorbars_new constructs a new QCPErrorBars object.
///
/// @param keyAxis QCPAxis*
/// @param valueAxis QCPAxis*
QCPErrorBars* q_cperrorbars_new(void* keyAxis, void* valueAxis);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#metaObject)
///
/// @param self QCPErrorBars*
const QMetaObject* q_cperrorbars_meta_object(void* self);

/// @param self QCPErrorBars*
/// @param param1 const char*
void* q_cperrorbars_metacast(void* self, const char* param1);

/// @param self QCPErrorBars*
/// @param param1 enum QMetaObject__Call
/// @param param2 int
/// @param param3 void*
int32_t q_cperrorbars_metacall(void* self, int32_t param1, int param2, void* param3);

/// Allows for overriding the related default method
///
/// @param self QCPErrorBars*
/// @param callback int32_t func(QCPErrorBars* self, enum QMetaObject__Call param1, int param2, void* param3)
void q_cperrorbars_on_metacall(void* self, int32_t (*callback)(void*, int32_t, int, void*));

/// Base class method implementation
///
/// @param self QCPErrorBars*
/// @param param1 enum QMetaObject__Call
/// @param param2 int
/// @param param3 void*
int32_t q_cperrorbars_qbase_metacall(void* self, int32_t param1, int param2, void* param3);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
const char* q_cperrorbars_tr(const char* s);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPErrorBars.html)
///
/// @param self QCPErrorBars*
QCPAbstractPlottable* q_cperrorbars_data_plottable(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPErrorBars.html)
///
/// @param self QCPErrorBars*
///
/// @return enum QCPErrorBars__ErrorType
int32_t q_cperrorbars_error_type(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPErrorBars.html)
///
/// @param self QCPErrorBars*
double q_cperrorbars_whisker_width(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPErrorBars.html)
///
/// @param self QCPErrorBars*
double q_cperrorbars_symbol_gap(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPErrorBars.html)
///
/// @param self QCPErrorBars*
/// @param error libqt_list /* of double */
void q_cperrorbars_set_data2(void* self, libqt_list error);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPErrorBars.html)
///
/// @param self QCPErrorBars*
/// @param errorMinus libqt_list /* of double */
/// @param errorPlus libqt_list /* of double */
void q_cperrorbars_set_data3(void* self, libqt_list errorMinus, libqt_list errorPlus);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPErrorBars.html)
///
/// @param self QCPErrorBars*
/// @param plottable QCPAbstractPlottable*
void q_cperrorbars_set_data_plottable(void* self, void* plottable);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPErrorBars.html)
///
/// @param self QCPErrorBars*
/// @param type enum QCPErrorBars__ErrorType
void q_cperrorbars_set_error_type(void* self, int32_t type);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPErrorBars.html)
///
/// @param self QCPErrorBars*
/// @param pixels double
void q_cperrorbars_set_whisker_width(void* self, double pixels);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPErrorBars.html)
///
/// @param self QCPErrorBars*
/// @param pixels double
void q_cperrorbars_set_symbol_gap(void* self, double pixels);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPErrorBars.html)
///
/// @param self QCPErrorBars*
/// @param error libqt_list /* of double */
void q_cperrorbars_add_data(void* self, libqt_list error);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPErrorBars.html)
///
/// @param self QCPErrorBars*
/// @param errorMinus libqt_list /* of double */
/// @param errorPlus libqt_list /* of double */
void q_cperrorbars_add_data2(void* self, libqt_list errorMinus, libqt_list errorPlus);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPErrorBars.html)
///
/// @param self QCPErrorBars*
/// @param error double
void q_cperrorbars_add_data3(void* self, double error);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPErrorBars.html)
///
/// @param self QCPErrorBars*
/// @param errorMinus double
/// @param errorPlus double
void q_cperrorbars_add_data4(void* self, double errorMinus, double errorPlus);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPErrorBars.html)
///
/// @param self QCPErrorBars*
int32_t q_cperrorbars_data_count(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPErrorBars.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPErrorBars*
/// @param callback int32_t func()
void q_cperrorbars_on_data_count(void* self, int32_t (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPErrorBars.html)
///
/// Base class method implementation
///
/// @param self QCPErrorBars*
int32_t q_cperrorbars_qbase_data_count(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPErrorBars.html)
///
/// @param self QCPErrorBars*
/// @param index int
double q_cperrorbars_data_main_key(void* self, int index);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPErrorBars.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPErrorBars*
/// @param callback double func(QCPErrorBars* self, int index)
void q_cperrorbars_on_data_main_key(void* self, double (*callback)(void*, int));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPErrorBars.html)
///
/// Base class method implementation
///
/// @param self QCPErrorBars*
/// @param index int
double q_cperrorbars_qbase_data_main_key(void* self, int index);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPErrorBars.html)
///
/// @param self QCPErrorBars*
/// @param index int
double q_cperrorbars_data_sort_key(void* self, int index);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPErrorBars.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPErrorBars*
/// @param callback double func(QCPErrorBars* self, int index)
void q_cperrorbars_on_data_sort_key(void* self, double (*callback)(void*, int));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPErrorBars.html)
///
/// Base class method implementation
///
/// @param self QCPErrorBars*
/// @param index int
double q_cperrorbars_qbase_data_sort_key(void* self, int index);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPErrorBars.html)
///
/// @param self QCPErrorBars*
/// @param index int
double q_cperrorbars_data_main_value(void* self, int index);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPErrorBars.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPErrorBars*
/// @param callback double func(QCPErrorBars* self, int index)
void q_cperrorbars_on_data_main_value(void* self, double (*callback)(void*, int));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPErrorBars.html)
///
/// Base class method implementation
///
/// @param self QCPErrorBars*
/// @param index int
double q_cperrorbars_qbase_data_main_value(void* self, int index);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPErrorBars.html)
///
/// @param self QCPErrorBars*
/// @param index int
QCPRange* q_cperrorbars_data_value_range(void* self, int index);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPErrorBars.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPErrorBars*
/// @param callback QCPRange* func(QCPErrorBars* self, int index)
void q_cperrorbars_on_data_value_range(void* self, QCPRange* (*callback)(void*, int));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPErrorBars.html)
///
/// Base class method implementation
///
/// @param self QCPErrorBars*
/// @param index int
QCPRange* q_cperrorbars_qbase_data_value_range(void* self, int index);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPErrorBars.html)
///
/// @param self QCPErrorBars*
/// @param index int
QPointF* q_cperrorbars_data_pixel_position(void* self, int index);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPErrorBars.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPErrorBars*
/// @param callback QPointF* func(QCPErrorBars* self, int index)
void q_cperrorbars_on_data_pixel_position(void* self, QPointF* (*callback)(void*, int));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPErrorBars.html)
///
/// Base class method implementation
///
/// @param self QCPErrorBars*
/// @param index int
QPointF* q_cperrorbars_qbase_data_pixel_position(void* self, int index);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPErrorBars.html)
///
/// @param self QCPErrorBars*
bool q_cperrorbars_sort_key_is_main_key(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPErrorBars.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPErrorBars*
/// @param callback bool func()
void q_cperrorbars_on_sort_key_is_main_key(void* self, bool (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPErrorBars.html)
///
/// Base class method implementation
///
/// @param self QCPErrorBars*
bool q_cperrorbars_qbase_sort_key_is_main_key(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPErrorBars.html)
///
/// @param self QCPErrorBars*
/// @param rect QRectF*
/// @param onlySelectable bool
QCPDataSelection* q_cperrorbars_select_test_rect(void* self, void* rect, bool onlySelectable);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPErrorBars.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPErrorBars*
/// @param callback QCPDataSelection* func(QCPErrorBars* self, QRectF* rect, bool onlySelectable)
void q_cperrorbars_on_select_test_rect(void* self, QCPDataSelection* (*callback)(void*, void*, bool));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPErrorBars.html)
///
/// Base class method implementation
///
/// @param self QCPErrorBars*
/// @param rect QRectF*
/// @param onlySelectable bool
QCPDataSelection* q_cperrorbars_qbase_select_test_rect(void* self, void* rect, bool onlySelectable);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPErrorBars.html)
///
/// @param self QCPErrorBars*
/// @param sortKey double
/// @param expandedRange bool
int32_t q_cperrorbars_find_begin(void* self, double sortKey, bool expandedRange);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPErrorBars.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPErrorBars*
/// @param callback int32_t func(QCPErrorBars* self, double sortKey, bool expandedRange)
void q_cperrorbars_on_find_begin(void* self, int32_t (*callback)(void*, double, bool));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPErrorBars.html)
///
/// Base class method implementation
///
/// @param self QCPErrorBars*
/// @param sortKey double
/// @param expandedRange bool
int32_t q_cperrorbars_qbase_find_begin(void* self, double sortKey, bool expandedRange);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPErrorBars.html)
///
/// @param self QCPErrorBars*
/// @param sortKey double
/// @param expandedRange bool
int32_t q_cperrorbars_find_end(void* self, double sortKey, bool expandedRange);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPErrorBars.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPErrorBars*
/// @param callback int32_t func(QCPErrorBars* self, double sortKey, bool expandedRange)
void q_cperrorbars_on_find_end(void* self, int32_t (*callback)(void*, double, bool));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPErrorBars.html)
///
/// Base class method implementation
///
/// @param self QCPErrorBars*
/// @param sortKey double
/// @param expandedRange bool
int32_t q_cperrorbars_qbase_find_end(void* self, double sortKey, bool expandedRange);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPErrorBars.html)
///
/// @param self QCPErrorBars*
/// @param pos QPointF*
/// @param onlySelectable bool
/// @param details QVariant*
double q_cperrorbars_select_test(void* self, void* pos, bool onlySelectable, void* details);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPErrorBars.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPErrorBars*
/// @param callback double func(QCPErrorBars* self, QPointF* pos, bool onlySelectable, QVariant* details)
void q_cperrorbars_on_select_test(void* self, double (*callback)(void*, void*, bool, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPErrorBars.html)
///
/// Base class method implementation
///
/// @param self QCPErrorBars*
/// @param pos QPointF*
/// @param onlySelectable bool
/// @param details QVariant*
double q_cperrorbars_qbase_select_test(void* self, void* pos, bool onlySelectable, void* details);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPErrorBars.html)
///
/// @param self QCPErrorBars*
QCPPlottableInterface1D* q_cperrorbars_interface1_d(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPErrorBars.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPErrorBars*
/// @param callback QCPPlottableInterface1D* func()
void q_cperrorbars_on_interface1_d(void* self, QCPPlottableInterface1D* (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPErrorBars.html)
///
/// Base class method implementation
///
/// @param self QCPErrorBars*
QCPPlottableInterface1D* q_cperrorbars_qbase_interface1_d(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPErrorBars.html)
///
/// @param self QCPErrorBars*
/// @param painter QCPPainter*
void q_cperrorbars_draw(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPErrorBars.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPErrorBars*
/// @param callback void func(QCPErrorBars* self, QCPPainter* painter)
void q_cperrorbars_on_draw(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPErrorBars.html)
///
/// Base class method implementation
///
/// @param self QCPErrorBars*
/// @param painter QCPPainter*
void q_cperrorbars_qbase_draw(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPErrorBars.html)
///
/// @param self QCPErrorBars*
/// @param painter QCPPainter*
/// @param rect QRectF*
void q_cperrorbars_draw_legend_icon(void* self, void* painter, void* rect);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPErrorBars.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPErrorBars*
/// @param callback void func(QCPErrorBars* self, QCPPainter* painter, QRectF* rect)
void q_cperrorbars_on_draw_legend_icon(void* self, void (*callback)(void*, void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPErrorBars.html)
///
/// Base class method implementation
///
/// @param self QCPErrorBars*
/// @param painter QCPPainter*
/// @param rect QRectF*
void q_cperrorbars_qbase_draw_legend_icon(void* self, void* painter, void* rect);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPErrorBars.html)
///
/// @param self QCPErrorBars*
/// @param foundRange bool*
/// @param inSignDomain enum QCP__SignDomain
QCPRange* q_cperrorbars_get_key_range(void* self, bool* foundRange, int32_t inSignDomain);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPErrorBars.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPErrorBars*
/// @param callback QCPRange* func(QCPErrorBars* self, bool* foundRange, enum QCP__SignDomain inSignDomain)
void q_cperrorbars_on_get_key_range(void* self, QCPRange* (*callback)(void*, bool*, int32_t));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPErrorBars.html)
///
/// Base class method implementation
///
/// @param self QCPErrorBars*
/// @param foundRange bool*
/// @param inSignDomain enum QCP__SignDomain
QCPRange* q_cperrorbars_qbase_get_key_range(void* self, bool* foundRange, int32_t inSignDomain);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPErrorBars.html)
///
/// @param self QCPErrorBars*
/// @param foundRange bool*
/// @param inSignDomain enum QCP__SignDomain
/// @param inKeyRange QCPRange*
QCPRange* q_cperrorbars_get_value_range(void* self, bool* foundRange, int32_t inSignDomain, void* inKeyRange);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPErrorBars.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPErrorBars*
/// @param callback QCPRange* func(QCPErrorBars* self, bool* foundRange, enum QCP__SignDomain inSignDomain, QCPRange* inKeyRange)
void q_cperrorbars_on_get_value_range(void* self, QCPRange* (*callback)(void*, bool*, int32_t, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPErrorBars.html)
///
/// Base class method implementation
///
/// @param self QCPErrorBars*
/// @param foundRange bool*
/// @param inSignDomain enum QCP__SignDomain
/// @param inKeyRange QCPRange*
QCPRange* q_cperrorbars_qbase_get_value_range(void* self, bool* foundRange, int32_t inSignDomain, void* inKeyRange);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPErrorBars.html)
///
/// @param self QCPErrorBars*
/// @param selectedSegments libqt_list /* of QCPDataRange* */
/// @param unselectedSegments libqt_list /* of QCPDataRange* */
void q_cperrorbars_get_data_segments(void* self, libqt_list selectedSegments, libqt_list unselectedSegments);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPErrorBars.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPErrorBars*
/// @param callback void func(QCPErrorBars* self, QCPDataRange** selectedSegments, QCPDataRange** unselectedSegments)
void q_cperrorbars_on_get_data_segments(void* self, void (*callback)(void*, QCPDataRange**, QCPDataRange**));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPErrorBars.html)
///
/// Base class method implementation
///
/// @param self QCPErrorBars*
/// @param selectedSegments libqt_list /* of QCPDataRange* */
/// @param unselectedSegments libqt_list /* of QCPDataRange* */
void q_cperrorbars_qbase_get_data_segments(void* self, libqt_list selectedSegments, libqt_list unselectedSegments);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPErrorBars.html)
///
/// @param self QCPErrorBars*
/// @param index int
bool q_cperrorbars_error_bar_visible(void* self, int index);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPErrorBars.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPErrorBars*
/// @param callback bool func(QCPErrorBars* self, int index)
void q_cperrorbars_on_error_bar_visible(void* self, bool (*callback)(void*, int));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPErrorBars.html)
///
/// Base class method implementation
///
/// @param self QCPErrorBars*
/// @param index int
bool q_cperrorbars_qbase_error_bar_visible(void* self, int index);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPErrorBars.html)
///
/// @param self QCPErrorBars*
/// @param pixelRect QRectF*
/// @param line QLineF*
bool q_cperrorbars_rect_intersects_line(void* self, void* pixelRect, void* line);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPErrorBars.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPErrorBars*
/// @param callback bool func(QCPErrorBars* self, QRectF* pixelRect, QLineF* line)
void q_cperrorbars_on_rect_intersects_line(void* self, bool (*callback)(void*, void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPErrorBars.html)
///
/// Base class method implementation
///
/// @param self QCPErrorBars*
/// @param pixelRect QRectF*
/// @param line QLineF*
bool q_cperrorbars_qbase_rect_intersects_line(void* self, void* pixelRect, void* line);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
/// @param c const char*
const char* q_cperrorbars_tr2(const char* s, const char* c);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
/// @param c const char*
/// @param n int
const char* q_cperrorbars_tr3(const char* s, const char* c, int n);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPErrorBars*
const char* q_cperrorbars_name(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPErrorBars*
bool q_cperrorbars_antialiased_fill(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPErrorBars*
bool q_cperrorbars_antialiased_scatters(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPErrorBars*
QPen* q_cperrorbars_pen(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPErrorBars*
QBrush* q_cperrorbars_brush(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPErrorBars*
QCPAxis* q_cperrorbars_key_axis(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPErrorBars*
QCPAxis* q_cperrorbars_value_axis(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPErrorBars*
///
/// @return enum QCP__SelectionType
int32_t q_cperrorbars_selectable(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPErrorBars*
bool q_cperrorbars_selected(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPErrorBars*
QCPDataSelection* q_cperrorbars_selection(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPErrorBars*
QCPSelectionDecorator* q_cperrorbars_selection_decorator(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPErrorBars*
/// @param name const char*
void q_cperrorbars_set_name(void* self, const char* name);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPErrorBars*
/// @param enabled bool
void q_cperrorbars_set_antialiased_fill(void* self, bool enabled);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPErrorBars*
/// @param enabled bool
void q_cperrorbars_set_antialiased_scatters(void* self, bool enabled);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPErrorBars*
/// @param pen QPen*
void q_cperrorbars_set_pen(void* self, void* pen);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPErrorBars*
/// @param brush QBrush*
void q_cperrorbars_set_brush(void* self, void* brush);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPErrorBars*
/// @param axis QCPAxis*
void q_cperrorbars_set_key_axis(void* self, void* axis);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPErrorBars*
/// @param axis QCPAxis*
void q_cperrorbars_set_value_axis(void* self, void* axis);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPErrorBars*
/// @param selectable enum QCP__SelectionType
void q_cperrorbars_set_selectable(void* self, int32_t selectable);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPErrorBars*
/// @param selection QCPDataSelection*
void q_cperrorbars_set_selection(void* self, void* selection);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPErrorBars*
/// @param decorator QCPSelectionDecorator*
void q_cperrorbars_set_selection_decorator(void* self, void* decorator);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPErrorBars*
/// @param key double
/// @param value double
/// @param x double*
/// @param y double*
void q_cperrorbars_coords_to_pixels(void* self, double key, double value, double* x, double* y);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPErrorBars*
/// @param key double
/// @param value double
const QPointF* q_cperrorbars_coords_to_pixels2(void* self, double key, double value);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPErrorBars*
/// @param x double
/// @param y double
/// @param key double*
/// @param value double*
void q_cperrorbars_pixels_to_coords(void* self, double x, double y, double* key, double* value);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPErrorBars*
/// @param pixelPos QPointF*
/// @param key double*
/// @param value double*
void q_cperrorbars_pixels_to_coords2(void* self, void* pixelPos, double* key, double* value);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPErrorBars*
void q_cperrorbars_rescale_axes(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPErrorBars*
void q_cperrorbars_rescale_key_axis(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPErrorBars*
void q_cperrorbars_rescale_value_axis(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPErrorBars*
/// @param legend QCPLegend*
bool q_cperrorbars_add_to_legend(void* self, void* legend);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPErrorBars*
bool q_cperrorbars_add_to_legend2(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPErrorBars*
/// @param legend QCPLegend*
bool q_cperrorbars_remove_from_legend(void* self, void* legend);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPErrorBars*
bool q_cperrorbars_remove_from_legend2(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPErrorBars*
/// @param selected bool
void q_cperrorbars_selection_changed(void* self, bool selected);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPErrorBars*
/// @param selection QCPDataSelection*
void q_cperrorbars_selection_changed2(void* self, void* selection);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPErrorBars*
/// @param selectable enum QCP__SelectionType
void q_cperrorbars_selectable_changed(void* self, int32_t selectable);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPErrorBars*
/// @param onlyEnlarge bool
void q_cperrorbars_rescale_axes1(void* self, bool onlyEnlarge);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPErrorBars*
/// @param onlyEnlarge bool
void q_cperrorbars_rescale_key_axis1(void* self, bool onlyEnlarge);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPErrorBars*
/// @param onlyEnlarge bool
void q_cperrorbars_rescale_value_axis1(void* self, bool onlyEnlarge);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// @param self QCPErrorBars*
/// @param onlyEnlarge bool
/// @param inKeyRange bool
void q_cperrorbars_rescale_value_axis2(void* self, bool onlyEnlarge, bool inKeyRange);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPErrorBars*
bool q_cperrorbars_visible(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPErrorBars*
QCustomPlot* q_cperrorbars_parent_plot(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPErrorBars*
QCPLayerable* q_cperrorbars_parent_layerable(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPErrorBars*
QCPLayer* q_cperrorbars_layer(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPErrorBars*
bool q_cperrorbars_antialiased(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPErrorBars*
/// @param on bool
void q_cperrorbars_set_visible(void* self, bool on);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPErrorBars*
/// @param layer QCPLayer*
bool q_cperrorbars_set_layer(void* self, void* layer);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPErrorBars*
/// @param layerName const char*
bool q_cperrorbars_set_layer2(void* self, const char* layerName);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPErrorBars*
/// @param enabled bool
void q_cperrorbars_set_antialiased(void* self, bool enabled);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPErrorBars*
bool q_cperrorbars_real_visibility(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPErrorBars*
/// @param newLayer QCPLayer*
void q_cperrorbars_layer_changed(void* self, void* newLayer);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPErrorBars*
/// @param callback void func(QCPErrorBars* self, QCPLayer* newLayer)
void q_cperrorbars_on_layer_changed(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#objectName)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPErrorBars*
const char* q_cperrorbars_object_name(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setObjectName)
///
/// @param self QCPErrorBars*
/// @param name char*
void q_cperrorbars_set_object_name(void* self, char* name);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isWidgetType)
///
/// @param self QCPErrorBars*
bool q_cperrorbars_is_widget_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isWindowType)
///
/// @param self QCPErrorBars*
bool q_cperrorbars_is_window_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isQuickItemType)
///
/// @param self QCPErrorBars*
bool q_cperrorbars_is_quick_item_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#signalsBlocked)
///
/// @param self QCPErrorBars*
bool q_cperrorbars_signals_blocked(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#blockSignals)
///
/// @param self QCPErrorBars*
/// @param b bool
bool q_cperrorbars_block_signals(void* self, bool b);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#thread)
///
/// @param self QCPErrorBars*
QThread* q_cperrorbars_thread(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#moveToThread)
///
/// @param self QCPErrorBars*
/// @param thread QThread*
bool q_cperrorbars_move_to_thread(void* self, void* thread);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#startTimer)
///
/// @param self QCPErrorBars*
/// @param interval int
int32_t q_cperrorbars_start_timer(void* self, int interval);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#killTimer)
///
/// @param self QCPErrorBars*
/// @param id int
void q_cperrorbars_kill_timer(void* self, int id);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#killTimer)
///
/// @param self QCPErrorBars*
/// @param id enum Qt__TimerId
void q_cperrorbars_kill_timer2(void* self, int32_t id);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#children)
///
/// @param self QCPErrorBars*
libqt_list /* of QObject* */ q_cperrorbars_children(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setParent)
///
/// @param self QCPErrorBars*
/// @param parent QObject*
void q_cperrorbars_set_parent(void* self, void* parent);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#installEventFilter)
///
/// @param self QCPErrorBars*
/// @param filterObj QObject*
void q_cperrorbars_install_event_filter(void* self, void* filterObj);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#removeEventFilter)
///
/// @param self QCPErrorBars*
/// @param obj QObject*
void q_cperrorbars_remove_event_filter(void* self, void* obj);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param method QMetaMethod*
QMetaObject__Connection* q_cperrorbars_connect(void* sender, void* signal, void* receiver, void* method);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param self QCPErrorBars*
/// @param sender QObject*
/// @param signal const char*
/// @param member const char*
QMetaObject__Connection* q_cperrorbars_connect2(void* self, void* sender, const char* signal, const char* member);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param member QMetaMethod*
bool q_cperrorbars_disconnect(void* sender, void* signal, void* receiver, void* member);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnect)
///
/// @param param1 QMetaObject__Connection*
bool q_cperrorbars_disconnect2(void* param1);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dumpObjectTree)
///
/// @param self QCPErrorBars*
void q_cperrorbars_dump_object_tree(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dumpObjectInfo)
///
/// @param self QCPErrorBars*
void q_cperrorbars_dump_object_info(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setProperty)
///
/// @param self QCPErrorBars*
/// @param name const char*
/// @param value QVariant*
bool q_cperrorbars_set_property(void* self, const char* name, void* value);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#property)
///
/// @param self QCPErrorBars*
/// @param name const char*
QVariant* q_cperrorbars_property(void* self, const char* name);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dynamicPropertyNames)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPErrorBars*
const char** q_cperrorbars_dynamic_property_names(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#bindingStorage)
///
/// @param self QCPErrorBars*
QBindingStorage* q_cperrorbars_binding_storage(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#bindingStorage)
///
/// @param self QCPErrorBars*
const QBindingStorage* q_cperrorbars_binding_storage2(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPErrorBars*
void q_cperrorbars_destroyed(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPErrorBars*
/// @param callback void func(QCPErrorBars* self)
void q_cperrorbars_on_destroyed(void* self, void (*callback)(void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#parent)
///
/// @param self QCPErrorBars*
QObject* q_cperrorbars_parent(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#inherits)
///
/// @param self QCPErrorBars*
/// @param classname const char*
bool q_cperrorbars_inherits(void* self, const char* classname);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#deleteLater)
///
/// @param self QCPErrorBars*
void q_cperrorbars_delete_later(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#moveToThread)
///
/// @param self QCPErrorBars*
/// @param thread QThread*
/// @param param2 Disambiguated_t*
bool q_cperrorbars_move_to_thread2(void* self, void* thread, void* param2);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#startTimer)
///
/// @param self QCPErrorBars*
/// @param interval int
/// @param timerType enum Qt__TimerType
int32_t q_cperrorbars_start_timer22(void* self, int interval, int32_t timerType);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param method QMetaMethod*
/// @param type enum Qt__ConnectionType
QMetaObject__Connection* q_cperrorbars_connect5(void* sender, void* signal, void* receiver, void* method, int32_t type);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param self QCPErrorBars*
/// @param sender QObject*
/// @param signal const char*
/// @param member const char*
/// @param type enum Qt__ConnectionType
QMetaObject__Connection* q_cperrorbars_connect4(void* self, void* sender, const char* signal, const char* member, int32_t type);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPErrorBars*
/// @param param1 QObject*
void q_cperrorbars_destroyed1(void* self, void* param1);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPErrorBars*
/// @param callback void func(QCPErrorBars* self, QObject* param1)
void q_cperrorbars_on_destroyed1(void* self, void (*callback)(void*, void*));

/// Inherited from QCPPlottableInterface1D
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPlottableInterface1D.html)
///
/// @param self QCPErrorBars*
/// @param param1 QCPPlottableInterface1D*
void q_cperrorbars_operator_assign(void* self, void* param1);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPErrorBars*
QRect* q_cperrorbars_clip_rect(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPErrorBars*
QRect* q_cperrorbars_qbase_clip_rect(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPErrorBars*
/// @param callback QRect* func()
void q_cperrorbars_on_clip_rect(void* self, QRect* (*callback)());

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPErrorBars*
///
/// @return enum QCP__Interaction
int32_t q_cperrorbars_selection_category(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPErrorBars*
///
/// @return enum QCP__Interaction
int32_t q_cperrorbars_qbase_selection_category(void* self);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPErrorBars*
/// @param callback int32_t func()
void q_cperrorbars_on_selection_category(void* self, int32_t (*callback)());

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPErrorBars*
/// @param painter QCPPainter*
void q_cperrorbars_apply_default_antialiasing_hint(void* self, void* painter);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPErrorBars*
/// @param painter QCPPainter*
void q_cperrorbars_qbase_apply_default_antialiasing_hint(void* self, void* painter);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPErrorBars*
/// @param callback void func(QCPErrorBars* self, QCPPainter* painter)
void q_cperrorbars_on_apply_default_antialiasing_hint(void* self, void (*callback)(void*, void*));

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPErrorBars*
/// @param event QMouseEvent*
/// @param additive bool
/// @param details QVariant*
/// @param selectionStateChanged bool*
void q_cperrorbars_select_event(void* self, void* event, bool additive, void* details, bool* selectionStateChanged);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPErrorBars*
/// @param event QMouseEvent*
/// @param additive bool
/// @param details QVariant*
/// @param selectionStateChanged bool*
void q_cperrorbars_qbase_select_event(void* self, void* event, bool additive, void* details, bool* selectionStateChanged);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPErrorBars*
/// @param callback void func(QCPErrorBars* self, QMouseEvent* event, bool additive, QVariant* details, bool* selectionStateChanged)
void q_cperrorbars_on_select_event(void* self, void (*callback)(void*, void*, bool, void*, bool*));

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPErrorBars*
/// @param selectionStateChanged bool*
void q_cperrorbars_deselect_event(void* self, bool* selectionStateChanged);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPErrorBars*
/// @param selectionStateChanged bool*
void q_cperrorbars_qbase_deselect_event(void* self, bool* selectionStateChanged);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPErrorBars*
/// @param callback void func(QCPErrorBars* self, bool* selectionStateChanged)
void q_cperrorbars_on_deselect_event(void* self, void (*callback)(void*, bool*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPErrorBars*
/// @param parentPlot QCustomPlot*
void q_cperrorbars_parent_plot_initialized(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPErrorBars*
/// @param parentPlot QCustomPlot*
void q_cperrorbars_qbase_parent_plot_initialized(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPErrorBars*
/// @param callback void func(QCPErrorBars* self, QCustomPlot* parentPlot)
void q_cperrorbars_on_parent_plot_initialized(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPErrorBars*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cperrorbars_mouse_press_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPErrorBars*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cperrorbars_qbase_mouse_press_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPErrorBars*
/// @param callback void func(QCPErrorBars* self, QMouseEvent* event, QVariant* details)
void q_cperrorbars_on_mouse_press_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPErrorBars*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cperrorbars_mouse_move_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPErrorBars*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cperrorbars_qbase_mouse_move_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPErrorBars*
/// @param callback void func(QCPErrorBars* self, QMouseEvent* event, QPointF* startPos)
void q_cperrorbars_on_mouse_move_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPErrorBars*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cperrorbars_mouse_release_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPErrorBars*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cperrorbars_qbase_mouse_release_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPErrorBars*
/// @param callback void func(QCPErrorBars* self, QMouseEvent* event, QPointF* startPos)
void q_cperrorbars_on_mouse_release_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPErrorBars*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cperrorbars_mouse_double_click_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPErrorBars*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cperrorbars_qbase_mouse_double_click_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPErrorBars*
/// @param callback void func(QCPErrorBars* self, QMouseEvent* event, QVariant* details)
void q_cperrorbars_on_mouse_double_click_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPErrorBars*
/// @param event QWheelEvent*
void q_cperrorbars_wheel_event(void* self, void* event);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPErrorBars*
/// @param event QWheelEvent*
void q_cperrorbars_qbase_wheel_event(void* self, void* event);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPErrorBars*
/// @param callback void func(QCPErrorBars* self, QWheelEvent* event)
void q_cperrorbars_on_wheel_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPErrorBars*
/// @param event QEvent*
bool q_cperrorbars_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPErrorBars*
/// @param event QEvent*
bool q_cperrorbars_qbase_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPErrorBars*
/// @param callback bool func(QCPErrorBars* self, QEvent* event)
void q_cperrorbars_on_event(void* self, bool (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPErrorBars*
/// @param watched QObject*
/// @param event QEvent*
bool q_cperrorbars_event_filter(void* self, void* watched, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPErrorBars*
/// @param watched QObject*
/// @param event QEvent*
bool q_cperrorbars_qbase_event_filter(void* self, void* watched, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPErrorBars*
/// @param callback bool func(QCPErrorBars* self, QObject* watched, QEvent* event)
void q_cperrorbars_on_event_filter(void* self, bool (*callback)(void*, void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPErrorBars*
/// @param event QTimerEvent*
void q_cperrorbars_timer_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPErrorBars*
/// @param event QTimerEvent*
void q_cperrorbars_qbase_timer_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPErrorBars*
/// @param callback void func(QCPErrorBars* self, QTimerEvent* event)
void q_cperrorbars_on_timer_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPErrorBars*
/// @param event QChildEvent*
void q_cperrorbars_child_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPErrorBars*
/// @param event QChildEvent*
void q_cperrorbars_qbase_child_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPErrorBars*
/// @param callback void func(QCPErrorBars* self, QChildEvent* event)
void q_cperrorbars_on_child_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPErrorBars*
/// @param event QEvent*
void q_cperrorbars_custom_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPErrorBars*
/// @param event QEvent*
void q_cperrorbars_qbase_custom_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPErrorBars*
/// @param callback void func(QCPErrorBars* self, QEvent* event)
void q_cperrorbars_on_custom_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPErrorBars*
/// @param signal QMetaMethod*
void q_cperrorbars_connect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPErrorBars*
/// @param signal QMetaMethod*
void q_cperrorbars_qbase_connect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPErrorBars*
/// @param callback void func(QCPErrorBars* self, QMetaMethod* signal)
void q_cperrorbars_on_connect_notify(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPErrorBars*
/// @param signal QMetaMethod*
void q_cperrorbars_disconnect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPErrorBars*
/// @param signal QMetaMethod*
void q_cperrorbars_qbase_disconnect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPErrorBars*
/// @param callback void func(QCPErrorBars* self, QMetaMethod* signal)
void q_cperrorbars_on_disconnect_notify(void* self, void (*callback)(void*, void*));

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPErrorBars*
/// @param painter QCPPainter*
void q_cperrorbars_apply_fill_antialiasing_hint(void* self, void* painter);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPErrorBars*
/// @param painter QCPPainter*
void q_cperrorbars_qbase_apply_fill_antialiasing_hint(void* self, void* painter);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPErrorBars*
/// @param callback void func(QCPErrorBars* self, QCPPainter* painter)
void q_cperrorbars_on_apply_fill_antialiasing_hint(void* self, void (*callback)(void*, void*));

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPErrorBars*
/// @param painter QCPPainter*
void q_cperrorbars_apply_scatters_antialiasing_hint(void* self, void* painter);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPErrorBars*
/// @param painter QCPPainter*
void q_cperrorbars_qbase_apply_scatters_antialiasing_hint(void* self, void* painter);

/// Inherited from QCPAbstractPlottable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractPlottable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPErrorBars*
/// @param callback void func(QCPErrorBars* self, QCPPainter* painter)
void q_cperrorbars_on_apply_scatters_antialiasing_hint(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPErrorBars*
/// @param parentPlot QCustomPlot*
void q_cperrorbars_initialize_parent_plot(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPErrorBars*
/// @param parentPlot QCustomPlot*
void q_cperrorbars_qbase_initialize_parent_plot(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPErrorBars*
/// @param callback void func(QCPErrorBars* self, QCustomPlot* parentPlot)
void q_cperrorbars_on_initialize_parent_plot(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPErrorBars*
/// @param parentLayerable QCPLayerable*
void q_cperrorbars_set_parent_layerable(void* self, void* parentLayerable);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPErrorBars*
/// @param parentLayerable QCPLayerable*
void q_cperrorbars_qbase_set_parent_layerable(void* self, void* parentLayerable);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPErrorBars*
/// @param callback void func(QCPErrorBars* self, QCPLayerable* parentLayerable)
void q_cperrorbars_on_set_parent_layerable(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPErrorBars*
/// @param layer QCPLayer*
/// @param prepend bool
bool q_cperrorbars_move_to_layer(void* self, void* layer, bool prepend);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPErrorBars*
/// @param layer QCPLayer*
/// @param prepend bool
bool q_cperrorbars_qbase_move_to_layer(void* self, void* layer, bool prepend);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPErrorBars*
/// @param callback bool func(QCPErrorBars* self, QCPLayer* layer, bool prepend)
void q_cperrorbars_on_move_to_layer(void* self, bool (*callback)(void*, void*, bool));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPErrorBars*
/// @param painter QCPPainter*
/// @param localAntialiased bool
/// @param overrideElement enum QCP__AntialiasedElement
void q_cperrorbars_apply_antialiasing_hint(void* self, void* painter, bool localAntialiased, int32_t overrideElement);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPErrorBars*
/// @param painter QCPPainter*
/// @param localAntialiased bool
/// @param overrideElement enum QCP__AntialiasedElement
void q_cperrorbars_qbase_apply_antialiasing_hint(void* self, void* painter, bool localAntialiased, int32_t overrideElement);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPErrorBars*
/// @param callback void func(QCPErrorBars* self, QCPPainter* painter, bool localAntialiased, enum QCP__AntialiasedElement overrideElement)
void q_cperrorbars_on_apply_antialiasing_hint(void* self, void (*callback)(void*, void*, bool, int32_t));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPErrorBars*
QObject* q_cperrorbars_sender(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPErrorBars*
QObject* q_cperrorbars_qbase_sender(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPErrorBars*
/// @param callback QObject* func()
void q_cperrorbars_on_sender(void* self, QObject* (*callback)());

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPErrorBars*
int32_t q_cperrorbars_sender_signal_index(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPErrorBars*
int32_t q_cperrorbars_qbase_sender_signal_index(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPErrorBars*
/// @param callback int32_t func()
void q_cperrorbars_on_sender_signal_index(void* self, int32_t (*callback)());

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPErrorBars*
/// @param signal const char*
int32_t q_cperrorbars_receivers(void* self, const char* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPErrorBars*
/// @param signal const char*
int32_t q_cperrorbars_qbase_receivers(void* self, const char* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPErrorBars*
/// @param callback int32_t func(QCPErrorBars* self, const char* signal)
void q_cperrorbars_on_receivers(void* self, int32_t (*callback)(void*, const char*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPErrorBars*
/// @param signal QMetaMethod*
bool q_cperrorbars_is_signal_connected(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPErrorBars*
/// @param signal QMetaMethod*
bool q_cperrorbars_qbase_is_signal_connected(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPErrorBars*
/// @param callback bool func(QCPErrorBars* self, QMetaMethod* signal)
void q_cperrorbars_on_is_signal_connected(void* self, bool (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#objectNameChanged)
///
/// Wrapper to allow calling private signal
///
/// @param self QCPErrorBars*
/// @param callback void func(QCPErrorBars* self, const char* objectName)
void q_cperrorbars_on_object_name_changed(void* self, void (*callback)(void*, const char*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPErrorBars.html)
///
/// Delete this object from C++ memory.
///
/// @param self QCPErrorBars*
void q_cperrorbars_delete(void* self);

/// https://www.qcustomplot.com/documentation/classQCPItemStraightLine.html

/// q_cpitemstraightline_new constructs a new QCPItemStraightLine object.
///
/// @param parentPlot QCustomPlot*
QCPItemStraightLine* q_cpitemstraightline_new(void* parentPlot);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#metaObject)
///
/// @param self QCPItemStraightLine*
const QMetaObject* q_cpitemstraightline_meta_object(void* self);

/// @param self QCPItemStraightLine*
/// @param param1 const char*
void* q_cpitemstraightline_metacast(void* self, const char* param1);

/// @param self QCPItemStraightLine*
/// @param param1 enum QMetaObject__Call
/// @param param2 int
/// @param param3 void*
int32_t q_cpitemstraightline_metacall(void* self, int32_t param1, int param2, void* param3);

/// Allows for overriding the related default method
///
/// @param self QCPItemStraightLine*
/// @param callback int32_t func(QCPItemStraightLine* self, enum QMetaObject__Call param1, int param2, void* param3)
void q_cpitemstraightline_on_metacall(void* self, int32_t (*callback)(void*, int32_t, int, void*));

/// Base class method implementation
///
/// @param self QCPItemStraightLine*
/// @param param1 enum QMetaObject__Call
/// @param param2 int
/// @param param3 void*
int32_t q_cpitemstraightline_qbase_metacall(void* self, int32_t param1, int param2, void* param3);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
const char* q_cpitemstraightline_tr(const char* s);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemStraightLine.html)
///
/// @param self QCPItemStraightLine*
QPen* q_cpitemstraightline_pen(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemStraightLine.html)
///
/// @param self QCPItemStraightLine*
QPen* q_cpitemstraightline_selected_pen(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemStraightLine.html)
///
/// @param self QCPItemStraightLine*
/// @param pen QPen*
void q_cpitemstraightline_set_pen(void* self, void* pen);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemStraightLine.html)
///
/// @param self QCPItemStraightLine*
/// @param pen QPen*
void q_cpitemstraightline_set_selected_pen(void* self, void* pen);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemStraightLine.html)
///
/// @param self QCPItemStraightLine*
/// @param pos QPointF*
/// @param onlySelectable bool
/// @param details QVariant*
double q_cpitemstraightline_select_test(void* self, void* pos, bool onlySelectable, void* details);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemStraightLine.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPItemStraightLine*
/// @param callback double func(QCPItemStraightLine* self, QPointF* pos, bool onlySelectable, QVariant* details)
void q_cpitemstraightline_on_select_test(void* self, double (*callback)(void*, void*, bool, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemStraightLine.html)
///
/// Base class method implementation
///
/// @param self QCPItemStraightLine*
/// @param pos QPointF*
/// @param onlySelectable bool
/// @param details QVariant*
double q_cpitemstraightline_qbase_select_test(void* self, void* pos, bool onlySelectable, void* details);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemStraightLine.html)
///
/// @param self QCPItemStraightLine*
const QCPItemPosition* q_cpitemstraightline_point1(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemStraightLine.html)
///
/// @param self QCPItemStraightLine*
const QCPItemPosition* q_cpitemstraightline_point2(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemStraightLine.html)
///
/// @param self QCPItemStraightLine*
/// @param painter QCPPainter*
void q_cpitemstraightline_draw(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemStraightLine.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPItemStraightLine*
/// @param callback void func(QCPItemStraightLine* self, QCPPainter* painter)
void q_cpitemstraightline_on_draw(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemStraightLine.html)
///
/// Base class method implementation
///
/// @param self QCPItemStraightLine*
/// @param painter QCPPainter*
void q_cpitemstraightline_qbase_draw(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemStraightLine.html)
///
/// @param self QCPItemStraightLine*
/// @param base QCPVector2D*
/// @param vec QCPVector2D*
/// @param rect QRect*
QLineF* q_cpitemstraightline_get_rect_clipped_straight_line(void* self, void* base, void* vec, void* rect);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemStraightLine.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPItemStraightLine*
/// @param callback QLineF* func(QCPItemStraightLine* self, QCPVector2D* base, QCPVector2D* vec, QRect* rect)
void q_cpitemstraightline_on_get_rect_clipped_straight_line(void* self, QLineF* (*callback)(void*, void*, void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemStraightLine.html)
///
/// Base class method implementation
///
/// @param self QCPItemStraightLine*
/// @param base QCPVector2D*
/// @param vec QCPVector2D*
/// @param rect QRect*
QLineF* q_cpitemstraightline_qbase_get_rect_clipped_straight_line(void* self, void* base, void* vec, void* rect);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemStraightLine.html)
///
/// @param self QCPItemStraightLine*
QPen* q_cpitemstraightline_main_pen(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemStraightLine.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPItemStraightLine*
/// @param callback QPen* func()
void q_cpitemstraightline_on_main_pen(void* self, QPen* (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemStraightLine.html)
///
/// Base class method implementation
///
/// @param self QCPItemStraightLine*
QPen* q_cpitemstraightline_qbase_main_pen(void* self);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
/// @param c const char*
const char* q_cpitemstraightline_tr2(const char* s, const char* c);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
/// @param c const char*
/// @param n int
const char* q_cpitemstraightline_tr3(const char* s, const char* c, int n);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemStraightLine*
bool q_cpitemstraightline_clip_to_axis_rect(void* self);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemStraightLine*
QCPAxisRect* q_cpitemstraightline_clip_axis_rect(void* self);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemStraightLine*
bool q_cpitemstraightline_selectable(void* self);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemStraightLine*
bool q_cpitemstraightline_selected(void* self);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemStraightLine*
/// @param clip bool
void q_cpitemstraightline_set_clip_to_axis_rect(void* self, bool clip);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemStraightLine*
/// @param rect QCPAxisRect*
void q_cpitemstraightline_set_clip_axis_rect(void* self, void* rect);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemStraightLine*
/// @param selectable bool
void q_cpitemstraightline_set_selectable(void* self, bool selectable);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemStraightLine*
/// @param selected bool
void q_cpitemstraightline_set_selected(void* self, bool selected);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemStraightLine*
libqt_list /* of QCPItemPosition* */ q_cpitemstraightline_positions(void* self);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemStraightLine*
libqt_list /* of QCPItemAnchor* */ q_cpitemstraightline_anchors(void* self);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemStraightLine*
/// @param name const char*
QCPItemPosition* q_cpitemstraightline_position(void* self, const char* name);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemStraightLine*
/// @param name const char*
QCPItemAnchor* q_cpitemstraightline_anchor(void* self, const char* name);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemStraightLine*
/// @param name const char*
bool q_cpitemstraightline_has_anchor(void* self, const char* name);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemStraightLine*
/// @param selected bool
void q_cpitemstraightline_selection_changed(void* self, bool selected);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemStraightLine*
/// @param callback void func(QCPItemStraightLine* self, bool selected)
void q_cpitemstraightline_on_selection_changed(void* self, void (*callback)(void*, bool));

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemStraightLine*
/// @param selectable bool
void q_cpitemstraightline_selectable_changed(void* self, bool selectable);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemStraightLine*
/// @param callback void func(QCPItemStraightLine* self, bool selectable)
void q_cpitemstraightline_on_selectable_changed(void* self, void (*callback)(void*, bool));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPItemStraightLine*
bool q_cpitemstraightline_visible(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPItemStraightLine*
QCustomPlot* q_cpitemstraightline_parent_plot(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPItemStraightLine*
QCPLayerable* q_cpitemstraightline_parent_layerable(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPItemStraightLine*
QCPLayer* q_cpitemstraightline_layer(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPItemStraightLine*
bool q_cpitemstraightline_antialiased(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPItemStraightLine*
/// @param on bool
void q_cpitemstraightline_set_visible(void* self, bool on);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPItemStraightLine*
/// @param layer QCPLayer*
bool q_cpitemstraightline_set_layer(void* self, void* layer);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPItemStraightLine*
/// @param layerName const char*
bool q_cpitemstraightline_set_layer2(void* self, const char* layerName);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPItemStraightLine*
/// @param enabled bool
void q_cpitemstraightline_set_antialiased(void* self, bool enabled);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPItemStraightLine*
bool q_cpitemstraightline_real_visibility(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPItemStraightLine*
/// @param newLayer QCPLayer*
void q_cpitemstraightline_layer_changed(void* self, void* newLayer);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPItemStraightLine*
/// @param callback void func(QCPItemStraightLine* self, QCPLayer* newLayer)
void q_cpitemstraightline_on_layer_changed(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#objectName)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPItemStraightLine*
const char* q_cpitemstraightline_object_name(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setObjectName)
///
/// @param self QCPItemStraightLine*
/// @param name char*
void q_cpitemstraightline_set_object_name(void* self, char* name);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isWidgetType)
///
/// @param self QCPItemStraightLine*
bool q_cpitemstraightline_is_widget_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isWindowType)
///
/// @param self QCPItemStraightLine*
bool q_cpitemstraightline_is_window_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isQuickItemType)
///
/// @param self QCPItemStraightLine*
bool q_cpitemstraightline_is_quick_item_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#signalsBlocked)
///
/// @param self QCPItemStraightLine*
bool q_cpitemstraightline_signals_blocked(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#blockSignals)
///
/// @param self QCPItemStraightLine*
/// @param b bool
bool q_cpitemstraightline_block_signals(void* self, bool b);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#thread)
///
/// @param self QCPItemStraightLine*
QThread* q_cpitemstraightline_thread(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#moveToThread)
///
/// @param self QCPItemStraightLine*
/// @param thread QThread*
bool q_cpitemstraightline_move_to_thread(void* self, void* thread);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#startTimer)
///
/// @param self QCPItemStraightLine*
/// @param interval int
int32_t q_cpitemstraightline_start_timer(void* self, int interval);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#killTimer)
///
/// @param self QCPItemStraightLine*
/// @param id int
void q_cpitemstraightline_kill_timer(void* self, int id);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#killTimer)
///
/// @param self QCPItemStraightLine*
/// @param id enum Qt__TimerId
void q_cpitemstraightline_kill_timer2(void* self, int32_t id);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#children)
///
/// @param self QCPItemStraightLine*
libqt_list /* of QObject* */ q_cpitemstraightline_children(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setParent)
///
/// @param self QCPItemStraightLine*
/// @param parent QObject*
void q_cpitemstraightline_set_parent(void* self, void* parent);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#installEventFilter)
///
/// @param self QCPItemStraightLine*
/// @param filterObj QObject*
void q_cpitemstraightline_install_event_filter(void* self, void* filterObj);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#removeEventFilter)
///
/// @param self QCPItemStraightLine*
/// @param obj QObject*
void q_cpitemstraightline_remove_event_filter(void* self, void* obj);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param method QMetaMethod*
QMetaObject__Connection* q_cpitemstraightline_connect(void* sender, void* signal, void* receiver, void* method);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param self QCPItemStraightLine*
/// @param sender QObject*
/// @param signal const char*
/// @param member const char*
QMetaObject__Connection* q_cpitemstraightline_connect2(void* self, void* sender, const char* signal, const char* member);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param member QMetaMethod*
bool q_cpitemstraightline_disconnect(void* sender, void* signal, void* receiver, void* member);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnect)
///
/// @param param1 QMetaObject__Connection*
bool q_cpitemstraightline_disconnect2(void* param1);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dumpObjectTree)
///
/// @param self QCPItemStraightLine*
void q_cpitemstraightline_dump_object_tree(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dumpObjectInfo)
///
/// @param self QCPItemStraightLine*
void q_cpitemstraightline_dump_object_info(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setProperty)
///
/// @param self QCPItemStraightLine*
/// @param name const char*
/// @param value QVariant*
bool q_cpitemstraightline_set_property(void* self, const char* name, void* value);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#property)
///
/// @param self QCPItemStraightLine*
/// @param name const char*
QVariant* q_cpitemstraightline_property(void* self, const char* name);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dynamicPropertyNames)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPItemStraightLine*
const char** q_cpitemstraightline_dynamic_property_names(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#bindingStorage)
///
/// @param self QCPItemStraightLine*
QBindingStorage* q_cpitemstraightline_binding_storage(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#bindingStorage)
///
/// @param self QCPItemStraightLine*
const QBindingStorage* q_cpitemstraightline_binding_storage2(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPItemStraightLine*
void q_cpitemstraightline_destroyed(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPItemStraightLine*
/// @param callback void func(QCPItemStraightLine* self)
void q_cpitemstraightline_on_destroyed(void* self, void (*callback)(void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#parent)
///
/// @param self QCPItemStraightLine*
QObject* q_cpitemstraightline_parent(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#inherits)
///
/// @param self QCPItemStraightLine*
/// @param classname const char*
bool q_cpitemstraightline_inherits(void* self, const char* classname);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#deleteLater)
///
/// @param self QCPItemStraightLine*
void q_cpitemstraightline_delete_later(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#moveToThread)
///
/// @param self QCPItemStraightLine*
/// @param thread QThread*
/// @param param2 Disambiguated_t*
bool q_cpitemstraightline_move_to_thread2(void* self, void* thread, void* param2);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#startTimer)
///
/// @param self QCPItemStraightLine*
/// @param interval int
/// @param timerType enum Qt__TimerType
int32_t q_cpitemstraightline_start_timer22(void* self, int interval, int32_t timerType);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param method QMetaMethod*
/// @param type enum Qt__ConnectionType
QMetaObject__Connection* q_cpitemstraightline_connect5(void* sender, void* signal, void* receiver, void* method, int32_t type);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param self QCPItemStraightLine*
/// @param sender QObject*
/// @param signal const char*
/// @param member const char*
/// @param type enum Qt__ConnectionType
QMetaObject__Connection* q_cpitemstraightline_connect4(void* self, void* sender, const char* signal, const char* member, int32_t type);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPItemStraightLine*
/// @param param1 QObject*
void q_cpitemstraightline_destroyed1(void* self, void* param1);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPItemStraightLine*
/// @param callback void func(QCPItemStraightLine* self, QObject* param1)
void q_cpitemstraightline_on_destroyed1(void* self, void (*callback)(void*, void*));

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemStraightLine*
///
/// @return enum QCP__Interaction
int32_t q_cpitemstraightline_selection_category(void* self);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemStraightLine*
///
/// @return enum QCP__Interaction
int32_t q_cpitemstraightline_qbase_selection_category(void* self);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemStraightLine*
/// @param callback int32_t func()
void q_cpitemstraightline_on_selection_category(void* self, int32_t (*callback)());

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemStraightLine*
QRect* q_cpitemstraightline_clip_rect(void* self);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemStraightLine*
QRect* q_cpitemstraightline_qbase_clip_rect(void* self);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemStraightLine*
/// @param callback QRect* func()
void q_cpitemstraightline_on_clip_rect(void* self, QRect* (*callback)());

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemStraightLine*
/// @param painter QCPPainter*
void q_cpitemstraightline_apply_default_antialiasing_hint(void* self, void* painter);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemStraightLine*
/// @param painter QCPPainter*
void q_cpitemstraightline_qbase_apply_default_antialiasing_hint(void* self, void* painter);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemStraightLine*
/// @param callback void func(QCPItemStraightLine* self, QCPPainter* painter)
void q_cpitemstraightline_on_apply_default_antialiasing_hint(void* self, void (*callback)(void*, void*));

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemStraightLine*
/// @param event QMouseEvent*
/// @param additive bool
/// @param details QVariant*
/// @param selectionStateChanged bool*
void q_cpitemstraightline_select_event(void* self, void* event, bool additive, void* details, bool* selectionStateChanged);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemStraightLine*
/// @param event QMouseEvent*
/// @param additive bool
/// @param details QVariant*
/// @param selectionStateChanged bool*
void q_cpitemstraightline_qbase_select_event(void* self, void* event, bool additive, void* details, bool* selectionStateChanged);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemStraightLine*
/// @param callback void func(QCPItemStraightLine* self, QMouseEvent* event, bool additive, QVariant* details, bool* selectionStateChanged)
void q_cpitemstraightline_on_select_event(void* self, void (*callback)(void*, void*, bool, void*, bool*));

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemStraightLine*
/// @param selectionStateChanged bool*
void q_cpitemstraightline_deselect_event(void* self, bool* selectionStateChanged);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemStraightLine*
/// @param selectionStateChanged bool*
void q_cpitemstraightline_qbase_deselect_event(void* self, bool* selectionStateChanged);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemStraightLine*
/// @param callback void func(QCPItemStraightLine* self, bool* selectionStateChanged)
void q_cpitemstraightline_on_deselect_event(void* self, void (*callback)(void*, bool*));

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemStraightLine*
/// @param anchorId int
QPointF* q_cpitemstraightline_anchor_pixel_position(void* self, int anchorId);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemStraightLine*
/// @param anchorId int
QPointF* q_cpitemstraightline_qbase_anchor_pixel_position(void* self, int anchorId);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemStraightLine*
/// @param callback QPointF* func(QCPItemStraightLine* self, int anchorId)
void q_cpitemstraightline_on_anchor_pixel_position(void* self, QPointF* (*callback)(void*, int));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemStraightLine*
/// @param parentPlot QCustomPlot*
void q_cpitemstraightline_parent_plot_initialized(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemStraightLine*
/// @param parentPlot QCustomPlot*
void q_cpitemstraightline_qbase_parent_plot_initialized(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemStraightLine*
/// @param callback void func(QCPItemStraightLine* self, QCustomPlot* parentPlot)
void q_cpitemstraightline_on_parent_plot_initialized(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemStraightLine*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cpitemstraightline_mouse_press_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemStraightLine*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cpitemstraightline_qbase_mouse_press_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemStraightLine*
/// @param callback void func(QCPItemStraightLine* self, QMouseEvent* event, QVariant* details)
void q_cpitemstraightline_on_mouse_press_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemStraightLine*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cpitemstraightline_mouse_move_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemStraightLine*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cpitemstraightline_qbase_mouse_move_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemStraightLine*
/// @param callback void func(QCPItemStraightLine* self, QMouseEvent* event, QPointF* startPos)
void q_cpitemstraightline_on_mouse_move_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemStraightLine*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cpitemstraightline_mouse_release_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemStraightLine*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cpitemstraightline_qbase_mouse_release_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemStraightLine*
/// @param callback void func(QCPItemStraightLine* self, QMouseEvent* event, QPointF* startPos)
void q_cpitemstraightline_on_mouse_release_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemStraightLine*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cpitemstraightline_mouse_double_click_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemStraightLine*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cpitemstraightline_qbase_mouse_double_click_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemStraightLine*
/// @param callback void func(QCPItemStraightLine* self, QMouseEvent* event, QVariant* details)
void q_cpitemstraightline_on_mouse_double_click_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemStraightLine*
/// @param event QWheelEvent*
void q_cpitemstraightline_wheel_event(void* self, void* event);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemStraightLine*
/// @param event QWheelEvent*
void q_cpitemstraightline_qbase_wheel_event(void* self, void* event);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemStraightLine*
/// @param callback void func(QCPItemStraightLine* self, QWheelEvent* event)
void q_cpitemstraightline_on_wheel_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemStraightLine*
/// @param event QEvent*
bool q_cpitemstraightline_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemStraightLine*
/// @param event QEvent*
bool q_cpitemstraightline_qbase_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemStraightLine*
/// @param callback bool func(QCPItemStraightLine* self, QEvent* event)
void q_cpitemstraightline_on_event(void* self, bool (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemStraightLine*
/// @param watched QObject*
/// @param event QEvent*
bool q_cpitemstraightline_event_filter(void* self, void* watched, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemStraightLine*
/// @param watched QObject*
/// @param event QEvent*
bool q_cpitemstraightline_qbase_event_filter(void* self, void* watched, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemStraightLine*
/// @param callback bool func(QCPItemStraightLine* self, QObject* watched, QEvent* event)
void q_cpitemstraightline_on_event_filter(void* self, bool (*callback)(void*, void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemStraightLine*
/// @param event QTimerEvent*
void q_cpitemstraightline_timer_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemStraightLine*
/// @param event QTimerEvent*
void q_cpitemstraightline_qbase_timer_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemStraightLine*
/// @param callback void func(QCPItemStraightLine* self, QTimerEvent* event)
void q_cpitemstraightline_on_timer_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemStraightLine*
/// @param event QChildEvent*
void q_cpitemstraightline_child_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemStraightLine*
/// @param event QChildEvent*
void q_cpitemstraightline_qbase_child_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemStraightLine*
/// @param callback void func(QCPItemStraightLine* self, QChildEvent* event)
void q_cpitemstraightline_on_child_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemStraightLine*
/// @param event QEvent*
void q_cpitemstraightline_custom_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemStraightLine*
/// @param event QEvent*
void q_cpitemstraightline_qbase_custom_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemStraightLine*
/// @param callback void func(QCPItemStraightLine* self, QEvent* event)
void q_cpitemstraightline_on_custom_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemStraightLine*
/// @param signal QMetaMethod*
void q_cpitemstraightline_connect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemStraightLine*
/// @param signal QMetaMethod*
void q_cpitemstraightline_qbase_connect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemStraightLine*
/// @param callback void func(QCPItemStraightLine* self, QMetaMethod* signal)
void q_cpitemstraightline_on_connect_notify(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemStraightLine*
/// @param signal QMetaMethod*
void q_cpitemstraightline_disconnect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemStraightLine*
/// @param signal QMetaMethod*
void q_cpitemstraightline_qbase_disconnect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemStraightLine*
/// @param callback void func(QCPItemStraightLine* self, QMetaMethod* signal)
void q_cpitemstraightline_on_disconnect_notify(void* self, void (*callback)(void*, void*));

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemStraightLine*
/// @param rect QRectF*
/// @param pos QPointF*
/// @param filledRect bool
double q_cpitemstraightline_rect_distance(void* self, void* rect, void* pos, bool filledRect);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemStraightLine*
/// @param rect QRectF*
/// @param pos QPointF*
/// @param filledRect bool
double q_cpitemstraightline_qbase_rect_distance(void* self, void* rect, void* pos, bool filledRect);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemStraightLine*
/// @param callback double func(QCPItemStraightLine* self, QRectF* rect, QPointF* pos, bool filledRect)
void q_cpitemstraightline_on_rect_distance(void* self, double (*callback)(void*, void*, void*, bool));

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemStraightLine*
/// @param name const char*
QCPItemPosition* q_cpitemstraightline_create_position(void* self, const char* name);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemStraightLine*
/// @param name const char*
QCPItemPosition* q_cpitemstraightline_qbase_create_position(void* self, const char* name);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemStraightLine*
/// @param callback QCPItemPosition* func(QCPItemStraightLine* self, const char* name)
void q_cpitemstraightline_on_create_position(void* self, QCPItemPosition* (*callback)(void*, const char*));

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemStraightLine*
/// @param name const char*
/// @param anchorId int
QCPItemAnchor* q_cpitemstraightline_create_anchor(void* self, const char* name, int anchorId);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemStraightLine*
/// @param name const char*
/// @param anchorId int
QCPItemAnchor* q_cpitemstraightline_qbase_create_anchor(void* self, const char* name, int anchorId);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemStraightLine*
/// @param callback QCPItemAnchor* func(QCPItemStraightLine* self, const char* name, int anchorId)
void q_cpitemstraightline_on_create_anchor(void* self, QCPItemAnchor* (*callback)(void*, const char*, int));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemStraightLine*
/// @param parentPlot QCustomPlot*
void q_cpitemstraightline_initialize_parent_plot(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemStraightLine*
/// @param parentPlot QCustomPlot*
void q_cpitemstraightline_qbase_initialize_parent_plot(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemStraightLine*
/// @param callback void func(QCPItemStraightLine* self, QCustomPlot* parentPlot)
void q_cpitemstraightline_on_initialize_parent_plot(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemStraightLine*
/// @param parentLayerable QCPLayerable*
void q_cpitemstraightline_set_parent_layerable(void* self, void* parentLayerable);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemStraightLine*
/// @param parentLayerable QCPLayerable*
void q_cpitemstraightline_qbase_set_parent_layerable(void* self, void* parentLayerable);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemStraightLine*
/// @param callback void func(QCPItemStraightLine* self, QCPLayerable* parentLayerable)
void q_cpitemstraightline_on_set_parent_layerable(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemStraightLine*
/// @param layer QCPLayer*
/// @param prepend bool
bool q_cpitemstraightline_move_to_layer(void* self, void* layer, bool prepend);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemStraightLine*
/// @param layer QCPLayer*
/// @param prepend bool
bool q_cpitemstraightline_qbase_move_to_layer(void* self, void* layer, bool prepend);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemStraightLine*
/// @param callback bool func(QCPItemStraightLine* self, QCPLayer* layer, bool prepend)
void q_cpitemstraightline_on_move_to_layer(void* self, bool (*callback)(void*, void*, bool));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemStraightLine*
/// @param painter QCPPainter*
/// @param localAntialiased bool
/// @param overrideElement enum QCP__AntialiasedElement
void q_cpitemstraightline_apply_antialiasing_hint(void* self, void* painter, bool localAntialiased, int32_t overrideElement);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemStraightLine*
/// @param painter QCPPainter*
/// @param localAntialiased bool
/// @param overrideElement enum QCP__AntialiasedElement
void q_cpitemstraightline_qbase_apply_antialiasing_hint(void* self, void* painter, bool localAntialiased, int32_t overrideElement);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemStraightLine*
/// @param callback void func(QCPItemStraightLine* self, QCPPainter* painter, bool localAntialiased, enum QCP__AntialiasedElement overrideElement)
void q_cpitemstraightline_on_apply_antialiasing_hint(void* self, void (*callback)(void*, void*, bool, int32_t));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemStraightLine*
QObject* q_cpitemstraightline_sender(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemStraightLine*
QObject* q_cpitemstraightline_qbase_sender(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemStraightLine*
/// @param callback QObject* func()
void q_cpitemstraightline_on_sender(void* self, QObject* (*callback)());

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemStraightLine*
int32_t q_cpitemstraightline_sender_signal_index(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemStraightLine*
int32_t q_cpitemstraightline_qbase_sender_signal_index(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemStraightLine*
/// @param callback int32_t func()
void q_cpitemstraightline_on_sender_signal_index(void* self, int32_t (*callback)());

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemStraightLine*
/// @param signal const char*
int32_t q_cpitemstraightline_receivers(void* self, const char* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemStraightLine*
/// @param signal const char*
int32_t q_cpitemstraightline_qbase_receivers(void* self, const char* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemStraightLine*
/// @param callback int32_t func(QCPItemStraightLine* self, const char* signal)
void q_cpitemstraightline_on_receivers(void* self, int32_t (*callback)(void*, const char*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemStraightLine*
/// @param signal QMetaMethod*
bool q_cpitemstraightline_is_signal_connected(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemStraightLine*
/// @param signal QMetaMethod*
bool q_cpitemstraightline_qbase_is_signal_connected(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemStraightLine*
/// @param callback bool func(QCPItemStraightLine* self, QMetaMethod* signal)
void q_cpitemstraightline_on_is_signal_connected(void* self, bool (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#objectNameChanged)
///
/// Wrapper to allow calling private signal
///
/// @param self QCPItemStraightLine*
/// @param callback void func(QCPItemStraightLine* self, const char* objectName)
void q_cpitemstraightline_on_object_name_changed(void* self, void (*callback)(void*, const char*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemStraightLine.html)
///
/// Delete this object from C++ memory.
///
/// @param self QCPItemStraightLine*
void q_cpitemstraightline_delete(void* self);

/// https://www.qcustomplot.com/documentation/classQCPItemLine.html

/// q_cpitemline_new constructs a new QCPItemLine object.
///
/// @param parentPlot QCustomPlot*
QCPItemLine* q_cpitemline_new(void* parentPlot);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#metaObject)
///
/// @param self QCPItemLine*
const QMetaObject* q_cpitemline_meta_object(void* self);

/// @param self QCPItemLine*
/// @param param1 const char*
void* q_cpitemline_metacast(void* self, const char* param1);

/// @param self QCPItemLine*
/// @param param1 enum QMetaObject__Call
/// @param param2 int
/// @param param3 void*
int32_t q_cpitemline_metacall(void* self, int32_t param1, int param2, void* param3);

/// Allows for overriding the related default method
///
/// @param self QCPItemLine*
/// @param callback int32_t func(QCPItemLine* self, enum QMetaObject__Call param1, int param2, void* param3)
void q_cpitemline_on_metacall(void* self, int32_t (*callback)(void*, int32_t, int, void*));

/// Base class method implementation
///
/// @param self QCPItemLine*
/// @param param1 enum QMetaObject__Call
/// @param param2 int
/// @param param3 void*
int32_t q_cpitemline_qbase_metacall(void* self, int32_t param1, int param2, void* param3);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
const char* q_cpitemline_tr(const char* s);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemLine.html)
///
/// @param self QCPItemLine*
QPen* q_cpitemline_pen(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemLine.html)
///
/// @param self QCPItemLine*
QPen* q_cpitemline_selected_pen(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemLine.html)
///
/// @param self QCPItemLine*
QCPLineEnding* q_cpitemline_head(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemLine.html)
///
/// @param self QCPItemLine*
QCPLineEnding* q_cpitemline_tail(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemLine.html)
///
/// @param self QCPItemLine*
/// @param pen QPen*
void q_cpitemline_set_pen(void* self, void* pen);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemLine.html)
///
/// @param self QCPItemLine*
/// @param pen QPen*
void q_cpitemline_set_selected_pen(void* self, void* pen);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemLine.html)
///
/// @param self QCPItemLine*
/// @param head QCPLineEnding*
void q_cpitemline_set_head(void* self, void* head);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemLine.html)
///
/// @param self QCPItemLine*
/// @param tail QCPLineEnding*
void q_cpitemline_set_tail(void* self, void* tail);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemLine.html)
///
/// @param self QCPItemLine*
/// @param pos QPointF*
/// @param onlySelectable bool
/// @param details QVariant*
double q_cpitemline_select_test(void* self, void* pos, bool onlySelectable, void* details);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemLine.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPItemLine*
/// @param callback double func(QCPItemLine* self, QPointF* pos, bool onlySelectable, QVariant* details)
void q_cpitemline_on_select_test(void* self, double (*callback)(void*, void*, bool, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemLine.html)
///
/// Base class method implementation
///
/// @param self QCPItemLine*
/// @param pos QPointF*
/// @param onlySelectable bool
/// @param details QVariant*
double q_cpitemline_qbase_select_test(void* self, void* pos, bool onlySelectable, void* details);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemLine.html)
///
/// @param self QCPItemLine*
const QCPItemPosition* q_cpitemline_start(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemLine.html)
///
/// @param self QCPItemLine*
const QCPItemPosition* q_cpitemline_end(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemLine.html)
///
/// @param self QCPItemLine*
/// @param painter QCPPainter*
void q_cpitemline_draw(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemLine.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPItemLine*
/// @param callback void func(QCPItemLine* self, QCPPainter* painter)
void q_cpitemline_on_draw(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemLine.html)
///
/// Base class method implementation
///
/// @param self QCPItemLine*
/// @param painter QCPPainter*
void q_cpitemline_qbase_draw(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemLine.html)
///
/// @param self QCPItemLine*
/// @param start QCPVector2D*
/// @param end QCPVector2D*
/// @param rect QRect*
QLineF* q_cpitemline_get_rect_clipped_line(void* self, void* start, void* end, void* rect);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemLine.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPItemLine*
/// @param callback QLineF* func(QCPItemLine* self, QCPVector2D* start, QCPVector2D* end, QRect* rect)
void q_cpitemline_on_get_rect_clipped_line(void* self, QLineF* (*callback)(void*, void*, void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemLine.html)
///
/// Base class method implementation
///
/// @param self QCPItemLine*
/// @param start QCPVector2D*
/// @param end QCPVector2D*
/// @param rect QRect*
QLineF* q_cpitemline_qbase_get_rect_clipped_line(void* self, void* start, void* end, void* rect);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemLine.html)
///
/// @param self QCPItemLine*
QPen* q_cpitemline_main_pen(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemLine.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPItemLine*
/// @param callback QPen* func()
void q_cpitemline_on_main_pen(void* self, QPen* (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemLine.html)
///
/// Base class method implementation
///
/// @param self QCPItemLine*
QPen* q_cpitemline_qbase_main_pen(void* self);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
/// @param c const char*
const char* q_cpitemline_tr2(const char* s, const char* c);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
/// @param c const char*
/// @param n int
const char* q_cpitemline_tr3(const char* s, const char* c, int n);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemLine*
bool q_cpitemline_clip_to_axis_rect(void* self);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemLine*
QCPAxisRect* q_cpitemline_clip_axis_rect(void* self);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemLine*
bool q_cpitemline_selectable(void* self);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemLine*
bool q_cpitemline_selected(void* self);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemLine*
/// @param clip bool
void q_cpitemline_set_clip_to_axis_rect(void* self, bool clip);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemLine*
/// @param rect QCPAxisRect*
void q_cpitemline_set_clip_axis_rect(void* self, void* rect);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemLine*
/// @param selectable bool
void q_cpitemline_set_selectable(void* self, bool selectable);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemLine*
/// @param selected bool
void q_cpitemline_set_selected(void* self, bool selected);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemLine*
libqt_list /* of QCPItemPosition* */ q_cpitemline_positions(void* self);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemLine*
libqt_list /* of QCPItemAnchor* */ q_cpitemline_anchors(void* self);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemLine*
/// @param name const char*
QCPItemPosition* q_cpitemline_position(void* self, const char* name);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemLine*
/// @param name const char*
QCPItemAnchor* q_cpitemline_anchor(void* self, const char* name);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemLine*
/// @param name const char*
bool q_cpitemline_has_anchor(void* self, const char* name);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemLine*
/// @param selected bool
void q_cpitemline_selection_changed(void* self, bool selected);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemLine*
/// @param callback void func(QCPItemLine* self, bool selected)
void q_cpitemline_on_selection_changed(void* self, void (*callback)(void*, bool));

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemLine*
/// @param selectable bool
void q_cpitemline_selectable_changed(void* self, bool selectable);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemLine*
/// @param callback void func(QCPItemLine* self, bool selectable)
void q_cpitemline_on_selectable_changed(void* self, void (*callback)(void*, bool));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPItemLine*
bool q_cpitemline_visible(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPItemLine*
QCustomPlot* q_cpitemline_parent_plot(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPItemLine*
QCPLayerable* q_cpitemline_parent_layerable(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPItemLine*
QCPLayer* q_cpitemline_layer(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPItemLine*
bool q_cpitemline_antialiased(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPItemLine*
/// @param on bool
void q_cpitemline_set_visible(void* self, bool on);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPItemLine*
/// @param layer QCPLayer*
bool q_cpitemline_set_layer(void* self, void* layer);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPItemLine*
/// @param layerName const char*
bool q_cpitemline_set_layer2(void* self, const char* layerName);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPItemLine*
/// @param enabled bool
void q_cpitemline_set_antialiased(void* self, bool enabled);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPItemLine*
bool q_cpitemline_real_visibility(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPItemLine*
/// @param newLayer QCPLayer*
void q_cpitemline_layer_changed(void* self, void* newLayer);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPItemLine*
/// @param callback void func(QCPItemLine* self, QCPLayer* newLayer)
void q_cpitemline_on_layer_changed(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#objectName)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPItemLine*
const char* q_cpitemline_object_name(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setObjectName)
///
/// @param self QCPItemLine*
/// @param name char*
void q_cpitemline_set_object_name(void* self, char* name);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isWidgetType)
///
/// @param self QCPItemLine*
bool q_cpitemline_is_widget_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isWindowType)
///
/// @param self QCPItemLine*
bool q_cpitemline_is_window_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isQuickItemType)
///
/// @param self QCPItemLine*
bool q_cpitemline_is_quick_item_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#signalsBlocked)
///
/// @param self QCPItemLine*
bool q_cpitemline_signals_blocked(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#blockSignals)
///
/// @param self QCPItemLine*
/// @param b bool
bool q_cpitemline_block_signals(void* self, bool b);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#thread)
///
/// @param self QCPItemLine*
QThread* q_cpitemline_thread(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#moveToThread)
///
/// @param self QCPItemLine*
/// @param thread QThread*
bool q_cpitemline_move_to_thread(void* self, void* thread);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#startTimer)
///
/// @param self QCPItemLine*
/// @param interval int
int32_t q_cpitemline_start_timer(void* self, int interval);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#killTimer)
///
/// @param self QCPItemLine*
/// @param id int
void q_cpitemline_kill_timer(void* self, int id);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#killTimer)
///
/// @param self QCPItemLine*
/// @param id enum Qt__TimerId
void q_cpitemline_kill_timer2(void* self, int32_t id);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#children)
///
/// @param self QCPItemLine*
libqt_list /* of QObject* */ q_cpitemline_children(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setParent)
///
/// @param self QCPItemLine*
/// @param parent QObject*
void q_cpitemline_set_parent(void* self, void* parent);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#installEventFilter)
///
/// @param self QCPItemLine*
/// @param filterObj QObject*
void q_cpitemline_install_event_filter(void* self, void* filterObj);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#removeEventFilter)
///
/// @param self QCPItemLine*
/// @param obj QObject*
void q_cpitemline_remove_event_filter(void* self, void* obj);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param method QMetaMethod*
QMetaObject__Connection* q_cpitemline_connect(void* sender, void* signal, void* receiver, void* method);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param self QCPItemLine*
/// @param sender QObject*
/// @param signal const char*
/// @param member const char*
QMetaObject__Connection* q_cpitemline_connect2(void* self, void* sender, const char* signal, const char* member);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param member QMetaMethod*
bool q_cpitemline_disconnect(void* sender, void* signal, void* receiver, void* member);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnect)
///
/// @param param1 QMetaObject__Connection*
bool q_cpitemline_disconnect2(void* param1);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dumpObjectTree)
///
/// @param self QCPItemLine*
void q_cpitemline_dump_object_tree(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dumpObjectInfo)
///
/// @param self QCPItemLine*
void q_cpitemline_dump_object_info(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setProperty)
///
/// @param self QCPItemLine*
/// @param name const char*
/// @param value QVariant*
bool q_cpitemline_set_property(void* self, const char* name, void* value);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#property)
///
/// @param self QCPItemLine*
/// @param name const char*
QVariant* q_cpitemline_property(void* self, const char* name);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dynamicPropertyNames)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPItemLine*
const char** q_cpitemline_dynamic_property_names(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#bindingStorage)
///
/// @param self QCPItemLine*
QBindingStorage* q_cpitemline_binding_storage(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#bindingStorage)
///
/// @param self QCPItemLine*
const QBindingStorage* q_cpitemline_binding_storage2(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPItemLine*
void q_cpitemline_destroyed(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPItemLine*
/// @param callback void func(QCPItemLine* self)
void q_cpitemline_on_destroyed(void* self, void (*callback)(void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#parent)
///
/// @param self QCPItemLine*
QObject* q_cpitemline_parent(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#inherits)
///
/// @param self QCPItemLine*
/// @param classname const char*
bool q_cpitemline_inherits(void* self, const char* classname);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#deleteLater)
///
/// @param self QCPItemLine*
void q_cpitemline_delete_later(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#moveToThread)
///
/// @param self QCPItemLine*
/// @param thread QThread*
/// @param param2 Disambiguated_t*
bool q_cpitemline_move_to_thread2(void* self, void* thread, void* param2);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#startTimer)
///
/// @param self QCPItemLine*
/// @param interval int
/// @param timerType enum Qt__TimerType
int32_t q_cpitemline_start_timer22(void* self, int interval, int32_t timerType);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param method QMetaMethod*
/// @param type enum Qt__ConnectionType
QMetaObject__Connection* q_cpitemline_connect5(void* sender, void* signal, void* receiver, void* method, int32_t type);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param self QCPItemLine*
/// @param sender QObject*
/// @param signal const char*
/// @param member const char*
/// @param type enum Qt__ConnectionType
QMetaObject__Connection* q_cpitemline_connect4(void* self, void* sender, const char* signal, const char* member, int32_t type);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPItemLine*
/// @param param1 QObject*
void q_cpitemline_destroyed1(void* self, void* param1);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPItemLine*
/// @param callback void func(QCPItemLine* self, QObject* param1)
void q_cpitemline_on_destroyed1(void* self, void (*callback)(void*, void*));

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemLine*
///
/// @return enum QCP__Interaction
int32_t q_cpitemline_selection_category(void* self);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemLine*
///
/// @return enum QCP__Interaction
int32_t q_cpitemline_qbase_selection_category(void* self);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemLine*
/// @param callback int32_t func()
void q_cpitemline_on_selection_category(void* self, int32_t (*callback)());

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemLine*
QRect* q_cpitemline_clip_rect(void* self);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemLine*
QRect* q_cpitemline_qbase_clip_rect(void* self);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemLine*
/// @param callback QRect* func()
void q_cpitemline_on_clip_rect(void* self, QRect* (*callback)());

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemLine*
/// @param painter QCPPainter*
void q_cpitemline_apply_default_antialiasing_hint(void* self, void* painter);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemLine*
/// @param painter QCPPainter*
void q_cpitemline_qbase_apply_default_antialiasing_hint(void* self, void* painter);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemLine*
/// @param callback void func(QCPItemLine* self, QCPPainter* painter)
void q_cpitemline_on_apply_default_antialiasing_hint(void* self, void (*callback)(void*, void*));

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemLine*
/// @param event QMouseEvent*
/// @param additive bool
/// @param details QVariant*
/// @param selectionStateChanged bool*
void q_cpitemline_select_event(void* self, void* event, bool additive, void* details, bool* selectionStateChanged);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemLine*
/// @param event QMouseEvent*
/// @param additive bool
/// @param details QVariant*
/// @param selectionStateChanged bool*
void q_cpitemline_qbase_select_event(void* self, void* event, bool additive, void* details, bool* selectionStateChanged);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemLine*
/// @param callback void func(QCPItemLine* self, QMouseEvent* event, bool additive, QVariant* details, bool* selectionStateChanged)
void q_cpitemline_on_select_event(void* self, void (*callback)(void*, void*, bool, void*, bool*));

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemLine*
/// @param selectionStateChanged bool*
void q_cpitemline_deselect_event(void* self, bool* selectionStateChanged);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemLine*
/// @param selectionStateChanged bool*
void q_cpitemline_qbase_deselect_event(void* self, bool* selectionStateChanged);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemLine*
/// @param callback void func(QCPItemLine* self, bool* selectionStateChanged)
void q_cpitemline_on_deselect_event(void* self, void (*callback)(void*, bool*));

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemLine*
/// @param anchorId int
QPointF* q_cpitemline_anchor_pixel_position(void* self, int anchorId);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemLine*
/// @param anchorId int
QPointF* q_cpitemline_qbase_anchor_pixel_position(void* self, int anchorId);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemLine*
/// @param callback QPointF* func(QCPItemLine* self, int anchorId)
void q_cpitemline_on_anchor_pixel_position(void* self, QPointF* (*callback)(void*, int));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemLine*
/// @param parentPlot QCustomPlot*
void q_cpitemline_parent_plot_initialized(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemLine*
/// @param parentPlot QCustomPlot*
void q_cpitemline_qbase_parent_plot_initialized(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemLine*
/// @param callback void func(QCPItemLine* self, QCustomPlot* parentPlot)
void q_cpitemline_on_parent_plot_initialized(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemLine*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cpitemline_mouse_press_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemLine*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cpitemline_qbase_mouse_press_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemLine*
/// @param callback void func(QCPItemLine* self, QMouseEvent* event, QVariant* details)
void q_cpitemline_on_mouse_press_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemLine*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cpitemline_mouse_move_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemLine*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cpitemline_qbase_mouse_move_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemLine*
/// @param callback void func(QCPItemLine* self, QMouseEvent* event, QPointF* startPos)
void q_cpitemline_on_mouse_move_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemLine*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cpitemline_mouse_release_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemLine*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cpitemline_qbase_mouse_release_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemLine*
/// @param callback void func(QCPItemLine* self, QMouseEvent* event, QPointF* startPos)
void q_cpitemline_on_mouse_release_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemLine*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cpitemline_mouse_double_click_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemLine*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cpitemline_qbase_mouse_double_click_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemLine*
/// @param callback void func(QCPItemLine* self, QMouseEvent* event, QVariant* details)
void q_cpitemline_on_mouse_double_click_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemLine*
/// @param event QWheelEvent*
void q_cpitemline_wheel_event(void* self, void* event);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemLine*
/// @param event QWheelEvent*
void q_cpitemline_qbase_wheel_event(void* self, void* event);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemLine*
/// @param callback void func(QCPItemLine* self, QWheelEvent* event)
void q_cpitemline_on_wheel_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemLine*
/// @param event QEvent*
bool q_cpitemline_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemLine*
/// @param event QEvent*
bool q_cpitemline_qbase_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemLine*
/// @param callback bool func(QCPItemLine* self, QEvent* event)
void q_cpitemline_on_event(void* self, bool (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemLine*
/// @param watched QObject*
/// @param event QEvent*
bool q_cpitemline_event_filter(void* self, void* watched, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemLine*
/// @param watched QObject*
/// @param event QEvent*
bool q_cpitemline_qbase_event_filter(void* self, void* watched, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemLine*
/// @param callback bool func(QCPItemLine* self, QObject* watched, QEvent* event)
void q_cpitemline_on_event_filter(void* self, bool (*callback)(void*, void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemLine*
/// @param event QTimerEvent*
void q_cpitemline_timer_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemLine*
/// @param event QTimerEvent*
void q_cpitemline_qbase_timer_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemLine*
/// @param callback void func(QCPItemLine* self, QTimerEvent* event)
void q_cpitemline_on_timer_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemLine*
/// @param event QChildEvent*
void q_cpitemline_child_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemLine*
/// @param event QChildEvent*
void q_cpitemline_qbase_child_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemLine*
/// @param callback void func(QCPItemLine* self, QChildEvent* event)
void q_cpitemline_on_child_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemLine*
/// @param event QEvent*
void q_cpitemline_custom_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemLine*
/// @param event QEvent*
void q_cpitemline_qbase_custom_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemLine*
/// @param callback void func(QCPItemLine* self, QEvent* event)
void q_cpitemline_on_custom_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemLine*
/// @param signal QMetaMethod*
void q_cpitemline_connect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemLine*
/// @param signal QMetaMethod*
void q_cpitemline_qbase_connect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemLine*
/// @param callback void func(QCPItemLine* self, QMetaMethod* signal)
void q_cpitemline_on_connect_notify(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemLine*
/// @param signal QMetaMethod*
void q_cpitemline_disconnect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemLine*
/// @param signal QMetaMethod*
void q_cpitemline_qbase_disconnect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemLine*
/// @param callback void func(QCPItemLine* self, QMetaMethod* signal)
void q_cpitemline_on_disconnect_notify(void* self, void (*callback)(void*, void*));

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemLine*
/// @param rect QRectF*
/// @param pos QPointF*
/// @param filledRect bool
double q_cpitemline_rect_distance(void* self, void* rect, void* pos, bool filledRect);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemLine*
/// @param rect QRectF*
/// @param pos QPointF*
/// @param filledRect bool
double q_cpitemline_qbase_rect_distance(void* self, void* rect, void* pos, bool filledRect);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemLine*
/// @param callback double func(QCPItemLine* self, QRectF* rect, QPointF* pos, bool filledRect)
void q_cpitemline_on_rect_distance(void* self, double (*callback)(void*, void*, void*, bool));

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemLine*
/// @param name const char*
QCPItemPosition* q_cpitemline_create_position(void* self, const char* name);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemLine*
/// @param name const char*
QCPItemPosition* q_cpitemline_qbase_create_position(void* self, const char* name);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemLine*
/// @param callback QCPItemPosition* func(QCPItemLine* self, const char* name)
void q_cpitemline_on_create_position(void* self, QCPItemPosition* (*callback)(void*, const char*));

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemLine*
/// @param name const char*
/// @param anchorId int
QCPItemAnchor* q_cpitemline_create_anchor(void* self, const char* name, int anchorId);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemLine*
/// @param name const char*
/// @param anchorId int
QCPItemAnchor* q_cpitemline_qbase_create_anchor(void* self, const char* name, int anchorId);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemLine*
/// @param callback QCPItemAnchor* func(QCPItemLine* self, const char* name, int anchorId)
void q_cpitemline_on_create_anchor(void* self, QCPItemAnchor* (*callback)(void*, const char*, int));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemLine*
/// @param parentPlot QCustomPlot*
void q_cpitemline_initialize_parent_plot(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemLine*
/// @param parentPlot QCustomPlot*
void q_cpitemline_qbase_initialize_parent_plot(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemLine*
/// @param callback void func(QCPItemLine* self, QCustomPlot* parentPlot)
void q_cpitemline_on_initialize_parent_plot(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemLine*
/// @param parentLayerable QCPLayerable*
void q_cpitemline_set_parent_layerable(void* self, void* parentLayerable);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemLine*
/// @param parentLayerable QCPLayerable*
void q_cpitemline_qbase_set_parent_layerable(void* self, void* parentLayerable);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemLine*
/// @param callback void func(QCPItemLine* self, QCPLayerable* parentLayerable)
void q_cpitemline_on_set_parent_layerable(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemLine*
/// @param layer QCPLayer*
/// @param prepend bool
bool q_cpitemline_move_to_layer(void* self, void* layer, bool prepend);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemLine*
/// @param layer QCPLayer*
/// @param prepend bool
bool q_cpitemline_qbase_move_to_layer(void* self, void* layer, bool prepend);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemLine*
/// @param callback bool func(QCPItemLine* self, QCPLayer* layer, bool prepend)
void q_cpitemline_on_move_to_layer(void* self, bool (*callback)(void*, void*, bool));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemLine*
/// @param painter QCPPainter*
/// @param localAntialiased bool
/// @param overrideElement enum QCP__AntialiasedElement
void q_cpitemline_apply_antialiasing_hint(void* self, void* painter, bool localAntialiased, int32_t overrideElement);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemLine*
/// @param painter QCPPainter*
/// @param localAntialiased bool
/// @param overrideElement enum QCP__AntialiasedElement
void q_cpitemline_qbase_apply_antialiasing_hint(void* self, void* painter, bool localAntialiased, int32_t overrideElement);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemLine*
/// @param callback void func(QCPItemLine* self, QCPPainter* painter, bool localAntialiased, enum QCP__AntialiasedElement overrideElement)
void q_cpitemline_on_apply_antialiasing_hint(void* self, void (*callback)(void*, void*, bool, int32_t));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemLine*
QObject* q_cpitemline_sender(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemLine*
QObject* q_cpitemline_qbase_sender(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemLine*
/// @param callback QObject* func()
void q_cpitemline_on_sender(void* self, QObject* (*callback)());

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemLine*
int32_t q_cpitemline_sender_signal_index(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemLine*
int32_t q_cpitemline_qbase_sender_signal_index(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemLine*
/// @param callback int32_t func()
void q_cpitemline_on_sender_signal_index(void* self, int32_t (*callback)());

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemLine*
/// @param signal const char*
int32_t q_cpitemline_receivers(void* self, const char* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemLine*
/// @param signal const char*
int32_t q_cpitemline_qbase_receivers(void* self, const char* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemLine*
/// @param callback int32_t func(QCPItemLine* self, const char* signal)
void q_cpitemline_on_receivers(void* self, int32_t (*callback)(void*, const char*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemLine*
/// @param signal QMetaMethod*
bool q_cpitemline_is_signal_connected(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemLine*
/// @param signal QMetaMethod*
bool q_cpitemline_qbase_is_signal_connected(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemLine*
/// @param callback bool func(QCPItemLine* self, QMetaMethod* signal)
void q_cpitemline_on_is_signal_connected(void* self, bool (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#objectNameChanged)
///
/// Wrapper to allow calling private signal
///
/// @param self QCPItemLine*
/// @param callback void func(QCPItemLine* self, const char* objectName)
void q_cpitemline_on_object_name_changed(void* self, void (*callback)(void*, const char*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemLine.html)
///
/// Delete this object from C++ memory.
///
/// @param self QCPItemLine*
void q_cpitemline_delete(void* self);

/// https://www.qcustomplot.com/documentation/classQCPItemCurve.html

/// q_cpitemcurve_new constructs a new QCPItemCurve object.
///
/// @param parentPlot QCustomPlot*
QCPItemCurve* q_cpitemcurve_new(void* parentPlot);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#metaObject)
///
/// @param self QCPItemCurve*
const QMetaObject* q_cpitemcurve_meta_object(void* self);

/// @param self QCPItemCurve*
/// @param param1 const char*
void* q_cpitemcurve_metacast(void* self, const char* param1);

/// @param self QCPItemCurve*
/// @param param1 enum QMetaObject__Call
/// @param param2 int
/// @param param3 void*
int32_t q_cpitemcurve_metacall(void* self, int32_t param1, int param2, void* param3);

/// Allows for overriding the related default method
///
/// @param self QCPItemCurve*
/// @param callback int32_t func(QCPItemCurve* self, enum QMetaObject__Call param1, int param2, void* param3)
void q_cpitemcurve_on_metacall(void* self, int32_t (*callback)(void*, int32_t, int, void*));

/// Base class method implementation
///
/// @param self QCPItemCurve*
/// @param param1 enum QMetaObject__Call
/// @param param2 int
/// @param param3 void*
int32_t q_cpitemcurve_qbase_metacall(void* self, int32_t param1, int param2, void* param3);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
const char* q_cpitemcurve_tr(const char* s);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemCurve.html)
///
/// @param self QCPItemCurve*
QPen* q_cpitemcurve_pen(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemCurve.html)
///
/// @param self QCPItemCurve*
QPen* q_cpitemcurve_selected_pen(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemCurve.html)
///
/// @param self QCPItemCurve*
QCPLineEnding* q_cpitemcurve_head(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemCurve.html)
///
/// @param self QCPItemCurve*
QCPLineEnding* q_cpitemcurve_tail(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemCurve.html)
///
/// @param self QCPItemCurve*
/// @param pen QPen*
void q_cpitemcurve_set_pen(void* self, void* pen);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemCurve.html)
///
/// @param self QCPItemCurve*
/// @param pen QPen*
void q_cpitemcurve_set_selected_pen(void* self, void* pen);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemCurve.html)
///
/// @param self QCPItemCurve*
/// @param head QCPLineEnding*
void q_cpitemcurve_set_head(void* self, void* head);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemCurve.html)
///
/// @param self QCPItemCurve*
/// @param tail QCPLineEnding*
void q_cpitemcurve_set_tail(void* self, void* tail);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemCurve.html)
///
/// @param self QCPItemCurve*
/// @param pos QPointF*
/// @param onlySelectable bool
/// @param details QVariant*
double q_cpitemcurve_select_test(void* self, void* pos, bool onlySelectable, void* details);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemCurve.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPItemCurve*
/// @param callback double func(QCPItemCurve* self, QPointF* pos, bool onlySelectable, QVariant* details)
void q_cpitemcurve_on_select_test(void* self, double (*callback)(void*, void*, bool, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemCurve.html)
///
/// Base class method implementation
///
/// @param self QCPItemCurve*
/// @param pos QPointF*
/// @param onlySelectable bool
/// @param details QVariant*
double q_cpitemcurve_qbase_select_test(void* self, void* pos, bool onlySelectable, void* details);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemCurve.html)
///
/// @param self QCPItemCurve*
const QCPItemPosition* q_cpitemcurve_start(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemCurve.html)
///
/// @param self QCPItemCurve*
const QCPItemPosition* q_cpitemcurve_start_dir(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemCurve.html)
///
/// @param self QCPItemCurve*
const QCPItemPosition* q_cpitemcurve_end_dir(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemCurve.html)
///
/// @param self QCPItemCurve*
const QCPItemPosition* q_cpitemcurve_end(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemCurve.html)
///
/// @param self QCPItemCurve*
/// @param painter QCPPainter*
void q_cpitemcurve_draw(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemCurve.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPItemCurve*
/// @param callback void func(QCPItemCurve* self, QCPPainter* painter)
void q_cpitemcurve_on_draw(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemCurve.html)
///
/// Base class method implementation
///
/// @param self QCPItemCurve*
/// @param painter QCPPainter*
void q_cpitemcurve_qbase_draw(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemCurve.html)
///
/// @param self QCPItemCurve*
QPen* q_cpitemcurve_main_pen(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemCurve.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPItemCurve*
/// @param callback QPen* func()
void q_cpitemcurve_on_main_pen(void* self, QPen* (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemCurve.html)
///
/// Base class method implementation
///
/// @param self QCPItemCurve*
QPen* q_cpitemcurve_qbase_main_pen(void* self);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
/// @param c const char*
const char* q_cpitemcurve_tr2(const char* s, const char* c);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
/// @param c const char*
/// @param n int
const char* q_cpitemcurve_tr3(const char* s, const char* c, int n);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemCurve*
bool q_cpitemcurve_clip_to_axis_rect(void* self);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemCurve*
QCPAxisRect* q_cpitemcurve_clip_axis_rect(void* self);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemCurve*
bool q_cpitemcurve_selectable(void* self);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemCurve*
bool q_cpitemcurve_selected(void* self);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemCurve*
/// @param clip bool
void q_cpitemcurve_set_clip_to_axis_rect(void* self, bool clip);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemCurve*
/// @param rect QCPAxisRect*
void q_cpitemcurve_set_clip_axis_rect(void* self, void* rect);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemCurve*
/// @param selectable bool
void q_cpitemcurve_set_selectable(void* self, bool selectable);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemCurve*
/// @param selected bool
void q_cpitemcurve_set_selected(void* self, bool selected);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemCurve*
libqt_list /* of QCPItemPosition* */ q_cpitemcurve_positions(void* self);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemCurve*
libqt_list /* of QCPItemAnchor* */ q_cpitemcurve_anchors(void* self);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemCurve*
/// @param name const char*
QCPItemPosition* q_cpitemcurve_position(void* self, const char* name);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemCurve*
/// @param name const char*
QCPItemAnchor* q_cpitemcurve_anchor(void* self, const char* name);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemCurve*
/// @param name const char*
bool q_cpitemcurve_has_anchor(void* self, const char* name);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemCurve*
/// @param selected bool
void q_cpitemcurve_selection_changed(void* self, bool selected);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemCurve*
/// @param callback void func(QCPItemCurve* self, bool selected)
void q_cpitemcurve_on_selection_changed(void* self, void (*callback)(void*, bool));

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemCurve*
/// @param selectable bool
void q_cpitemcurve_selectable_changed(void* self, bool selectable);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemCurve*
/// @param callback void func(QCPItemCurve* self, bool selectable)
void q_cpitemcurve_on_selectable_changed(void* self, void (*callback)(void*, bool));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPItemCurve*
bool q_cpitemcurve_visible(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPItemCurve*
QCustomPlot* q_cpitemcurve_parent_plot(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPItemCurve*
QCPLayerable* q_cpitemcurve_parent_layerable(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPItemCurve*
QCPLayer* q_cpitemcurve_layer(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPItemCurve*
bool q_cpitemcurve_antialiased(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPItemCurve*
/// @param on bool
void q_cpitemcurve_set_visible(void* self, bool on);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPItemCurve*
/// @param layer QCPLayer*
bool q_cpitemcurve_set_layer(void* self, void* layer);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPItemCurve*
/// @param layerName const char*
bool q_cpitemcurve_set_layer2(void* self, const char* layerName);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPItemCurve*
/// @param enabled bool
void q_cpitemcurve_set_antialiased(void* self, bool enabled);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPItemCurve*
bool q_cpitemcurve_real_visibility(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPItemCurve*
/// @param newLayer QCPLayer*
void q_cpitemcurve_layer_changed(void* self, void* newLayer);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPItemCurve*
/// @param callback void func(QCPItemCurve* self, QCPLayer* newLayer)
void q_cpitemcurve_on_layer_changed(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#objectName)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPItemCurve*
const char* q_cpitemcurve_object_name(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setObjectName)
///
/// @param self QCPItemCurve*
/// @param name char*
void q_cpitemcurve_set_object_name(void* self, char* name);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isWidgetType)
///
/// @param self QCPItemCurve*
bool q_cpitemcurve_is_widget_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isWindowType)
///
/// @param self QCPItemCurve*
bool q_cpitemcurve_is_window_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isQuickItemType)
///
/// @param self QCPItemCurve*
bool q_cpitemcurve_is_quick_item_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#signalsBlocked)
///
/// @param self QCPItemCurve*
bool q_cpitemcurve_signals_blocked(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#blockSignals)
///
/// @param self QCPItemCurve*
/// @param b bool
bool q_cpitemcurve_block_signals(void* self, bool b);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#thread)
///
/// @param self QCPItemCurve*
QThread* q_cpitemcurve_thread(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#moveToThread)
///
/// @param self QCPItemCurve*
/// @param thread QThread*
bool q_cpitemcurve_move_to_thread(void* self, void* thread);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#startTimer)
///
/// @param self QCPItemCurve*
/// @param interval int
int32_t q_cpitemcurve_start_timer(void* self, int interval);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#killTimer)
///
/// @param self QCPItemCurve*
/// @param id int
void q_cpitemcurve_kill_timer(void* self, int id);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#killTimer)
///
/// @param self QCPItemCurve*
/// @param id enum Qt__TimerId
void q_cpitemcurve_kill_timer2(void* self, int32_t id);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#children)
///
/// @param self QCPItemCurve*
libqt_list /* of QObject* */ q_cpitemcurve_children(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setParent)
///
/// @param self QCPItemCurve*
/// @param parent QObject*
void q_cpitemcurve_set_parent(void* self, void* parent);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#installEventFilter)
///
/// @param self QCPItemCurve*
/// @param filterObj QObject*
void q_cpitemcurve_install_event_filter(void* self, void* filterObj);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#removeEventFilter)
///
/// @param self QCPItemCurve*
/// @param obj QObject*
void q_cpitemcurve_remove_event_filter(void* self, void* obj);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param method QMetaMethod*
QMetaObject__Connection* q_cpitemcurve_connect(void* sender, void* signal, void* receiver, void* method);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param self QCPItemCurve*
/// @param sender QObject*
/// @param signal const char*
/// @param member const char*
QMetaObject__Connection* q_cpitemcurve_connect2(void* self, void* sender, const char* signal, const char* member);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param member QMetaMethod*
bool q_cpitemcurve_disconnect(void* sender, void* signal, void* receiver, void* member);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnect)
///
/// @param param1 QMetaObject__Connection*
bool q_cpitemcurve_disconnect2(void* param1);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dumpObjectTree)
///
/// @param self QCPItemCurve*
void q_cpitemcurve_dump_object_tree(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dumpObjectInfo)
///
/// @param self QCPItemCurve*
void q_cpitemcurve_dump_object_info(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setProperty)
///
/// @param self QCPItemCurve*
/// @param name const char*
/// @param value QVariant*
bool q_cpitemcurve_set_property(void* self, const char* name, void* value);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#property)
///
/// @param self QCPItemCurve*
/// @param name const char*
QVariant* q_cpitemcurve_property(void* self, const char* name);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dynamicPropertyNames)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPItemCurve*
const char** q_cpitemcurve_dynamic_property_names(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#bindingStorage)
///
/// @param self QCPItemCurve*
QBindingStorage* q_cpitemcurve_binding_storage(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#bindingStorage)
///
/// @param self QCPItemCurve*
const QBindingStorage* q_cpitemcurve_binding_storage2(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPItemCurve*
void q_cpitemcurve_destroyed(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPItemCurve*
/// @param callback void func(QCPItemCurve* self)
void q_cpitemcurve_on_destroyed(void* self, void (*callback)(void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#parent)
///
/// @param self QCPItemCurve*
QObject* q_cpitemcurve_parent(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#inherits)
///
/// @param self QCPItemCurve*
/// @param classname const char*
bool q_cpitemcurve_inherits(void* self, const char* classname);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#deleteLater)
///
/// @param self QCPItemCurve*
void q_cpitemcurve_delete_later(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#moveToThread)
///
/// @param self QCPItemCurve*
/// @param thread QThread*
/// @param param2 Disambiguated_t*
bool q_cpitemcurve_move_to_thread2(void* self, void* thread, void* param2);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#startTimer)
///
/// @param self QCPItemCurve*
/// @param interval int
/// @param timerType enum Qt__TimerType
int32_t q_cpitemcurve_start_timer22(void* self, int interval, int32_t timerType);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param method QMetaMethod*
/// @param type enum Qt__ConnectionType
QMetaObject__Connection* q_cpitemcurve_connect5(void* sender, void* signal, void* receiver, void* method, int32_t type);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param self QCPItemCurve*
/// @param sender QObject*
/// @param signal const char*
/// @param member const char*
/// @param type enum Qt__ConnectionType
QMetaObject__Connection* q_cpitemcurve_connect4(void* self, void* sender, const char* signal, const char* member, int32_t type);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPItemCurve*
/// @param param1 QObject*
void q_cpitemcurve_destroyed1(void* self, void* param1);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPItemCurve*
/// @param callback void func(QCPItemCurve* self, QObject* param1)
void q_cpitemcurve_on_destroyed1(void* self, void (*callback)(void*, void*));

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemCurve*
///
/// @return enum QCP__Interaction
int32_t q_cpitemcurve_selection_category(void* self);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemCurve*
///
/// @return enum QCP__Interaction
int32_t q_cpitemcurve_qbase_selection_category(void* self);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemCurve*
/// @param callback int32_t func()
void q_cpitemcurve_on_selection_category(void* self, int32_t (*callback)());

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemCurve*
QRect* q_cpitemcurve_clip_rect(void* self);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemCurve*
QRect* q_cpitemcurve_qbase_clip_rect(void* self);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemCurve*
/// @param callback QRect* func()
void q_cpitemcurve_on_clip_rect(void* self, QRect* (*callback)());

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemCurve*
/// @param painter QCPPainter*
void q_cpitemcurve_apply_default_antialiasing_hint(void* self, void* painter);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemCurve*
/// @param painter QCPPainter*
void q_cpitemcurve_qbase_apply_default_antialiasing_hint(void* self, void* painter);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemCurve*
/// @param callback void func(QCPItemCurve* self, QCPPainter* painter)
void q_cpitemcurve_on_apply_default_antialiasing_hint(void* self, void (*callback)(void*, void*));

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemCurve*
/// @param event QMouseEvent*
/// @param additive bool
/// @param details QVariant*
/// @param selectionStateChanged bool*
void q_cpitemcurve_select_event(void* self, void* event, bool additive, void* details, bool* selectionStateChanged);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemCurve*
/// @param event QMouseEvent*
/// @param additive bool
/// @param details QVariant*
/// @param selectionStateChanged bool*
void q_cpitemcurve_qbase_select_event(void* self, void* event, bool additive, void* details, bool* selectionStateChanged);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemCurve*
/// @param callback void func(QCPItemCurve* self, QMouseEvent* event, bool additive, QVariant* details, bool* selectionStateChanged)
void q_cpitemcurve_on_select_event(void* self, void (*callback)(void*, void*, bool, void*, bool*));

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemCurve*
/// @param selectionStateChanged bool*
void q_cpitemcurve_deselect_event(void* self, bool* selectionStateChanged);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemCurve*
/// @param selectionStateChanged bool*
void q_cpitemcurve_qbase_deselect_event(void* self, bool* selectionStateChanged);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemCurve*
/// @param callback void func(QCPItemCurve* self, bool* selectionStateChanged)
void q_cpitemcurve_on_deselect_event(void* self, void (*callback)(void*, bool*));

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemCurve*
/// @param anchorId int
QPointF* q_cpitemcurve_anchor_pixel_position(void* self, int anchorId);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemCurve*
/// @param anchorId int
QPointF* q_cpitemcurve_qbase_anchor_pixel_position(void* self, int anchorId);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemCurve*
/// @param callback QPointF* func(QCPItemCurve* self, int anchorId)
void q_cpitemcurve_on_anchor_pixel_position(void* self, QPointF* (*callback)(void*, int));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemCurve*
/// @param parentPlot QCustomPlot*
void q_cpitemcurve_parent_plot_initialized(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemCurve*
/// @param parentPlot QCustomPlot*
void q_cpitemcurve_qbase_parent_plot_initialized(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemCurve*
/// @param callback void func(QCPItemCurve* self, QCustomPlot* parentPlot)
void q_cpitemcurve_on_parent_plot_initialized(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemCurve*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cpitemcurve_mouse_press_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemCurve*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cpitemcurve_qbase_mouse_press_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemCurve*
/// @param callback void func(QCPItemCurve* self, QMouseEvent* event, QVariant* details)
void q_cpitemcurve_on_mouse_press_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemCurve*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cpitemcurve_mouse_move_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemCurve*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cpitemcurve_qbase_mouse_move_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemCurve*
/// @param callback void func(QCPItemCurve* self, QMouseEvent* event, QPointF* startPos)
void q_cpitemcurve_on_mouse_move_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemCurve*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cpitemcurve_mouse_release_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemCurve*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cpitemcurve_qbase_mouse_release_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemCurve*
/// @param callback void func(QCPItemCurve* self, QMouseEvent* event, QPointF* startPos)
void q_cpitemcurve_on_mouse_release_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemCurve*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cpitemcurve_mouse_double_click_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemCurve*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cpitemcurve_qbase_mouse_double_click_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemCurve*
/// @param callback void func(QCPItemCurve* self, QMouseEvent* event, QVariant* details)
void q_cpitemcurve_on_mouse_double_click_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemCurve*
/// @param event QWheelEvent*
void q_cpitemcurve_wheel_event(void* self, void* event);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemCurve*
/// @param event QWheelEvent*
void q_cpitemcurve_qbase_wheel_event(void* self, void* event);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemCurve*
/// @param callback void func(QCPItemCurve* self, QWheelEvent* event)
void q_cpitemcurve_on_wheel_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemCurve*
/// @param event QEvent*
bool q_cpitemcurve_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemCurve*
/// @param event QEvent*
bool q_cpitemcurve_qbase_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemCurve*
/// @param callback bool func(QCPItemCurve* self, QEvent* event)
void q_cpitemcurve_on_event(void* self, bool (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemCurve*
/// @param watched QObject*
/// @param event QEvent*
bool q_cpitemcurve_event_filter(void* self, void* watched, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemCurve*
/// @param watched QObject*
/// @param event QEvent*
bool q_cpitemcurve_qbase_event_filter(void* self, void* watched, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemCurve*
/// @param callback bool func(QCPItemCurve* self, QObject* watched, QEvent* event)
void q_cpitemcurve_on_event_filter(void* self, bool (*callback)(void*, void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemCurve*
/// @param event QTimerEvent*
void q_cpitemcurve_timer_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemCurve*
/// @param event QTimerEvent*
void q_cpitemcurve_qbase_timer_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemCurve*
/// @param callback void func(QCPItemCurve* self, QTimerEvent* event)
void q_cpitemcurve_on_timer_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemCurve*
/// @param event QChildEvent*
void q_cpitemcurve_child_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemCurve*
/// @param event QChildEvent*
void q_cpitemcurve_qbase_child_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemCurve*
/// @param callback void func(QCPItemCurve* self, QChildEvent* event)
void q_cpitemcurve_on_child_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemCurve*
/// @param event QEvent*
void q_cpitemcurve_custom_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemCurve*
/// @param event QEvent*
void q_cpitemcurve_qbase_custom_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemCurve*
/// @param callback void func(QCPItemCurve* self, QEvent* event)
void q_cpitemcurve_on_custom_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemCurve*
/// @param signal QMetaMethod*
void q_cpitemcurve_connect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemCurve*
/// @param signal QMetaMethod*
void q_cpitemcurve_qbase_connect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemCurve*
/// @param callback void func(QCPItemCurve* self, QMetaMethod* signal)
void q_cpitemcurve_on_connect_notify(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemCurve*
/// @param signal QMetaMethod*
void q_cpitemcurve_disconnect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemCurve*
/// @param signal QMetaMethod*
void q_cpitemcurve_qbase_disconnect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemCurve*
/// @param callback void func(QCPItemCurve* self, QMetaMethod* signal)
void q_cpitemcurve_on_disconnect_notify(void* self, void (*callback)(void*, void*));

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemCurve*
/// @param rect QRectF*
/// @param pos QPointF*
/// @param filledRect bool
double q_cpitemcurve_rect_distance(void* self, void* rect, void* pos, bool filledRect);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemCurve*
/// @param rect QRectF*
/// @param pos QPointF*
/// @param filledRect bool
double q_cpitemcurve_qbase_rect_distance(void* self, void* rect, void* pos, bool filledRect);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemCurve*
/// @param callback double func(QCPItemCurve* self, QRectF* rect, QPointF* pos, bool filledRect)
void q_cpitemcurve_on_rect_distance(void* self, double (*callback)(void*, void*, void*, bool));

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemCurve*
/// @param name const char*
QCPItemPosition* q_cpitemcurve_create_position(void* self, const char* name);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemCurve*
/// @param name const char*
QCPItemPosition* q_cpitemcurve_qbase_create_position(void* self, const char* name);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemCurve*
/// @param callback QCPItemPosition* func(QCPItemCurve* self, const char* name)
void q_cpitemcurve_on_create_position(void* self, QCPItemPosition* (*callback)(void*, const char*));

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemCurve*
/// @param name const char*
/// @param anchorId int
QCPItemAnchor* q_cpitemcurve_create_anchor(void* self, const char* name, int anchorId);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemCurve*
/// @param name const char*
/// @param anchorId int
QCPItemAnchor* q_cpitemcurve_qbase_create_anchor(void* self, const char* name, int anchorId);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemCurve*
/// @param callback QCPItemAnchor* func(QCPItemCurve* self, const char* name, int anchorId)
void q_cpitemcurve_on_create_anchor(void* self, QCPItemAnchor* (*callback)(void*, const char*, int));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemCurve*
/// @param parentPlot QCustomPlot*
void q_cpitemcurve_initialize_parent_plot(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemCurve*
/// @param parentPlot QCustomPlot*
void q_cpitemcurve_qbase_initialize_parent_plot(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemCurve*
/// @param callback void func(QCPItemCurve* self, QCustomPlot* parentPlot)
void q_cpitemcurve_on_initialize_parent_plot(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemCurve*
/// @param parentLayerable QCPLayerable*
void q_cpitemcurve_set_parent_layerable(void* self, void* parentLayerable);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemCurve*
/// @param parentLayerable QCPLayerable*
void q_cpitemcurve_qbase_set_parent_layerable(void* self, void* parentLayerable);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemCurve*
/// @param callback void func(QCPItemCurve* self, QCPLayerable* parentLayerable)
void q_cpitemcurve_on_set_parent_layerable(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemCurve*
/// @param layer QCPLayer*
/// @param prepend bool
bool q_cpitemcurve_move_to_layer(void* self, void* layer, bool prepend);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemCurve*
/// @param layer QCPLayer*
/// @param prepend bool
bool q_cpitemcurve_qbase_move_to_layer(void* self, void* layer, bool prepend);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemCurve*
/// @param callback bool func(QCPItemCurve* self, QCPLayer* layer, bool prepend)
void q_cpitemcurve_on_move_to_layer(void* self, bool (*callback)(void*, void*, bool));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemCurve*
/// @param painter QCPPainter*
/// @param localAntialiased bool
/// @param overrideElement enum QCP__AntialiasedElement
void q_cpitemcurve_apply_antialiasing_hint(void* self, void* painter, bool localAntialiased, int32_t overrideElement);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemCurve*
/// @param painter QCPPainter*
/// @param localAntialiased bool
/// @param overrideElement enum QCP__AntialiasedElement
void q_cpitemcurve_qbase_apply_antialiasing_hint(void* self, void* painter, bool localAntialiased, int32_t overrideElement);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemCurve*
/// @param callback void func(QCPItemCurve* self, QCPPainter* painter, bool localAntialiased, enum QCP__AntialiasedElement overrideElement)
void q_cpitemcurve_on_apply_antialiasing_hint(void* self, void (*callback)(void*, void*, bool, int32_t));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemCurve*
QObject* q_cpitemcurve_sender(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemCurve*
QObject* q_cpitemcurve_qbase_sender(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemCurve*
/// @param callback QObject* func()
void q_cpitemcurve_on_sender(void* self, QObject* (*callback)());

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemCurve*
int32_t q_cpitemcurve_sender_signal_index(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemCurve*
int32_t q_cpitemcurve_qbase_sender_signal_index(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemCurve*
/// @param callback int32_t func()
void q_cpitemcurve_on_sender_signal_index(void* self, int32_t (*callback)());

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemCurve*
/// @param signal const char*
int32_t q_cpitemcurve_receivers(void* self, const char* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemCurve*
/// @param signal const char*
int32_t q_cpitemcurve_qbase_receivers(void* self, const char* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemCurve*
/// @param callback int32_t func(QCPItemCurve* self, const char* signal)
void q_cpitemcurve_on_receivers(void* self, int32_t (*callback)(void*, const char*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemCurve*
/// @param signal QMetaMethod*
bool q_cpitemcurve_is_signal_connected(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemCurve*
/// @param signal QMetaMethod*
bool q_cpitemcurve_qbase_is_signal_connected(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemCurve*
/// @param callback bool func(QCPItemCurve* self, QMetaMethod* signal)
void q_cpitemcurve_on_is_signal_connected(void* self, bool (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#objectNameChanged)
///
/// Wrapper to allow calling private signal
///
/// @param self QCPItemCurve*
/// @param callback void func(QCPItemCurve* self, const char* objectName)
void q_cpitemcurve_on_object_name_changed(void* self, void (*callback)(void*, const char*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemCurve.html)
///
/// Delete this object from C++ memory.
///
/// @param self QCPItemCurve*
void q_cpitemcurve_delete(void* self);

/// https://www.qcustomplot.com/documentation/classQCPItemRect.html

/// q_cpitemrect_new constructs a new QCPItemRect object.
///
/// @param parentPlot QCustomPlot*
QCPItemRect* q_cpitemrect_new(void* parentPlot);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#metaObject)
///
/// @param self QCPItemRect*
const QMetaObject* q_cpitemrect_meta_object(void* self);

/// @param self QCPItemRect*
/// @param param1 const char*
void* q_cpitemrect_metacast(void* self, const char* param1);

/// @param self QCPItemRect*
/// @param param1 enum QMetaObject__Call
/// @param param2 int
/// @param param3 void*
int32_t q_cpitemrect_metacall(void* self, int32_t param1, int param2, void* param3);

/// Allows for overriding the related default method
///
/// @param self QCPItemRect*
/// @param callback int32_t func(QCPItemRect* self, enum QMetaObject__Call param1, int param2, void* param3)
void q_cpitemrect_on_metacall(void* self, int32_t (*callback)(void*, int32_t, int, void*));

/// Base class method implementation
///
/// @param self QCPItemRect*
/// @param param1 enum QMetaObject__Call
/// @param param2 int
/// @param param3 void*
int32_t q_cpitemrect_qbase_metacall(void* self, int32_t param1, int param2, void* param3);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
const char* q_cpitemrect_tr(const char* s);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemRect.html)
///
/// @param self QCPItemRect*
QPen* q_cpitemrect_pen(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemRect.html)
///
/// @param self QCPItemRect*
QPen* q_cpitemrect_selected_pen(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemRect.html)
///
/// @param self QCPItemRect*
QBrush* q_cpitemrect_brush(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemRect.html)
///
/// @param self QCPItemRect*
QBrush* q_cpitemrect_selected_brush(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemRect.html)
///
/// @param self QCPItemRect*
/// @param pen QPen*
void q_cpitemrect_set_pen(void* self, void* pen);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemRect.html)
///
/// @param self QCPItemRect*
/// @param pen QPen*
void q_cpitemrect_set_selected_pen(void* self, void* pen);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemRect.html)
///
/// @param self QCPItemRect*
/// @param brush QBrush*
void q_cpitemrect_set_brush(void* self, void* brush);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemRect.html)
///
/// @param self QCPItemRect*
/// @param brush QBrush*
void q_cpitemrect_set_selected_brush(void* self, void* brush);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemRect.html)
///
/// @param self QCPItemRect*
/// @param pos QPointF*
/// @param onlySelectable bool
/// @param details QVariant*
double q_cpitemrect_select_test(void* self, void* pos, bool onlySelectable, void* details);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemRect.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPItemRect*
/// @param callback double func(QCPItemRect* self, QPointF* pos, bool onlySelectable, QVariant* details)
void q_cpitemrect_on_select_test(void* self, double (*callback)(void*, void*, bool, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemRect.html)
///
/// Base class method implementation
///
/// @param self QCPItemRect*
/// @param pos QPointF*
/// @param onlySelectable bool
/// @param details QVariant*
double q_cpitemrect_qbase_select_test(void* self, void* pos, bool onlySelectable, void* details);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemRect.html)
///
/// @param self QCPItemRect*
const QCPItemPosition* q_cpitemrect_top_left(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemRect.html)
///
/// @param self QCPItemRect*
const QCPItemPosition* q_cpitemrect_bottom_right(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemRect.html)
///
/// @param self QCPItemRect*
const QCPItemAnchor* q_cpitemrect_top(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemRect.html)
///
/// @param self QCPItemRect*
const QCPItemAnchor* q_cpitemrect_top_right(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemRect.html)
///
/// @param self QCPItemRect*
const QCPItemAnchor* q_cpitemrect_right(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemRect.html)
///
/// @param self QCPItemRect*
const QCPItemAnchor* q_cpitemrect_bottom(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemRect.html)
///
/// @param self QCPItemRect*
const QCPItemAnchor* q_cpitemrect_bottom_left(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemRect.html)
///
/// @param self QCPItemRect*
const QCPItemAnchor* q_cpitemrect_left(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemRect.html)
///
/// @param self QCPItemRect*
/// @param painter QCPPainter*
void q_cpitemrect_draw(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemRect.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPItemRect*
/// @param callback void func(QCPItemRect* self, QCPPainter* painter)
void q_cpitemrect_on_draw(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemRect.html)
///
/// Base class method implementation
///
/// @param self QCPItemRect*
/// @param painter QCPPainter*
void q_cpitemrect_qbase_draw(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemRect.html)
///
/// @param self QCPItemRect*
/// @param anchorId int
QPointF* q_cpitemrect_anchor_pixel_position(void* self, int anchorId);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemRect.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPItemRect*
/// @param callback QPointF* func(QCPItemRect* self, int anchorId)
void q_cpitemrect_on_anchor_pixel_position(void* self, QPointF* (*callback)(void*, int));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemRect.html)
///
/// Base class method implementation
///
/// @param self QCPItemRect*
/// @param anchorId int
QPointF* q_cpitemrect_qbase_anchor_pixel_position(void* self, int anchorId);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemRect.html)
///
/// @param self QCPItemRect*
QPen* q_cpitemrect_main_pen(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemRect.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPItemRect*
/// @param callback QPen* func()
void q_cpitemrect_on_main_pen(void* self, QPen* (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemRect.html)
///
/// Base class method implementation
///
/// @param self QCPItemRect*
QPen* q_cpitemrect_qbase_main_pen(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemRect.html)
///
/// @param self QCPItemRect*
QBrush* q_cpitemrect_main_brush(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemRect.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPItemRect*
/// @param callback QBrush* func()
void q_cpitemrect_on_main_brush(void* self, QBrush* (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemRect.html)
///
/// Base class method implementation
///
/// @param self QCPItemRect*
QBrush* q_cpitemrect_qbase_main_brush(void* self);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
/// @param c const char*
const char* q_cpitemrect_tr2(const char* s, const char* c);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
/// @param c const char*
/// @param n int
const char* q_cpitemrect_tr3(const char* s, const char* c, int n);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemRect*
bool q_cpitemrect_clip_to_axis_rect(void* self);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemRect*
QCPAxisRect* q_cpitemrect_clip_axis_rect(void* self);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemRect*
bool q_cpitemrect_selectable(void* self);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemRect*
bool q_cpitemrect_selected(void* self);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemRect*
/// @param clip bool
void q_cpitemrect_set_clip_to_axis_rect(void* self, bool clip);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemRect*
/// @param rect QCPAxisRect*
void q_cpitemrect_set_clip_axis_rect(void* self, void* rect);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemRect*
/// @param selectable bool
void q_cpitemrect_set_selectable(void* self, bool selectable);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemRect*
/// @param selected bool
void q_cpitemrect_set_selected(void* self, bool selected);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemRect*
libqt_list /* of QCPItemPosition* */ q_cpitemrect_positions(void* self);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemRect*
libqt_list /* of QCPItemAnchor* */ q_cpitemrect_anchors(void* self);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemRect*
/// @param name const char*
QCPItemPosition* q_cpitemrect_position(void* self, const char* name);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemRect*
/// @param name const char*
QCPItemAnchor* q_cpitemrect_anchor(void* self, const char* name);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemRect*
/// @param name const char*
bool q_cpitemrect_has_anchor(void* self, const char* name);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemRect*
/// @param selected bool
void q_cpitemrect_selection_changed(void* self, bool selected);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemRect*
/// @param callback void func(QCPItemRect* self, bool selected)
void q_cpitemrect_on_selection_changed(void* self, void (*callback)(void*, bool));

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemRect*
/// @param selectable bool
void q_cpitemrect_selectable_changed(void* self, bool selectable);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemRect*
/// @param callback void func(QCPItemRect* self, bool selectable)
void q_cpitemrect_on_selectable_changed(void* self, void (*callback)(void*, bool));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPItemRect*
bool q_cpitemrect_visible(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPItemRect*
QCustomPlot* q_cpitemrect_parent_plot(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPItemRect*
QCPLayerable* q_cpitemrect_parent_layerable(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPItemRect*
QCPLayer* q_cpitemrect_layer(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPItemRect*
bool q_cpitemrect_antialiased(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPItemRect*
/// @param on bool
void q_cpitemrect_set_visible(void* self, bool on);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPItemRect*
/// @param layer QCPLayer*
bool q_cpitemrect_set_layer(void* self, void* layer);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPItemRect*
/// @param layerName const char*
bool q_cpitemrect_set_layer2(void* self, const char* layerName);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPItemRect*
/// @param enabled bool
void q_cpitemrect_set_antialiased(void* self, bool enabled);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPItemRect*
bool q_cpitemrect_real_visibility(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPItemRect*
/// @param newLayer QCPLayer*
void q_cpitemrect_layer_changed(void* self, void* newLayer);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPItemRect*
/// @param callback void func(QCPItemRect* self, QCPLayer* newLayer)
void q_cpitemrect_on_layer_changed(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#objectName)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPItemRect*
const char* q_cpitemrect_object_name(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setObjectName)
///
/// @param self QCPItemRect*
/// @param name char*
void q_cpitemrect_set_object_name(void* self, char* name);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isWidgetType)
///
/// @param self QCPItemRect*
bool q_cpitemrect_is_widget_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isWindowType)
///
/// @param self QCPItemRect*
bool q_cpitemrect_is_window_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isQuickItemType)
///
/// @param self QCPItemRect*
bool q_cpitemrect_is_quick_item_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#signalsBlocked)
///
/// @param self QCPItemRect*
bool q_cpitemrect_signals_blocked(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#blockSignals)
///
/// @param self QCPItemRect*
/// @param b bool
bool q_cpitemrect_block_signals(void* self, bool b);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#thread)
///
/// @param self QCPItemRect*
QThread* q_cpitemrect_thread(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#moveToThread)
///
/// @param self QCPItemRect*
/// @param thread QThread*
bool q_cpitemrect_move_to_thread(void* self, void* thread);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#startTimer)
///
/// @param self QCPItemRect*
/// @param interval int
int32_t q_cpitemrect_start_timer(void* self, int interval);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#killTimer)
///
/// @param self QCPItemRect*
/// @param id int
void q_cpitemrect_kill_timer(void* self, int id);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#killTimer)
///
/// @param self QCPItemRect*
/// @param id enum Qt__TimerId
void q_cpitemrect_kill_timer2(void* self, int32_t id);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#children)
///
/// @param self QCPItemRect*
libqt_list /* of QObject* */ q_cpitemrect_children(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setParent)
///
/// @param self QCPItemRect*
/// @param parent QObject*
void q_cpitemrect_set_parent(void* self, void* parent);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#installEventFilter)
///
/// @param self QCPItemRect*
/// @param filterObj QObject*
void q_cpitemrect_install_event_filter(void* self, void* filterObj);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#removeEventFilter)
///
/// @param self QCPItemRect*
/// @param obj QObject*
void q_cpitemrect_remove_event_filter(void* self, void* obj);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param method QMetaMethod*
QMetaObject__Connection* q_cpitemrect_connect(void* sender, void* signal, void* receiver, void* method);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param self QCPItemRect*
/// @param sender QObject*
/// @param signal const char*
/// @param member const char*
QMetaObject__Connection* q_cpitemrect_connect2(void* self, void* sender, const char* signal, const char* member);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param member QMetaMethod*
bool q_cpitemrect_disconnect(void* sender, void* signal, void* receiver, void* member);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnect)
///
/// @param param1 QMetaObject__Connection*
bool q_cpitemrect_disconnect2(void* param1);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dumpObjectTree)
///
/// @param self QCPItemRect*
void q_cpitemrect_dump_object_tree(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dumpObjectInfo)
///
/// @param self QCPItemRect*
void q_cpitemrect_dump_object_info(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setProperty)
///
/// @param self QCPItemRect*
/// @param name const char*
/// @param value QVariant*
bool q_cpitemrect_set_property(void* self, const char* name, void* value);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#property)
///
/// @param self QCPItemRect*
/// @param name const char*
QVariant* q_cpitemrect_property(void* self, const char* name);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dynamicPropertyNames)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPItemRect*
const char** q_cpitemrect_dynamic_property_names(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#bindingStorage)
///
/// @param self QCPItemRect*
QBindingStorage* q_cpitemrect_binding_storage(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#bindingStorage)
///
/// @param self QCPItemRect*
const QBindingStorage* q_cpitemrect_binding_storage2(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPItemRect*
void q_cpitemrect_destroyed(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPItemRect*
/// @param callback void func(QCPItemRect* self)
void q_cpitemrect_on_destroyed(void* self, void (*callback)(void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#parent)
///
/// @param self QCPItemRect*
QObject* q_cpitemrect_parent(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#inherits)
///
/// @param self QCPItemRect*
/// @param classname const char*
bool q_cpitemrect_inherits(void* self, const char* classname);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#deleteLater)
///
/// @param self QCPItemRect*
void q_cpitemrect_delete_later(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#moveToThread)
///
/// @param self QCPItemRect*
/// @param thread QThread*
/// @param param2 Disambiguated_t*
bool q_cpitemrect_move_to_thread2(void* self, void* thread, void* param2);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#startTimer)
///
/// @param self QCPItemRect*
/// @param interval int
/// @param timerType enum Qt__TimerType
int32_t q_cpitemrect_start_timer22(void* self, int interval, int32_t timerType);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param method QMetaMethod*
/// @param type enum Qt__ConnectionType
QMetaObject__Connection* q_cpitemrect_connect5(void* sender, void* signal, void* receiver, void* method, int32_t type);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param self QCPItemRect*
/// @param sender QObject*
/// @param signal const char*
/// @param member const char*
/// @param type enum Qt__ConnectionType
QMetaObject__Connection* q_cpitemrect_connect4(void* self, void* sender, const char* signal, const char* member, int32_t type);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPItemRect*
/// @param param1 QObject*
void q_cpitemrect_destroyed1(void* self, void* param1);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPItemRect*
/// @param callback void func(QCPItemRect* self, QObject* param1)
void q_cpitemrect_on_destroyed1(void* self, void (*callback)(void*, void*));

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemRect*
///
/// @return enum QCP__Interaction
int32_t q_cpitemrect_selection_category(void* self);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemRect*
///
/// @return enum QCP__Interaction
int32_t q_cpitemrect_qbase_selection_category(void* self);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemRect*
/// @param callback int32_t func()
void q_cpitemrect_on_selection_category(void* self, int32_t (*callback)());

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemRect*
QRect* q_cpitemrect_clip_rect(void* self);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemRect*
QRect* q_cpitemrect_qbase_clip_rect(void* self);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemRect*
/// @param callback QRect* func()
void q_cpitemrect_on_clip_rect(void* self, QRect* (*callback)());

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemRect*
/// @param painter QCPPainter*
void q_cpitemrect_apply_default_antialiasing_hint(void* self, void* painter);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemRect*
/// @param painter QCPPainter*
void q_cpitemrect_qbase_apply_default_antialiasing_hint(void* self, void* painter);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemRect*
/// @param callback void func(QCPItemRect* self, QCPPainter* painter)
void q_cpitemrect_on_apply_default_antialiasing_hint(void* self, void (*callback)(void*, void*));

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemRect*
/// @param event QMouseEvent*
/// @param additive bool
/// @param details QVariant*
/// @param selectionStateChanged bool*
void q_cpitemrect_select_event(void* self, void* event, bool additive, void* details, bool* selectionStateChanged);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemRect*
/// @param event QMouseEvent*
/// @param additive bool
/// @param details QVariant*
/// @param selectionStateChanged bool*
void q_cpitemrect_qbase_select_event(void* self, void* event, bool additive, void* details, bool* selectionStateChanged);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemRect*
/// @param callback void func(QCPItemRect* self, QMouseEvent* event, bool additive, QVariant* details, bool* selectionStateChanged)
void q_cpitemrect_on_select_event(void* self, void (*callback)(void*, void*, bool, void*, bool*));

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemRect*
/// @param selectionStateChanged bool*
void q_cpitemrect_deselect_event(void* self, bool* selectionStateChanged);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemRect*
/// @param selectionStateChanged bool*
void q_cpitemrect_qbase_deselect_event(void* self, bool* selectionStateChanged);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemRect*
/// @param callback void func(QCPItemRect* self, bool* selectionStateChanged)
void q_cpitemrect_on_deselect_event(void* self, void (*callback)(void*, bool*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemRect*
/// @param parentPlot QCustomPlot*
void q_cpitemrect_parent_plot_initialized(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemRect*
/// @param parentPlot QCustomPlot*
void q_cpitemrect_qbase_parent_plot_initialized(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemRect*
/// @param callback void func(QCPItemRect* self, QCustomPlot* parentPlot)
void q_cpitemrect_on_parent_plot_initialized(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemRect*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cpitemrect_mouse_press_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemRect*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cpitemrect_qbase_mouse_press_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemRect*
/// @param callback void func(QCPItemRect* self, QMouseEvent* event, QVariant* details)
void q_cpitemrect_on_mouse_press_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemRect*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cpitemrect_mouse_move_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemRect*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cpitemrect_qbase_mouse_move_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemRect*
/// @param callback void func(QCPItemRect* self, QMouseEvent* event, QPointF* startPos)
void q_cpitemrect_on_mouse_move_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemRect*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cpitemrect_mouse_release_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemRect*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cpitemrect_qbase_mouse_release_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemRect*
/// @param callback void func(QCPItemRect* self, QMouseEvent* event, QPointF* startPos)
void q_cpitemrect_on_mouse_release_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemRect*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cpitemrect_mouse_double_click_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemRect*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cpitemrect_qbase_mouse_double_click_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemRect*
/// @param callback void func(QCPItemRect* self, QMouseEvent* event, QVariant* details)
void q_cpitemrect_on_mouse_double_click_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemRect*
/// @param event QWheelEvent*
void q_cpitemrect_wheel_event(void* self, void* event);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemRect*
/// @param event QWheelEvent*
void q_cpitemrect_qbase_wheel_event(void* self, void* event);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemRect*
/// @param callback void func(QCPItemRect* self, QWheelEvent* event)
void q_cpitemrect_on_wheel_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemRect*
/// @param event QEvent*
bool q_cpitemrect_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemRect*
/// @param event QEvent*
bool q_cpitemrect_qbase_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemRect*
/// @param callback bool func(QCPItemRect* self, QEvent* event)
void q_cpitemrect_on_event(void* self, bool (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemRect*
/// @param watched QObject*
/// @param event QEvent*
bool q_cpitemrect_event_filter(void* self, void* watched, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemRect*
/// @param watched QObject*
/// @param event QEvent*
bool q_cpitemrect_qbase_event_filter(void* self, void* watched, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemRect*
/// @param callback bool func(QCPItemRect* self, QObject* watched, QEvent* event)
void q_cpitemrect_on_event_filter(void* self, bool (*callback)(void*, void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemRect*
/// @param event QTimerEvent*
void q_cpitemrect_timer_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemRect*
/// @param event QTimerEvent*
void q_cpitemrect_qbase_timer_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemRect*
/// @param callback void func(QCPItemRect* self, QTimerEvent* event)
void q_cpitemrect_on_timer_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemRect*
/// @param event QChildEvent*
void q_cpitemrect_child_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemRect*
/// @param event QChildEvent*
void q_cpitemrect_qbase_child_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemRect*
/// @param callback void func(QCPItemRect* self, QChildEvent* event)
void q_cpitemrect_on_child_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemRect*
/// @param event QEvent*
void q_cpitemrect_custom_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemRect*
/// @param event QEvent*
void q_cpitemrect_qbase_custom_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemRect*
/// @param callback void func(QCPItemRect* self, QEvent* event)
void q_cpitemrect_on_custom_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemRect*
/// @param signal QMetaMethod*
void q_cpitemrect_connect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemRect*
/// @param signal QMetaMethod*
void q_cpitemrect_qbase_connect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemRect*
/// @param callback void func(QCPItemRect* self, QMetaMethod* signal)
void q_cpitemrect_on_connect_notify(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemRect*
/// @param signal QMetaMethod*
void q_cpitemrect_disconnect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemRect*
/// @param signal QMetaMethod*
void q_cpitemrect_qbase_disconnect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemRect*
/// @param callback void func(QCPItemRect* self, QMetaMethod* signal)
void q_cpitemrect_on_disconnect_notify(void* self, void (*callback)(void*, void*));

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemRect*
/// @param rect QRectF*
/// @param pos QPointF*
/// @param filledRect bool
double q_cpitemrect_rect_distance(void* self, void* rect, void* pos, bool filledRect);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemRect*
/// @param rect QRectF*
/// @param pos QPointF*
/// @param filledRect bool
double q_cpitemrect_qbase_rect_distance(void* self, void* rect, void* pos, bool filledRect);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemRect*
/// @param callback double func(QCPItemRect* self, QRectF* rect, QPointF* pos, bool filledRect)
void q_cpitemrect_on_rect_distance(void* self, double (*callback)(void*, void*, void*, bool));

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemRect*
/// @param name const char*
QCPItemPosition* q_cpitemrect_create_position(void* self, const char* name);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemRect*
/// @param name const char*
QCPItemPosition* q_cpitemrect_qbase_create_position(void* self, const char* name);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemRect*
/// @param callback QCPItemPosition* func(QCPItemRect* self, const char* name)
void q_cpitemrect_on_create_position(void* self, QCPItemPosition* (*callback)(void*, const char*));

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemRect*
/// @param name const char*
/// @param anchorId int
QCPItemAnchor* q_cpitemrect_create_anchor(void* self, const char* name, int anchorId);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemRect*
/// @param name const char*
/// @param anchorId int
QCPItemAnchor* q_cpitemrect_qbase_create_anchor(void* self, const char* name, int anchorId);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemRect*
/// @param callback QCPItemAnchor* func(QCPItemRect* self, const char* name, int anchorId)
void q_cpitemrect_on_create_anchor(void* self, QCPItemAnchor* (*callback)(void*, const char*, int));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemRect*
/// @param parentPlot QCustomPlot*
void q_cpitemrect_initialize_parent_plot(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemRect*
/// @param parentPlot QCustomPlot*
void q_cpitemrect_qbase_initialize_parent_plot(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemRect*
/// @param callback void func(QCPItemRect* self, QCustomPlot* parentPlot)
void q_cpitemrect_on_initialize_parent_plot(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemRect*
/// @param parentLayerable QCPLayerable*
void q_cpitemrect_set_parent_layerable(void* self, void* parentLayerable);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemRect*
/// @param parentLayerable QCPLayerable*
void q_cpitemrect_qbase_set_parent_layerable(void* self, void* parentLayerable);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemRect*
/// @param callback void func(QCPItemRect* self, QCPLayerable* parentLayerable)
void q_cpitemrect_on_set_parent_layerable(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemRect*
/// @param layer QCPLayer*
/// @param prepend bool
bool q_cpitemrect_move_to_layer(void* self, void* layer, bool prepend);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemRect*
/// @param layer QCPLayer*
/// @param prepend bool
bool q_cpitemrect_qbase_move_to_layer(void* self, void* layer, bool prepend);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemRect*
/// @param callback bool func(QCPItemRect* self, QCPLayer* layer, bool prepend)
void q_cpitemrect_on_move_to_layer(void* self, bool (*callback)(void*, void*, bool));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemRect*
/// @param painter QCPPainter*
/// @param localAntialiased bool
/// @param overrideElement enum QCP__AntialiasedElement
void q_cpitemrect_apply_antialiasing_hint(void* self, void* painter, bool localAntialiased, int32_t overrideElement);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemRect*
/// @param painter QCPPainter*
/// @param localAntialiased bool
/// @param overrideElement enum QCP__AntialiasedElement
void q_cpitemrect_qbase_apply_antialiasing_hint(void* self, void* painter, bool localAntialiased, int32_t overrideElement);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemRect*
/// @param callback void func(QCPItemRect* self, QCPPainter* painter, bool localAntialiased, enum QCP__AntialiasedElement overrideElement)
void q_cpitemrect_on_apply_antialiasing_hint(void* self, void (*callback)(void*, void*, bool, int32_t));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemRect*
QObject* q_cpitemrect_sender(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemRect*
QObject* q_cpitemrect_qbase_sender(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemRect*
/// @param callback QObject* func()
void q_cpitemrect_on_sender(void* self, QObject* (*callback)());

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemRect*
int32_t q_cpitemrect_sender_signal_index(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemRect*
int32_t q_cpitemrect_qbase_sender_signal_index(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemRect*
/// @param callback int32_t func()
void q_cpitemrect_on_sender_signal_index(void* self, int32_t (*callback)());

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemRect*
/// @param signal const char*
int32_t q_cpitemrect_receivers(void* self, const char* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemRect*
/// @param signal const char*
int32_t q_cpitemrect_qbase_receivers(void* self, const char* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemRect*
/// @param callback int32_t func(QCPItemRect* self, const char* signal)
void q_cpitemrect_on_receivers(void* self, int32_t (*callback)(void*, const char*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemRect*
/// @param signal QMetaMethod*
bool q_cpitemrect_is_signal_connected(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemRect*
/// @param signal QMetaMethod*
bool q_cpitemrect_qbase_is_signal_connected(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemRect*
/// @param callback bool func(QCPItemRect* self, QMetaMethod* signal)
void q_cpitemrect_on_is_signal_connected(void* self, bool (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#objectNameChanged)
///
/// Wrapper to allow calling private signal
///
/// @param self QCPItemRect*
/// @param callback void func(QCPItemRect* self, const char* objectName)
void q_cpitemrect_on_object_name_changed(void* self, void (*callback)(void*, const char*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemRect.html)
///
/// Delete this object from C++ memory.
///
/// @param self QCPItemRect*
void q_cpitemrect_delete(void* self);

/// https://www.qcustomplot.com/documentation/classQCPItemText.html

/// q_cpitemtext_new constructs a new QCPItemText object.
///
/// @param parentPlot QCustomPlot*
QCPItemText* q_cpitemtext_new(void* parentPlot);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#metaObject)
///
/// @param self QCPItemText*
const QMetaObject* q_cpitemtext_meta_object(void* self);

/// @param self QCPItemText*
/// @param param1 const char*
void* q_cpitemtext_metacast(void* self, const char* param1);

/// @param self QCPItemText*
/// @param param1 enum QMetaObject__Call
/// @param param2 int
/// @param param3 void*
int32_t q_cpitemtext_metacall(void* self, int32_t param1, int param2, void* param3);

/// Allows for overriding the related default method
///
/// @param self QCPItemText*
/// @param callback int32_t func(QCPItemText* self, enum QMetaObject__Call param1, int param2, void* param3)
void q_cpitemtext_on_metacall(void* self, int32_t (*callback)(void*, int32_t, int, void*));

/// Base class method implementation
///
/// @param self QCPItemText*
/// @param param1 enum QMetaObject__Call
/// @param param2 int
/// @param param3 void*
int32_t q_cpitemtext_qbase_metacall(void* self, int32_t param1, int param2, void* param3);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
const char* q_cpitemtext_tr(const char* s);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemText.html)
///
/// @param self QCPItemText*
QColor* q_cpitemtext_color(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemText.html)
///
/// @param self QCPItemText*
QColor* q_cpitemtext_selected_color(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemText.html)
///
/// @param self QCPItemText*
QPen* q_cpitemtext_pen(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemText.html)
///
/// @param self QCPItemText*
QPen* q_cpitemtext_selected_pen(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemText.html)
///
/// @param self QCPItemText*
QBrush* q_cpitemtext_brush(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemText.html)
///
/// @param self QCPItemText*
QBrush* q_cpitemtext_selected_brush(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemText.html)
///
/// @param self QCPItemText*
QFont* q_cpitemtext_font(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemText.html)
///
/// @param self QCPItemText*
QFont* q_cpitemtext_selected_font(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemText.html)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPItemText*
const char* q_cpitemtext_text(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemText.html)
///
/// @param self QCPItemText*
///
/// @return flag of enum Qt__AlignmentFlag
int32_t q_cpitemtext_position_alignment(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemText.html)
///
/// @param self QCPItemText*
///
/// @return flag of enum Qt__AlignmentFlag
int32_t q_cpitemtext_text_alignment(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemText.html)
///
/// @param self QCPItemText*
double q_cpitemtext_rotation(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemText.html)
///
/// @param self QCPItemText*
QMargins* q_cpitemtext_padding(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemText.html)
///
/// @param self QCPItemText*
/// @param color QColor*
void q_cpitemtext_set_color(void* self, void* color);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemText.html)
///
/// @param self QCPItemText*
/// @param color QColor*
void q_cpitemtext_set_selected_color(void* self, void* color);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemText.html)
///
/// @param self QCPItemText*
/// @param pen QPen*
void q_cpitemtext_set_pen(void* self, void* pen);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemText.html)
///
/// @param self QCPItemText*
/// @param pen QPen*
void q_cpitemtext_set_selected_pen(void* self, void* pen);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemText.html)
///
/// @param self QCPItemText*
/// @param brush QBrush*
void q_cpitemtext_set_brush(void* self, void* brush);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemText.html)
///
/// @param self QCPItemText*
/// @param brush QBrush*
void q_cpitemtext_set_selected_brush(void* self, void* brush);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemText.html)
///
/// @param self QCPItemText*
/// @param font QFont*
void q_cpitemtext_set_font(void* self, void* font);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemText.html)
///
/// @param self QCPItemText*
/// @param font QFont*
void q_cpitemtext_set_selected_font(void* self, void* font);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemText.html)
///
/// @param self QCPItemText*
/// @param text const char*
void q_cpitemtext_set_text(void* self, const char* text);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemText.html)
///
/// @param self QCPItemText*
/// @param alignment flag of enum Qt__AlignmentFlag
void q_cpitemtext_set_position_alignment(void* self, int32_t alignment);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemText.html)
///
/// @param self QCPItemText*
/// @param alignment flag of enum Qt__AlignmentFlag
void q_cpitemtext_set_text_alignment(void* self, int32_t alignment);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemText.html)
///
/// @param self QCPItemText*
/// @param degrees double
void q_cpitemtext_set_rotation(void* self, double degrees);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemText.html)
///
/// @param self QCPItemText*
/// @param padding QMargins*
void q_cpitemtext_set_padding(void* self, void* padding);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemText.html)
///
/// @param self QCPItemText*
/// @param pos QPointF*
/// @param onlySelectable bool
/// @param details QVariant*
double q_cpitemtext_select_test(void* self, void* pos, bool onlySelectable, void* details);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemText.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPItemText*
/// @param callback double func(QCPItemText* self, QPointF* pos, bool onlySelectable, QVariant* details)
void q_cpitemtext_on_select_test(void* self, double (*callback)(void*, void*, bool, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemText.html)
///
/// Base class method implementation
///
/// @param self QCPItemText*
/// @param pos QPointF*
/// @param onlySelectable bool
/// @param details QVariant*
double q_cpitemtext_qbase_select_test(void* self, void* pos, bool onlySelectable, void* details);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemText.html)
///
/// @param self QCPItemText*
const QCPItemPosition* q_cpitemtext_position(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemText.html)
///
/// @param self QCPItemText*
const QCPItemAnchor* q_cpitemtext_top_left(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemText.html)
///
/// @param self QCPItemText*
const QCPItemAnchor* q_cpitemtext_top(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemText.html)
///
/// @param self QCPItemText*
const QCPItemAnchor* q_cpitemtext_top_right(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemText.html)
///
/// @param self QCPItemText*
const QCPItemAnchor* q_cpitemtext_right(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemText.html)
///
/// @param self QCPItemText*
const QCPItemAnchor* q_cpitemtext_bottom_right(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemText.html)
///
/// @param self QCPItemText*
const QCPItemAnchor* q_cpitemtext_bottom(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemText.html)
///
/// @param self QCPItemText*
const QCPItemAnchor* q_cpitemtext_bottom_left(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemText.html)
///
/// @param self QCPItemText*
const QCPItemAnchor* q_cpitemtext_left(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemText.html)
///
/// @param self QCPItemText*
/// @param painter QCPPainter*
void q_cpitemtext_draw(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemText.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPItemText*
/// @param callback void func(QCPItemText* self, QCPPainter* painter)
void q_cpitemtext_on_draw(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemText.html)
///
/// Base class method implementation
///
/// @param self QCPItemText*
/// @param painter QCPPainter*
void q_cpitemtext_qbase_draw(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemText.html)
///
/// @param self QCPItemText*
/// @param anchorId int
QPointF* q_cpitemtext_anchor_pixel_position(void* self, int anchorId);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemText.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPItemText*
/// @param callback QPointF* func(QCPItemText* self, int anchorId)
void q_cpitemtext_on_anchor_pixel_position(void* self, QPointF* (*callback)(void*, int));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemText.html)
///
/// Base class method implementation
///
/// @param self QCPItemText*
/// @param anchorId int
QPointF* q_cpitemtext_qbase_anchor_pixel_position(void* self, int anchorId);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemText.html)
///
/// @param self QCPItemText*
/// @param pos QPointF*
/// @param rect QRectF*
/// @param positionAlignment flag of enum Qt__AlignmentFlag
QPointF* q_cpitemtext_get_text_draw_point(void* self, void* pos, void* rect, int32_t positionAlignment);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemText.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPItemText*
/// @param callback QPointF* func(QCPItemText* self, QPointF* pos, QRectF* rect, flag of enum Qt__AlignmentFlag positionAlignment)
void q_cpitemtext_on_get_text_draw_point(void* self, QPointF* (*callback)(void*, void*, void*, int32_t));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemText.html)
///
/// Base class method implementation
///
/// @param self QCPItemText*
/// @param pos QPointF*
/// @param rect QRectF*
/// @param positionAlignment flag of enum Qt__AlignmentFlag
QPointF* q_cpitemtext_qbase_get_text_draw_point(void* self, void* pos, void* rect, int32_t positionAlignment);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemText.html)
///
/// @param self QCPItemText*
QFont* q_cpitemtext_main_font(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemText.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPItemText*
/// @param callback QFont* func()
void q_cpitemtext_on_main_font(void* self, QFont* (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemText.html)
///
/// Base class method implementation
///
/// @param self QCPItemText*
QFont* q_cpitemtext_qbase_main_font(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemText.html)
///
/// @param self QCPItemText*
QColor* q_cpitemtext_main_color(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemText.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPItemText*
/// @param callback QColor* func()
void q_cpitemtext_on_main_color(void* self, QColor* (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemText.html)
///
/// Base class method implementation
///
/// @param self QCPItemText*
QColor* q_cpitemtext_qbase_main_color(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemText.html)
///
/// @param self QCPItemText*
QPen* q_cpitemtext_main_pen(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemText.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPItemText*
/// @param callback QPen* func()
void q_cpitemtext_on_main_pen(void* self, QPen* (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemText.html)
///
/// Base class method implementation
///
/// @param self QCPItemText*
QPen* q_cpitemtext_qbase_main_pen(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemText.html)
///
/// @param self QCPItemText*
QBrush* q_cpitemtext_main_brush(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemText.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPItemText*
/// @param callback QBrush* func()
void q_cpitemtext_on_main_brush(void* self, QBrush* (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemText.html)
///
/// Base class method implementation
///
/// @param self QCPItemText*
QBrush* q_cpitemtext_qbase_main_brush(void* self);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
/// @param c const char*
const char* q_cpitemtext_tr2(const char* s, const char* c);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
/// @param c const char*
/// @param n int
const char* q_cpitemtext_tr3(const char* s, const char* c, int n);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemText*
bool q_cpitemtext_clip_to_axis_rect(void* self);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemText*
QCPAxisRect* q_cpitemtext_clip_axis_rect(void* self);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemText*
bool q_cpitemtext_selectable(void* self);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemText*
bool q_cpitemtext_selected(void* self);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemText*
/// @param clip bool
void q_cpitemtext_set_clip_to_axis_rect(void* self, bool clip);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemText*
/// @param rect QCPAxisRect*
void q_cpitemtext_set_clip_axis_rect(void* self, void* rect);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemText*
/// @param selectable bool
void q_cpitemtext_set_selectable(void* self, bool selectable);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemText*
/// @param selected bool
void q_cpitemtext_set_selected(void* self, bool selected);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemText*
libqt_list /* of QCPItemPosition* */ q_cpitemtext_positions(void* self);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemText*
libqt_list /* of QCPItemAnchor* */ q_cpitemtext_anchors(void* self);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemText*
/// @param name const char*
QCPItemAnchor* q_cpitemtext_anchor(void* self, const char* name);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemText*
/// @param name const char*
bool q_cpitemtext_has_anchor(void* self, const char* name);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemText*
/// @param selected bool
void q_cpitemtext_selection_changed(void* self, bool selected);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemText*
/// @param callback void func(QCPItemText* self, bool selected)
void q_cpitemtext_on_selection_changed(void* self, void (*callback)(void*, bool));

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemText*
/// @param selectable bool
void q_cpitemtext_selectable_changed(void* self, bool selectable);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemText*
/// @param callback void func(QCPItemText* self, bool selectable)
void q_cpitemtext_on_selectable_changed(void* self, void (*callback)(void*, bool));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPItemText*
bool q_cpitemtext_visible(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPItemText*
QCustomPlot* q_cpitemtext_parent_plot(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPItemText*
QCPLayerable* q_cpitemtext_parent_layerable(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPItemText*
QCPLayer* q_cpitemtext_layer(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPItemText*
bool q_cpitemtext_antialiased(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPItemText*
/// @param on bool
void q_cpitemtext_set_visible(void* self, bool on);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPItemText*
/// @param layer QCPLayer*
bool q_cpitemtext_set_layer(void* self, void* layer);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPItemText*
/// @param layerName const char*
bool q_cpitemtext_set_layer2(void* self, const char* layerName);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPItemText*
/// @param enabled bool
void q_cpitemtext_set_antialiased(void* self, bool enabled);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPItemText*
bool q_cpitemtext_real_visibility(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPItemText*
/// @param newLayer QCPLayer*
void q_cpitemtext_layer_changed(void* self, void* newLayer);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPItemText*
/// @param callback void func(QCPItemText* self, QCPLayer* newLayer)
void q_cpitemtext_on_layer_changed(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#objectName)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPItemText*
const char* q_cpitemtext_object_name(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setObjectName)
///
/// @param self QCPItemText*
/// @param name char*
void q_cpitemtext_set_object_name(void* self, char* name);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isWidgetType)
///
/// @param self QCPItemText*
bool q_cpitemtext_is_widget_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isWindowType)
///
/// @param self QCPItemText*
bool q_cpitemtext_is_window_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isQuickItemType)
///
/// @param self QCPItemText*
bool q_cpitemtext_is_quick_item_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#signalsBlocked)
///
/// @param self QCPItemText*
bool q_cpitemtext_signals_blocked(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#blockSignals)
///
/// @param self QCPItemText*
/// @param b bool
bool q_cpitemtext_block_signals(void* self, bool b);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#thread)
///
/// @param self QCPItemText*
QThread* q_cpitemtext_thread(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#moveToThread)
///
/// @param self QCPItemText*
/// @param thread QThread*
bool q_cpitemtext_move_to_thread(void* self, void* thread);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#startTimer)
///
/// @param self QCPItemText*
/// @param interval int
int32_t q_cpitemtext_start_timer(void* self, int interval);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#killTimer)
///
/// @param self QCPItemText*
/// @param id int
void q_cpitemtext_kill_timer(void* self, int id);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#killTimer)
///
/// @param self QCPItemText*
/// @param id enum Qt__TimerId
void q_cpitemtext_kill_timer2(void* self, int32_t id);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#children)
///
/// @param self QCPItemText*
libqt_list /* of QObject* */ q_cpitemtext_children(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setParent)
///
/// @param self QCPItemText*
/// @param parent QObject*
void q_cpitemtext_set_parent(void* self, void* parent);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#installEventFilter)
///
/// @param self QCPItemText*
/// @param filterObj QObject*
void q_cpitemtext_install_event_filter(void* self, void* filterObj);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#removeEventFilter)
///
/// @param self QCPItemText*
/// @param obj QObject*
void q_cpitemtext_remove_event_filter(void* self, void* obj);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param method QMetaMethod*
QMetaObject__Connection* q_cpitemtext_connect(void* sender, void* signal, void* receiver, void* method);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param self QCPItemText*
/// @param sender QObject*
/// @param signal const char*
/// @param member const char*
QMetaObject__Connection* q_cpitemtext_connect2(void* self, void* sender, const char* signal, const char* member);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param member QMetaMethod*
bool q_cpitemtext_disconnect(void* sender, void* signal, void* receiver, void* member);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnect)
///
/// @param param1 QMetaObject__Connection*
bool q_cpitemtext_disconnect2(void* param1);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dumpObjectTree)
///
/// @param self QCPItemText*
void q_cpitemtext_dump_object_tree(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dumpObjectInfo)
///
/// @param self QCPItemText*
void q_cpitemtext_dump_object_info(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setProperty)
///
/// @param self QCPItemText*
/// @param name const char*
/// @param value QVariant*
bool q_cpitemtext_set_property(void* self, const char* name, void* value);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#property)
///
/// @param self QCPItemText*
/// @param name const char*
QVariant* q_cpitemtext_property(void* self, const char* name);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dynamicPropertyNames)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPItemText*
const char** q_cpitemtext_dynamic_property_names(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#bindingStorage)
///
/// @param self QCPItemText*
QBindingStorage* q_cpitemtext_binding_storage(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#bindingStorage)
///
/// @param self QCPItemText*
const QBindingStorage* q_cpitemtext_binding_storage2(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPItemText*
void q_cpitemtext_destroyed(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPItemText*
/// @param callback void func(QCPItemText* self)
void q_cpitemtext_on_destroyed(void* self, void (*callback)(void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#parent)
///
/// @param self QCPItemText*
QObject* q_cpitemtext_parent(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#inherits)
///
/// @param self QCPItemText*
/// @param classname const char*
bool q_cpitemtext_inherits(void* self, const char* classname);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#deleteLater)
///
/// @param self QCPItemText*
void q_cpitemtext_delete_later(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#moveToThread)
///
/// @param self QCPItemText*
/// @param thread QThread*
/// @param param2 Disambiguated_t*
bool q_cpitemtext_move_to_thread2(void* self, void* thread, void* param2);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#startTimer)
///
/// @param self QCPItemText*
/// @param interval int
/// @param timerType enum Qt__TimerType
int32_t q_cpitemtext_start_timer22(void* self, int interval, int32_t timerType);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param method QMetaMethod*
/// @param type enum Qt__ConnectionType
QMetaObject__Connection* q_cpitemtext_connect5(void* sender, void* signal, void* receiver, void* method, int32_t type);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param self QCPItemText*
/// @param sender QObject*
/// @param signal const char*
/// @param member const char*
/// @param type enum Qt__ConnectionType
QMetaObject__Connection* q_cpitemtext_connect4(void* self, void* sender, const char* signal, const char* member, int32_t type);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPItemText*
/// @param param1 QObject*
void q_cpitemtext_destroyed1(void* self, void* param1);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPItemText*
/// @param callback void func(QCPItemText* self, QObject* param1)
void q_cpitemtext_on_destroyed1(void* self, void (*callback)(void*, void*));

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemText*
///
/// @return enum QCP__Interaction
int32_t q_cpitemtext_selection_category(void* self);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemText*
///
/// @return enum QCP__Interaction
int32_t q_cpitemtext_qbase_selection_category(void* self);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemText*
/// @param callback int32_t func()
void q_cpitemtext_on_selection_category(void* self, int32_t (*callback)());

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemText*
QRect* q_cpitemtext_clip_rect(void* self);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemText*
QRect* q_cpitemtext_qbase_clip_rect(void* self);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemText*
/// @param callback QRect* func()
void q_cpitemtext_on_clip_rect(void* self, QRect* (*callback)());

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemText*
/// @param painter QCPPainter*
void q_cpitemtext_apply_default_antialiasing_hint(void* self, void* painter);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemText*
/// @param painter QCPPainter*
void q_cpitemtext_qbase_apply_default_antialiasing_hint(void* self, void* painter);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemText*
/// @param callback void func(QCPItemText* self, QCPPainter* painter)
void q_cpitemtext_on_apply_default_antialiasing_hint(void* self, void (*callback)(void*, void*));

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemText*
/// @param event QMouseEvent*
/// @param additive bool
/// @param details QVariant*
/// @param selectionStateChanged bool*
void q_cpitemtext_select_event(void* self, void* event, bool additive, void* details, bool* selectionStateChanged);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemText*
/// @param event QMouseEvent*
/// @param additive bool
/// @param details QVariant*
/// @param selectionStateChanged bool*
void q_cpitemtext_qbase_select_event(void* self, void* event, bool additive, void* details, bool* selectionStateChanged);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemText*
/// @param callback void func(QCPItemText* self, QMouseEvent* event, bool additive, QVariant* details, bool* selectionStateChanged)
void q_cpitemtext_on_select_event(void* self, void (*callback)(void*, void*, bool, void*, bool*));

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemText*
/// @param selectionStateChanged bool*
void q_cpitemtext_deselect_event(void* self, bool* selectionStateChanged);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemText*
/// @param selectionStateChanged bool*
void q_cpitemtext_qbase_deselect_event(void* self, bool* selectionStateChanged);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemText*
/// @param callback void func(QCPItemText* self, bool* selectionStateChanged)
void q_cpitemtext_on_deselect_event(void* self, void (*callback)(void*, bool*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemText*
/// @param parentPlot QCustomPlot*
void q_cpitemtext_parent_plot_initialized(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemText*
/// @param parentPlot QCustomPlot*
void q_cpitemtext_qbase_parent_plot_initialized(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemText*
/// @param callback void func(QCPItemText* self, QCustomPlot* parentPlot)
void q_cpitemtext_on_parent_plot_initialized(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemText*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cpitemtext_mouse_press_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemText*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cpitemtext_qbase_mouse_press_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemText*
/// @param callback void func(QCPItemText* self, QMouseEvent* event, QVariant* details)
void q_cpitemtext_on_mouse_press_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemText*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cpitemtext_mouse_move_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemText*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cpitemtext_qbase_mouse_move_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemText*
/// @param callback void func(QCPItemText* self, QMouseEvent* event, QPointF* startPos)
void q_cpitemtext_on_mouse_move_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemText*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cpitemtext_mouse_release_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemText*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cpitemtext_qbase_mouse_release_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemText*
/// @param callback void func(QCPItemText* self, QMouseEvent* event, QPointF* startPos)
void q_cpitemtext_on_mouse_release_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemText*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cpitemtext_mouse_double_click_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemText*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cpitemtext_qbase_mouse_double_click_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemText*
/// @param callback void func(QCPItemText* self, QMouseEvent* event, QVariant* details)
void q_cpitemtext_on_mouse_double_click_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemText*
/// @param event QWheelEvent*
void q_cpitemtext_wheel_event(void* self, void* event);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemText*
/// @param event QWheelEvent*
void q_cpitemtext_qbase_wheel_event(void* self, void* event);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemText*
/// @param callback void func(QCPItemText* self, QWheelEvent* event)
void q_cpitemtext_on_wheel_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemText*
/// @param event QEvent*
bool q_cpitemtext_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemText*
/// @param event QEvent*
bool q_cpitemtext_qbase_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemText*
/// @param callback bool func(QCPItemText* self, QEvent* event)
void q_cpitemtext_on_event(void* self, bool (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemText*
/// @param watched QObject*
/// @param event QEvent*
bool q_cpitemtext_event_filter(void* self, void* watched, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemText*
/// @param watched QObject*
/// @param event QEvent*
bool q_cpitemtext_qbase_event_filter(void* self, void* watched, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemText*
/// @param callback bool func(QCPItemText* self, QObject* watched, QEvent* event)
void q_cpitemtext_on_event_filter(void* self, bool (*callback)(void*, void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemText*
/// @param event QTimerEvent*
void q_cpitemtext_timer_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemText*
/// @param event QTimerEvent*
void q_cpitemtext_qbase_timer_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemText*
/// @param callback void func(QCPItemText* self, QTimerEvent* event)
void q_cpitemtext_on_timer_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemText*
/// @param event QChildEvent*
void q_cpitemtext_child_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemText*
/// @param event QChildEvent*
void q_cpitemtext_qbase_child_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemText*
/// @param callback void func(QCPItemText* self, QChildEvent* event)
void q_cpitemtext_on_child_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemText*
/// @param event QEvent*
void q_cpitemtext_custom_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemText*
/// @param event QEvent*
void q_cpitemtext_qbase_custom_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemText*
/// @param callback void func(QCPItemText* self, QEvent* event)
void q_cpitemtext_on_custom_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemText*
/// @param signal QMetaMethod*
void q_cpitemtext_connect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemText*
/// @param signal QMetaMethod*
void q_cpitemtext_qbase_connect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemText*
/// @param callback void func(QCPItemText* self, QMetaMethod* signal)
void q_cpitemtext_on_connect_notify(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemText*
/// @param signal QMetaMethod*
void q_cpitemtext_disconnect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemText*
/// @param signal QMetaMethod*
void q_cpitemtext_qbase_disconnect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemText*
/// @param callback void func(QCPItemText* self, QMetaMethod* signal)
void q_cpitemtext_on_disconnect_notify(void* self, void (*callback)(void*, void*));

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemText*
/// @param rect QRectF*
/// @param pos QPointF*
/// @param filledRect bool
double q_cpitemtext_rect_distance(void* self, void* rect, void* pos, bool filledRect);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemText*
/// @param rect QRectF*
/// @param pos QPointF*
/// @param filledRect bool
double q_cpitemtext_qbase_rect_distance(void* self, void* rect, void* pos, bool filledRect);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemText*
/// @param callback double func(QCPItemText* self, QRectF* rect, QPointF* pos, bool filledRect)
void q_cpitemtext_on_rect_distance(void* self, double (*callback)(void*, void*, void*, bool));

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemText*
/// @param name const char*
QCPItemPosition* q_cpitemtext_create_position(void* self, const char* name);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemText*
/// @param name const char*
QCPItemPosition* q_cpitemtext_qbase_create_position(void* self, const char* name);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemText*
/// @param callback QCPItemPosition* func(QCPItemText* self, const char* name)
void q_cpitemtext_on_create_position(void* self, QCPItemPosition* (*callback)(void*, const char*));

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemText*
/// @param name const char*
/// @param anchorId int
QCPItemAnchor* q_cpitemtext_create_anchor(void* self, const char* name, int anchorId);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemText*
/// @param name const char*
/// @param anchorId int
QCPItemAnchor* q_cpitemtext_qbase_create_anchor(void* self, const char* name, int anchorId);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemText*
/// @param callback QCPItemAnchor* func(QCPItemText* self, const char* name, int anchorId)
void q_cpitemtext_on_create_anchor(void* self, QCPItemAnchor* (*callback)(void*, const char*, int));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemText*
/// @param parentPlot QCustomPlot*
void q_cpitemtext_initialize_parent_plot(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemText*
/// @param parentPlot QCustomPlot*
void q_cpitemtext_qbase_initialize_parent_plot(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemText*
/// @param callback void func(QCPItemText* self, QCustomPlot* parentPlot)
void q_cpitemtext_on_initialize_parent_plot(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemText*
/// @param parentLayerable QCPLayerable*
void q_cpitemtext_set_parent_layerable(void* self, void* parentLayerable);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemText*
/// @param parentLayerable QCPLayerable*
void q_cpitemtext_qbase_set_parent_layerable(void* self, void* parentLayerable);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemText*
/// @param callback void func(QCPItemText* self, QCPLayerable* parentLayerable)
void q_cpitemtext_on_set_parent_layerable(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemText*
/// @param layer QCPLayer*
/// @param prepend bool
bool q_cpitemtext_move_to_layer(void* self, void* layer, bool prepend);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemText*
/// @param layer QCPLayer*
/// @param prepend bool
bool q_cpitemtext_qbase_move_to_layer(void* self, void* layer, bool prepend);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemText*
/// @param callback bool func(QCPItemText* self, QCPLayer* layer, bool prepend)
void q_cpitemtext_on_move_to_layer(void* self, bool (*callback)(void*, void*, bool));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemText*
/// @param painter QCPPainter*
/// @param localAntialiased bool
/// @param overrideElement enum QCP__AntialiasedElement
void q_cpitemtext_apply_antialiasing_hint(void* self, void* painter, bool localAntialiased, int32_t overrideElement);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemText*
/// @param painter QCPPainter*
/// @param localAntialiased bool
/// @param overrideElement enum QCP__AntialiasedElement
void q_cpitemtext_qbase_apply_antialiasing_hint(void* self, void* painter, bool localAntialiased, int32_t overrideElement);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemText*
/// @param callback void func(QCPItemText* self, QCPPainter* painter, bool localAntialiased, enum QCP__AntialiasedElement overrideElement)
void q_cpitemtext_on_apply_antialiasing_hint(void* self, void (*callback)(void*, void*, bool, int32_t));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemText*
QObject* q_cpitemtext_sender(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemText*
QObject* q_cpitemtext_qbase_sender(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemText*
/// @param callback QObject* func()
void q_cpitemtext_on_sender(void* self, QObject* (*callback)());

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemText*
int32_t q_cpitemtext_sender_signal_index(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemText*
int32_t q_cpitemtext_qbase_sender_signal_index(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemText*
/// @param callback int32_t func()
void q_cpitemtext_on_sender_signal_index(void* self, int32_t (*callback)());

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemText*
/// @param signal const char*
int32_t q_cpitemtext_receivers(void* self, const char* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemText*
/// @param signal const char*
int32_t q_cpitemtext_qbase_receivers(void* self, const char* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemText*
/// @param callback int32_t func(QCPItemText* self, const char* signal)
void q_cpitemtext_on_receivers(void* self, int32_t (*callback)(void*, const char*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemText*
/// @param signal QMetaMethod*
bool q_cpitemtext_is_signal_connected(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemText*
/// @param signal QMetaMethod*
bool q_cpitemtext_qbase_is_signal_connected(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemText*
/// @param callback bool func(QCPItemText* self, QMetaMethod* signal)
void q_cpitemtext_on_is_signal_connected(void* self, bool (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#objectNameChanged)
///
/// Wrapper to allow calling private signal
///
/// @param self QCPItemText*
/// @param callback void func(QCPItemText* self, const char* objectName)
void q_cpitemtext_on_object_name_changed(void* self, void (*callback)(void*, const char*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemText.html)
///
/// Delete this object from C++ memory.
///
/// @param self QCPItemText*
void q_cpitemtext_delete(void* self);

/// https://www.qcustomplot.com/documentation/classQCPItemEllipse.html

/// q_cpitemellipse_new constructs a new QCPItemEllipse object.
///
/// @param parentPlot QCustomPlot*
QCPItemEllipse* q_cpitemellipse_new(void* parentPlot);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#metaObject)
///
/// @param self QCPItemEllipse*
const QMetaObject* q_cpitemellipse_meta_object(void* self);

/// @param self QCPItemEllipse*
/// @param param1 const char*
void* q_cpitemellipse_metacast(void* self, const char* param1);

/// @param self QCPItemEllipse*
/// @param param1 enum QMetaObject__Call
/// @param param2 int
/// @param param3 void*
int32_t q_cpitemellipse_metacall(void* self, int32_t param1, int param2, void* param3);

/// Allows for overriding the related default method
///
/// @param self QCPItemEllipse*
/// @param callback int32_t func(QCPItemEllipse* self, enum QMetaObject__Call param1, int param2, void* param3)
void q_cpitemellipse_on_metacall(void* self, int32_t (*callback)(void*, int32_t, int, void*));

/// Base class method implementation
///
/// @param self QCPItemEllipse*
/// @param param1 enum QMetaObject__Call
/// @param param2 int
/// @param param3 void*
int32_t q_cpitemellipse_qbase_metacall(void* self, int32_t param1, int param2, void* param3);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
const char* q_cpitemellipse_tr(const char* s);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemEllipse.html)
///
/// @param self QCPItemEllipse*
QPen* q_cpitemellipse_pen(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemEllipse.html)
///
/// @param self QCPItemEllipse*
QPen* q_cpitemellipse_selected_pen(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemEllipse.html)
///
/// @param self QCPItemEllipse*
QBrush* q_cpitemellipse_brush(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemEllipse.html)
///
/// @param self QCPItemEllipse*
QBrush* q_cpitemellipse_selected_brush(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemEllipse.html)
///
/// @param self QCPItemEllipse*
/// @param pen QPen*
void q_cpitemellipse_set_pen(void* self, void* pen);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemEllipse.html)
///
/// @param self QCPItemEllipse*
/// @param pen QPen*
void q_cpitemellipse_set_selected_pen(void* self, void* pen);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemEllipse.html)
///
/// @param self QCPItemEllipse*
/// @param brush QBrush*
void q_cpitemellipse_set_brush(void* self, void* brush);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemEllipse.html)
///
/// @param self QCPItemEllipse*
/// @param brush QBrush*
void q_cpitemellipse_set_selected_brush(void* self, void* brush);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemEllipse.html)
///
/// @param self QCPItemEllipse*
/// @param pos QPointF*
/// @param onlySelectable bool
/// @param details QVariant*
double q_cpitemellipse_select_test(void* self, void* pos, bool onlySelectable, void* details);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemEllipse.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPItemEllipse*
/// @param callback double func(QCPItemEllipse* self, QPointF* pos, bool onlySelectable, QVariant* details)
void q_cpitemellipse_on_select_test(void* self, double (*callback)(void*, void*, bool, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemEllipse.html)
///
/// Base class method implementation
///
/// @param self QCPItemEllipse*
/// @param pos QPointF*
/// @param onlySelectable bool
/// @param details QVariant*
double q_cpitemellipse_qbase_select_test(void* self, void* pos, bool onlySelectable, void* details);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemEllipse.html)
///
/// @param self QCPItemEllipse*
const QCPItemPosition* q_cpitemellipse_top_left(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemEllipse.html)
///
/// @param self QCPItemEllipse*
const QCPItemPosition* q_cpitemellipse_bottom_right(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemEllipse.html)
///
/// @param self QCPItemEllipse*
const QCPItemAnchor* q_cpitemellipse_top_left_rim(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemEllipse.html)
///
/// @param self QCPItemEllipse*
const QCPItemAnchor* q_cpitemellipse_top(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemEllipse.html)
///
/// @param self QCPItemEllipse*
const QCPItemAnchor* q_cpitemellipse_top_right_rim(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemEllipse.html)
///
/// @param self QCPItemEllipse*
const QCPItemAnchor* q_cpitemellipse_right(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemEllipse.html)
///
/// @param self QCPItemEllipse*
const QCPItemAnchor* q_cpitemellipse_bottom_right_rim(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemEllipse.html)
///
/// @param self QCPItemEllipse*
const QCPItemAnchor* q_cpitemellipse_bottom(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemEllipse.html)
///
/// @param self QCPItemEllipse*
const QCPItemAnchor* q_cpitemellipse_bottom_left_rim(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemEllipse.html)
///
/// @param self QCPItemEllipse*
const QCPItemAnchor* q_cpitemellipse_left(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemEllipse.html)
///
/// @param self QCPItemEllipse*
const QCPItemAnchor* q_cpitemellipse_center(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemEllipse.html)
///
/// @param self QCPItemEllipse*
/// @param painter QCPPainter*
void q_cpitemellipse_draw(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemEllipse.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPItemEllipse*
/// @param callback void func(QCPItemEllipse* self, QCPPainter* painter)
void q_cpitemellipse_on_draw(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemEllipse.html)
///
/// Base class method implementation
///
/// @param self QCPItemEllipse*
/// @param painter QCPPainter*
void q_cpitemellipse_qbase_draw(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemEllipse.html)
///
/// @param self QCPItemEllipse*
/// @param anchorId int
QPointF* q_cpitemellipse_anchor_pixel_position(void* self, int anchorId);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemEllipse.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPItemEllipse*
/// @param callback QPointF* func(QCPItemEllipse* self, int anchorId)
void q_cpitemellipse_on_anchor_pixel_position(void* self, QPointF* (*callback)(void*, int));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemEllipse.html)
///
/// Base class method implementation
///
/// @param self QCPItemEllipse*
/// @param anchorId int
QPointF* q_cpitemellipse_qbase_anchor_pixel_position(void* self, int anchorId);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemEllipse.html)
///
/// @param self QCPItemEllipse*
QPen* q_cpitemellipse_main_pen(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemEllipse.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPItemEllipse*
/// @param callback QPen* func()
void q_cpitemellipse_on_main_pen(void* self, QPen* (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemEllipse.html)
///
/// Base class method implementation
///
/// @param self QCPItemEllipse*
QPen* q_cpitemellipse_qbase_main_pen(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemEllipse.html)
///
/// @param self QCPItemEllipse*
QBrush* q_cpitemellipse_main_brush(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemEllipse.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPItemEllipse*
/// @param callback QBrush* func()
void q_cpitemellipse_on_main_brush(void* self, QBrush* (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemEllipse.html)
///
/// Base class method implementation
///
/// @param self QCPItemEllipse*
QBrush* q_cpitemellipse_qbase_main_brush(void* self);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
/// @param c const char*
const char* q_cpitemellipse_tr2(const char* s, const char* c);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
/// @param c const char*
/// @param n int
const char* q_cpitemellipse_tr3(const char* s, const char* c, int n);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemEllipse*
bool q_cpitemellipse_clip_to_axis_rect(void* self);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemEllipse*
QCPAxisRect* q_cpitemellipse_clip_axis_rect(void* self);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemEllipse*
bool q_cpitemellipse_selectable(void* self);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemEllipse*
bool q_cpitemellipse_selected(void* self);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemEllipse*
/// @param clip bool
void q_cpitemellipse_set_clip_to_axis_rect(void* self, bool clip);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemEllipse*
/// @param rect QCPAxisRect*
void q_cpitemellipse_set_clip_axis_rect(void* self, void* rect);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemEllipse*
/// @param selectable bool
void q_cpitemellipse_set_selectable(void* self, bool selectable);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemEllipse*
/// @param selected bool
void q_cpitemellipse_set_selected(void* self, bool selected);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemEllipse*
libqt_list /* of QCPItemPosition* */ q_cpitemellipse_positions(void* self);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemEllipse*
libqt_list /* of QCPItemAnchor* */ q_cpitemellipse_anchors(void* self);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemEllipse*
/// @param name const char*
QCPItemPosition* q_cpitemellipse_position(void* self, const char* name);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemEllipse*
/// @param name const char*
QCPItemAnchor* q_cpitemellipse_anchor(void* self, const char* name);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemEllipse*
/// @param name const char*
bool q_cpitemellipse_has_anchor(void* self, const char* name);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemEllipse*
/// @param selected bool
void q_cpitemellipse_selection_changed(void* self, bool selected);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemEllipse*
/// @param callback void func(QCPItemEllipse* self, bool selected)
void q_cpitemellipse_on_selection_changed(void* self, void (*callback)(void*, bool));

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemEllipse*
/// @param selectable bool
void q_cpitemellipse_selectable_changed(void* self, bool selectable);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemEllipse*
/// @param callback void func(QCPItemEllipse* self, bool selectable)
void q_cpitemellipse_on_selectable_changed(void* self, void (*callback)(void*, bool));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPItemEllipse*
bool q_cpitemellipse_visible(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPItemEllipse*
QCustomPlot* q_cpitemellipse_parent_plot(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPItemEllipse*
QCPLayerable* q_cpitemellipse_parent_layerable(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPItemEllipse*
QCPLayer* q_cpitemellipse_layer(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPItemEllipse*
bool q_cpitemellipse_antialiased(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPItemEllipse*
/// @param on bool
void q_cpitemellipse_set_visible(void* self, bool on);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPItemEllipse*
/// @param layer QCPLayer*
bool q_cpitemellipse_set_layer(void* self, void* layer);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPItemEllipse*
/// @param layerName const char*
bool q_cpitemellipse_set_layer2(void* self, const char* layerName);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPItemEllipse*
/// @param enabled bool
void q_cpitemellipse_set_antialiased(void* self, bool enabled);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPItemEllipse*
bool q_cpitemellipse_real_visibility(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPItemEllipse*
/// @param newLayer QCPLayer*
void q_cpitemellipse_layer_changed(void* self, void* newLayer);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPItemEllipse*
/// @param callback void func(QCPItemEllipse* self, QCPLayer* newLayer)
void q_cpitemellipse_on_layer_changed(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#objectName)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPItemEllipse*
const char* q_cpitemellipse_object_name(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setObjectName)
///
/// @param self QCPItemEllipse*
/// @param name char*
void q_cpitemellipse_set_object_name(void* self, char* name);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isWidgetType)
///
/// @param self QCPItemEllipse*
bool q_cpitemellipse_is_widget_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isWindowType)
///
/// @param self QCPItemEllipse*
bool q_cpitemellipse_is_window_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isQuickItemType)
///
/// @param self QCPItemEllipse*
bool q_cpitemellipse_is_quick_item_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#signalsBlocked)
///
/// @param self QCPItemEllipse*
bool q_cpitemellipse_signals_blocked(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#blockSignals)
///
/// @param self QCPItemEllipse*
/// @param b bool
bool q_cpitemellipse_block_signals(void* self, bool b);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#thread)
///
/// @param self QCPItemEllipse*
QThread* q_cpitemellipse_thread(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#moveToThread)
///
/// @param self QCPItemEllipse*
/// @param thread QThread*
bool q_cpitemellipse_move_to_thread(void* self, void* thread);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#startTimer)
///
/// @param self QCPItemEllipse*
/// @param interval int
int32_t q_cpitemellipse_start_timer(void* self, int interval);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#killTimer)
///
/// @param self QCPItemEllipse*
/// @param id int
void q_cpitemellipse_kill_timer(void* self, int id);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#killTimer)
///
/// @param self QCPItemEllipse*
/// @param id enum Qt__TimerId
void q_cpitemellipse_kill_timer2(void* self, int32_t id);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#children)
///
/// @param self QCPItemEllipse*
libqt_list /* of QObject* */ q_cpitemellipse_children(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setParent)
///
/// @param self QCPItemEllipse*
/// @param parent QObject*
void q_cpitemellipse_set_parent(void* self, void* parent);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#installEventFilter)
///
/// @param self QCPItemEllipse*
/// @param filterObj QObject*
void q_cpitemellipse_install_event_filter(void* self, void* filterObj);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#removeEventFilter)
///
/// @param self QCPItemEllipse*
/// @param obj QObject*
void q_cpitemellipse_remove_event_filter(void* self, void* obj);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param method QMetaMethod*
QMetaObject__Connection* q_cpitemellipse_connect(void* sender, void* signal, void* receiver, void* method);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param self QCPItemEllipse*
/// @param sender QObject*
/// @param signal const char*
/// @param member const char*
QMetaObject__Connection* q_cpitemellipse_connect2(void* self, void* sender, const char* signal, const char* member);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param member QMetaMethod*
bool q_cpitemellipse_disconnect(void* sender, void* signal, void* receiver, void* member);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnect)
///
/// @param param1 QMetaObject__Connection*
bool q_cpitemellipse_disconnect2(void* param1);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dumpObjectTree)
///
/// @param self QCPItemEllipse*
void q_cpitemellipse_dump_object_tree(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dumpObjectInfo)
///
/// @param self QCPItemEllipse*
void q_cpitemellipse_dump_object_info(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setProperty)
///
/// @param self QCPItemEllipse*
/// @param name const char*
/// @param value QVariant*
bool q_cpitemellipse_set_property(void* self, const char* name, void* value);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#property)
///
/// @param self QCPItemEllipse*
/// @param name const char*
QVariant* q_cpitemellipse_property(void* self, const char* name);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dynamicPropertyNames)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPItemEllipse*
const char** q_cpitemellipse_dynamic_property_names(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#bindingStorage)
///
/// @param self QCPItemEllipse*
QBindingStorage* q_cpitemellipse_binding_storage(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#bindingStorage)
///
/// @param self QCPItemEllipse*
const QBindingStorage* q_cpitemellipse_binding_storage2(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPItemEllipse*
void q_cpitemellipse_destroyed(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPItemEllipse*
/// @param callback void func(QCPItemEllipse* self)
void q_cpitemellipse_on_destroyed(void* self, void (*callback)(void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#parent)
///
/// @param self QCPItemEllipse*
QObject* q_cpitemellipse_parent(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#inherits)
///
/// @param self QCPItemEllipse*
/// @param classname const char*
bool q_cpitemellipse_inherits(void* self, const char* classname);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#deleteLater)
///
/// @param self QCPItemEllipse*
void q_cpitemellipse_delete_later(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#moveToThread)
///
/// @param self QCPItemEllipse*
/// @param thread QThread*
/// @param param2 Disambiguated_t*
bool q_cpitemellipse_move_to_thread2(void* self, void* thread, void* param2);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#startTimer)
///
/// @param self QCPItemEllipse*
/// @param interval int
/// @param timerType enum Qt__TimerType
int32_t q_cpitemellipse_start_timer22(void* self, int interval, int32_t timerType);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param method QMetaMethod*
/// @param type enum Qt__ConnectionType
QMetaObject__Connection* q_cpitemellipse_connect5(void* sender, void* signal, void* receiver, void* method, int32_t type);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param self QCPItemEllipse*
/// @param sender QObject*
/// @param signal const char*
/// @param member const char*
/// @param type enum Qt__ConnectionType
QMetaObject__Connection* q_cpitemellipse_connect4(void* self, void* sender, const char* signal, const char* member, int32_t type);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPItemEllipse*
/// @param param1 QObject*
void q_cpitemellipse_destroyed1(void* self, void* param1);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPItemEllipse*
/// @param callback void func(QCPItemEllipse* self, QObject* param1)
void q_cpitemellipse_on_destroyed1(void* self, void (*callback)(void*, void*));

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemEllipse*
///
/// @return enum QCP__Interaction
int32_t q_cpitemellipse_selection_category(void* self);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemEllipse*
///
/// @return enum QCP__Interaction
int32_t q_cpitemellipse_qbase_selection_category(void* self);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemEllipse*
/// @param callback int32_t func()
void q_cpitemellipse_on_selection_category(void* self, int32_t (*callback)());

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemEllipse*
QRect* q_cpitemellipse_clip_rect(void* self);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemEllipse*
QRect* q_cpitemellipse_qbase_clip_rect(void* self);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemEllipse*
/// @param callback QRect* func()
void q_cpitemellipse_on_clip_rect(void* self, QRect* (*callback)());

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemEllipse*
/// @param painter QCPPainter*
void q_cpitemellipse_apply_default_antialiasing_hint(void* self, void* painter);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemEllipse*
/// @param painter QCPPainter*
void q_cpitemellipse_qbase_apply_default_antialiasing_hint(void* self, void* painter);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemEllipse*
/// @param callback void func(QCPItemEllipse* self, QCPPainter* painter)
void q_cpitemellipse_on_apply_default_antialiasing_hint(void* self, void (*callback)(void*, void*));

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemEllipse*
/// @param event QMouseEvent*
/// @param additive bool
/// @param details QVariant*
/// @param selectionStateChanged bool*
void q_cpitemellipse_select_event(void* self, void* event, bool additive, void* details, bool* selectionStateChanged);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemEllipse*
/// @param event QMouseEvent*
/// @param additive bool
/// @param details QVariant*
/// @param selectionStateChanged bool*
void q_cpitemellipse_qbase_select_event(void* self, void* event, bool additive, void* details, bool* selectionStateChanged);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemEllipse*
/// @param callback void func(QCPItemEllipse* self, QMouseEvent* event, bool additive, QVariant* details, bool* selectionStateChanged)
void q_cpitemellipse_on_select_event(void* self, void (*callback)(void*, void*, bool, void*, bool*));

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemEllipse*
/// @param selectionStateChanged bool*
void q_cpitemellipse_deselect_event(void* self, bool* selectionStateChanged);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemEllipse*
/// @param selectionStateChanged bool*
void q_cpitemellipse_qbase_deselect_event(void* self, bool* selectionStateChanged);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemEllipse*
/// @param callback void func(QCPItemEllipse* self, bool* selectionStateChanged)
void q_cpitemellipse_on_deselect_event(void* self, void (*callback)(void*, bool*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemEllipse*
/// @param parentPlot QCustomPlot*
void q_cpitemellipse_parent_plot_initialized(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemEllipse*
/// @param parentPlot QCustomPlot*
void q_cpitemellipse_qbase_parent_plot_initialized(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemEllipse*
/// @param callback void func(QCPItemEllipse* self, QCustomPlot* parentPlot)
void q_cpitemellipse_on_parent_plot_initialized(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemEllipse*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cpitemellipse_mouse_press_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemEllipse*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cpitemellipse_qbase_mouse_press_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemEllipse*
/// @param callback void func(QCPItemEllipse* self, QMouseEvent* event, QVariant* details)
void q_cpitemellipse_on_mouse_press_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemEllipse*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cpitemellipse_mouse_move_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemEllipse*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cpitemellipse_qbase_mouse_move_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemEllipse*
/// @param callback void func(QCPItemEllipse* self, QMouseEvent* event, QPointF* startPos)
void q_cpitemellipse_on_mouse_move_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemEllipse*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cpitemellipse_mouse_release_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemEllipse*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cpitemellipse_qbase_mouse_release_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemEllipse*
/// @param callback void func(QCPItemEllipse* self, QMouseEvent* event, QPointF* startPos)
void q_cpitemellipse_on_mouse_release_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemEllipse*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cpitemellipse_mouse_double_click_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemEllipse*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cpitemellipse_qbase_mouse_double_click_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemEllipse*
/// @param callback void func(QCPItemEllipse* self, QMouseEvent* event, QVariant* details)
void q_cpitemellipse_on_mouse_double_click_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemEllipse*
/// @param event QWheelEvent*
void q_cpitemellipse_wheel_event(void* self, void* event);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemEllipse*
/// @param event QWheelEvent*
void q_cpitemellipse_qbase_wheel_event(void* self, void* event);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemEllipse*
/// @param callback void func(QCPItemEllipse* self, QWheelEvent* event)
void q_cpitemellipse_on_wheel_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemEllipse*
/// @param event QEvent*
bool q_cpitemellipse_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemEllipse*
/// @param event QEvent*
bool q_cpitemellipse_qbase_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemEllipse*
/// @param callback bool func(QCPItemEllipse* self, QEvent* event)
void q_cpitemellipse_on_event(void* self, bool (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemEllipse*
/// @param watched QObject*
/// @param event QEvent*
bool q_cpitemellipse_event_filter(void* self, void* watched, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemEllipse*
/// @param watched QObject*
/// @param event QEvent*
bool q_cpitemellipse_qbase_event_filter(void* self, void* watched, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemEllipse*
/// @param callback bool func(QCPItemEllipse* self, QObject* watched, QEvent* event)
void q_cpitemellipse_on_event_filter(void* self, bool (*callback)(void*, void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemEllipse*
/// @param event QTimerEvent*
void q_cpitemellipse_timer_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemEllipse*
/// @param event QTimerEvent*
void q_cpitemellipse_qbase_timer_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemEllipse*
/// @param callback void func(QCPItemEllipse* self, QTimerEvent* event)
void q_cpitemellipse_on_timer_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemEllipse*
/// @param event QChildEvent*
void q_cpitemellipse_child_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemEllipse*
/// @param event QChildEvent*
void q_cpitemellipse_qbase_child_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemEllipse*
/// @param callback void func(QCPItemEllipse* self, QChildEvent* event)
void q_cpitemellipse_on_child_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemEllipse*
/// @param event QEvent*
void q_cpitemellipse_custom_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemEllipse*
/// @param event QEvent*
void q_cpitemellipse_qbase_custom_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemEllipse*
/// @param callback void func(QCPItemEllipse* self, QEvent* event)
void q_cpitemellipse_on_custom_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemEllipse*
/// @param signal QMetaMethod*
void q_cpitemellipse_connect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemEllipse*
/// @param signal QMetaMethod*
void q_cpitemellipse_qbase_connect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemEllipse*
/// @param callback void func(QCPItemEllipse* self, QMetaMethod* signal)
void q_cpitemellipse_on_connect_notify(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemEllipse*
/// @param signal QMetaMethod*
void q_cpitemellipse_disconnect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemEllipse*
/// @param signal QMetaMethod*
void q_cpitemellipse_qbase_disconnect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemEllipse*
/// @param callback void func(QCPItemEllipse* self, QMetaMethod* signal)
void q_cpitemellipse_on_disconnect_notify(void* self, void (*callback)(void*, void*));

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemEllipse*
/// @param rect QRectF*
/// @param pos QPointF*
/// @param filledRect bool
double q_cpitemellipse_rect_distance(void* self, void* rect, void* pos, bool filledRect);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemEllipse*
/// @param rect QRectF*
/// @param pos QPointF*
/// @param filledRect bool
double q_cpitemellipse_qbase_rect_distance(void* self, void* rect, void* pos, bool filledRect);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemEllipse*
/// @param callback double func(QCPItemEllipse* self, QRectF* rect, QPointF* pos, bool filledRect)
void q_cpitemellipse_on_rect_distance(void* self, double (*callback)(void*, void*, void*, bool));

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemEllipse*
/// @param name const char*
QCPItemPosition* q_cpitemellipse_create_position(void* self, const char* name);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemEllipse*
/// @param name const char*
QCPItemPosition* q_cpitemellipse_qbase_create_position(void* self, const char* name);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemEllipse*
/// @param callback QCPItemPosition* func(QCPItemEllipse* self, const char* name)
void q_cpitemellipse_on_create_position(void* self, QCPItemPosition* (*callback)(void*, const char*));

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemEllipse*
/// @param name const char*
/// @param anchorId int
QCPItemAnchor* q_cpitemellipse_create_anchor(void* self, const char* name, int anchorId);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemEllipse*
/// @param name const char*
/// @param anchorId int
QCPItemAnchor* q_cpitemellipse_qbase_create_anchor(void* self, const char* name, int anchorId);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemEllipse*
/// @param callback QCPItemAnchor* func(QCPItemEllipse* self, const char* name, int anchorId)
void q_cpitemellipse_on_create_anchor(void* self, QCPItemAnchor* (*callback)(void*, const char*, int));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemEllipse*
/// @param parentPlot QCustomPlot*
void q_cpitemellipse_initialize_parent_plot(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemEllipse*
/// @param parentPlot QCustomPlot*
void q_cpitemellipse_qbase_initialize_parent_plot(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemEllipse*
/// @param callback void func(QCPItemEllipse* self, QCustomPlot* parentPlot)
void q_cpitemellipse_on_initialize_parent_plot(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemEllipse*
/// @param parentLayerable QCPLayerable*
void q_cpitemellipse_set_parent_layerable(void* self, void* parentLayerable);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemEllipse*
/// @param parentLayerable QCPLayerable*
void q_cpitemellipse_qbase_set_parent_layerable(void* self, void* parentLayerable);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemEllipse*
/// @param callback void func(QCPItemEllipse* self, QCPLayerable* parentLayerable)
void q_cpitemellipse_on_set_parent_layerable(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemEllipse*
/// @param layer QCPLayer*
/// @param prepend bool
bool q_cpitemellipse_move_to_layer(void* self, void* layer, bool prepend);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemEllipse*
/// @param layer QCPLayer*
/// @param prepend bool
bool q_cpitemellipse_qbase_move_to_layer(void* self, void* layer, bool prepend);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemEllipse*
/// @param callback bool func(QCPItemEllipse* self, QCPLayer* layer, bool prepend)
void q_cpitemellipse_on_move_to_layer(void* self, bool (*callback)(void*, void*, bool));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemEllipse*
/// @param painter QCPPainter*
/// @param localAntialiased bool
/// @param overrideElement enum QCP__AntialiasedElement
void q_cpitemellipse_apply_antialiasing_hint(void* self, void* painter, bool localAntialiased, int32_t overrideElement);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemEllipse*
/// @param painter QCPPainter*
/// @param localAntialiased bool
/// @param overrideElement enum QCP__AntialiasedElement
void q_cpitemellipse_qbase_apply_antialiasing_hint(void* self, void* painter, bool localAntialiased, int32_t overrideElement);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemEllipse*
/// @param callback void func(QCPItemEllipse* self, QCPPainter* painter, bool localAntialiased, enum QCP__AntialiasedElement overrideElement)
void q_cpitemellipse_on_apply_antialiasing_hint(void* self, void (*callback)(void*, void*, bool, int32_t));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemEllipse*
QObject* q_cpitemellipse_sender(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemEllipse*
QObject* q_cpitemellipse_qbase_sender(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemEllipse*
/// @param callback QObject* func()
void q_cpitemellipse_on_sender(void* self, QObject* (*callback)());

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemEllipse*
int32_t q_cpitemellipse_sender_signal_index(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemEllipse*
int32_t q_cpitemellipse_qbase_sender_signal_index(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemEllipse*
/// @param callback int32_t func()
void q_cpitemellipse_on_sender_signal_index(void* self, int32_t (*callback)());

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemEllipse*
/// @param signal const char*
int32_t q_cpitemellipse_receivers(void* self, const char* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemEllipse*
/// @param signal const char*
int32_t q_cpitemellipse_qbase_receivers(void* self, const char* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemEllipse*
/// @param callback int32_t func(QCPItemEllipse* self, const char* signal)
void q_cpitemellipse_on_receivers(void* self, int32_t (*callback)(void*, const char*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemEllipse*
/// @param signal QMetaMethod*
bool q_cpitemellipse_is_signal_connected(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemEllipse*
/// @param signal QMetaMethod*
bool q_cpitemellipse_qbase_is_signal_connected(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemEllipse*
/// @param callback bool func(QCPItemEllipse* self, QMetaMethod* signal)
void q_cpitemellipse_on_is_signal_connected(void* self, bool (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#objectNameChanged)
///
/// Wrapper to allow calling private signal
///
/// @param self QCPItemEllipse*
/// @param callback void func(QCPItemEllipse* self, const char* objectName)
void q_cpitemellipse_on_object_name_changed(void* self, void (*callback)(void*, const char*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemEllipse.html)
///
/// Delete this object from C++ memory.
///
/// @param self QCPItemEllipse*
void q_cpitemellipse_delete(void* self);

/// https://www.qcustomplot.com/documentation/classQCPItemPixmap.html

/// q_cpitempixmap_new constructs a new QCPItemPixmap object.
///
/// @param parentPlot QCustomPlot*
QCPItemPixmap* q_cpitempixmap_new(void* parentPlot);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#metaObject)
///
/// @param self QCPItemPixmap*
const QMetaObject* q_cpitempixmap_meta_object(void* self);

/// @param self QCPItemPixmap*
/// @param param1 const char*
void* q_cpitempixmap_metacast(void* self, const char* param1);

/// @param self QCPItemPixmap*
/// @param param1 enum QMetaObject__Call
/// @param param2 int
/// @param param3 void*
int32_t q_cpitempixmap_metacall(void* self, int32_t param1, int param2, void* param3);

/// Allows for overriding the related default method
///
/// @param self QCPItemPixmap*
/// @param callback int32_t func(QCPItemPixmap* self, enum QMetaObject__Call param1, int param2, void* param3)
void q_cpitempixmap_on_metacall(void* self, int32_t (*callback)(void*, int32_t, int, void*));

/// Base class method implementation
///
/// @param self QCPItemPixmap*
/// @param param1 enum QMetaObject__Call
/// @param param2 int
/// @param param3 void*
int32_t q_cpitempixmap_qbase_metacall(void* self, int32_t param1, int param2, void* param3);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
const char* q_cpitempixmap_tr(const char* s);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemPixmap.html)
///
/// @param self QCPItemPixmap*
QPixmap* q_cpitempixmap_pixmap(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemPixmap.html)
///
/// @param self QCPItemPixmap*
bool q_cpitempixmap_scaled(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemPixmap.html)
///
/// @param self QCPItemPixmap*
///
/// @return enum Qt__AspectRatioMode
int32_t q_cpitempixmap_aspect_ratio_mode(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemPixmap.html)
///
/// @param self QCPItemPixmap*
///
/// @return enum Qt__TransformationMode
int32_t q_cpitempixmap_transformation_mode(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemPixmap.html)
///
/// @param self QCPItemPixmap*
QPen* q_cpitempixmap_pen(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemPixmap.html)
///
/// @param self QCPItemPixmap*
QPen* q_cpitempixmap_selected_pen(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemPixmap.html)
///
/// @param self QCPItemPixmap*
/// @param pixmap QPixmap*
void q_cpitempixmap_set_pixmap(void* self, void* pixmap);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemPixmap.html)
///
/// @param self QCPItemPixmap*
/// @param scaled bool
void q_cpitempixmap_set_scaled(void* self, bool scaled);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemPixmap.html)
///
/// @param self QCPItemPixmap*
/// @param pen QPen*
void q_cpitempixmap_set_pen(void* self, void* pen);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemPixmap.html)
///
/// @param self QCPItemPixmap*
/// @param pen QPen*
void q_cpitempixmap_set_selected_pen(void* self, void* pen);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemPixmap.html)
///
/// @param self QCPItemPixmap*
/// @param pos QPointF*
/// @param onlySelectable bool
/// @param details QVariant*
double q_cpitempixmap_select_test(void* self, void* pos, bool onlySelectable, void* details);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemPixmap.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPItemPixmap*
/// @param callback double func(QCPItemPixmap* self, QPointF* pos, bool onlySelectable, QVariant* details)
void q_cpitempixmap_on_select_test(void* self, double (*callback)(void*, void*, bool, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemPixmap.html)
///
/// Base class method implementation
///
/// @param self QCPItemPixmap*
/// @param pos QPointF*
/// @param onlySelectable bool
/// @param details QVariant*
double q_cpitempixmap_qbase_select_test(void* self, void* pos, bool onlySelectable, void* details);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemPixmap.html)
///
/// @param self QCPItemPixmap*
const QCPItemPosition* q_cpitempixmap_top_left(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemPixmap.html)
///
/// @param self QCPItemPixmap*
const QCPItemPosition* q_cpitempixmap_bottom_right(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemPixmap.html)
///
/// @param self QCPItemPixmap*
const QCPItemAnchor* q_cpitempixmap_top(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemPixmap.html)
///
/// @param self QCPItemPixmap*
const QCPItemAnchor* q_cpitempixmap_top_right(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemPixmap.html)
///
/// @param self QCPItemPixmap*
const QCPItemAnchor* q_cpitempixmap_right(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemPixmap.html)
///
/// @param self QCPItemPixmap*
const QCPItemAnchor* q_cpitempixmap_bottom(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemPixmap.html)
///
/// @param self QCPItemPixmap*
const QCPItemAnchor* q_cpitempixmap_bottom_left(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemPixmap.html)
///
/// @param self QCPItemPixmap*
const QCPItemAnchor* q_cpitempixmap_left(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemPixmap.html)
///
/// @param self QCPItemPixmap*
/// @param painter QCPPainter*
void q_cpitempixmap_draw(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemPixmap.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPItemPixmap*
/// @param callback void func(QCPItemPixmap* self, QCPPainter* painter)
void q_cpitempixmap_on_draw(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemPixmap.html)
///
/// Base class method implementation
///
/// @param self QCPItemPixmap*
/// @param painter QCPPainter*
void q_cpitempixmap_qbase_draw(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemPixmap.html)
///
/// @param self QCPItemPixmap*
/// @param anchorId int
QPointF* q_cpitempixmap_anchor_pixel_position(void* self, int anchorId);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemPixmap.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPItemPixmap*
/// @param callback QPointF* func(QCPItemPixmap* self, int anchorId)
void q_cpitempixmap_on_anchor_pixel_position(void* self, QPointF* (*callback)(void*, int));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemPixmap.html)
///
/// Base class method implementation
///
/// @param self QCPItemPixmap*
/// @param anchorId int
QPointF* q_cpitempixmap_qbase_anchor_pixel_position(void* self, int anchorId);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemPixmap.html)
///
/// @param self QCPItemPixmap*
void q_cpitempixmap_update_scaled_pixmap(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemPixmap.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPItemPixmap*
/// @param callback void func()
void q_cpitempixmap_on_update_scaled_pixmap(void* self, void (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemPixmap.html)
///
/// Base class method implementation
///
/// @param self QCPItemPixmap*
void q_cpitempixmap_qbase_update_scaled_pixmap(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemPixmap.html)
///
/// @param self QCPItemPixmap*
QRect* q_cpitempixmap_get_final_rect(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemPixmap.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPItemPixmap*
/// @param callback QRect* func()
void q_cpitempixmap_on_get_final_rect(void* self, QRect* (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemPixmap.html)
///
/// Base class method implementation
///
/// @param self QCPItemPixmap*
QRect* q_cpitempixmap_qbase_get_final_rect(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemPixmap.html)
///
/// @param self QCPItemPixmap*
QPen* q_cpitempixmap_main_pen(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemPixmap.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPItemPixmap*
/// @param callback QPen* func()
void q_cpitempixmap_on_main_pen(void* self, QPen* (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemPixmap.html)
///
/// Base class method implementation
///
/// @param self QCPItemPixmap*
QPen* q_cpitempixmap_qbase_main_pen(void* self);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
/// @param c const char*
const char* q_cpitempixmap_tr2(const char* s, const char* c);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
/// @param c const char*
/// @param n int
const char* q_cpitempixmap_tr3(const char* s, const char* c, int n);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemPixmap.html)
///
/// @param self QCPItemPixmap*
/// @param scaled bool
/// @param aspectRatioMode enum Qt__AspectRatioMode
void q_cpitempixmap_set_scaled2(void* self, bool scaled, int32_t aspectRatioMode);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemPixmap.html)
///
/// @param self QCPItemPixmap*
/// @param scaled bool
/// @param aspectRatioMode enum Qt__AspectRatioMode
/// @param transformationMode enum Qt__TransformationMode
void q_cpitempixmap_set_scaled3(void* self, bool scaled, int32_t aspectRatioMode, int32_t transformationMode);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemPixmap.html)
///
/// @param self QCPItemPixmap*
/// @param finalRect QRect*
void q_cpitempixmap_update_scaled_pixmap1(void* self, void* finalRect);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemPixmap.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPItemPixmap*
/// @param callback void func(QCPItemPixmap* self, QRect* finalRect)
void q_cpitempixmap_on_update_scaled_pixmap1(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemPixmap.html)
///
/// Base class method implementation
///
/// @param self QCPItemPixmap*
/// @param finalRect QRect*
void q_cpitempixmap_qbase_update_scaled_pixmap1(void* self, void* finalRect);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemPixmap.html)
///
/// @param self QCPItemPixmap*
/// @param finalRect QRect*
/// @param flipHorz bool
void q_cpitempixmap_update_scaled_pixmap2(void* self, void* finalRect, bool flipHorz);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemPixmap.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPItemPixmap*
/// @param callback void func(QCPItemPixmap* self, QRect* finalRect, bool flipHorz)
void q_cpitempixmap_on_update_scaled_pixmap2(void* self, void (*callback)(void*, void*, bool));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemPixmap.html)
///
/// Base class method implementation
///
/// @param self QCPItemPixmap*
/// @param finalRect QRect*
/// @param flipHorz bool
void q_cpitempixmap_qbase_update_scaled_pixmap2(void* self, void* finalRect, bool flipHorz);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemPixmap.html)
///
/// @param self QCPItemPixmap*
/// @param finalRect QRect*
/// @param flipHorz bool
/// @param flipVert bool
void q_cpitempixmap_update_scaled_pixmap3(void* self, void* finalRect, bool flipHorz, bool flipVert);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemPixmap.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPItemPixmap*
/// @param callback void func(QCPItemPixmap* self, QRect* finalRect, bool flipHorz, bool flipVert)
void q_cpitempixmap_on_update_scaled_pixmap3(void* self, void (*callback)(void*, void*, bool, bool));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemPixmap.html)
///
/// Base class method implementation
///
/// @param self QCPItemPixmap*
/// @param finalRect QRect*
/// @param flipHorz bool
/// @param flipVert bool
void q_cpitempixmap_qbase_update_scaled_pixmap3(void* self, void* finalRect, bool flipHorz, bool flipVert);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemPixmap.html)
///
/// @param self QCPItemPixmap*
/// @param flippedHorz bool*
QRect* q_cpitempixmap_get_final_rect1(void* self, bool* flippedHorz);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemPixmap.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPItemPixmap*
/// @param callback QRect* func(QCPItemPixmap* self, bool* flippedHorz)
void q_cpitempixmap_on_get_final_rect1(void* self, QRect* (*callback)(void*, bool*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemPixmap.html)
///
/// Base class method implementation
///
/// @param self QCPItemPixmap*
/// @param flippedHorz bool*
QRect* q_cpitempixmap_qbase_get_final_rect1(void* self, bool* flippedHorz);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemPixmap.html)
///
/// @param self QCPItemPixmap*
/// @param flippedHorz bool*
/// @param flippedVert bool*
QRect* q_cpitempixmap_get_final_rect2(void* self, bool* flippedHorz, bool* flippedVert);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemPixmap.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPItemPixmap*
/// @param callback QRect* func(QCPItemPixmap* self, bool* flippedHorz, bool* flippedVert)
void q_cpitempixmap_on_get_final_rect2(void* self, QRect* (*callback)(void*, bool*, bool*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemPixmap.html)
///
/// Base class method implementation
///
/// @param self QCPItemPixmap*
/// @param flippedHorz bool*
/// @param flippedVert bool*
QRect* q_cpitempixmap_qbase_get_final_rect2(void* self, bool* flippedHorz, bool* flippedVert);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemPixmap*
bool q_cpitempixmap_clip_to_axis_rect(void* self);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemPixmap*
QCPAxisRect* q_cpitempixmap_clip_axis_rect(void* self);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemPixmap*
bool q_cpitempixmap_selectable(void* self);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemPixmap*
bool q_cpitempixmap_selected(void* self);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemPixmap*
/// @param clip bool
void q_cpitempixmap_set_clip_to_axis_rect(void* self, bool clip);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemPixmap*
/// @param rect QCPAxisRect*
void q_cpitempixmap_set_clip_axis_rect(void* self, void* rect);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemPixmap*
/// @param selectable bool
void q_cpitempixmap_set_selectable(void* self, bool selectable);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemPixmap*
/// @param selected bool
void q_cpitempixmap_set_selected(void* self, bool selected);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemPixmap*
libqt_list /* of QCPItemPosition* */ q_cpitempixmap_positions(void* self);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemPixmap*
libqt_list /* of QCPItemAnchor* */ q_cpitempixmap_anchors(void* self);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemPixmap*
/// @param name const char*
QCPItemPosition* q_cpitempixmap_position(void* self, const char* name);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemPixmap*
/// @param name const char*
QCPItemAnchor* q_cpitempixmap_anchor(void* self, const char* name);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemPixmap*
/// @param name const char*
bool q_cpitempixmap_has_anchor(void* self, const char* name);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemPixmap*
/// @param selected bool
void q_cpitempixmap_selection_changed(void* self, bool selected);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemPixmap*
/// @param callback void func(QCPItemPixmap* self, bool selected)
void q_cpitempixmap_on_selection_changed(void* self, void (*callback)(void*, bool));

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemPixmap*
/// @param selectable bool
void q_cpitempixmap_selectable_changed(void* self, bool selectable);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemPixmap*
/// @param callback void func(QCPItemPixmap* self, bool selectable)
void q_cpitempixmap_on_selectable_changed(void* self, void (*callback)(void*, bool));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPItemPixmap*
bool q_cpitempixmap_visible(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPItemPixmap*
QCustomPlot* q_cpitempixmap_parent_plot(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPItemPixmap*
QCPLayerable* q_cpitempixmap_parent_layerable(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPItemPixmap*
QCPLayer* q_cpitempixmap_layer(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPItemPixmap*
bool q_cpitempixmap_antialiased(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPItemPixmap*
/// @param on bool
void q_cpitempixmap_set_visible(void* self, bool on);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPItemPixmap*
/// @param layer QCPLayer*
bool q_cpitempixmap_set_layer(void* self, void* layer);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPItemPixmap*
/// @param layerName const char*
bool q_cpitempixmap_set_layer2(void* self, const char* layerName);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPItemPixmap*
/// @param enabled bool
void q_cpitempixmap_set_antialiased(void* self, bool enabled);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPItemPixmap*
bool q_cpitempixmap_real_visibility(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPItemPixmap*
/// @param newLayer QCPLayer*
void q_cpitempixmap_layer_changed(void* self, void* newLayer);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPItemPixmap*
/// @param callback void func(QCPItemPixmap* self, QCPLayer* newLayer)
void q_cpitempixmap_on_layer_changed(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#objectName)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPItemPixmap*
const char* q_cpitempixmap_object_name(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setObjectName)
///
/// @param self QCPItemPixmap*
/// @param name char*
void q_cpitempixmap_set_object_name(void* self, char* name);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isWidgetType)
///
/// @param self QCPItemPixmap*
bool q_cpitempixmap_is_widget_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isWindowType)
///
/// @param self QCPItemPixmap*
bool q_cpitempixmap_is_window_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isQuickItemType)
///
/// @param self QCPItemPixmap*
bool q_cpitempixmap_is_quick_item_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#signalsBlocked)
///
/// @param self QCPItemPixmap*
bool q_cpitempixmap_signals_blocked(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#blockSignals)
///
/// @param self QCPItemPixmap*
/// @param b bool
bool q_cpitempixmap_block_signals(void* self, bool b);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#thread)
///
/// @param self QCPItemPixmap*
QThread* q_cpitempixmap_thread(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#moveToThread)
///
/// @param self QCPItemPixmap*
/// @param thread QThread*
bool q_cpitempixmap_move_to_thread(void* self, void* thread);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#startTimer)
///
/// @param self QCPItemPixmap*
/// @param interval int
int32_t q_cpitempixmap_start_timer(void* self, int interval);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#killTimer)
///
/// @param self QCPItemPixmap*
/// @param id int
void q_cpitempixmap_kill_timer(void* self, int id);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#killTimer)
///
/// @param self QCPItemPixmap*
/// @param id enum Qt__TimerId
void q_cpitempixmap_kill_timer2(void* self, int32_t id);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#children)
///
/// @param self QCPItemPixmap*
libqt_list /* of QObject* */ q_cpitempixmap_children(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setParent)
///
/// @param self QCPItemPixmap*
/// @param parent QObject*
void q_cpitempixmap_set_parent(void* self, void* parent);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#installEventFilter)
///
/// @param self QCPItemPixmap*
/// @param filterObj QObject*
void q_cpitempixmap_install_event_filter(void* self, void* filterObj);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#removeEventFilter)
///
/// @param self QCPItemPixmap*
/// @param obj QObject*
void q_cpitempixmap_remove_event_filter(void* self, void* obj);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param method QMetaMethod*
QMetaObject__Connection* q_cpitempixmap_connect(void* sender, void* signal, void* receiver, void* method);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param self QCPItemPixmap*
/// @param sender QObject*
/// @param signal const char*
/// @param member const char*
QMetaObject__Connection* q_cpitempixmap_connect2(void* self, void* sender, const char* signal, const char* member);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param member QMetaMethod*
bool q_cpitempixmap_disconnect(void* sender, void* signal, void* receiver, void* member);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnect)
///
/// @param param1 QMetaObject__Connection*
bool q_cpitempixmap_disconnect2(void* param1);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dumpObjectTree)
///
/// @param self QCPItemPixmap*
void q_cpitempixmap_dump_object_tree(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dumpObjectInfo)
///
/// @param self QCPItemPixmap*
void q_cpitempixmap_dump_object_info(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setProperty)
///
/// @param self QCPItemPixmap*
/// @param name const char*
/// @param value QVariant*
bool q_cpitempixmap_set_property(void* self, const char* name, void* value);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#property)
///
/// @param self QCPItemPixmap*
/// @param name const char*
QVariant* q_cpitempixmap_property(void* self, const char* name);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dynamicPropertyNames)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPItemPixmap*
const char** q_cpitempixmap_dynamic_property_names(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#bindingStorage)
///
/// @param self QCPItemPixmap*
QBindingStorage* q_cpitempixmap_binding_storage(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#bindingStorage)
///
/// @param self QCPItemPixmap*
const QBindingStorage* q_cpitempixmap_binding_storage2(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPItemPixmap*
void q_cpitempixmap_destroyed(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPItemPixmap*
/// @param callback void func(QCPItemPixmap* self)
void q_cpitempixmap_on_destroyed(void* self, void (*callback)(void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#parent)
///
/// @param self QCPItemPixmap*
QObject* q_cpitempixmap_parent(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#inherits)
///
/// @param self QCPItemPixmap*
/// @param classname const char*
bool q_cpitempixmap_inherits(void* self, const char* classname);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#deleteLater)
///
/// @param self QCPItemPixmap*
void q_cpitempixmap_delete_later(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#moveToThread)
///
/// @param self QCPItemPixmap*
/// @param thread QThread*
/// @param param2 Disambiguated_t*
bool q_cpitempixmap_move_to_thread2(void* self, void* thread, void* param2);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#startTimer)
///
/// @param self QCPItemPixmap*
/// @param interval int
/// @param timerType enum Qt__TimerType
int32_t q_cpitempixmap_start_timer22(void* self, int interval, int32_t timerType);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param method QMetaMethod*
/// @param type enum Qt__ConnectionType
QMetaObject__Connection* q_cpitempixmap_connect5(void* sender, void* signal, void* receiver, void* method, int32_t type);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param self QCPItemPixmap*
/// @param sender QObject*
/// @param signal const char*
/// @param member const char*
/// @param type enum Qt__ConnectionType
QMetaObject__Connection* q_cpitempixmap_connect4(void* self, void* sender, const char* signal, const char* member, int32_t type);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPItemPixmap*
/// @param param1 QObject*
void q_cpitempixmap_destroyed1(void* self, void* param1);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPItemPixmap*
/// @param callback void func(QCPItemPixmap* self, QObject* param1)
void q_cpitempixmap_on_destroyed1(void* self, void (*callback)(void*, void*));

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemPixmap*
///
/// @return enum QCP__Interaction
int32_t q_cpitempixmap_selection_category(void* self);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemPixmap*
///
/// @return enum QCP__Interaction
int32_t q_cpitempixmap_qbase_selection_category(void* self);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemPixmap*
/// @param callback int32_t func()
void q_cpitempixmap_on_selection_category(void* self, int32_t (*callback)());

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemPixmap*
QRect* q_cpitempixmap_clip_rect(void* self);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemPixmap*
QRect* q_cpitempixmap_qbase_clip_rect(void* self);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemPixmap*
/// @param callback QRect* func()
void q_cpitempixmap_on_clip_rect(void* self, QRect* (*callback)());

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemPixmap*
/// @param painter QCPPainter*
void q_cpitempixmap_apply_default_antialiasing_hint(void* self, void* painter);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemPixmap*
/// @param painter QCPPainter*
void q_cpitempixmap_qbase_apply_default_antialiasing_hint(void* self, void* painter);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemPixmap*
/// @param callback void func(QCPItemPixmap* self, QCPPainter* painter)
void q_cpitempixmap_on_apply_default_antialiasing_hint(void* self, void (*callback)(void*, void*));

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemPixmap*
/// @param event QMouseEvent*
/// @param additive bool
/// @param details QVariant*
/// @param selectionStateChanged bool*
void q_cpitempixmap_select_event(void* self, void* event, bool additive, void* details, bool* selectionStateChanged);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemPixmap*
/// @param event QMouseEvent*
/// @param additive bool
/// @param details QVariant*
/// @param selectionStateChanged bool*
void q_cpitempixmap_qbase_select_event(void* self, void* event, bool additive, void* details, bool* selectionStateChanged);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemPixmap*
/// @param callback void func(QCPItemPixmap* self, QMouseEvent* event, bool additive, QVariant* details, bool* selectionStateChanged)
void q_cpitempixmap_on_select_event(void* self, void (*callback)(void*, void*, bool, void*, bool*));

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemPixmap*
/// @param selectionStateChanged bool*
void q_cpitempixmap_deselect_event(void* self, bool* selectionStateChanged);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemPixmap*
/// @param selectionStateChanged bool*
void q_cpitempixmap_qbase_deselect_event(void* self, bool* selectionStateChanged);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemPixmap*
/// @param callback void func(QCPItemPixmap* self, bool* selectionStateChanged)
void q_cpitempixmap_on_deselect_event(void* self, void (*callback)(void*, bool*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemPixmap*
/// @param parentPlot QCustomPlot*
void q_cpitempixmap_parent_plot_initialized(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemPixmap*
/// @param parentPlot QCustomPlot*
void q_cpitempixmap_qbase_parent_plot_initialized(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemPixmap*
/// @param callback void func(QCPItemPixmap* self, QCustomPlot* parentPlot)
void q_cpitempixmap_on_parent_plot_initialized(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemPixmap*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cpitempixmap_mouse_press_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemPixmap*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cpitempixmap_qbase_mouse_press_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemPixmap*
/// @param callback void func(QCPItemPixmap* self, QMouseEvent* event, QVariant* details)
void q_cpitempixmap_on_mouse_press_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemPixmap*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cpitempixmap_mouse_move_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemPixmap*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cpitempixmap_qbase_mouse_move_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemPixmap*
/// @param callback void func(QCPItemPixmap* self, QMouseEvent* event, QPointF* startPos)
void q_cpitempixmap_on_mouse_move_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemPixmap*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cpitempixmap_mouse_release_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemPixmap*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cpitempixmap_qbase_mouse_release_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemPixmap*
/// @param callback void func(QCPItemPixmap* self, QMouseEvent* event, QPointF* startPos)
void q_cpitempixmap_on_mouse_release_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemPixmap*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cpitempixmap_mouse_double_click_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemPixmap*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cpitempixmap_qbase_mouse_double_click_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemPixmap*
/// @param callback void func(QCPItemPixmap* self, QMouseEvent* event, QVariant* details)
void q_cpitempixmap_on_mouse_double_click_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemPixmap*
/// @param event QWheelEvent*
void q_cpitempixmap_wheel_event(void* self, void* event);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemPixmap*
/// @param event QWheelEvent*
void q_cpitempixmap_qbase_wheel_event(void* self, void* event);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemPixmap*
/// @param callback void func(QCPItemPixmap* self, QWheelEvent* event)
void q_cpitempixmap_on_wheel_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemPixmap*
/// @param event QEvent*
bool q_cpitempixmap_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemPixmap*
/// @param event QEvent*
bool q_cpitempixmap_qbase_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemPixmap*
/// @param callback bool func(QCPItemPixmap* self, QEvent* event)
void q_cpitempixmap_on_event(void* self, bool (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemPixmap*
/// @param watched QObject*
/// @param event QEvent*
bool q_cpitempixmap_event_filter(void* self, void* watched, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemPixmap*
/// @param watched QObject*
/// @param event QEvent*
bool q_cpitempixmap_qbase_event_filter(void* self, void* watched, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemPixmap*
/// @param callback bool func(QCPItemPixmap* self, QObject* watched, QEvent* event)
void q_cpitempixmap_on_event_filter(void* self, bool (*callback)(void*, void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemPixmap*
/// @param event QTimerEvent*
void q_cpitempixmap_timer_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemPixmap*
/// @param event QTimerEvent*
void q_cpitempixmap_qbase_timer_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemPixmap*
/// @param callback void func(QCPItemPixmap* self, QTimerEvent* event)
void q_cpitempixmap_on_timer_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemPixmap*
/// @param event QChildEvent*
void q_cpitempixmap_child_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemPixmap*
/// @param event QChildEvent*
void q_cpitempixmap_qbase_child_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemPixmap*
/// @param callback void func(QCPItemPixmap* self, QChildEvent* event)
void q_cpitempixmap_on_child_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemPixmap*
/// @param event QEvent*
void q_cpitempixmap_custom_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemPixmap*
/// @param event QEvent*
void q_cpitempixmap_qbase_custom_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemPixmap*
/// @param callback void func(QCPItemPixmap* self, QEvent* event)
void q_cpitempixmap_on_custom_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemPixmap*
/// @param signal QMetaMethod*
void q_cpitempixmap_connect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemPixmap*
/// @param signal QMetaMethod*
void q_cpitempixmap_qbase_connect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemPixmap*
/// @param callback void func(QCPItemPixmap* self, QMetaMethod* signal)
void q_cpitempixmap_on_connect_notify(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemPixmap*
/// @param signal QMetaMethod*
void q_cpitempixmap_disconnect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemPixmap*
/// @param signal QMetaMethod*
void q_cpitempixmap_qbase_disconnect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemPixmap*
/// @param callback void func(QCPItemPixmap* self, QMetaMethod* signal)
void q_cpitempixmap_on_disconnect_notify(void* self, void (*callback)(void*, void*));

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemPixmap*
/// @param rect QRectF*
/// @param pos QPointF*
/// @param filledRect bool
double q_cpitempixmap_rect_distance(void* self, void* rect, void* pos, bool filledRect);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemPixmap*
/// @param rect QRectF*
/// @param pos QPointF*
/// @param filledRect bool
double q_cpitempixmap_qbase_rect_distance(void* self, void* rect, void* pos, bool filledRect);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemPixmap*
/// @param callback double func(QCPItemPixmap* self, QRectF* rect, QPointF* pos, bool filledRect)
void q_cpitempixmap_on_rect_distance(void* self, double (*callback)(void*, void*, void*, bool));

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemPixmap*
/// @param name const char*
QCPItemPosition* q_cpitempixmap_create_position(void* self, const char* name);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemPixmap*
/// @param name const char*
QCPItemPosition* q_cpitempixmap_qbase_create_position(void* self, const char* name);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemPixmap*
/// @param callback QCPItemPosition* func(QCPItemPixmap* self, const char* name)
void q_cpitempixmap_on_create_position(void* self, QCPItemPosition* (*callback)(void*, const char*));

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemPixmap*
/// @param name const char*
/// @param anchorId int
QCPItemAnchor* q_cpitempixmap_create_anchor(void* self, const char* name, int anchorId);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemPixmap*
/// @param name const char*
/// @param anchorId int
QCPItemAnchor* q_cpitempixmap_qbase_create_anchor(void* self, const char* name, int anchorId);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemPixmap*
/// @param callback QCPItemAnchor* func(QCPItemPixmap* self, const char* name, int anchorId)
void q_cpitempixmap_on_create_anchor(void* self, QCPItemAnchor* (*callback)(void*, const char*, int));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemPixmap*
/// @param parentPlot QCustomPlot*
void q_cpitempixmap_initialize_parent_plot(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemPixmap*
/// @param parentPlot QCustomPlot*
void q_cpitempixmap_qbase_initialize_parent_plot(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemPixmap*
/// @param callback void func(QCPItemPixmap* self, QCustomPlot* parentPlot)
void q_cpitempixmap_on_initialize_parent_plot(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemPixmap*
/// @param parentLayerable QCPLayerable*
void q_cpitempixmap_set_parent_layerable(void* self, void* parentLayerable);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemPixmap*
/// @param parentLayerable QCPLayerable*
void q_cpitempixmap_qbase_set_parent_layerable(void* self, void* parentLayerable);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemPixmap*
/// @param callback void func(QCPItemPixmap* self, QCPLayerable* parentLayerable)
void q_cpitempixmap_on_set_parent_layerable(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemPixmap*
/// @param layer QCPLayer*
/// @param prepend bool
bool q_cpitempixmap_move_to_layer(void* self, void* layer, bool prepend);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemPixmap*
/// @param layer QCPLayer*
/// @param prepend bool
bool q_cpitempixmap_qbase_move_to_layer(void* self, void* layer, bool prepend);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemPixmap*
/// @param callback bool func(QCPItemPixmap* self, QCPLayer* layer, bool prepend)
void q_cpitempixmap_on_move_to_layer(void* self, bool (*callback)(void*, void*, bool));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemPixmap*
/// @param painter QCPPainter*
/// @param localAntialiased bool
/// @param overrideElement enum QCP__AntialiasedElement
void q_cpitempixmap_apply_antialiasing_hint(void* self, void* painter, bool localAntialiased, int32_t overrideElement);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemPixmap*
/// @param painter QCPPainter*
/// @param localAntialiased bool
/// @param overrideElement enum QCP__AntialiasedElement
void q_cpitempixmap_qbase_apply_antialiasing_hint(void* self, void* painter, bool localAntialiased, int32_t overrideElement);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemPixmap*
/// @param callback void func(QCPItemPixmap* self, QCPPainter* painter, bool localAntialiased, enum QCP__AntialiasedElement overrideElement)
void q_cpitempixmap_on_apply_antialiasing_hint(void* self, void (*callback)(void*, void*, bool, int32_t));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemPixmap*
QObject* q_cpitempixmap_sender(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemPixmap*
QObject* q_cpitempixmap_qbase_sender(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemPixmap*
/// @param callback QObject* func()
void q_cpitempixmap_on_sender(void* self, QObject* (*callback)());

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemPixmap*
int32_t q_cpitempixmap_sender_signal_index(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemPixmap*
int32_t q_cpitempixmap_qbase_sender_signal_index(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemPixmap*
/// @param callback int32_t func()
void q_cpitempixmap_on_sender_signal_index(void* self, int32_t (*callback)());

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemPixmap*
/// @param signal const char*
int32_t q_cpitempixmap_receivers(void* self, const char* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemPixmap*
/// @param signal const char*
int32_t q_cpitempixmap_qbase_receivers(void* self, const char* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemPixmap*
/// @param callback int32_t func(QCPItemPixmap* self, const char* signal)
void q_cpitempixmap_on_receivers(void* self, int32_t (*callback)(void*, const char*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemPixmap*
/// @param signal QMetaMethod*
bool q_cpitempixmap_is_signal_connected(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemPixmap*
/// @param signal QMetaMethod*
bool q_cpitempixmap_qbase_is_signal_connected(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemPixmap*
/// @param callback bool func(QCPItemPixmap* self, QMetaMethod* signal)
void q_cpitempixmap_on_is_signal_connected(void* self, bool (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#objectNameChanged)
///
/// Wrapper to allow calling private signal
///
/// @param self QCPItemPixmap*
/// @param callback void func(QCPItemPixmap* self, const char* objectName)
void q_cpitempixmap_on_object_name_changed(void* self, void (*callback)(void*, const char*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemPixmap.html)
///
/// Delete this object from C++ memory.
///
/// @param self QCPItemPixmap*
void q_cpitempixmap_delete(void* self);

/// https://www.qcustomplot.com/documentation/classQCPItemTracer.html

/// q_cpitemtracer_new constructs a new QCPItemTracer object.
///
/// @param parentPlot QCustomPlot*
QCPItemTracer* q_cpitemtracer_new(void* parentPlot);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#metaObject)
///
/// @param self QCPItemTracer*
const QMetaObject* q_cpitemtracer_meta_object(void* self);

/// @param self QCPItemTracer*
/// @param param1 const char*
void* q_cpitemtracer_metacast(void* self, const char* param1);

/// @param self QCPItemTracer*
/// @param param1 enum QMetaObject__Call
/// @param param2 int
/// @param param3 void*
int32_t q_cpitemtracer_metacall(void* self, int32_t param1, int param2, void* param3);

/// Allows for overriding the related default method
///
/// @param self QCPItemTracer*
/// @param callback int32_t func(QCPItemTracer* self, enum QMetaObject__Call param1, int param2, void* param3)
void q_cpitemtracer_on_metacall(void* self, int32_t (*callback)(void*, int32_t, int, void*));

/// Base class method implementation
///
/// @param self QCPItemTracer*
/// @param param1 enum QMetaObject__Call
/// @param param2 int
/// @param param3 void*
int32_t q_cpitemtracer_qbase_metacall(void* self, int32_t param1, int param2, void* param3);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
const char* q_cpitemtracer_tr(const char* s);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemTracer.html)
///
/// @param self QCPItemTracer*
QPen* q_cpitemtracer_pen(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemTracer.html)
///
/// @param self QCPItemTracer*
QPen* q_cpitemtracer_selected_pen(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemTracer.html)
///
/// @param self QCPItemTracer*
QBrush* q_cpitemtracer_brush(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemTracer.html)
///
/// @param self QCPItemTracer*
QBrush* q_cpitemtracer_selected_brush(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemTracer.html)
///
/// @param self QCPItemTracer*
double q_cpitemtracer_size(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemTracer.html)
///
/// @param self QCPItemTracer*
///
/// @return enum QCPItemTracer__TracerStyle
int32_t q_cpitemtracer_style(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemTracer.html)
///
/// @param self QCPItemTracer*
QCPGraph* q_cpitemtracer_graph(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemTracer.html)
///
/// @param self QCPItemTracer*
double q_cpitemtracer_graph_key(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemTracer.html)
///
/// @param self QCPItemTracer*
bool q_cpitemtracer_interpolating(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemTracer.html)
///
/// @param self QCPItemTracer*
/// @param pen QPen*
void q_cpitemtracer_set_pen(void* self, void* pen);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemTracer.html)
///
/// @param self QCPItemTracer*
/// @param pen QPen*
void q_cpitemtracer_set_selected_pen(void* self, void* pen);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemTracer.html)
///
/// @param self QCPItemTracer*
/// @param brush QBrush*
void q_cpitemtracer_set_brush(void* self, void* brush);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemTracer.html)
///
/// @param self QCPItemTracer*
/// @param brush QBrush*
void q_cpitemtracer_set_selected_brush(void* self, void* brush);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemTracer.html)
///
/// @param self QCPItemTracer*
/// @param size double
void q_cpitemtracer_set_size(void* self, double size);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemTracer.html)
///
/// @param self QCPItemTracer*
/// @param style enum QCPItemTracer__TracerStyle
void q_cpitemtracer_set_style(void* self, int32_t style);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemTracer.html)
///
/// @param self QCPItemTracer*
/// @param graph QCPGraph*
void q_cpitemtracer_set_graph(void* self, void* graph);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemTracer.html)
///
/// @param self QCPItemTracer*
/// @param key double
void q_cpitemtracer_set_graph_key(void* self, double key);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemTracer.html)
///
/// @param self QCPItemTracer*
/// @param enabled bool
void q_cpitemtracer_set_interpolating(void* self, bool enabled);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemTracer.html)
///
/// @param self QCPItemTracer*
/// @param pos QPointF*
/// @param onlySelectable bool
/// @param details QVariant*
double q_cpitemtracer_select_test(void* self, void* pos, bool onlySelectable, void* details);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemTracer.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPItemTracer*
/// @param callback double func(QCPItemTracer* self, QPointF* pos, bool onlySelectable, QVariant* details)
void q_cpitemtracer_on_select_test(void* self, double (*callback)(void*, void*, bool, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemTracer.html)
///
/// Base class method implementation
///
/// @param self QCPItemTracer*
/// @param pos QPointF*
/// @param onlySelectable bool
/// @param details QVariant*
double q_cpitemtracer_qbase_select_test(void* self, void* pos, bool onlySelectable, void* details);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemTracer.html)
///
/// @param self QCPItemTracer*
void q_cpitemtracer_update_position(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemTracer.html)
///
/// @param self QCPItemTracer*
const QCPItemPosition* q_cpitemtracer_position(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemTracer.html)
///
/// @param self QCPItemTracer*
/// @param painter QCPPainter*
void q_cpitemtracer_draw(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemTracer.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPItemTracer*
/// @param callback void func(QCPItemTracer* self, QCPPainter* painter)
void q_cpitemtracer_on_draw(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemTracer.html)
///
/// Base class method implementation
///
/// @param self QCPItemTracer*
/// @param painter QCPPainter*
void q_cpitemtracer_qbase_draw(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemTracer.html)
///
/// @param self QCPItemTracer*
QPen* q_cpitemtracer_main_pen(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemTracer.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPItemTracer*
/// @param callback QPen* func()
void q_cpitemtracer_on_main_pen(void* self, QPen* (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemTracer.html)
///
/// Base class method implementation
///
/// @param self QCPItemTracer*
QPen* q_cpitemtracer_qbase_main_pen(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemTracer.html)
///
/// @param self QCPItemTracer*
QBrush* q_cpitemtracer_main_brush(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemTracer.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPItemTracer*
/// @param callback QBrush* func()
void q_cpitemtracer_on_main_brush(void* self, QBrush* (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemTracer.html)
///
/// Base class method implementation
///
/// @param self QCPItemTracer*
QBrush* q_cpitemtracer_qbase_main_brush(void* self);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
/// @param c const char*
const char* q_cpitemtracer_tr2(const char* s, const char* c);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
/// @param c const char*
/// @param n int
const char* q_cpitemtracer_tr3(const char* s, const char* c, int n);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemTracer*
bool q_cpitemtracer_clip_to_axis_rect(void* self);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemTracer*
QCPAxisRect* q_cpitemtracer_clip_axis_rect(void* self);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemTracer*
bool q_cpitemtracer_selectable(void* self);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemTracer*
bool q_cpitemtracer_selected(void* self);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemTracer*
/// @param clip bool
void q_cpitemtracer_set_clip_to_axis_rect(void* self, bool clip);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemTracer*
/// @param rect QCPAxisRect*
void q_cpitemtracer_set_clip_axis_rect(void* self, void* rect);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemTracer*
/// @param selectable bool
void q_cpitemtracer_set_selectable(void* self, bool selectable);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemTracer*
/// @param selected bool
void q_cpitemtracer_set_selected(void* self, bool selected);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemTracer*
libqt_list /* of QCPItemPosition* */ q_cpitemtracer_positions(void* self);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemTracer*
libqt_list /* of QCPItemAnchor* */ q_cpitemtracer_anchors(void* self);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemTracer*
/// @param name const char*
QCPItemAnchor* q_cpitemtracer_anchor(void* self, const char* name);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemTracer*
/// @param name const char*
bool q_cpitemtracer_has_anchor(void* self, const char* name);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemTracer*
/// @param selected bool
void q_cpitemtracer_selection_changed(void* self, bool selected);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemTracer*
/// @param callback void func(QCPItemTracer* self, bool selected)
void q_cpitemtracer_on_selection_changed(void* self, void (*callback)(void*, bool));

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemTracer*
/// @param selectable bool
void q_cpitemtracer_selectable_changed(void* self, bool selectable);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemTracer*
/// @param callback void func(QCPItemTracer* self, bool selectable)
void q_cpitemtracer_on_selectable_changed(void* self, void (*callback)(void*, bool));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPItemTracer*
bool q_cpitemtracer_visible(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPItemTracer*
QCustomPlot* q_cpitemtracer_parent_plot(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPItemTracer*
QCPLayerable* q_cpitemtracer_parent_layerable(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPItemTracer*
QCPLayer* q_cpitemtracer_layer(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPItemTracer*
bool q_cpitemtracer_antialiased(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPItemTracer*
/// @param on bool
void q_cpitemtracer_set_visible(void* self, bool on);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPItemTracer*
/// @param layer QCPLayer*
bool q_cpitemtracer_set_layer(void* self, void* layer);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPItemTracer*
/// @param layerName const char*
bool q_cpitemtracer_set_layer2(void* self, const char* layerName);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPItemTracer*
/// @param enabled bool
void q_cpitemtracer_set_antialiased(void* self, bool enabled);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPItemTracer*
bool q_cpitemtracer_real_visibility(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPItemTracer*
/// @param newLayer QCPLayer*
void q_cpitemtracer_layer_changed(void* self, void* newLayer);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPItemTracer*
/// @param callback void func(QCPItemTracer* self, QCPLayer* newLayer)
void q_cpitemtracer_on_layer_changed(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#objectName)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPItemTracer*
const char* q_cpitemtracer_object_name(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setObjectName)
///
/// @param self QCPItemTracer*
/// @param name char*
void q_cpitemtracer_set_object_name(void* self, char* name);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isWidgetType)
///
/// @param self QCPItemTracer*
bool q_cpitemtracer_is_widget_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isWindowType)
///
/// @param self QCPItemTracer*
bool q_cpitemtracer_is_window_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isQuickItemType)
///
/// @param self QCPItemTracer*
bool q_cpitemtracer_is_quick_item_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#signalsBlocked)
///
/// @param self QCPItemTracer*
bool q_cpitemtracer_signals_blocked(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#blockSignals)
///
/// @param self QCPItemTracer*
/// @param b bool
bool q_cpitemtracer_block_signals(void* self, bool b);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#thread)
///
/// @param self QCPItemTracer*
QThread* q_cpitemtracer_thread(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#moveToThread)
///
/// @param self QCPItemTracer*
/// @param thread QThread*
bool q_cpitemtracer_move_to_thread(void* self, void* thread);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#startTimer)
///
/// @param self QCPItemTracer*
/// @param interval int
int32_t q_cpitemtracer_start_timer(void* self, int interval);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#killTimer)
///
/// @param self QCPItemTracer*
/// @param id int
void q_cpitemtracer_kill_timer(void* self, int id);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#killTimer)
///
/// @param self QCPItemTracer*
/// @param id enum Qt__TimerId
void q_cpitemtracer_kill_timer2(void* self, int32_t id);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#children)
///
/// @param self QCPItemTracer*
libqt_list /* of QObject* */ q_cpitemtracer_children(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setParent)
///
/// @param self QCPItemTracer*
/// @param parent QObject*
void q_cpitemtracer_set_parent(void* self, void* parent);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#installEventFilter)
///
/// @param self QCPItemTracer*
/// @param filterObj QObject*
void q_cpitemtracer_install_event_filter(void* self, void* filterObj);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#removeEventFilter)
///
/// @param self QCPItemTracer*
/// @param obj QObject*
void q_cpitemtracer_remove_event_filter(void* self, void* obj);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param method QMetaMethod*
QMetaObject__Connection* q_cpitemtracer_connect(void* sender, void* signal, void* receiver, void* method);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param self QCPItemTracer*
/// @param sender QObject*
/// @param signal const char*
/// @param member const char*
QMetaObject__Connection* q_cpitemtracer_connect2(void* self, void* sender, const char* signal, const char* member);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param member QMetaMethod*
bool q_cpitemtracer_disconnect(void* sender, void* signal, void* receiver, void* member);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnect)
///
/// @param param1 QMetaObject__Connection*
bool q_cpitemtracer_disconnect2(void* param1);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dumpObjectTree)
///
/// @param self QCPItemTracer*
void q_cpitemtracer_dump_object_tree(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dumpObjectInfo)
///
/// @param self QCPItemTracer*
void q_cpitemtracer_dump_object_info(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setProperty)
///
/// @param self QCPItemTracer*
/// @param name const char*
/// @param value QVariant*
bool q_cpitemtracer_set_property(void* self, const char* name, void* value);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#property)
///
/// @param self QCPItemTracer*
/// @param name const char*
QVariant* q_cpitemtracer_property(void* self, const char* name);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dynamicPropertyNames)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPItemTracer*
const char** q_cpitemtracer_dynamic_property_names(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#bindingStorage)
///
/// @param self QCPItemTracer*
QBindingStorage* q_cpitemtracer_binding_storage(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#bindingStorage)
///
/// @param self QCPItemTracer*
const QBindingStorage* q_cpitemtracer_binding_storage2(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPItemTracer*
void q_cpitemtracer_destroyed(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPItemTracer*
/// @param callback void func(QCPItemTracer* self)
void q_cpitemtracer_on_destroyed(void* self, void (*callback)(void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#parent)
///
/// @param self QCPItemTracer*
QObject* q_cpitemtracer_parent(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#inherits)
///
/// @param self QCPItemTracer*
/// @param classname const char*
bool q_cpitemtracer_inherits(void* self, const char* classname);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#deleteLater)
///
/// @param self QCPItemTracer*
void q_cpitemtracer_delete_later(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#moveToThread)
///
/// @param self QCPItemTracer*
/// @param thread QThread*
/// @param param2 Disambiguated_t*
bool q_cpitemtracer_move_to_thread2(void* self, void* thread, void* param2);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#startTimer)
///
/// @param self QCPItemTracer*
/// @param interval int
/// @param timerType enum Qt__TimerType
int32_t q_cpitemtracer_start_timer22(void* self, int interval, int32_t timerType);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param method QMetaMethod*
/// @param type enum Qt__ConnectionType
QMetaObject__Connection* q_cpitemtracer_connect5(void* sender, void* signal, void* receiver, void* method, int32_t type);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param self QCPItemTracer*
/// @param sender QObject*
/// @param signal const char*
/// @param member const char*
/// @param type enum Qt__ConnectionType
QMetaObject__Connection* q_cpitemtracer_connect4(void* self, void* sender, const char* signal, const char* member, int32_t type);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPItemTracer*
/// @param param1 QObject*
void q_cpitemtracer_destroyed1(void* self, void* param1);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPItemTracer*
/// @param callback void func(QCPItemTracer* self, QObject* param1)
void q_cpitemtracer_on_destroyed1(void* self, void (*callback)(void*, void*));

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemTracer*
///
/// @return enum QCP__Interaction
int32_t q_cpitemtracer_selection_category(void* self);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemTracer*
///
/// @return enum QCP__Interaction
int32_t q_cpitemtracer_qbase_selection_category(void* self);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemTracer*
/// @param callback int32_t func()
void q_cpitemtracer_on_selection_category(void* self, int32_t (*callback)());

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemTracer*
QRect* q_cpitemtracer_clip_rect(void* self);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemTracer*
QRect* q_cpitemtracer_qbase_clip_rect(void* self);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemTracer*
/// @param callback QRect* func()
void q_cpitemtracer_on_clip_rect(void* self, QRect* (*callback)());

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemTracer*
/// @param painter QCPPainter*
void q_cpitemtracer_apply_default_antialiasing_hint(void* self, void* painter);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemTracer*
/// @param painter QCPPainter*
void q_cpitemtracer_qbase_apply_default_antialiasing_hint(void* self, void* painter);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemTracer*
/// @param callback void func(QCPItemTracer* self, QCPPainter* painter)
void q_cpitemtracer_on_apply_default_antialiasing_hint(void* self, void (*callback)(void*, void*));

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemTracer*
/// @param event QMouseEvent*
/// @param additive bool
/// @param details QVariant*
/// @param selectionStateChanged bool*
void q_cpitemtracer_select_event(void* self, void* event, bool additive, void* details, bool* selectionStateChanged);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemTracer*
/// @param event QMouseEvent*
/// @param additive bool
/// @param details QVariant*
/// @param selectionStateChanged bool*
void q_cpitemtracer_qbase_select_event(void* self, void* event, bool additive, void* details, bool* selectionStateChanged);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemTracer*
/// @param callback void func(QCPItemTracer* self, QMouseEvent* event, bool additive, QVariant* details, bool* selectionStateChanged)
void q_cpitemtracer_on_select_event(void* self, void (*callback)(void*, void*, bool, void*, bool*));

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemTracer*
/// @param selectionStateChanged bool*
void q_cpitemtracer_deselect_event(void* self, bool* selectionStateChanged);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemTracer*
/// @param selectionStateChanged bool*
void q_cpitemtracer_qbase_deselect_event(void* self, bool* selectionStateChanged);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemTracer*
/// @param callback void func(QCPItemTracer* self, bool* selectionStateChanged)
void q_cpitemtracer_on_deselect_event(void* self, void (*callback)(void*, bool*));

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemTracer*
/// @param anchorId int
QPointF* q_cpitemtracer_anchor_pixel_position(void* self, int anchorId);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemTracer*
/// @param anchorId int
QPointF* q_cpitemtracer_qbase_anchor_pixel_position(void* self, int anchorId);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemTracer*
/// @param callback QPointF* func(QCPItemTracer* self, int anchorId)
void q_cpitemtracer_on_anchor_pixel_position(void* self, QPointF* (*callback)(void*, int));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemTracer*
/// @param parentPlot QCustomPlot*
void q_cpitemtracer_parent_plot_initialized(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemTracer*
/// @param parentPlot QCustomPlot*
void q_cpitemtracer_qbase_parent_plot_initialized(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemTracer*
/// @param callback void func(QCPItemTracer* self, QCustomPlot* parentPlot)
void q_cpitemtracer_on_parent_plot_initialized(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemTracer*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cpitemtracer_mouse_press_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemTracer*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cpitemtracer_qbase_mouse_press_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemTracer*
/// @param callback void func(QCPItemTracer* self, QMouseEvent* event, QVariant* details)
void q_cpitemtracer_on_mouse_press_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemTracer*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cpitemtracer_mouse_move_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemTracer*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cpitemtracer_qbase_mouse_move_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemTracer*
/// @param callback void func(QCPItemTracer* self, QMouseEvent* event, QPointF* startPos)
void q_cpitemtracer_on_mouse_move_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemTracer*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cpitemtracer_mouse_release_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemTracer*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cpitemtracer_qbase_mouse_release_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemTracer*
/// @param callback void func(QCPItemTracer* self, QMouseEvent* event, QPointF* startPos)
void q_cpitemtracer_on_mouse_release_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemTracer*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cpitemtracer_mouse_double_click_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemTracer*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cpitemtracer_qbase_mouse_double_click_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemTracer*
/// @param callback void func(QCPItemTracer* self, QMouseEvent* event, QVariant* details)
void q_cpitemtracer_on_mouse_double_click_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemTracer*
/// @param event QWheelEvent*
void q_cpitemtracer_wheel_event(void* self, void* event);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemTracer*
/// @param event QWheelEvent*
void q_cpitemtracer_qbase_wheel_event(void* self, void* event);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemTracer*
/// @param callback void func(QCPItemTracer* self, QWheelEvent* event)
void q_cpitemtracer_on_wheel_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemTracer*
/// @param event QEvent*
bool q_cpitemtracer_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemTracer*
/// @param event QEvent*
bool q_cpitemtracer_qbase_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemTracer*
/// @param callback bool func(QCPItemTracer* self, QEvent* event)
void q_cpitemtracer_on_event(void* self, bool (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemTracer*
/// @param watched QObject*
/// @param event QEvent*
bool q_cpitemtracer_event_filter(void* self, void* watched, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemTracer*
/// @param watched QObject*
/// @param event QEvent*
bool q_cpitemtracer_qbase_event_filter(void* self, void* watched, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemTracer*
/// @param callback bool func(QCPItemTracer* self, QObject* watched, QEvent* event)
void q_cpitemtracer_on_event_filter(void* self, bool (*callback)(void*, void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemTracer*
/// @param event QTimerEvent*
void q_cpitemtracer_timer_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemTracer*
/// @param event QTimerEvent*
void q_cpitemtracer_qbase_timer_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemTracer*
/// @param callback void func(QCPItemTracer* self, QTimerEvent* event)
void q_cpitemtracer_on_timer_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemTracer*
/// @param event QChildEvent*
void q_cpitemtracer_child_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemTracer*
/// @param event QChildEvent*
void q_cpitemtracer_qbase_child_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemTracer*
/// @param callback void func(QCPItemTracer* self, QChildEvent* event)
void q_cpitemtracer_on_child_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemTracer*
/// @param event QEvent*
void q_cpitemtracer_custom_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemTracer*
/// @param event QEvent*
void q_cpitemtracer_qbase_custom_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemTracer*
/// @param callback void func(QCPItemTracer* self, QEvent* event)
void q_cpitemtracer_on_custom_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemTracer*
/// @param signal QMetaMethod*
void q_cpitemtracer_connect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemTracer*
/// @param signal QMetaMethod*
void q_cpitemtracer_qbase_connect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemTracer*
/// @param callback void func(QCPItemTracer* self, QMetaMethod* signal)
void q_cpitemtracer_on_connect_notify(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemTracer*
/// @param signal QMetaMethod*
void q_cpitemtracer_disconnect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemTracer*
/// @param signal QMetaMethod*
void q_cpitemtracer_qbase_disconnect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemTracer*
/// @param callback void func(QCPItemTracer* self, QMetaMethod* signal)
void q_cpitemtracer_on_disconnect_notify(void* self, void (*callback)(void*, void*));

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemTracer*
/// @param rect QRectF*
/// @param pos QPointF*
/// @param filledRect bool
double q_cpitemtracer_rect_distance(void* self, void* rect, void* pos, bool filledRect);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemTracer*
/// @param rect QRectF*
/// @param pos QPointF*
/// @param filledRect bool
double q_cpitemtracer_qbase_rect_distance(void* self, void* rect, void* pos, bool filledRect);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemTracer*
/// @param callback double func(QCPItemTracer* self, QRectF* rect, QPointF* pos, bool filledRect)
void q_cpitemtracer_on_rect_distance(void* self, double (*callback)(void*, void*, void*, bool));

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemTracer*
/// @param name const char*
QCPItemPosition* q_cpitemtracer_create_position(void* self, const char* name);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemTracer*
/// @param name const char*
QCPItemPosition* q_cpitemtracer_qbase_create_position(void* self, const char* name);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemTracer*
/// @param callback QCPItemPosition* func(QCPItemTracer* self, const char* name)
void q_cpitemtracer_on_create_position(void* self, QCPItemPosition* (*callback)(void*, const char*));

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemTracer*
/// @param name const char*
/// @param anchorId int
QCPItemAnchor* q_cpitemtracer_create_anchor(void* self, const char* name, int anchorId);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemTracer*
/// @param name const char*
/// @param anchorId int
QCPItemAnchor* q_cpitemtracer_qbase_create_anchor(void* self, const char* name, int anchorId);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemTracer*
/// @param callback QCPItemAnchor* func(QCPItemTracer* self, const char* name, int anchorId)
void q_cpitemtracer_on_create_anchor(void* self, QCPItemAnchor* (*callback)(void*, const char*, int));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemTracer*
/// @param parentPlot QCustomPlot*
void q_cpitemtracer_initialize_parent_plot(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemTracer*
/// @param parentPlot QCustomPlot*
void q_cpitemtracer_qbase_initialize_parent_plot(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemTracer*
/// @param callback void func(QCPItemTracer* self, QCustomPlot* parentPlot)
void q_cpitemtracer_on_initialize_parent_plot(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemTracer*
/// @param parentLayerable QCPLayerable*
void q_cpitemtracer_set_parent_layerable(void* self, void* parentLayerable);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemTracer*
/// @param parentLayerable QCPLayerable*
void q_cpitemtracer_qbase_set_parent_layerable(void* self, void* parentLayerable);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemTracer*
/// @param callback void func(QCPItemTracer* self, QCPLayerable* parentLayerable)
void q_cpitemtracer_on_set_parent_layerable(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemTracer*
/// @param layer QCPLayer*
/// @param prepend bool
bool q_cpitemtracer_move_to_layer(void* self, void* layer, bool prepend);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemTracer*
/// @param layer QCPLayer*
/// @param prepend bool
bool q_cpitemtracer_qbase_move_to_layer(void* self, void* layer, bool prepend);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemTracer*
/// @param callback bool func(QCPItemTracer* self, QCPLayer* layer, bool prepend)
void q_cpitemtracer_on_move_to_layer(void* self, bool (*callback)(void*, void*, bool));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemTracer*
/// @param painter QCPPainter*
/// @param localAntialiased bool
/// @param overrideElement enum QCP__AntialiasedElement
void q_cpitemtracer_apply_antialiasing_hint(void* self, void* painter, bool localAntialiased, int32_t overrideElement);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemTracer*
/// @param painter QCPPainter*
/// @param localAntialiased bool
/// @param overrideElement enum QCP__AntialiasedElement
void q_cpitemtracer_qbase_apply_antialiasing_hint(void* self, void* painter, bool localAntialiased, int32_t overrideElement);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemTracer*
/// @param callback void func(QCPItemTracer* self, QCPPainter* painter, bool localAntialiased, enum QCP__AntialiasedElement overrideElement)
void q_cpitemtracer_on_apply_antialiasing_hint(void* self, void (*callback)(void*, void*, bool, int32_t));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemTracer*
QObject* q_cpitemtracer_sender(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemTracer*
QObject* q_cpitemtracer_qbase_sender(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemTracer*
/// @param callback QObject* func()
void q_cpitemtracer_on_sender(void* self, QObject* (*callback)());

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemTracer*
int32_t q_cpitemtracer_sender_signal_index(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemTracer*
int32_t q_cpitemtracer_qbase_sender_signal_index(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemTracer*
/// @param callback int32_t func()
void q_cpitemtracer_on_sender_signal_index(void* self, int32_t (*callback)());

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemTracer*
/// @param signal const char*
int32_t q_cpitemtracer_receivers(void* self, const char* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemTracer*
/// @param signal const char*
int32_t q_cpitemtracer_qbase_receivers(void* self, const char* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemTracer*
/// @param callback int32_t func(QCPItemTracer* self, const char* signal)
void q_cpitemtracer_on_receivers(void* self, int32_t (*callback)(void*, const char*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemTracer*
/// @param signal QMetaMethod*
bool q_cpitemtracer_is_signal_connected(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemTracer*
/// @param signal QMetaMethod*
bool q_cpitemtracer_qbase_is_signal_connected(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemTracer*
/// @param callback bool func(QCPItemTracer* self, QMetaMethod* signal)
void q_cpitemtracer_on_is_signal_connected(void* self, bool (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#objectNameChanged)
///
/// Wrapper to allow calling private signal
///
/// @param self QCPItemTracer*
/// @param callback void func(QCPItemTracer* self, const char* objectName)
void q_cpitemtracer_on_object_name_changed(void* self, void (*callback)(void*, const char*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemTracer.html)
///
/// Delete this object from C++ memory.
///
/// @param self QCPItemTracer*
void q_cpitemtracer_delete(void* self);

/// https://www.qcustomplot.com/documentation/classQCPItemBracket.html

/// q_cpitembracket_new constructs a new QCPItemBracket object.
///
/// @param parentPlot QCustomPlot*
QCPItemBracket* q_cpitembracket_new(void* parentPlot);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#metaObject)
///
/// @param self QCPItemBracket*
const QMetaObject* q_cpitembracket_meta_object(void* self);

/// @param self QCPItemBracket*
/// @param param1 const char*
void* q_cpitembracket_metacast(void* self, const char* param1);

/// @param self QCPItemBracket*
/// @param param1 enum QMetaObject__Call
/// @param param2 int
/// @param param3 void*
int32_t q_cpitembracket_metacall(void* self, int32_t param1, int param2, void* param3);

/// Allows for overriding the related default method
///
/// @param self QCPItemBracket*
/// @param callback int32_t func(QCPItemBracket* self, enum QMetaObject__Call param1, int param2, void* param3)
void q_cpitembracket_on_metacall(void* self, int32_t (*callback)(void*, int32_t, int, void*));

/// Base class method implementation
///
/// @param self QCPItemBracket*
/// @param param1 enum QMetaObject__Call
/// @param param2 int
/// @param param3 void*
int32_t q_cpitembracket_qbase_metacall(void* self, int32_t param1, int param2, void* param3);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
const char* q_cpitembracket_tr(const char* s);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemBracket.html)
///
/// @param self QCPItemBracket*
QPen* q_cpitembracket_pen(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemBracket.html)
///
/// @param self QCPItemBracket*
QPen* q_cpitembracket_selected_pen(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemBracket.html)
///
/// @param self QCPItemBracket*
double q_cpitembracket_length(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemBracket.html)
///
/// @param self QCPItemBracket*
///
/// @return enum QCPItemBracket__BracketStyle
int32_t q_cpitembracket_style(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemBracket.html)
///
/// @param self QCPItemBracket*
/// @param pen QPen*
void q_cpitembracket_set_pen(void* self, void* pen);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemBracket.html)
///
/// @param self QCPItemBracket*
/// @param pen QPen*
void q_cpitembracket_set_selected_pen(void* self, void* pen);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemBracket.html)
///
/// @param self QCPItemBracket*
/// @param length double
void q_cpitembracket_set_length(void* self, double length);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemBracket.html)
///
/// @param self QCPItemBracket*
/// @param style enum QCPItemBracket__BracketStyle
void q_cpitembracket_set_style(void* self, int32_t style);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemBracket.html)
///
/// @param self QCPItemBracket*
/// @param pos QPointF*
/// @param onlySelectable bool
/// @param details QVariant*
double q_cpitembracket_select_test(void* self, void* pos, bool onlySelectable, void* details);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemBracket.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPItemBracket*
/// @param callback double func(QCPItemBracket* self, QPointF* pos, bool onlySelectable, QVariant* details)
void q_cpitembracket_on_select_test(void* self, double (*callback)(void*, void*, bool, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemBracket.html)
///
/// Base class method implementation
///
/// @param self QCPItemBracket*
/// @param pos QPointF*
/// @param onlySelectable bool
/// @param details QVariant*
double q_cpitembracket_qbase_select_test(void* self, void* pos, bool onlySelectable, void* details);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemBracket.html)
///
/// @param self QCPItemBracket*
const QCPItemPosition* q_cpitembracket_left(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemBracket.html)
///
/// @param self QCPItemBracket*
const QCPItemPosition* q_cpitembracket_right(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemBracket.html)
///
/// @param self QCPItemBracket*
const QCPItemAnchor* q_cpitembracket_center(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemBracket.html)
///
/// @param self QCPItemBracket*
/// @param painter QCPPainter*
void q_cpitembracket_draw(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemBracket.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPItemBracket*
/// @param callback void func(QCPItemBracket* self, QCPPainter* painter)
void q_cpitembracket_on_draw(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemBracket.html)
///
/// Base class method implementation
///
/// @param self QCPItemBracket*
/// @param painter QCPPainter*
void q_cpitembracket_qbase_draw(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemBracket.html)
///
/// @param self QCPItemBracket*
/// @param anchorId int
QPointF* q_cpitembracket_anchor_pixel_position(void* self, int anchorId);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemBracket.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPItemBracket*
/// @param callback QPointF* func(QCPItemBracket* self, int anchorId)
void q_cpitembracket_on_anchor_pixel_position(void* self, QPointF* (*callback)(void*, int));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemBracket.html)
///
/// Base class method implementation
///
/// @param self QCPItemBracket*
/// @param anchorId int
QPointF* q_cpitembracket_qbase_anchor_pixel_position(void* self, int anchorId);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemBracket.html)
///
/// @param self QCPItemBracket*
QPen* q_cpitembracket_main_pen(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemBracket.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPItemBracket*
/// @param callback QPen* func()
void q_cpitembracket_on_main_pen(void* self, QPen* (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemBracket.html)
///
/// Base class method implementation
///
/// @param self QCPItemBracket*
QPen* q_cpitembracket_qbase_main_pen(void* self);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
/// @param c const char*
const char* q_cpitembracket_tr2(const char* s, const char* c);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
/// @param c const char*
/// @param n int
const char* q_cpitembracket_tr3(const char* s, const char* c, int n);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemBracket*
bool q_cpitembracket_clip_to_axis_rect(void* self);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemBracket*
QCPAxisRect* q_cpitembracket_clip_axis_rect(void* self);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemBracket*
bool q_cpitembracket_selectable(void* self);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemBracket*
bool q_cpitembracket_selected(void* self);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemBracket*
/// @param clip bool
void q_cpitembracket_set_clip_to_axis_rect(void* self, bool clip);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemBracket*
/// @param rect QCPAxisRect*
void q_cpitembracket_set_clip_axis_rect(void* self, void* rect);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemBracket*
/// @param selectable bool
void q_cpitembracket_set_selectable(void* self, bool selectable);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemBracket*
/// @param selected bool
void q_cpitembracket_set_selected(void* self, bool selected);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemBracket*
libqt_list /* of QCPItemPosition* */ q_cpitembracket_positions(void* self);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemBracket*
libqt_list /* of QCPItemAnchor* */ q_cpitembracket_anchors(void* self);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemBracket*
/// @param name const char*
QCPItemPosition* q_cpitembracket_position(void* self, const char* name);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemBracket*
/// @param name const char*
QCPItemAnchor* q_cpitembracket_anchor(void* self, const char* name);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemBracket*
/// @param name const char*
bool q_cpitembracket_has_anchor(void* self, const char* name);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemBracket*
/// @param selected bool
void q_cpitembracket_selection_changed(void* self, bool selected);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemBracket*
/// @param callback void func(QCPItemBracket* self, bool selected)
void q_cpitembracket_on_selection_changed(void* self, void (*callback)(void*, bool));

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemBracket*
/// @param selectable bool
void q_cpitembracket_selectable_changed(void* self, bool selectable);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// @param self QCPItemBracket*
/// @param callback void func(QCPItemBracket* self, bool selectable)
void q_cpitembracket_on_selectable_changed(void* self, void (*callback)(void*, bool));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPItemBracket*
bool q_cpitembracket_visible(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPItemBracket*
QCustomPlot* q_cpitembracket_parent_plot(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPItemBracket*
QCPLayerable* q_cpitembracket_parent_layerable(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPItemBracket*
QCPLayer* q_cpitembracket_layer(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPItemBracket*
bool q_cpitembracket_antialiased(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPItemBracket*
/// @param on bool
void q_cpitembracket_set_visible(void* self, bool on);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPItemBracket*
/// @param layer QCPLayer*
bool q_cpitembracket_set_layer(void* self, void* layer);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPItemBracket*
/// @param layerName const char*
bool q_cpitembracket_set_layer2(void* self, const char* layerName);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPItemBracket*
/// @param enabled bool
void q_cpitembracket_set_antialiased(void* self, bool enabled);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPItemBracket*
bool q_cpitembracket_real_visibility(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPItemBracket*
/// @param newLayer QCPLayer*
void q_cpitembracket_layer_changed(void* self, void* newLayer);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPItemBracket*
/// @param callback void func(QCPItemBracket* self, QCPLayer* newLayer)
void q_cpitembracket_on_layer_changed(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#objectName)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPItemBracket*
const char* q_cpitembracket_object_name(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setObjectName)
///
/// @param self QCPItemBracket*
/// @param name char*
void q_cpitembracket_set_object_name(void* self, char* name);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isWidgetType)
///
/// @param self QCPItemBracket*
bool q_cpitembracket_is_widget_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isWindowType)
///
/// @param self QCPItemBracket*
bool q_cpitembracket_is_window_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isQuickItemType)
///
/// @param self QCPItemBracket*
bool q_cpitembracket_is_quick_item_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#signalsBlocked)
///
/// @param self QCPItemBracket*
bool q_cpitembracket_signals_blocked(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#blockSignals)
///
/// @param self QCPItemBracket*
/// @param b bool
bool q_cpitembracket_block_signals(void* self, bool b);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#thread)
///
/// @param self QCPItemBracket*
QThread* q_cpitembracket_thread(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#moveToThread)
///
/// @param self QCPItemBracket*
/// @param thread QThread*
bool q_cpitembracket_move_to_thread(void* self, void* thread);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#startTimer)
///
/// @param self QCPItemBracket*
/// @param interval int
int32_t q_cpitembracket_start_timer(void* self, int interval);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#killTimer)
///
/// @param self QCPItemBracket*
/// @param id int
void q_cpitembracket_kill_timer(void* self, int id);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#killTimer)
///
/// @param self QCPItemBracket*
/// @param id enum Qt__TimerId
void q_cpitembracket_kill_timer2(void* self, int32_t id);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#children)
///
/// @param self QCPItemBracket*
libqt_list /* of QObject* */ q_cpitembracket_children(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setParent)
///
/// @param self QCPItemBracket*
/// @param parent QObject*
void q_cpitembracket_set_parent(void* self, void* parent);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#installEventFilter)
///
/// @param self QCPItemBracket*
/// @param filterObj QObject*
void q_cpitembracket_install_event_filter(void* self, void* filterObj);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#removeEventFilter)
///
/// @param self QCPItemBracket*
/// @param obj QObject*
void q_cpitembracket_remove_event_filter(void* self, void* obj);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param method QMetaMethod*
QMetaObject__Connection* q_cpitembracket_connect(void* sender, void* signal, void* receiver, void* method);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param self QCPItemBracket*
/// @param sender QObject*
/// @param signal const char*
/// @param member const char*
QMetaObject__Connection* q_cpitembracket_connect2(void* self, void* sender, const char* signal, const char* member);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param member QMetaMethod*
bool q_cpitembracket_disconnect(void* sender, void* signal, void* receiver, void* member);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnect)
///
/// @param param1 QMetaObject__Connection*
bool q_cpitembracket_disconnect2(void* param1);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dumpObjectTree)
///
/// @param self QCPItemBracket*
void q_cpitembracket_dump_object_tree(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dumpObjectInfo)
///
/// @param self QCPItemBracket*
void q_cpitembracket_dump_object_info(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setProperty)
///
/// @param self QCPItemBracket*
/// @param name const char*
/// @param value QVariant*
bool q_cpitembracket_set_property(void* self, const char* name, void* value);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#property)
///
/// @param self QCPItemBracket*
/// @param name const char*
QVariant* q_cpitembracket_property(void* self, const char* name);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dynamicPropertyNames)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPItemBracket*
const char** q_cpitembracket_dynamic_property_names(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#bindingStorage)
///
/// @param self QCPItemBracket*
QBindingStorage* q_cpitembracket_binding_storage(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#bindingStorage)
///
/// @param self QCPItemBracket*
const QBindingStorage* q_cpitembracket_binding_storage2(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPItemBracket*
void q_cpitembracket_destroyed(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPItemBracket*
/// @param callback void func(QCPItemBracket* self)
void q_cpitembracket_on_destroyed(void* self, void (*callback)(void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#parent)
///
/// @param self QCPItemBracket*
QObject* q_cpitembracket_parent(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#inherits)
///
/// @param self QCPItemBracket*
/// @param classname const char*
bool q_cpitembracket_inherits(void* self, const char* classname);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#deleteLater)
///
/// @param self QCPItemBracket*
void q_cpitembracket_delete_later(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#moveToThread)
///
/// @param self QCPItemBracket*
/// @param thread QThread*
/// @param param2 Disambiguated_t*
bool q_cpitembracket_move_to_thread2(void* self, void* thread, void* param2);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#startTimer)
///
/// @param self QCPItemBracket*
/// @param interval int
/// @param timerType enum Qt__TimerType
int32_t q_cpitembracket_start_timer22(void* self, int interval, int32_t timerType);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param method QMetaMethod*
/// @param type enum Qt__ConnectionType
QMetaObject__Connection* q_cpitembracket_connect5(void* sender, void* signal, void* receiver, void* method, int32_t type);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param self QCPItemBracket*
/// @param sender QObject*
/// @param signal const char*
/// @param member const char*
/// @param type enum Qt__ConnectionType
QMetaObject__Connection* q_cpitembracket_connect4(void* self, void* sender, const char* signal, const char* member, int32_t type);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPItemBracket*
/// @param param1 QObject*
void q_cpitembracket_destroyed1(void* self, void* param1);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPItemBracket*
/// @param callback void func(QCPItemBracket* self, QObject* param1)
void q_cpitembracket_on_destroyed1(void* self, void (*callback)(void*, void*));

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemBracket*
///
/// @return enum QCP__Interaction
int32_t q_cpitembracket_selection_category(void* self);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemBracket*
///
/// @return enum QCP__Interaction
int32_t q_cpitembracket_qbase_selection_category(void* self);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemBracket*
/// @param callback int32_t func()
void q_cpitembracket_on_selection_category(void* self, int32_t (*callback)());

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemBracket*
QRect* q_cpitembracket_clip_rect(void* self);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemBracket*
QRect* q_cpitembracket_qbase_clip_rect(void* self);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemBracket*
/// @param callback QRect* func()
void q_cpitembracket_on_clip_rect(void* self, QRect* (*callback)());

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemBracket*
/// @param painter QCPPainter*
void q_cpitembracket_apply_default_antialiasing_hint(void* self, void* painter);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemBracket*
/// @param painter QCPPainter*
void q_cpitembracket_qbase_apply_default_antialiasing_hint(void* self, void* painter);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemBracket*
/// @param callback void func(QCPItemBracket* self, QCPPainter* painter)
void q_cpitembracket_on_apply_default_antialiasing_hint(void* self, void (*callback)(void*, void*));

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemBracket*
/// @param event QMouseEvent*
/// @param additive bool
/// @param details QVariant*
/// @param selectionStateChanged bool*
void q_cpitembracket_select_event(void* self, void* event, bool additive, void* details, bool* selectionStateChanged);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemBracket*
/// @param event QMouseEvent*
/// @param additive bool
/// @param details QVariant*
/// @param selectionStateChanged bool*
void q_cpitembracket_qbase_select_event(void* self, void* event, bool additive, void* details, bool* selectionStateChanged);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemBracket*
/// @param callback void func(QCPItemBracket* self, QMouseEvent* event, bool additive, QVariant* details, bool* selectionStateChanged)
void q_cpitembracket_on_select_event(void* self, void (*callback)(void*, void*, bool, void*, bool*));

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemBracket*
/// @param selectionStateChanged bool*
void q_cpitembracket_deselect_event(void* self, bool* selectionStateChanged);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemBracket*
/// @param selectionStateChanged bool*
void q_cpitembracket_qbase_deselect_event(void* self, bool* selectionStateChanged);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemBracket*
/// @param callback void func(QCPItemBracket* self, bool* selectionStateChanged)
void q_cpitembracket_on_deselect_event(void* self, void (*callback)(void*, bool*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemBracket*
/// @param parentPlot QCustomPlot*
void q_cpitembracket_parent_plot_initialized(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemBracket*
/// @param parentPlot QCustomPlot*
void q_cpitembracket_qbase_parent_plot_initialized(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemBracket*
/// @param callback void func(QCPItemBracket* self, QCustomPlot* parentPlot)
void q_cpitembracket_on_parent_plot_initialized(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemBracket*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cpitembracket_mouse_press_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemBracket*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cpitembracket_qbase_mouse_press_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemBracket*
/// @param callback void func(QCPItemBracket* self, QMouseEvent* event, QVariant* details)
void q_cpitembracket_on_mouse_press_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemBracket*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cpitembracket_mouse_move_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemBracket*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cpitembracket_qbase_mouse_move_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemBracket*
/// @param callback void func(QCPItemBracket* self, QMouseEvent* event, QPointF* startPos)
void q_cpitembracket_on_mouse_move_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemBracket*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cpitembracket_mouse_release_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemBracket*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cpitembracket_qbase_mouse_release_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemBracket*
/// @param callback void func(QCPItemBracket* self, QMouseEvent* event, QPointF* startPos)
void q_cpitembracket_on_mouse_release_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemBracket*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cpitembracket_mouse_double_click_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemBracket*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cpitembracket_qbase_mouse_double_click_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemBracket*
/// @param callback void func(QCPItemBracket* self, QMouseEvent* event, QVariant* details)
void q_cpitembracket_on_mouse_double_click_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemBracket*
/// @param event QWheelEvent*
void q_cpitembracket_wheel_event(void* self, void* event);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemBracket*
/// @param event QWheelEvent*
void q_cpitembracket_qbase_wheel_event(void* self, void* event);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemBracket*
/// @param callback void func(QCPItemBracket* self, QWheelEvent* event)
void q_cpitembracket_on_wheel_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemBracket*
/// @param event QEvent*
bool q_cpitembracket_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemBracket*
/// @param event QEvent*
bool q_cpitembracket_qbase_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemBracket*
/// @param callback bool func(QCPItemBracket* self, QEvent* event)
void q_cpitembracket_on_event(void* self, bool (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemBracket*
/// @param watched QObject*
/// @param event QEvent*
bool q_cpitembracket_event_filter(void* self, void* watched, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemBracket*
/// @param watched QObject*
/// @param event QEvent*
bool q_cpitembracket_qbase_event_filter(void* self, void* watched, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemBracket*
/// @param callback bool func(QCPItemBracket* self, QObject* watched, QEvent* event)
void q_cpitembracket_on_event_filter(void* self, bool (*callback)(void*, void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemBracket*
/// @param event QTimerEvent*
void q_cpitembracket_timer_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemBracket*
/// @param event QTimerEvent*
void q_cpitembracket_qbase_timer_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemBracket*
/// @param callback void func(QCPItemBracket* self, QTimerEvent* event)
void q_cpitembracket_on_timer_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemBracket*
/// @param event QChildEvent*
void q_cpitembracket_child_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemBracket*
/// @param event QChildEvent*
void q_cpitembracket_qbase_child_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemBracket*
/// @param callback void func(QCPItemBracket* self, QChildEvent* event)
void q_cpitembracket_on_child_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemBracket*
/// @param event QEvent*
void q_cpitembracket_custom_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemBracket*
/// @param event QEvent*
void q_cpitembracket_qbase_custom_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemBracket*
/// @param callback void func(QCPItemBracket* self, QEvent* event)
void q_cpitembracket_on_custom_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemBracket*
/// @param signal QMetaMethod*
void q_cpitembracket_connect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemBracket*
/// @param signal QMetaMethod*
void q_cpitembracket_qbase_connect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemBracket*
/// @param callback void func(QCPItemBracket* self, QMetaMethod* signal)
void q_cpitembracket_on_connect_notify(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemBracket*
/// @param signal QMetaMethod*
void q_cpitembracket_disconnect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemBracket*
/// @param signal QMetaMethod*
void q_cpitembracket_qbase_disconnect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemBracket*
/// @param callback void func(QCPItemBracket* self, QMetaMethod* signal)
void q_cpitembracket_on_disconnect_notify(void* self, void (*callback)(void*, void*));

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemBracket*
/// @param rect QRectF*
/// @param pos QPointF*
/// @param filledRect bool
double q_cpitembracket_rect_distance(void* self, void* rect, void* pos, bool filledRect);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemBracket*
/// @param rect QRectF*
/// @param pos QPointF*
/// @param filledRect bool
double q_cpitembracket_qbase_rect_distance(void* self, void* rect, void* pos, bool filledRect);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemBracket*
/// @param callback double func(QCPItemBracket* self, QRectF* rect, QPointF* pos, bool filledRect)
void q_cpitembracket_on_rect_distance(void* self, double (*callback)(void*, void*, void*, bool));

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemBracket*
/// @param name const char*
QCPItemPosition* q_cpitembracket_create_position(void* self, const char* name);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemBracket*
/// @param name const char*
QCPItemPosition* q_cpitembracket_qbase_create_position(void* self, const char* name);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemBracket*
/// @param callback QCPItemPosition* func(QCPItemBracket* self, const char* name)
void q_cpitembracket_on_create_position(void* self, QCPItemPosition* (*callback)(void*, const char*));

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemBracket*
/// @param name const char*
/// @param anchorId int
QCPItemAnchor* q_cpitembracket_create_anchor(void* self, const char* name, int anchorId);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemBracket*
/// @param name const char*
/// @param anchorId int
QCPItemAnchor* q_cpitembracket_qbase_create_anchor(void* self, const char* name, int anchorId);

/// Inherited from QCPAbstractItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractItem.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemBracket*
/// @param callback QCPItemAnchor* func(QCPItemBracket* self, const char* name, int anchorId)
void q_cpitembracket_on_create_anchor(void* self, QCPItemAnchor* (*callback)(void*, const char*, int));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemBracket*
/// @param parentPlot QCustomPlot*
void q_cpitembracket_initialize_parent_plot(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemBracket*
/// @param parentPlot QCustomPlot*
void q_cpitembracket_qbase_initialize_parent_plot(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemBracket*
/// @param callback void func(QCPItemBracket* self, QCustomPlot* parentPlot)
void q_cpitembracket_on_initialize_parent_plot(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemBracket*
/// @param parentLayerable QCPLayerable*
void q_cpitembracket_set_parent_layerable(void* self, void* parentLayerable);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemBracket*
/// @param parentLayerable QCPLayerable*
void q_cpitembracket_qbase_set_parent_layerable(void* self, void* parentLayerable);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemBracket*
/// @param callback void func(QCPItemBracket* self, QCPLayerable* parentLayerable)
void q_cpitembracket_on_set_parent_layerable(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemBracket*
/// @param layer QCPLayer*
/// @param prepend bool
bool q_cpitembracket_move_to_layer(void* self, void* layer, bool prepend);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemBracket*
/// @param layer QCPLayer*
/// @param prepend bool
bool q_cpitembracket_qbase_move_to_layer(void* self, void* layer, bool prepend);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemBracket*
/// @param callback bool func(QCPItemBracket* self, QCPLayer* layer, bool prepend)
void q_cpitembracket_on_move_to_layer(void* self, bool (*callback)(void*, void*, bool));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemBracket*
/// @param painter QCPPainter*
/// @param localAntialiased bool
/// @param overrideElement enum QCP__AntialiasedElement
void q_cpitembracket_apply_antialiasing_hint(void* self, void* painter, bool localAntialiased, int32_t overrideElement);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemBracket*
/// @param painter QCPPainter*
/// @param localAntialiased bool
/// @param overrideElement enum QCP__AntialiasedElement
void q_cpitembracket_qbase_apply_antialiasing_hint(void* self, void* painter, bool localAntialiased, int32_t overrideElement);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemBracket*
/// @param callback void func(QCPItemBracket* self, QCPPainter* painter, bool localAntialiased, enum QCP__AntialiasedElement overrideElement)
void q_cpitembracket_on_apply_antialiasing_hint(void* self, void (*callback)(void*, void*, bool, int32_t));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemBracket*
QObject* q_cpitembracket_sender(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemBracket*
QObject* q_cpitembracket_qbase_sender(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemBracket*
/// @param callback QObject* func()
void q_cpitembracket_on_sender(void* self, QObject* (*callback)());

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemBracket*
int32_t q_cpitembracket_sender_signal_index(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemBracket*
int32_t q_cpitembracket_qbase_sender_signal_index(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemBracket*
/// @param callback int32_t func()
void q_cpitembracket_on_sender_signal_index(void* self, int32_t (*callback)());

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemBracket*
/// @param signal const char*
int32_t q_cpitembracket_receivers(void* self, const char* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemBracket*
/// @param signal const char*
int32_t q_cpitembracket_qbase_receivers(void* self, const char* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemBracket*
/// @param callback int32_t func(QCPItemBracket* self, const char* signal)
void q_cpitembracket_on_receivers(void* self, int32_t (*callback)(void*, const char*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPItemBracket*
/// @param signal QMetaMethod*
bool q_cpitembracket_is_signal_connected(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPItemBracket*
/// @param signal QMetaMethod*
bool q_cpitembracket_qbase_is_signal_connected(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPItemBracket*
/// @param callback bool func(QCPItemBracket* self, QMetaMethod* signal)
void q_cpitembracket_on_is_signal_connected(void* self, bool (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#objectNameChanged)
///
/// Wrapper to allow calling private signal
///
/// @param self QCPItemBracket*
/// @param callback void func(QCPItemBracket* self, const char* objectName)
void q_cpitembracket_on_object_name_changed(void* self, void (*callback)(void*, const char*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPItemBracket.html)
///
/// Delete this object from C++ memory.
///
/// @param self QCPItemBracket*
void q_cpitembracket_delete(void* self);

/// https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html

/// q_cppolaraxisradial_new constructs a new QCPPolarAxisRadial object.
///
/// @param parent QCPPolarAxisAngular*
QCPPolarAxisRadial* q_cppolaraxisradial_new(void* parent);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#metaObject)
///
/// @param self QCPPolarAxisRadial*
const QMetaObject* q_cppolaraxisradial_meta_object(void* self);

/// @param self QCPPolarAxisRadial*
/// @param param1 const char*
void* q_cppolaraxisradial_metacast(void* self, const char* param1);

/// @param self QCPPolarAxisRadial*
/// @param param1 enum QMetaObject__Call
/// @param param2 int
/// @param param3 void*
int32_t q_cppolaraxisradial_metacall(void* self, int32_t param1, int param2, void* param3);

/// Allows for overriding the related default method
///
/// @param self QCPPolarAxisRadial*
/// @param callback int32_t func(QCPPolarAxisRadial* self, enum QMetaObject__Call param1, int param2, void* param3)
void q_cppolaraxisradial_on_metacall(void* self, int32_t (*callback)(void*, int32_t, int, void*));

/// Base class method implementation
///
/// @param self QCPPolarAxisRadial*
/// @param param1 enum QMetaObject__Call
/// @param param2 int
/// @param param3 void*
int32_t q_cppolaraxisradial_qbase_metacall(void* self, int32_t param1, int param2, void* param3);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
const char* q_cppolaraxisradial_tr(const char* s);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
bool q_cppolaraxisradial_range_drag(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
bool q_cppolaraxisradial_range_zoom(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
double q_cppolaraxisradial_range_zoom_factor(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
QCPPolarAxisAngular* q_cppolaraxisradial_angular_axis(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
///
/// @return enum QCPPolarAxisRadial__ScaleType
int32_t q_cppolaraxisradial_scale_type(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
const QCPRange* q_cppolaraxisradial_range(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
bool q_cppolaraxisradial_range_reversed(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
double q_cppolaraxisradial_angle(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
///
/// @return enum QCPPolarAxisRadial__AngleReference
int32_t q_cppolaraxisradial_angle_reference(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
bool q_cppolaraxisradial_ticks(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
bool q_cppolaraxisradial_tick_labels(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
int32_t q_cppolaraxisradial_tick_label_padding(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
QFont* q_cppolaraxisradial_tick_label_font(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
QColor* q_cppolaraxisradial_tick_label_color(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
double q_cppolaraxisradial_tick_label_rotation(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
///
/// @return enum QCPPolarAxisRadial__LabelMode
int32_t q_cppolaraxisradial_tick_label_mode(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPPolarAxisRadial*
const char* q_cppolaraxisradial_number_format(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
int32_t q_cppolaraxisradial_number_precision(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
libqt_list /* of double */ q_cppolaraxisradial_tick_vector(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
libqt_list /* of double */ q_cppolaraxisradial_sub_tick_vector(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPPolarAxisRadial*
const char** q_cppolaraxisradial_tick_vector_labels(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
int32_t q_cppolaraxisradial_tick_length_in(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
int32_t q_cppolaraxisradial_tick_length_out(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
bool q_cppolaraxisradial_sub_ticks(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
int32_t q_cppolaraxisradial_sub_tick_length_in(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
int32_t q_cppolaraxisradial_sub_tick_length_out(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
QPen* q_cppolaraxisradial_base_pen(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
QPen* q_cppolaraxisradial_tick_pen(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
QPen* q_cppolaraxisradial_sub_tick_pen(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
QFont* q_cppolaraxisradial_label_font(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
QColor* q_cppolaraxisradial_label_color(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPPolarAxisRadial*
const char* q_cppolaraxisradial_label(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
int32_t q_cppolaraxisradial_label_padding(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
///
/// @return flag of enum QCPPolarAxisRadial__SelectablePart
int32_t q_cppolaraxisradial_selected_parts(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
///
/// @return flag of enum QCPPolarAxisRadial__SelectablePart
int32_t q_cppolaraxisradial_selectable_parts(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
QFont* q_cppolaraxisradial_selected_tick_label_font(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
QFont* q_cppolaraxisradial_selected_label_font(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
QColor* q_cppolaraxisradial_selected_tick_label_color(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
QColor* q_cppolaraxisradial_selected_label_color(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
QPen* q_cppolaraxisradial_selected_base_pen(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
QPen* q_cppolaraxisradial_selected_tick_pen(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
QPen* q_cppolaraxisradial_selected_sub_tick_pen(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
/// @param enabled bool
void q_cppolaraxisradial_set_range_drag(void* self, bool enabled);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
/// @param enabled bool
void q_cppolaraxisradial_set_range_zoom(void* self, bool enabled);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
/// @param factor double
void q_cppolaraxisradial_set_range_zoom_factor(void* self, double factor);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
/// @param type enum QCPPolarAxisRadial__ScaleType
void q_cppolaraxisradial_set_scale_type(void* self, int32_t type);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
/// @param range QCPRange*
void q_cppolaraxisradial_set_range(void* self, void* range);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
/// @param lower double
/// @param upper double
void q_cppolaraxisradial_set_range2(void* self, double lower, double upper);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
/// @param position double
/// @param size double
/// @param alignment enum Qt__AlignmentFlag
void q_cppolaraxisradial_set_range3(void* self, double position, double size, int32_t alignment);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
/// @param lower double
void q_cppolaraxisradial_set_range_lower(void* self, double lower);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
/// @param upper double
void q_cppolaraxisradial_set_range_upper(void* self, double upper);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
/// @param reversed bool
void q_cppolaraxisradial_set_range_reversed(void* self, bool reversed);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
/// @param degrees double
void q_cppolaraxisradial_set_angle(void* self, double degrees);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
/// @param reference enum QCPPolarAxisRadial__AngleReference
void q_cppolaraxisradial_set_angle_reference(void* self, int32_t reference);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
/// @param show bool
void q_cppolaraxisradial_set_ticks(void* self, bool show);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
/// @param show bool
void q_cppolaraxisradial_set_tick_labels(void* self, bool show);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
/// @param padding int
void q_cppolaraxisradial_set_tick_label_padding(void* self, int padding);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
/// @param font QFont*
void q_cppolaraxisradial_set_tick_label_font(void* self, void* font);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
/// @param color QColor*
void q_cppolaraxisradial_set_tick_label_color(void* self, void* color);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
/// @param degrees double
void q_cppolaraxisradial_set_tick_label_rotation(void* self, double degrees);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
/// @param mode enum QCPPolarAxisRadial__LabelMode
void q_cppolaraxisradial_set_tick_label_mode(void* self, int32_t mode);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
/// @param formatCode const char*
void q_cppolaraxisradial_set_number_format(void* self, const char* formatCode);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
/// @param precision int
void q_cppolaraxisradial_set_number_precision(void* self, int precision);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
/// @param inside int
void q_cppolaraxisradial_set_tick_length(void* self, int inside);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
/// @param inside int
void q_cppolaraxisradial_set_tick_length_in(void* self, int inside);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
/// @param outside int
void q_cppolaraxisradial_set_tick_length_out(void* self, int outside);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
/// @param show bool
void q_cppolaraxisradial_set_sub_ticks(void* self, bool show);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
/// @param inside int
void q_cppolaraxisradial_set_sub_tick_length(void* self, int inside);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
/// @param inside int
void q_cppolaraxisradial_set_sub_tick_length_in(void* self, int inside);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
/// @param outside int
void q_cppolaraxisradial_set_sub_tick_length_out(void* self, int outside);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
/// @param pen QPen*
void q_cppolaraxisradial_set_base_pen(void* self, void* pen);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
/// @param pen QPen*
void q_cppolaraxisradial_set_tick_pen(void* self, void* pen);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
/// @param pen QPen*
void q_cppolaraxisradial_set_sub_tick_pen(void* self, void* pen);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
/// @param font QFont*
void q_cppolaraxisradial_set_label_font(void* self, void* font);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
/// @param color QColor*
void q_cppolaraxisradial_set_label_color(void* self, void* color);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
/// @param str const char*
void q_cppolaraxisradial_set_label(void* self, const char* str);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
/// @param padding int
void q_cppolaraxisradial_set_label_padding(void* self, int padding);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
/// @param font QFont*
void q_cppolaraxisradial_set_selected_tick_label_font(void* self, void* font);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
/// @param font QFont*
void q_cppolaraxisradial_set_selected_label_font(void* self, void* font);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
/// @param color QColor*
void q_cppolaraxisradial_set_selected_tick_label_color(void* self, void* color);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
/// @param color QColor*
void q_cppolaraxisradial_set_selected_label_color(void* self, void* color);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
/// @param pen QPen*
void q_cppolaraxisradial_set_selected_base_pen(void* self, void* pen);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
/// @param pen QPen*
void q_cppolaraxisradial_set_selected_tick_pen(void* self, void* pen);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
/// @param pen QPen*
void q_cppolaraxisradial_set_selected_sub_tick_pen(void* self, void* pen);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
/// @param selectableParts flag of enum QCPPolarAxisRadial__SelectablePart
void q_cppolaraxisradial_set_selectable_parts(void* self, const int32_t* selectableParts);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
/// @param selectedParts flag of enum QCPPolarAxisRadial__SelectablePart
void q_cppolaraxisradial_set_selected_parts(void* self, const int32_t* selectedParts);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
/// @param pos QPointF*
/// @param onlySelectable bool
/// @param details QVariant*
double q_cppolaraxisradial_select_test(void* self, void* pos, bool onlySelectable, void* details);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPPolarAxisRadial*
/// @param callback double func(QCPPolarAxisRadial* self, QPointF* pos, bool onlySelectable, QVariant* details)
void q_cppolaraxisradial_on_select_test(void* self, double (*callback)(void*, void*, bool, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// Base class method implementation
///
/// @param self QCPPolarAxisRadial*
/// @param pos QPointF*
/// @param onlySelectable bool
/// @param details QVariant*
double q_cppolaraxisradial_qbase_select_test(void* self, void* pos, bool onlySelectable, void* details);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
/// @param diff double
void q_cppolaraxisradial_move_range(void* self, double diff);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
/// @param factor double
void q_cppolaraxisradial_scale_range(void* self, double factor);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
/// @param factor double
/// @param center double
void q_cppolaraxisradial_scale_range2(void* self, double factor, double center);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
void q_cppolaraxisradial_rescale(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
/// @param pixelPos QPointF*
/// @param angleCoord double*
/// @param radiusCoord double*
void q_cppolaraxisradial_pixel_to_coord(void* self, void* pixelPos, double* angleCoord, double* radiusCoord);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
/// @param angleCoord double
/// @param radiusCoord double
QPointF* q_cppolaraxisradial_coord_to_pixel(void* self, double angleCoord, double radiusCoord);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
/// @param coord double
double q_cppolaraxisradial_coord_to_radius(void* self, double coord);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
/// @param radius double
double q_cppolaraxisradial_radius_to_coord(void* self, double radius);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
/// @param pos QPointF*
///
/// @return enum QCPPolarAxisRadial__SelectablePart
int32_t q_cppolaraxisradial_get_part_at(void* self, void* pos);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
/// @param newRange QCPRange*
void q_cppolaraxisradial_range_changed(void* self, void* newRange);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
/// @param newRange QCPRange*
/// @param oldRange QCPRange*
void q_cppolaraxisradial_range_changed2(void* self, void* newRange, void* oldRange);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
/// @param scaleType enum QCPPolarAxisRadial__ScaleType
void q_cppolaraxisradial_scale_type_changed(void* self, int32_t scaleType);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
/// @param parts flag of enum QCPPolarAxisRadial__SelectablePart
void q_cppolaraxisradial_selection_changed(void* self, const int32_t* parts);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
/// @param parts flag of enum QCPPolarAxisRadial__SelectablePart
void q_cppolaraxisradial_selectable_changed(void* self, const int32_t* parts);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
/// @param painter QCPPainter*
void q_cppolaraxisradial_apply_default_antialiasing_hint(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPPolarAxisRadial*
/// @param callback void func(QCPPolarAxisRadial* self, QCPPainter* painter)
void q_cppolaraxisradial_on_apply_default_antialiasing_hint(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// Base class method implementation
///
/// @param self QCPPolarAxisRadial*
/// @param painter QCPPainter*
void q_cppolaraxisradial_qbase_apply_default_antialiasing_hint(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
/// @param painter QCPPainter*
void q_cppolaraxisradial_draw(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPPolarAxisRadial*
/// @param callback void func(QCPPolarAxisRadial* self, QCPPainter* painter)
void q_cppolaraxisradial_on_draw(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// Base class method implementation
///
/// @param self QCPPolarAxisRadial*
/// @param painter QCPPainter*
void q_cppolaraxisradial_qbase_draw(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
///
/// @return enum QCP__Interaction
int32_t q_cppolaraxisradial_selection_category(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPPolarAxisRadial*
/// @param callback int32_t func()
void q_cppolaraxisradial_on_selection_category(void* self, int32_t (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// Base class method implementation
///
/// @param self QCPPolarAxisRadial*
///
/// @return enum QCP__Interaction
int32_t q_cppolaraxisradial_qbase_selection_category(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
/// @param event QMouseEvent*
/// @param additive bool
/// @param details QVariant*
/// @param selectionStateChanged bool*
void q_cppolaraxisradial_select_event(void* self, void* event, bool additive, void* details, bool* selectionStateChanged);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPPolarAxisRadial*
/// @param callback void func(QCPPolarAxisRadial* self, QMouseEvent* event, bool additive, QVariant* details, bool* selectionStateChanged)
void q_cppolaraxisradial_on_select_event(void* self, void (*callback)(void*, void*, bool, void*, bool*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// Base class method implementation
///
/// @param self QCPPolarAxisRadial*
/// @param event QMouseEvent*
/// @param additive bool
/// @param details QVariant*
/// @param selectionStateChanged bool*
void q_cppolaraxisradial_qbase_select_event(void* self, void* event, bool additive, void* details, bool* selectionStateChanged);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
/// @param selectionStateChanged bool*
void q_cppolaraxisradial_deselect_event(void* self, bool* selectionStateChanged);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPPolarAxisRadial*
/// @param callback void func(QCPPolarAxisRadial* self, bool* selectionStateChanged)
void q_cppolaraxisradial_on_deselect_event(void* self, void (*callback)(void*, bool*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// Base class method implementation
///
/// @param self QCPPolarAxisRadial*
/// @param selectionStateChanged bool*
void q_cppolaraxisradial_qbase_deselect_event(void* self, bool* selectionStateChanged);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cppolaraxisradial_mouse_press_event(void* self, void* event, void* details);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPPolarAxisRadial*
/// @param callback void func(QCPPolarAxisRadial* self, QMouseEvent* event, QVariant* details)
void q_cppolaraxisradial_on_mouse_press_event(void* self, void (*callback)(void*, void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// Base class method implementation
///
/// @param self QCPPolarAxisRadial*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cppolaraxisradial_qbase_mouse_press_event(void* self, void* event, void* details);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cppolaraxisradial_mouse_move_event(void* self, void* event, void* startPos);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPPolarAxisRadial*
/// @param callback void func(QCPPolarAxisRadial* self, QMouseEvent* event, QPointF* startPos)
void q_cppolaraxisradial_on_mouse_move_event(void* self, void (*callback)(void*, void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// Base class method implementation
///
/// @param self QCPPolarAxisRadial*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cppolaraxisradial_qbase_mouse_move_event(void* self, void* event, void* startPos);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cppolaraxisradial_mouse_release_event(void* self, void* event, void* startPos);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPPolarAxisRadial*
/// @param callback void func(QCPPolarAxisRadial* self, QMouseEvent* event, QPointF* startPos)
void q_cppolaraxisradial_on_mouse_release_event(void* self, void (*callback)(void*, void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// Base class method implementation
///
/// @param self QCPPolarAxisRadial*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cppolaraxisradial_qbase_mouse_release_event(void* self, void* event, void* startPos);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
/// @param event QWheelEvent*
void q_cppolaraxisradial_wheel_event(void* self, void* event);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPPolarAxisRadial*
/// @param callback void func(QCPPolarAxisRadial* self, QWheelEvent* event)
void q_cppolaraxisradial_on_wheel_event(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// Base class method implementation
///
/// @param self QCPPolarAxisRadial*
/// @param event QWheelEvent*
void q_cppolaraxisradial_qbase_wheel_event(void* self, void* event);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
/// @param center QPointF*
/// @param radius double
void q_cppolaraxisradial_update_geometry(void* self, void* center, double radius);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPPolarAxisRadial*
/// @param callback void func(QCPPolarAxisRadial* self, QPointF* center, double radius)
void q_cppolaraxisradial_on_update_geometry(void* self, void (*callback)(void*, void*, double));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// Base class method implementation
///
/// @param self QCPPolarAxisRadial*
/// @param center QPointF*
/// @param radius double
void q_cppolaraxisradial_qbase_update_geometry(void* self, void* center, double radius);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
void q_cppolaraxisradial_setup_tick_vectors(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPPolarAxisRadial*
/// @param callback void func()
void q_cppolaraxisradial_on_setup_tick_vectors(void* self, void (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// Base class method implementation
///
/// @param self QCPPolarAxisRadial*
void q_cppolaraxisradial_qbase_setup_tick_vectors(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
QPen* q_cppolaraxisradial_get_base_pen(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPPolarAxisRadial*
/// @param callback QPen* func()
void q_cppolaraxisradial_on_get_base_pen(void* self, QPen* (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// Base class method implementation
///
/// @param self QCPPolarAxisRadial*
QPen* q_cppolaraxisradial_qbase_get_base_pen(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
QPen* q_cppolaraxisradial_get_tick_pen(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPPolarAxisRadial*
/// @param callback QPen* func()
void q_cppolaraxisradial_on_get_tick_pen(void* self, QPen* (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// Base class method implementation
///
/// @param self QCPPolarAxisRadial*
QPen* q_cppolaraxisradial_qbase_get_tick_pen(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
QPen* q_cppolaraxisradial_get_sub_tick_pen(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPPolarAxisRadial*
/// @param callback QPen* func()
void q_cppolaraxisradial_on_get_sub_tick_pen(void* self, QPen* (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// Base class method implementation
///
/// @param self QCPPolarAxisRadial*
QPen* q_cppolaraxisradial_qbase_get_sub_tick_pen(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
QFont* q_cppolaraxisradial_get_tick_label_font(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPPolarAxisRadial*
/// @param callback QFont* func()
void q_cppolaraxisradial_on_get_tick_label_font(void* self, QFont* (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// Base class method implementation
///
/// @param self QCPPolarAxisRadial*
QFont* q_cppolaraxisradial_qbase_get_tick_label_font(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
QFont* q_cppolaraxisradial_get_label_font(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPPolarAxisRadial*
/// @param callback QFont* func()
void q_cppolaraxisradial_on_get_label_font(void* self, QFont* (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// Base class method implementation
///
/// @param self QCPPolarAxisRadial*
QFont* q_cppolaraxisradial_qbase_get_label_font(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
QColor* q_cppolaraxisradial_get_tick_label_color(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPPolarAxisRadial*
/// @param callback QColor* func()
void q_cppolaraxisradial_on_get_tick_label_color(void* self, QColor* (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// Base class method implementation
///
/// @param self QCPPolarAxisRadial*
QColor* q_cppolaraxisradial_qbase_get_tick_label_color(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
QColor* q_cppolaraxisradial_get_label_color(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPPolarAxisRadial*
/// @param callback QColor* func()
void q_cppolaraxisradial_on_get_label_color(void* self, QColor* (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// Base class method implementation
///
/// @param self QCPPolarAxisRadial*
QColor* q_cppolaraxisradial_qbase_get_label_color(void* self);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
/// @param c const char*
const char* q_cppolaraxisradial_tr2(const char* s, const char* c);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
/// @param c const char*
/// @param n int
const char* q_cppolaraxisradial_tr3(const char* s, const char* c, int n);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
/// @param inside int
/// @param outside int
void q_cppolaraxisradial_set_tick_length2(void* self, int inside, int outside);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
/// @param inside int
/// @param outside int
void q_cppolaraxisradial_set_sub_tick_length2(void* self, int inside, int outside);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// @param self QCPPolarAxisRadial*
/// @param onlyVisiblePlottables bool
void q_cppolaraxisradial_rescale1(void* self, bool onlyVisiblePlottables);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPPolarAxisRadial*
bool q_cppolaraxisradial_visible(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPPolarAxisRadial*
QCustomPlot* q_cppolaraxisradial_parent_plot(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPPolarAxisRadial*
QCPLayerable* q_cppolaraxisradial_parent_layerable(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPPolarAxisRadial*
QCPLayer* q_cppolaraxisradial_layer(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPPolarAxisRadial*
bool q_cppolaraxisradial_antialiased(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPPolarAxisRadial*
/// @param on bool
void q_cppolaraxisradial_set_visible(void* self, bool on);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPPolarAxisRadial*
/// @param layer QCPLayer*
bool q_cppolaraxisradial_set_layer(void* self, void* layer);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPPolarAxisRadial*
/// @param layerName const char*
bool q_cppolaraxisradial_set_layer2(void* self, const char* layerName);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPPolarAxisRadial*
/// @param enabled bool
void q_cppolaraxisradial_set_antialiased(void* self, bool enabled);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPPolarAxisRadial*
bool q_cppolaraxisradial_real_visibility(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPPolarAxisRadial*
/// @param newLayer QCPLayer*
void q_cppolaraxisradial_layer_changed(void* self, void* newLayer);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPPolarAxisRadial*
/// @param callback void func(QCPPolarAxisRadial* self, QCPLayer* newLayer)
void q_cppolaraxisradial_on_layer_changed(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#objectName)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPPolarAxisRadial*
const char* q_cppolaraxisradial_object_name(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setObjectName)
///
/// @param self QCPPolarAxisRadial*
/// @param name char*
void q_cppolaraxisradial_set_object_name(void* self, char* name);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isWidgetType)
///
/// @param self QCPPolarAxisRadial*
bool q_cppolaraxisradial_is_widget_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isWindowType)
///
/// @param self QCPPolarAxisRadial*
bool q_cppolaraxisradial_is_window_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isQuickItemType)
///
/// @param self QCPPolarAxisRadial*
bool q_cppolaraxisradial_is_quick_item_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#signalsBlocked)
///
/// @param self QCPPolarAxisRadial*
bool q_cppolaraxisradial_signals_blocked(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#blockSignals)
///
/// @param self QCPPolarAxisRadial*
/// @param b bool
bool q_cppolaraxisradial_block_signals(void* self, bool b);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#thread)
///
/// @param self QCPPolarAxisRadial*
QThread* q_cppolaraxisradial_thread(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#moveToThread)
///
/// @param self QCPPolarAxisRadial*
/// @param thread QThread*
bool q_cppolaraxisradial_move_to_thread(void* self, void* thread);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#startTimer)
///
/// @param self QCPPolarAxisRadial*
/// @param interval int
int32_t q_cppolaraxisradial_start_timer(void* self, int interval);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#killTimer)
///
/// @param self QCPPolarAxisRadial*
/// @param id int
void q_cppolaraxisradial_kill_timer(void* self, int id);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#killTimer)
///
/// @param self QCPPolarAxisRadial*
/// @param id enum Qt__TimerId
void q_cppolaraxisradial_kill_timer2(void* self, int32_t id);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#children)
///
/// @param self QCPPolarAxisRadial*
libqt_list /* of QObject* */ q_cppolaraxisradial_children(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setParent)
///
/// @param self QCPPolarAxisRadial*
/// @param parent QObject*
void q_cppolaraxisradial_set_parent(void* self, void* parent);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#installEventFilter)
///
/// @param self QCPPolarAxisRadial*
/// @param filterObj QObject*
void q_cppolaraxisradial_install_event_filter(void* self, void* filterObj);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#removeEventFilter)
///
/// @param self QCPPolarAxisRadial*
/// @param obj QObject*
void q_cppolaraxisradial_remove_event_filter(void* self, void* obj);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param method QMetaMethod*
QMetaObject__Connection* q_cppolaraxisradial_connect(void* sender, void* signal, void* receiver, void* method);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param self QCPPolarAxisRadial*
/// @param sender QObject*
/// @param signal const char*
/// @param member const char*
QMetaObject__Connection* q_cppolaraxisradial_connect2(void* self, void* sender, const char* signal, const char* member);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param member QMetaMethod*
bool q_cppolaraxisradial_disconnect(void* sender, void* signal, void* receiver, void* member);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnect)
///
/// @param param1 QMetaObject__Connection*
bool q_cppolaraxisradial_disconnect2(void* param1);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dumpObjectTree)
///
/// @param self QCPPolarAxisRadial*
void q_cppolaraxisradial_dump_object_tree(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dumpObjectInfo)
///
/// @param self QCPPolarAxisRadial*
void q_cppolaraxisradial_dump_object_info(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setProperty)
///
/// @param self QCPPolarAxisRadial*
/// @param name const char*
/// @param value QVariant*
bool q_cppolaraxisradial_set_property(void* self, const char* name, void* value);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#property)
///
/// @param self QCPPolarAxisRadial*
/// @param name const char*
QVariant* q_cppolaraxisradial_property(void* self, const char* name);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dynamicPropertyNames)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPPolarAxisRadial*
const char** q_cppolaraxisradial_dynamic_property_names(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#bindingStorage)
///
/// @param self QCPPolarAxisRadial*
QBindingStorage* q_cppolaraxisradial_binding_storage(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#bindingStorage)
///
/// @param self QCPPolarAxisRadial*
const QBindingStorage* q_cppolaraxisradial_binding_storage2(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPPolarAxisRadial*
void q_cppolaraxisradial_destroyed(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPPolarAxisRadial*
/// @param callback void func(QCPPolarAxisRadial* self)
void q_cppolaraxisradial_on_destroyed(void* self, void (*callback)(void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#parent)
///
/// @param self QCPPolarAxisRadial*
QObject* q_cppolaraxisradial_parent(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#inherits)
///
/// @param self QCPPolarAxisRadial*
/// @param classname const char*
bool q_cppolaraxisradial_inherits(void* self, const char* classname);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#deleteLater)
///
/// @param self QCPPolarAxisRadial*
void q_cppolaraxisradial_delete_later(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#moveToThread)
///
/// @param self QCPPolarAxisRadial*
/// @param thread QThread*
/// @param param2 Disambiguated_t*
bool q_cppolaraxisradial_move_to_thread2(void* self, void* thread, void* param2);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#startTimer)
///
/// @param self QCPPolarAxisRadial*
/// @param interval int
/// @param timerType enum Qt__TimerType
int32_t q_cppolaraxisradial_start_timer22(void* self, int interval, int32_t timerType);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param method QMetaMethod*
/// @param type enum Qt__ConnectionType
QMetaObject__Connection* q_cppolaraxisradial_connect5(void* sender, void* signal, void* receiver, void* method, int32_t type);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param self QCPPolarAxisRadial*
/// @param sender QObject*
/// @param signal const char*
/// @param member const char*
/// @param type enum Qt__ConnectionType
QMetaObject__Connection* q_cppolaraxisradial_connect4(void* self, void* sender, const char* signal, const char* member, int32_t type);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPPolarAxisRadial*
/// @param param1 QObject*
void q_cppolaraxisradial_destroyed1(void* self, void* param1);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPPolarAxisRadial*
/// @param callback void func(QCPPolarAxisRadial* self, QObject* param1)
void q_cppolaraxisradial_on_destroyed1(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarAxisRadial*
/// @param parentPlot QCustomPlot*
void q_cppolaraxisradial_parent_plot_initialized(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarAxisRadial*
/// @param parentPlot QCustomPlot*
void q_cppolaraxisradial_qbase_parent_plot_initialized(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarAxisRadial*
/// @param callback void func(QCPPolarAxisRadial* self, QCustomPlot* parentPlot)
void q_cppolaraxisradial_on_parent_plot_initialized(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarAxisRadial*
QRect* q_cppolaraxisradial_clip_rect(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarAxisRadial*
QRect* q_cppolaraxisradial_qbase_clip_rect(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarAxisRadial*
/// @param callback QRect* func()
void q_cppolaraxisradial_on_clip_rect(void* self, QRect* (*callback)());

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarAxisRadial*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cppolaraxisradial_mouse_double_click_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarAxisRadial*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cppolaraxisradial_qbase_mouse_double_click_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarAxisRadial*
/// @param callback void func(QCPPolarAxisRadial* self, QMouseEvent* event, QVariant* details)
void q_cppolaraxisradial_on_mouse_double_click_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarAxisRadial*
/// @param event QEvent*
bool q_cppolaraxisradial_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarAxisRadial*
/// @param event QEvent*
bool q_cppolaraxisradial_qbase_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarAxisRadial*
/// @param callback bool func(QCPPolarAxisRadial* self, QEvent* event)
void q_cppolaraxisradial_on_event(void* self, bool (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarAxisRadial*
/// @param watched QObject*
/// @param event QEvent*
bool q_cppolaraxisradial_event_filter(void* self, void* watched, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarAxisRadial*
/// @param watched QObject*
/// @param event QEvent*
bool q_cppolaraxisradial_qbase_event_filter(void* self, void* watched, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarAxisRadial*
/// @param callback bool func(QCPPolarAxisRadial* self, QObject* watched, QEvent* event)
void q_cppolaraxisradial_on_event_filter(void* self, bool (*callback)(void*, void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarAxisRadial*
/// @param event QTimerEvent*
void q_cppolaraxisradial_timer_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarAxisRadial*
/// @param event QTimerEvent*
void q_cppolaraxisradial_qbase_timer_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarAxisRadial*
/// @param callback void func(QCPPolarAxisRadial* self, QTimerEvent* event)
void q_cppolaraxisradial_on_timer_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarAxisRadial*
/// @param event QChildEvent*
void q_cppolaraxisradial_child_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarAxisRadial*
/// @param event QChildEvent*
void q_cppolaraxisradial_qbase_child_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarAxisRadial*
/// @param callback void func(QCPPolarAxisRadial* self, QChildEvent* event)
void q_cppolaraxisradial_on_child_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarAxisRadial*
/// @param event QEvent*
void q_cppolaraxisradial_custom_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarAxisRadial*
/// @param event QEvent*
void q_cppolaraxisradial_qbase_custom_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarAxisRadial*
/// @param callback void func(QCPPolarAxisRadial* self, QEvent* event)
void q_cppolaraxisradial_on_custom_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarAxisRadial*
/// @param signal QMetaMethod*
void q_cppolaraxisradial_connect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarAxisRadial*
/// @param signal QMetaMethod*
void q_cppolaraxisradial_qbase_connect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarAxisRadial*
/// @param callback void func(QCPPolarAxisRadial* self, QMetaMethod* signal)
void q_cppolaraxisradial_on_connect_notify(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarAxisRadial*
/// @param signal QMetaMethod*
void q_cppolaraxisradial_disconnect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarAxisRadial*
/// @param signal QMetaMethod*
void q_cppolaraxisradial_qbase_disconnect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarAxisRadial*
/// @param callback void func(QCPPolarAxisRadial* self, QMetaMethod* signal)
void q_cppolaraxisradial_on_disconnect_notify(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarAxisRadial*
/// @param parentPlot QCustomPlot*
void q_cppolaraxisradial_initialize_parent_plot(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarAxisRadial*
/// @param parentPlot QCustomPlot*
void q_cppolaraxisradial_qbase_initialize_parent_plot(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarAxisRadial*
/// @param callback void func(QCPPolarAxisRadial* self, QCustomPlot* parentPlot)
void q_cppolaraxisradial_on_initialize_parent_plot(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarAxisRadial*
/// @param parentLayerable QCPLayerable*
void q_cppolaraxisradial_set_parent_layerable(void* self, void* parentLayerable);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarAxisRadial*
/// @param parentLayerable QCPLayerable*
void q_cppolaraxisradial_qbase_set_parent_layerable(void* self, void* parentLayerable);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarAxisRadial*
/// @param callback void func(QCPPolarAxisRadial* self, QCPLayerable* parentLayerable)
void q_cppolaraxisradial_on_set_parent_layerable(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarAxisRadial*
/// @param layer QCPLayer*
/// @param prepend bool
bool q_cppolaraxisradial_move_to_layer(void* self, void* layer, bool prepend);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarAxisRadial*
/// @param layer QCPLayer*
/// @param prepend bool
bool q_cppolaraxisradial_qbase_move_to_layer(void* self, void* layer, bool prepend);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarAxisRadial*
/// @param callback bool func(QCPPolarAxisRadial* self, QCPLayer* layer, bool prepend)
void q_cppolaraxisradial_on_move_to_layer(void* self, bool (*callback)(void*, void*, bool));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarAxisRadial*
/// @param painter QCPPainter*
/// @param localAntialiased bool
/// @param overrideElement enum QCP__AntialiasedElement
void q_cppolaraxisradial_apply_antialiasing_hint(void* self, void* painter, bool localAntialiased, int32_t overrideElement);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarAxisRadial*
/// @param painter QCPPainter*
/// @param localAntialiased bool
/// @param overrideElement enum QCP__AntialiasedElement
void q_cppolaraxisradial_qbase_apply_antialiasing_hint(void* self, void* painter, bool localAntialiased, int32_t overrideElement);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarAxisRadial*
/// @param callback void func(QCPPolarAxisRadial* self, QCPPainter* painter, bool localAntialiased, enum QCP__AntialiasedElement overrideElement)
void q_cppolaraxisradial_on_apply_antialiasing_hint(void* self, void (*callback)(void*, void*, bool, int32_t));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarAxisRadial*
QObject* q_cppolaraxisradial_sender(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarAxisRadial*
QObject* q_cppolaraxisradial_qbase_sender(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarAxisRadial*
/// @param callback QObject* func()
void q_cppolaraxisradial_on_sender(void* self, QObject* (*callback)());

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarAxisRadial*
int32_t q_cppolaraxisradial_sender_signal_index(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarAxisRadial*
int32_t q_cppolaraxisradial_qbase_sender_signal_index(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarAxisRadial*
/// @param callback int32_t func()
void q_cppolaraxisradial_on_sender_signal_index(void* self, int32_t (*callback)());

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarAxisRadial*
/// @param signal const char*
int32_t q_cppolaraxisradial_receivers(void* self, const char* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarAxisRadial*
/// @param signal const char*
int32_t q_cppolaraxisradial_qbase_receivers(void* self, const char* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarAxisRadial*
/// @param callback int32_t func(QCPPolarAxisRadial* self, const char* signal)
void q_cppolaraxisradial_on_receivers(void* self, int32_t (*callback)(void*, const char*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarAxisRadial*
/// @param signal QMetaMethod*
bool q_cppolaraxisradial_is_signal_connected(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarAxisRadial*
/// @param signal QMetaMethod*
bool q_cppolaraxisradial_qbase_is_signal_connected(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarAxisRadial*
/// @param callback bool func(QCPPolarAxisRadial* self, QMetaMethod* signal)
void q_cppolaraxisradial_on_is_signal_connected(void* self, bool (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#objectNameChanged)
///
/// Wrapper to allow calling private signal
///
/// @param self QCPPolarAxisRadial*
/// @param callback void func(QCPPolarAxisRadial* self, const char* objectName)
void q_cppolaraxisradial_on_object_name_changed(void* self, void (*callback)(void*, const char*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisRadial.html)
///
/// Delete this object from C++ memory.
///
/// @param self QCPPolarAxisRadial*
void q_cppolaraxisradial_delete(void* self);

/// https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html

/// q_cppolaraxisangular_new constructs a new QCPPolarAxisAngular object.
///
/// @param parentPlot QCustomPlot*
QCPPolarAxisAngular* q_cppolaraxisangular_new(void* parentPlot);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#metaObject)
///
/// @param self QCPPolarAxisAngular*
const QMetaObject* q_cppolaraxisangular_meta_object(void* self);

/// @param self QCPPolarAxisAngular*
/// @param param1 const char*
void* q_cppolaraxisangular_metacast(void* self, const char* param1);

/// @param self QCPPolarAxisAngular*
/// @param param1 enum QMetaObject__Call
/// @param param2 int
/// @param param3 void*
int32_t q_cppolaraxisangular_metacall(void* self, int32_t param1, int param2, void* param3);

/// Allows for overriding the related default method
///
/// @param self QCPPolarAxisAngular*
/// @param callback int32_t func(QCPPolarAxisAngular* self, enum QMetaObject__Call param1, int param2, void* param3)
void q_cppolaraxisangular_on_metacall(void* self, int32_t (*callback)(void*, int32_t, int, void*));

/// Base class method implementation
///
/// @param self QCPPolarAxisAngular*
/// @param param1 enum QMetaObject__Call
/// @param param2 int
/// @param param3 void*
int32_t q_cppolaraxisangular_qbase_metacall(void* self, int32_t param1, int param2, void* param3);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
const char* q_cppolaraxisangular_tr(const char* s);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
QPixmap* q_cppolaraxisangular_background(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
QBrush* q_cppolaraxisangular_background_brush(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
bool q_cppolaraxisangular_background_scaled(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
///
/// @return enum Qt__AspectRatioMode
int32_t q_cppolaraxisangular_background_scaled_mode(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
bool q_cppolaraxisangular_range_drag(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
bool q_cppolaraxisangular_range_zoom(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
double q_cppolaraxisangular_range_zoom_factor(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
const QCPRange* q_cppolaraxisangular_range(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
bool q_cppolaraxisangular_range_reversed(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
double q_cppolaraxisangular_angle(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
bool q_cppolaraxisangular_ticks(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
bool q_cppolaraxisangular_tick_labels(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
int32_t q_cppolaraxisangular_tick_label_padding(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
QFont* q_cppolaraxisangular_tick_label_font(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
QColor* q_cppolaraxisangular_tick_label_color(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
double q_cppolaraxisangular_tick_label_rotation(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
///
/// @return enum QCPPolarAxisAngular__LabelMode
int32_t q_cppolaraxisangular_tick_label_mode(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPPolarAxisAngular*
const char* q_cppolaraxisangular_number_format(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
int32_t q_cppolaraxisangular_number_precision(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
libqt_list /* of double */ q_cppolaraxisangular_tick_vector(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPPolarAxisAngular*
const char** q_cppolaraxisangular_tick_vector_labels(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
int32_t q_cppolaraxisangular_tick_length_in(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
int32_t q_cppolaraxisangular_tick_length_out(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
bool q_cppolaraxisangular_sub_ticks(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
int32_t q_cppolaraxisangular_sub_tick_length_in(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
int32_t q_cppolaraxisangular_sub_tick_length_out(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
QPen* q_cppolaraxisangular_base_pen(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
QPen* q_cppolaraxisangular_tick_pen(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
QPen* q_cppolaraxisangular_sub_tick_pen(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
QFont* q_cppolaraxisangular_label_font(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
QColor* q_cppolaraxisangular_label_color(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPPolarAxisAngular*
const char* q_cppolaraxisangular_label(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
int32_t q_cppolaraxisangular_label_padding(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
///
/// @return flag of enum QCPPolarAxisAngular__SelectablePart
int32_t q_cppolaraxisangular_selected_parts(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
///
/// @return flag of enum QCPPolarAxisAngular__SelectablePart
int32_t q_cppolaraxisangular_selectable_parts(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
QFont* q_cppolaraxisangular_selected_tick_label_font(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
QFont* q_cppolaraxisangular_selected_label_font(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
QColor* q_cppolaraxisangular_selected_tick_label_color(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
QColor* q_cppolaraxisangular_selected_label_color(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
QPen* q_cppolaraxisangular_selected_base_pen(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
QPen* q_cppolaraxisangular_selected_tick_pen(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
QPen* q_cppolaraxisangular_selected_sub_tick_pen(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
QCPPolarGrid* q_cppolaraxisangular_grid(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
/// @param pm QPixmap*
void q_cppolaraxisangular_set_background(void* self, void* pm);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
/// @param pm QPixmap*
/// @param scaled bool
void q_cppolaraxisangular_set_background2(void* self, void* pm, bool scaled);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
/// @param brush QBrush*
void q_cppolaraxisangular_set_background3(void* self, void* brush);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
/// @param scaled bool
void q_cppolaraxisangular_set_background_scaled(void* self, bool scaled);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
/// @param mode enum Qt__AspectRatioMode
void q_cppolaraxisangular_set_background_scaled_mode(void* self, int32_t mode);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
/// @param enabled bool
void q_cppolaraxisangular_set_range_drag(void* self, bool enabled);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
/// @param enabled bool
void q_cppolaraxisangular_set_range_zoom(void* self, bool enabled);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
/// @param factor double
void q_cppolaraxisangular_set_range_zoom_factor(void* self, double factor);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
/// @param range QCPRange*
void q_cppolaraxisangular_set_range(void* self, void* range);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
/// @param lower double
/// @param upper double
void q_cppolaraxisangular_set_range2(void* self, double lower, double upper);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
/// @param position double
/// @param size double
/// @param alignment enum Qt__AlignmentFlag
void q_cppolaraxisangular_set_range3(void* self, double position, double size, int32_t alignment);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
/// @param lower double
void q_cppolaraxisangular_set_range_lower(void* self, double lower);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
/// @param upper double
void q_cppolaraxisangular_set_range_upper(void* self, double upper);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
/// @param reversed bool
void q_cppolaraxisangular_set_range_reversed(void* self, bool reversed);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
/// @param degrees double
void q_cppolaraxisangular_set_angle(void* self, double degrees);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
/// @param show bool
void q_cppolaraxisangular_set_ticks(void* self, bool show);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
/// @param show bool
void q_cppolaraxisangular_set_tick_labels(void* self, bool show);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
/// @param padding int
void q_cppolaraxisangular_set_tick_label_padding(void* self, int padding);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
/// @param font QFont*
void q_cppolaraxisangular_set_tick_label_font(void* self, void* font);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
/// @param color QColor*
void q_cppolaraxisangular_set_tick_label_color(void* self, void* color);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
/// @param degrees double
void q_cppolaraxisangular_set_tick_label_rotation(void* self, double degrees);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
/// @param mode enum QCPPolarAxisAngular__LabelMode
void q_cppolaraxisangular_set_tick_label_mode(void* self, int32_t mode);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
/// @param formatCode const char*
void q_cppolaraxisangular_set_number_format(void* self, const char* formatCode);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
/// @param precision int
void q_cppolaraxisangular_set_number_precision(void* self, int precision);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
/// @param inside int
void q_cppolaraxisangular_set_tick_length(void* self, int inside);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
/// @param inside int
void q_cppolaraxisangular_set_tick_length_in(void* self, int inside);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
/// @param outside int
void q_cppolaraxisangular_set_tick_length_out(void* self, int outside);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
/// @param show bool
void q_cppolaraxisangular_set_sub_ticks(void* self, bool show);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
/// @param inside int
void q_cppolaraxisangular_set_sub_tick_length(void* self, int inside);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
/// @param inside int
void q_cppolaraxisangular_set_sub_tick_length_in(void* self, int inside);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
/// @param outside int
void q_cppolaraxisangular_set_sub_tick_length_out(void* self, int outside);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
/// @param pen QPen*
void q_cppolaraxisangular_set_base_pen(void* self, void* pen);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
/// @param pen QPen*
void q_cppolaraxisangular_set_tick_pen(void* self, void* pen);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
/// @param pen QPen*
void q_cppolaraxisangular_set_sub_tick_pen(void* self, void* pen);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
/// @param font QFont*
void q_cppolaraxisangular_set_label_font(void* self, void* font);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
/// @param color QColor*
void q_cppolaraxisangular_set_label_color(void* self, void* color);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
/// @param str const char*
void q_cppolaraxisangular_set_label(void* self, const char* str);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
/// @param padding int
void q_cppolaraxisangular_set_label_padding(void* self, int padding);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
/// @param font QFont*
void q_cppolaraxisangular_set_selected_tick_label_font(void* self, void* font);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
/// @param font QFont*
void q_cppolaraxisangular_set_selected_label_font(void* self, void* font);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
/// @param color QColor*
void q_cppolaraxisangular_set_selected_tick_label_color(void* self, void* color);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
/// @param color QColor*
void q_cppolaraxisangular_set_selected_label_color(void* self, void* color);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
/// @param pen QPen*
void q_cppolaraxisangular_set_selected_base_pen(void* self, void* pen);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
/// @param pen QPen*
void q_cppolaraxisangular_set_selected_tick_pen(void* self, void* pen);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
/// @param pen QPen*
void q_cppolaraxisangular_set_selected_sub_tick_pen(void* self, void* pen);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
/// @param selectableParts flag of enum QCPPolarAxisAngular__SelectablePart
void q_cppolaraxisangular_set_selectable_parts(void* self, const int32_t* selectableParts);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
/// @param selectedParts flag of enum QCPPolarAxisAngular__SelectablePart
void q_cppolaraxisangular_set_selected_parts(void* self, const int32_t* selectedParts);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
/// @param pos QPointF*
/// @param onlySelectable bool
/// @param details QVariant*
double q_cppolaraxisangular_select_test(void* self, void* pos, bool onlySelectable, void* details);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPPolarAxisAngular*
/// @param callback double func(QCPPolarAxisAngular* self, QPointF* pos, bool onlySelectable, QVariant* details)
void q_cppolaraxisangular_on_select_test(void* self, double (*callback)(void*, void*, bool, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// Base class method implementation
///
/// @param self QCPPolarAxisAngular*
/// @param pos QPointF*
/// @param onlySelectable bool
/// @param details QVariant*
double q_cppolaraxisangular_qbase_select_test(void* self, void* pos, bool onlySelectable, void* details);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
/// @param phase enum QCPLayoutElement__UpdatePhase
void q_cppolaraxisangular_update(void* self, int32_t phase);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPPolarAxisAngular*
/// @param callback void func(QCPPolarAxisAngular* self, enum QCPLayoutElement__UpdatePhase phase)
void q_cppolaraxisangular_on_update(void* self, void (*callback)(void*, int32_t));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// Base class method implementation
///
/// @param self QCPPolarAxisAngular*
/// @param phase enum QCPLayoutElement__UpdatePhase
void q_cppolaraxisangular_qbase_update(void* self, int32_t phase);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
/// @param recursive bool
libqt_list /* of QCPLayoutElement* */ q_cppolaraxisangular_elements(void* self, bool recursive);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPPolarAxisAngular*
/// @param callback QCPLayoutElement** func(QCPPolarAxisAngular* self, bool recursive)
void q_cppolaraxisangular_on_elements(void* self, QCPLayoutElement** (*callback)(void*, bool));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// Base class method implementation
///
/// @param self QCPPolarAxisAngular*
/// @param recursive bool
libqt_list /* of QCPLayoutElement* */ q_cppolaraxisangular_qbase_elements(void* self, bool recursive);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
/// @param graph QCPPolarGraph*
bool q_cppolaraxisangular_remove_graph(void* self, void* graph);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
int32_t q_cppolaraxisangular_radial_axis_count(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
QCPPolarAxisRadial* q_cppolaraxisangular_radial_axis(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
libqt_list /* of QCPPolarAxisRadial* */ q_cppolaraxisangular_radial_axes(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
QCPPolarAxisRadial* q_cppolaraxisangular_add_radial_axis(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
/// @param axis QCPPolarAxisRadial*
bool q_cppolaraxisangular_remove_radial_axis(void* self, void* axis);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
QCPLayoutInset* q_cppolaraxisangular_inset_layout(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
QRegion* q_cppolaraxisangular_exact_clip_region(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
/// @param diff double
void q_cppolaraxisangular_move_range(void* self, double diff);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
/// @param factor double
void q_cppolaraxisangular_scale_range(void* self, double factor);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
/// @param factor double
/// @param center double
void q_cppolaraxisangular_scale_range2(void* self, double factor, double center);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
void q_cppolaraxisangular_rescale(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
/// @param coord double
double q_cppolaraxisangular_coord_to_angle_rad(void* self, double coord);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
/// @param angleRad double
double q_cppolaraxisangular_angle_rad_to_coord(void* self, double angleRad);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
/// @param pixelPos QPointF*
/// @param angleCoord double*
/// @param radiusCoord double*
void q_cppolaraxisangular_pixel_to_coord(void* self, void* pixelPos, double* angleCoord, double* radiusCoord);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
/// @param angleCoord double
/// @param radiusCoord double
QPointF* q_cppolaraxisangular_coord_to_pixel(void* self, double angleCoord, double radiusCoord);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
/// @param pos QPointF*
///
/// @return enum QCPPolarAxisAngular__SelectablePart
int32_t q_cppolaraxisangular_get_part_at(void* self, void* pos);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
int32_t q_cppolaraxisangular_left(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
int32_t q_cppolaraxisangular_right(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
int32_t q_cppolaraxisangular_top(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
int32_t q_cppolaraxisangular_bottom(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
int32_t q_cppolaraxisangular_width(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
int32_t q_cppolaraxisangular_height(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
QSize* q_cppolaraxisangular_size(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
QPoint* q_cppolaraxisangular_top_left(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
QPoint* q_cppolaraxisangular_top_right(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
QPoint* q_cppolaraxisangular_bottom_left(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
QPoint* q_cppolaraxisangular_bottom_right(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
QPointF* q_cppolaraxisangular_center(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
double q_cppolaraxisangular_radius(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
/// @param newRange QCPRange*
void q_cppolaraxisangular_range_changed(void* self, void* newRange);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
/// @param newRange QCPRange*
/// @param oldRange QCPRange*
void q_cppolaraxisangular_range_changed2(void* self, void* newRange, void* oldRange);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
/// @param parts flag of enum QCPPolarAxisAngular__SelectablePart
void q_cppolaraxisangular_selection_changed(void* self, const int32_t* parts);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
/// @param parts flag of enum QCPPolarAxisAngular__SelectablePart
void q_cppolaraxisangular_selectable_changed(void* self, const int32_t* parts);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
/// @param painter QCPPainter*
void q_cppolaraxisangular_apply_default_antialiasing_hint(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPPolarAxisAngular*
/// @param callback void func(QCPPolarAxisAngular* self, QCPPainter* painter)
void q_cppolaraxisangular_on_apply_default_antialiasing_hint(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// Base class method implementation
///
/// @param self QCPPolarAxisAngular*
/// @param painter QCPPainter*
void q_cppolaraxisangular_qbase_apply_default_antialiasing_hint(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
/// @param painter QCPPainter*
void q_cppolaraxisangular_draw(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPPolarAxisAngular*
/// @param callback void func(QCPPolarAxisAngular* self, QCPPainter* painter)
void q_cppolaraxisangular_on_draw(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// Base class method implementation
///
/// @param self QCPPolarAxisAngular*
/// @param painter QCPPainter*
void q_cppolaraxisangular_qbase_draw(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
///
/// @return enum QCP__Interaction
int32_t q_cppolaraxisangular_selection_category(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPPolarAxisAngular*
/// @param callback int32_t func()
void q_cppolaraxisangular_on_selection_category(void* self, int32_t (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// Base class method implementation
///
/// @param self QCPPolarAxisAngular*
///
/// @return enum QCP__Interaction
int32_t q_cppolaraxisangular_qbase_selection_category(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cppolaraxisangular_mouse_press_event(void* self, void* event, void* details);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPPolarAxisAngular*
/// @param callback void func(QCPPolarAxisAngular* self, QMouseEvent* event, QVariant* details)
void q_cppolaraxisangular_on_mouse_press_event(void* self, void (*callback)(void*, void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// Base class method implementation
///
/// @param self QCPPolarAxisAngular*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cppolaraxisangular_qbase_mouse_press_event(void* self, void* event, void* details);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cppolaraxisangular_mouse_move_event(void* self, void* event, void* startPos);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPPolarAxisAngular*
/// @param callback void func(QCPPolarAxisAngular* self, QMouseEvent* event, QPointF* startPos)
void q_cppolaraxisangular_on_mouse_move_event(void* self, void (*callback)(void*, void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// Base class method implementation
///
/// @param self QCPPolarAxisAngular*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cppolaraxisangular_qbase_mouse_move_event(void* self, void* event, void* startPos);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cppolaraxisangular_mouse_release_event(void* self, void* event, void* startPos);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPPolarAxisAngular*
/// @param callback void func(QCPPolarAxisAngular* self, QMouseEvent* event, QPointF* startPos)
void q_cppolaraxisangular_on_mouse_release_event(void* self, void (*callback)(void*, void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// Base class method implementation
///
/// @param self QCPPolarAxisAngular*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cppolaraxisangular_qbase_mouse_release_event(void* self, void* event, void* startPos);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
/// @param event QWheelEvent*
void q_cppolaraxisangular_wheel_event(void* self, void* event);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPPolarAxisAngular*
/// @param callback void func(QCPPolarAxisAngular* self, QWheelEvent* event)
void q_cppolaraxisangular_on_wheel_event(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// Base class method implementation
///
/// @param self QCPPolarAxisAngular*
/// @param event QWheelEvent*
void q_cppolaraxisangular_qbase_wheel_event(void* self, void* event);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
/// @param graph QCPPolarGraph*
bool q_cppolaraxisangular_register_polar_graph(void* self, void* graph);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPPolarAxisAngular*
/// @param callback bool func(QCPPolarAxisAngular* self, QCPPolarGraph* graph)
void q_cppolaraxisangular_on_register_polar_graph(void* self, bool (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// Base class method implementation
///
/// @param self QCPPolarAxisAngular*
/// @param graph QCPPolarGraph*
bool q_cppolaraxisangular_qbase_register_polar_graph(void* self, void* graph);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
/// @param painter QCPPainter*
/// @param center QPointF*
/// @param radius double
void q_cppolaraxisangular_draw_background(void* self, void* painter, void* center, double radius);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPPolarAxisAngular*
/// @param callback void func(QCPPolarAxisAngular* self, QCPPainter* painter, QPointF* center, double radius)
void q_cppolaraxisangular_on_draw_background(void* self, void (*callback)(void*, void*, void*, double));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// Base class method implementation
///
/// @param self QCPPolarAxisAngular*
/// @param painter QCPPainter*
/// @param center QPointF*
/// @param radius double
void q_cppolaraxisangular_qbase_draw_background(void* self, void* painter, void* center, double radius);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
void q_cppolaraxisangular_setup_tick_vectors(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPPolarAxisAngular*
/// @param callback void func()
void q_cppolaraxisangular_on_setup_tick_vectors(void* self, void (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// Base class method implementation
///
/// @param self QCPPolarAxisAngular*
void q_cppolaraxisangular_qbase_setup_tick_vectors(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
QPen* q_cppolaraxisangular_get_base_pen(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPPolarAxisAngular*
/// @param callback QPen* func()
void q_cppolaraxisangular_on_get_base_pen(void* self, QPen* (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// Base class method implementation
///
/// @param self QCPPolarAxisAngular*
QPen* q_cppolaraxisangular_qbase_get_base_pen(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
QPen* q_cppolaraxisangular_get_tick_pen(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPPolarAxisAngular*
/// @param callback QPen* func()
void q_cppolaraxisangular_on_get_tick_pen(void* self, QPen* (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// Base class method implementation
///
/// @param self QCPPolarAxisAngular*
QPen* q_cppolaraxisangular_qbase_get_tick_pen(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
QPen* q_cppolaraxisangular_get_sub_tick_pen(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPPolarAxisAngular*
/// @param callback QPen* func()
void q_cppolaraxisangular_on_get_sub_tick_pen(void* self, QPen* (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// Base class method implementation
///
/// @param self QCPPolarAxisAngular*
QPen* q_cppolaraxisangular_qbase_get_sub_tick_pen(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
QFont* q_cppolaraxisangular_get_tick_label_font(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPPolarAxisAngular*
/// @param callback QFont* func()
void q_cppolaraxisangular_on_get_tick_label_font(void* self, QFont* (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// Base class method implementation
///
/// @param self QCPPolarAxisAngular*
QFont* q_cppolaraxisangular_qbase_get_tick_label_font(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
QFont* q_cppolaraxisangular_get_label_font(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPPolarAxisAngular*
/// @param callback QFont* func()
void q_cppolaraxisangular_on_get_label_font(void* self, QFont* (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// Base class method implementation
///
/// @param self QCPPolarAxisAngular*
QFont* q_cppolaraxisangular_qbase_get_label_font(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
QColor* q_cppolaraxisangular_get_tick_label_color(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPPolarAxisAngular*
/// @param callback QColor* func()
void q_cppolaraxisangular_on_get_tick_label_color(void* self, QColor* (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// Base class method implementation
///
/// @param self QCPPolarAxisAngular*
QColor* q_cppolaraxisangular_qbase_get_tick_label_color(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
QColor* q_cppolaraxisangular_get_label_color(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPPolarAxisAngular*
/// @param callback QColor* func()
void q_cppolaraxisangular_on_get_label_color(void* self, QColor* (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// Base class method implementation
///
/// @param self QCPPolarAxisAngular*
QColor* q_cppolaraxisangular_qbase_get_label_color(void* self);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
/// @param c const char*
const char* q_cppolaraxisangular_tr2(const char* s, const char* c);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
/// @param c const char*
/// @param n int
const char* q_cppolaraxisangular_tr3(const char* s, const char* c, int n);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
/// @param pm QPixmap*
/// @param scaled bool
/// @param mode enum Qt__AspectRatioMode
void q_cppolaraxisangular_set_background32(void* self, void* pm, bool scaled, int32_t mode);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
/// @param inside int
/// @param outside int
void q_cppolaraxisangular_set_tick_length2(void* self, int inside, int outside);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
/// @param inside int
/// @param outside int
void q_cppolaraxisangular_set_sub_tick_length2(void* self, int inside, int outside);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
/// @param index int
QCPPolarAxisRadial* q_cppolaraxisangular_radial_axis1(void* self, int index);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
/// @param axis QCPPolarAxisRadial*
QCPPolarAxisRadial* q_cppolaraxisangular_add_radial_axis1(void* self, void* axis);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// @param self QCPPolarAxisAngular*
/// @param onlyVisiblePlottables bool
void q_cppolaraxisangular_rescale1(void* self, bool onlyVisiblePlottables);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPPolarAxisAngular*
QCPLayout* q_cppolaraxisangular_layout(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPPolarAxisAngular*
QRect* q_cppolaraxisangular_rect(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPPolarAxisAngular*
QRect* q_cppolaraxisangular_outer_rect(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPPolarAxisAngular*
QMargins* q_cppolaraxisangular_margins(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPPolarAxisAngular*
QMargins* q_cppolaraxisangular_minimum_margins(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPPolarAxisAngular*
///
/// @return flag of enum QCP__MarginSide
int32_t q_cppolaraxisangular_auto_margins(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPPolarAxisAngular*
QSize* q_cppolaraxisangular_minimum_size(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPPolarAxisAngular*
QSize* q_cppolaraxisangular_maximum_size(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPPolarAxisAngular*
///
/// @return enum QCPLayoutElement__SizeConstraintRect
int32_t q_cppolaraxisangular_size_constraint_rect(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPPolarAxisAngular*
/// @param side enum QCP__MarginSide
QCPMarginGroup* q_cppolaraxisangular_margin_group(void* self, int32_t side);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPPolarAxisAngular*
libqt_map /* of int32_t to QCPMarginGroup* */ q_cppolaraxisangular_margin_groups(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPPolarAxisAngular*
/// @param rect QRect*
void q_cppolaraxisangular_set_outer_rect(void* self, void* rect);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPPolarAxisAngular*
/// @param margins QMargins*
void q_cppolaraxisangular_set_margins(void* self, void* margins);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPPolarAxisAngular*
/// @param margins QMargins*
void q_cppolaraxisangular_set_minimum_margins(void* self, void* margins);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPPolarAxisAngular*
/// @param sides flag of enum QCP__MarginSide
void q_cppolaraxisangular_set_auto_margins(void* self, int32_t sides);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPPolarAxisAngular*
/// @param size QSize*
void q_cppolaraxisangular_set_minimum_size(void* self, void* size);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPPolarAxisAngular*
/// @param width int
/// @param height int
void q_cppolaraxisangular_set_minimum_size2(void* self, int width, int height);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPPolarAxisAngular*
/// @param size QSize*
void q_cppolaraxisangular_set_maximum_size(void* self, void* size);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPPolarAxisAngular*
/// @param width int
/// @param height int
void q_cppolaraxisangular_set_maximum_size2(void* self, int width, int height);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPPolarAxisAngular*
/// @param constraintRect enum QCPLayoutElement__SizeConstraintRect
void q_cppolaraxisangular_set_size_constraint_rect(void* self, int32_t constraintRect);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPPolarAxisAngular*
/// @param sides flag of enum QCP__MarginSide
/// @param group QCPMarginGroup*
void q_cppolaraxisangular_set_margin_group(void* self, int32_t sides, void* group);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPPolarAxisAngular*
bool q_cppolaraxisangular_visible(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPPolarAxisAngular*
QCustomPlot* q_cppolaraxisangular_parent_plot(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPPolarAxisAngular*
QCPLayerable* q_cppolaraxisangular_parent_layerable(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPPolarAxisAngular*
QCPLayer* q_cppolaraxisangular_layer(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPPolarAxisAngular*
bool q_cppolaraxisangular_antialiased(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPPolarAxisAngular*
/// @param on bool
void q_cppolaraxisangular_set_visible(void* self, bool on);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPPolarAxisAngular*
/// @param layer QCPLayer*
bool q_cppolaraxisangular_set_layer(void* self, void* layer);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPPolarAxisAngular*
/// @param layerName const char*
bool q_cppolaraxisangular_set_layer2(void* self, const char* layerName);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPPolarAxisAngular*
/// @param enabled bool
void q_cppolaraxisangular_set_antialiased(void* self, bool enabled);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPPolarAxisAngular*
bool q_cppolaraxisangular_real_visibility(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPPolarAxisAngular*
/// @param newLayer QCPLayer*
void q_cppolaraxisangular_layer_changed(void* self, void* newLayer);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPPolarAxisAngular*
/// @param callback void func(QCPPolarAxisAngular* self, QCPLayer* newLayer)
void q_cppolaraxisangular_on_layer_changed(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#objectName)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPPolarAxisAngular*
const char* q_cppolaraxisangular_object_name(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setObjectName)
///
/// @param self QCPPolarAxisAngular*
/// @param name char*
void q_cppolaraxisangular_set_object_name(void* self, char* name);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isWidgetType)
///
/// @param self QCPPolarAxisAngular*
bool q_cppolaraxisangular_is_widget_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isWindowType)
///
/// @param self QCPPolarAxisAngular*
bool q_cppolaraxisangular_is_window_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isQuickItemType)
///
/// @param self QCPPolarAxisAngular*
bool q_cppolaraxisangular_is_quick_item_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#signalsBlocked)
///
/// @param self QCPPolarAxisAngular*
bool q_cppolaraxisangular_signals_blocked(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#blockSignals)
///
/// @param self QCPPolarAxisAngular*
/// @param b bool
bool q_cppolaraxisangular_block_signals(void* self, bool b);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#thread)
///
/// @param self QCPPolarAxisAngular*
QThread* q_cppolaraxisangular_thread(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#moveToThread)
///
/// @param self QCPPolarAxisAngular*
/// @param thread QThread*
bool q_cppolaraxisangular_move_to_thread(void* self, void* thread);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#startTimer)
///
/// @param self QCPPolarAxisAngular*
/// @param interval int
int32_t q_cppolaraxisangular_start_timer(void* self, int interval);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#killTimer)
///
/// @param self QCPPolarAxisAngular*
/// @param id int
void q_cppolaraxisangular_kill_timer(void* self, int id);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#killTimer)
///
/// @param self QCPPolarAxisAngular*
/// @param id enum Qt__TimerId
void q_cppolaraxisangular_kill_timer2(void* self, int32_t id);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#children)
///
/// @param self QCPPolarAxisAngular*
libqt_list /* of QObject* */ q_cppolaraxisangular_children(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setParent)
///
/// @param self QCPPolarAxisAngular*
/// @param parent QObject*
void q_cppolaraxisangular_set_parent(void* self, void* parent);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#installEventFilter)
///
/// @param self QCPPolarAxisAngular*
/// @param filterObj QObject*
void q_cppolaraxisangular_install_event_filter(void* self, void* filterObj);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#removeEventFilter)
///
/// @param self QCPPolarAxisAngular*
/// @param obj QObject*
void q_cppolaraxisangular_remove_event_filter(void* self, void* obj);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param method QMetaMethod*
QMetaObject__Connection* q_cppolaraxisangular_connect(void* sender, void* signal, void* receiver, void* method);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param self QCPPolarAxisAngular*
/// @param sender QObject*
/// @param signal const char*
/// @param member const char*
QMetaObject__Connection* q_cppolaraxisangular_connect2(void* self, void* sender, const char* signal, const char* member);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param member QMetaMethod*
bool q_cppolaraxisangular_disconnect(void* sender, void* signal, void* receiver, void* member);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnect)
///
/// @param param1 QMetaObject__Connection*
bool q_cppolaraxisangular_disconnect2(void* param1);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dumpObjectTree)
///
/// @param self QCPPolarAxisAngular*
void q_cppolaraxisangular_dump_object_tree(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dumpObjectInfo)
///
/// @param self QCPPolarAxisAngular*
void q_cppolaraxisangular_dump_object_info(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setProperty)
///
/// @param self QCPPolarAxisAngular*
/// @param name const char*
/// @param value QVariant*
bool q_cppolaraxisangular_set_property(void* self, const char* name, void* value);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#property)
///
/// @param self QCPPolarAxisAngular*
/// @param name const char*
QVariant* q_cppolaraxisangular_property(void* self, const char* name);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dynamicPropertyNames)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPPolarAxisAngular*
const char** q_cppolaraxisangular_dynamic_property_names(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#bindingStorage)
///
/// @param self QCPPolarAxisAngular*
QBindingStorage* q_cppolaraxisangular_binding_storage(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#bindingStorage)
///
/// @param self QCPPolarAxisAngular*
const QBindingStorage* q_cppolaraxisangular_binding_storage2(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPPolarAxisAngular*
void q_cppolaraxisangular_destroyed(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPPolarAxisAngular*
/// @param callback void func(QCPPolarAxisAngular* self)
void q_cppolaraxisangular_on_destroyed(void* self, void (*callback)(void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#parent)
///
/// @param self QCPPolarAxisAngular*
QObject* q_cppolaraxisangular_parent(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#inherits)
///
/// @param self QCPPolarAxisAngular*
/// @param classname const char*
bool q_cppolaraxisangular_inherits(void* self, const char* classname);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#deleteLater)
///
/// @param self QCPPolarAxisAngular*
void q_cppolaraxisangular_delete_later(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#moveToThread)
///
/// @param self QCPPolarAxisAngular*
/// @param thread QThread*
/// @param param2 Disambiguated_t*
bool q_cppolaraxisangular_move_to_thread2(void* self, void* thread, void* param2);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#startTimer)
///
/// @param self QCPPolarAxisAngular*
/// @param interval int
/// @param timerType enum Qt__TimerType
int32_t q_cppolaraxisangular_start_timer22(void* self, int interval, int32_t timerType);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param method QMetaMethod*
/// @param type enum Qt__ConnectionType
QMetaObject__Connection* q_cppolaraxisangular_connect5(void* sender, void* signal, void* receiver, void* method, int32_t type);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param self QCPPolarAxisAngular*
/// @param sender QObject*
/// @param signal const char*
/// @param member const char*
/// @param type enum Qt__ConnectionType
QMetaObject__Connection* q_cppolaraxisangular_connect4(void* self, void* sender, const char* signal, const char* member, int32_t type);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPPolarAxisAngular*
/// @param param1 QObject*
void q_cppolaraxisangular_destroyed1(void* self, void* param1);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPPolarAxisAngular*
/// @param callback void func(QCPPolarAxisAngular* self, QObject* param1)
void q_cppolaraxisangular_on_destroyed1(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarAxisAngular*
QSize* q_cppolaraxisangular_minimum_outer_size_hint(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarAxisAngular*
QSize* q_cppolaraxisangular_qbase_minimum_outer_size_hint(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarAxisAngular*
/// @param callback QSize* func()
void q_cppolaraxisangular_on_minimum_outer_size_hint(void* self, QSize* (*callback)());

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarAxisAngular*
QSize* q_cppolaraxisangular_maximum_outer_size_hint(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarAxisAngular*
QSize* q_cppolaraxisangular_qbase_maximum_outer_size_hint(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarAxisAngular*
/// @param callback QSize* func()
void q_cppolaraxisangular_on_maximum_outer_size_hint(void* self, QSize* (*callback)());

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarAxisAngular*
/// @param side enum QCP__MarginSide
int32_t q_cppolaraxisangular_calculate_auto_margin(void* self, int32_t side);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarAxisAngular*
/// @param side enum QCP__MarginSide
int32_t q_cppolaraxisangular_qbase_calculate_auto_margin(void* self, int32_t side);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarAxisAngular*
/// @param callback int32_t func(QCPPolarAxisAngular* self, enum QCP__MarginSide side)
void q_cppolaraxisangular_on_calculate_auto_margin(void* self, int32_t (*callback)(void*, int32_t));

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarAxisAngular*
void q_cppolaraxisangular_layout_changed(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarAxisAngular*
void q_cppolaraxisangular_qbase_layout_changed(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarAxisAngular*
/// @param callback void func()
void q_cppolaraxisangular_on_layout_changed(void* self, void (*callback)());

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarAxisAngular*
/// @param parentPlot QCustomPlot*
void q_cppolaraxisangular_parent_plot_initialized(void* self, void* parentPlot);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarAxisAngular*
/// @param parentPlot QCustomPlot*
void q_cppolaraxisangular_qbase_parent_plot_initialized(void* self, void* parentPlot);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarAxisAngular*
/// @param callback void func(QCPPolarAxisAngular* self, QCustomPlot* parentPlot)
void q_cppolaraxisangular_on_parent_plot_initialized(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarAxisAngular*
QRect* q_cppolaraxisangular_clip_rect(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarAxisAngular*
QRect* q_cppolaraxisangular_qbase_clip_rect(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarAxisAngular*
/// @param callback QRect* func()
void q_cppolaraxisangular_on_clip_rect(void* self, QRect* (*callback)());

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarAxisAngular*
/// @param event QMouseEvent*
/// @param additive bool
/// @param details QVariant*
/// @param selectionStateChanged bool*
void q_cppolaraxisangular_select_event(void* self, void* event, bool additive, void* details, bool* selectionStateChanged);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarAxisAngular*
/// @param event QMouseEvent*
/// @param additive bool
/// @param details QVariant*
/// @param selectionStateChanged bool*
void q_cppolaraxisangular_qbase_select_event(void* self, void* event, bool additive, void* details, bool* selectionStateChanged);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarAxisAngular*
/// @param callback void func(QCPPolarAxisAngular* self, QMouseEvent* event, bool additive, QVariant* details, bool* selectionStateChanged)
void q_cppolaraxisangular_on_select_event(void* self, void (*callback)(void*, void*, bool, void*, bool*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarAxisAngular*
/// @param selectionStateChanged bool*
void q_cppolaraxisangular_deselect_event(void* self, bool* selectionStateChanged);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarAxisAngular*
/// @param selectionStateChanged bool*
void q_cppolaraxisangular_qbase_deselect_event(void* self, bool* selectionStateChanged);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarAxisAngular*
/// @param callback void func(QCPPolarAxisAngular* self, bool* selectionStateChanged)
void q_cppolaraxisangular_on_deselect_event(void* self, void (*callback)(void*, bool*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarAxisAngular*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cppolaraxisangular_mouse_double_click_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarAxisAngular*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cppolaraxisangular_qbase_mouse_double_click_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarAxisAngular*
/// @param callback void func(QCPPolarAxisAngular* self, QMouseEvent* event, QVariant* details)
void q_cppolaraxisangular_on_mouse_double_click_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarAxisAngular*
/// @param event QEvent*
bool q_cppolaraxisangular_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarAxisAngular*
/// @param event QEvent*
bool q_cppolaraxisangular_qbase_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarAxisAngular*
/// @param callback bool func(QCPPolarAxisAngular* self, QEvent* event)
void q_cppolaraxisangular_on_event(void* self, bool (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarAxisAngular*
/// @param watched QObject*
/// @param event QEvent*
bool q_cppolaraxisangular_event_filter(void* self, void* watched, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarAxisAngular*
/// @param watched QObject*
/// @param event QEvent*
bool q_cppolaraxisangular_qbase_event_filter(void* self, void* watched, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarAxisAngular*
/// @param callback bool func(QCPPolarAxisAngular* self, QObject* watched, QEvent* event)
void q_cppolaraxisangular_on_event_filter(void* self, bool (*callback)(void*, void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarAxisAngular*
/// @param event QTimerEvent*
void q_cppolaraxisangular_timer_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarAxisAngular*
/// @param event QTimerEvent*
void q_cppolaraxisangular_qbase_timer_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarAxisAngular*
/// @param callback void func(QCPPolarAxisAngular* self, QTimerEvent* event)
void q_cppolaraxisangular_on_timer_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarAxisAngular*
/// @param event QChildEvent*
void q_cppolaraxisangular_child_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarAxisAngular*
/// @param event QChildEvent*
void q_cppolaraxisangular_qbase_child_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarAxisAngular*
/// @param callback void func(QCPPolarAxisAngular* self, QChildEvent* event)
void q_cppolaraxisangular_on_child_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarAxisAngular*
/// @param event QEvent*
void q_cppolaraxisangular_custom_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarAxisAngular*
/// @param event QEvent*
void q_cppolaraxisangular_qbase_custom_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarAxisAngular*
/// @param callback void func(QCPPolarAxisAngular* self, QEvent* event)
void q_cppolaraxisangular_on_custom_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarAxisAngular*
/// @param signal QMetaMethod*
void q_cppolaraxisangular_connect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarAxisAngular*
/// @param signal QMetaMethod*
void q_cppolaraxisangular_qbase_connect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarAxisAngular*
/// @param callback void func(QCPPolarAxisAngular* self, QMetaMethod* signal)
void q_cppolaraxisangular_on_connect_notify(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarAxisAngular*
/// @param signal QMetaMethod*
void q_cppolaraxisangular_disconnect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarAxisAngular*
/// @param signal QMetaMethod*
void q_cppolaraxisangular_qbase_disconnect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarAxisAngular*
/// @param callback void func(QCPPolarAxisAngular* self, QMetaMethod* signal)
void q_cppolaraxisangular_on_disconnect_notify(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarAxisAngular*
/// @param parentPlot QCustomPlot*
void q_cppolaraxisangular_initialize_parent_plot(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarAxisAngular*
/// @param parentPlot QCustomPlot*
void q_cppolaraxisangular_qbase_initialize_parent_plot(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarAxisAngular*
/// @param callback void func(QCPPolarAxisAngular* self, QCustomPlot* parentPlot)
void q_cppolaraxisangular_on_initialize_parent_plot(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarAxisAngular*
/// @param parentLayerable QCPLayerable*
void q_cppolaraxisangular_set_parent_layerable(void* self, void* parentLayerable);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarAxisAngular*
/// @param parentLayerable QCPLayerable*
void q_cppolaraxisangular_qbase_set_parent_layerable(void* self, void* parentLayerable);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarAxisAngular*
/// @param callback void func(QCPPolarAxisAngular* self, QCPLayerable* parentLayerable)
void q_cppolaraxisangular_on_set_parent_layerable(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarAxisAngular*
/// @param layer QCPLayer*
/// @param prepend bool
bool q_cppolaraxisangular_move_to_layer(void* self, void* layer, bool prepend);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarAxisAngular*
/// @param layer QCPLayer*
/// @param prepend bool
bool q_cppolaraxisangular_qbase_move_to_layer(void* self, void* layer, bool prepend);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarAxisAngular*
/// @param callback bool func(QCPPolarAxisAngular* self, QCPLayer* layer, bool prepend)
void q_cppolaraxisangular_on_move_to_layer(void* self, bool (*callback)(void*, void*, bool));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarAxisAngular*
/// @param painter QCPPainter*
/// @param localAntialiased bool
/// @param overrideElement enum QCP__AntialiasedElement
void q_cppolaraxisangular_apply_antialiasing_hint(void* self, void* painter, bool localAntialiased, int32_t overrideElement);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarAxisAngular*
/// @param painter QCPPainter*
/// @param localAntialiased bool
/// @param overrideElement enum QCP__AntialiasedElement
void q_cppolaraxisangular_qbase_apply_antialiasing_hint(void* self, void* painter, bool localAntialiased, int32_t overrideElement);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarAxisAngular*
/// @param callback void func(QCPPolarAxisAngular* self, QCPPainter* painter, bool localAntialiased, enum QCP__AntialiasedElement overrideElement)
void q_cppolaraxisangular_on_apply_antialiasing_hint(void* self, void (*callback)(void*, void*, bool, int32_t));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarAxisAngular*
QObject* q_cppolaraxisangular_sender(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarAxisAngular*
QObject* q_cppolaraxisangular_qbase_sender(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarAxisAngular*
/// @param callback QObject* func()
void q_cppolaraxisangular_on_sender(void* self, QObject* (*callback)());

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarAxisAngular*
int32_t q_cppolaraxisangular_sender_signal_index(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarAxisAngular*
int32_t q_cppolaraxisangular_qbase_sender_signal_index(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarAxisAngular*
/// @param callback int32_t func()
void q_cppolaraxisangular_on_sender_signal_index(void* self, int32_t (*callback)());

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarAxisAngular*
/// @param signal const char*
int32_t q_cppolaraxisangular_receivers(void* self, const char* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarAxisAngular*
/// @param signal const char*
int32_t q_cppolaraxisangular_qbase_receivers(void* self, const char* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarAxisAngular*
/// @param callback int32_t func(QCPPolarAxisAngular* self, const char* signal)
void q_cppolaraxisangular_on_receivers(void* self, int32_t (*callback)(void*, const char*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarAxisAngular*
/// @param signal QMetaMethod*
bool q_cppolaraxisangular_is_signal_connected(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarAxisAngular*
/// @param signal QMetaMethod*
bool q_cppolaraxisangular_qbase_is_signal_connected(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarAxisAngular*
/// @param callback bool func(QCPPolarAxisAngular* self, QMetaMethod* signal)
void q_cppolaraxisangular_on_is_signal_connected(void* self, bool (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#objectNameChanged)
///
/// Wrapper to allow calling private signal
///
/// @param self QCPPolarAxisAngular*
/// @param callback void func(QCPPolarAxisAngular* self, const char* objectName)
void q_cppolaraxisangular_on_object_name_changed(void* self, void (*callback)(void*, const char*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarAxisAngular.html)
///
/// Delete this object from C++ memory.
///
/// @param self QCPPolarAxisAngular*
void q_cppolaraxisangular_delete(void* self);

/// https://www.qcustomplot.com/documentation/classQCPPolarGrid.html

/// q_cppolargrid_new constructs a new QCPPolarGrid object.
///
/// @param parentAxis QCPPolarAxisAngular*
QCPPolarGrid* q_cppolargrid_new(void* parentAxis);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#metaObject)
///
/// @param self QCPPolarGrid*
const QMetaObject* q_cppolargrid_meta_object(void* self);

/// @param self QCPPolarGrid*
/// @param param1 const char*
void* q_cppolargrid_metacast(void* self, const char* param1);

/// @param self QCPPolarGrid*
/// @param param1 enum QMetaObject__Call
/// @param param2 int
/// @param param3 void*
int32_t q_cppolargrid_metacall(void* self, int32_t param1, int param2, void* param3);

/// Allows for overriding the related default method
///
/// @param self QCPPolarGrid*
/// @param callback int32_t func(QCPPolarGrid* self, enum QMetaObject__Call param1, int param2, void* param3)
void q_cppolargrid_on_metacall(void* self, int32_t (*callback)(void*, int32_t, int, void*));

/// Base class method implementation
///
/// @param self QCPPolarGrid*
/// @param param1 enum QMetaObject__Call
/// @param param2 int
/// @param param3 void*
int32_t q_cppolargrid_qbase_metacall(void* self, int32_t param1, int param2, void* param3);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
const char* q_cppolargrid_tr(const char* s);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGrid.html)
///
/// @param self QCPPolarGrid*
QCPPolarAxisRadial* q_cppolargrid_radial_axis(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGrid.html)
///
/// @param self QCPPolarGrid*
///
/// @return flag of enum QCPPolarGrid__GridType
int32_t q_cppolargrid_type(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGrid.html)
///
/// @param self QCPPolarGrid*
///
/// @return flag of enum QCPPolarGrid__GridType
int32_t q_cppolargrid_sub_grid_type(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGrid.html)
///
/// @param self QCPPolarGrid*
bool q_cppolargrid_antialiased_sub_grid(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGrid.html)
///
/// @param self QCPPolarGrid*
bool q_cppolargrid_antialiased_zero_line(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGrid.html)
///
/// @param self QCPPolarGrid*
QPen* q_cppolargrid_angular_pen(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGrid.html)
///
/// @param self QCPPolarGrid*
QPen* q_cppolargrid_angular_sub_grid_pen(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGrid.html)
///
/// @param self QCPPolarGrid*
QPen* q_cppolargrid_radial_pen(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGrid.html)
///
/// @param self QCPPolarGrid*
QPen* q_cppolargrid_radial_sub_grid_pen(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGrid.html)
///
/// @param self QCPPolarGrid*
QPen* q_cppolargrid_radial_zero_line_pen(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGrid.html)
///
/// @param self QCPPolarGrid*
/// @param axis QCPPolarAxisRadial*
void q_cppolargrid_set_radial_axis(void* self, void* axis);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGrid.html)
///
/// @param self QCPPolarGrid*
/// @param type flag of enum QCPPolarGrid__GridType
void q_cppolargrid_set_type(void* self, int32_t type);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGrid.html)
///
/// @param self QCPPolarGrid*
/// @param type flag of enum QCPPolarGrid__GridType
void q_cppolargrid_set_sub_grid_type(void* self, int32_t type);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGrid.html)
///
/// @param self QCPPolarGrid*
/// @param enabled bool
void q_cppolargrid_set_antialiased_sub_grid(void* self, bool enabled);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGrid.html)
///
/// @param self QCPPolarGrid*
/// @param enabled bool
void q_cppolargrid_set_antialiased_zero_line(void* self, bool enabled);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGrid.html)
///
/// @param self QCPPolarGrid*
/// @param pen QPen*
void q_cppolargrid_set_angular_pen(void* self, void* pen);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGrid.html)
///
/// @param self QCPPolarGrid*
/// @param pen QPen*
void q_cppolargrid_set_angular_sub_grid_pen(void* self, void* pen);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGrid.html)
///
/// @param self QCPPolarGrid*
/// @param pen QPen*
void q_cppolargrid_set_radial_pen(void* self, void* pen);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGrid.html)
///
/// @param self QCPPolarGrid*
/// @param pen QPen*
void q_cppolargrid_set_radial_sub_grid_pen(void* self, void* pen);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGrid.html)
///
/// @param self QCPPolarGrid*
/// @param pen QPen*
void q_cppolargrid_set_radial_zero_line_pen(void* self, void* pen);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGrid.html)
///
/// @param self QCPPolarGrid*
/// @param painter QCPPainter*
void q_cppolargrid_apply_default_antialiasing_hint(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGrid.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPPolarGrid*
/// @param callback void func(QCPPolarGrid* self, QCPPainter* painter)
void q_cppolargrid_on_apply_default_antialiasing_hint(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGrid.html)
///
/// Base class method implementation
///
/// @param self QCPPolarGrid*
/// @param painter QCPPainter*
void q_cppolargrid_qbase_apply_default_antialiasing_hint(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGrid.html)
///
/// @param self QCPPolarGrid*
/// @param painter QCPPainter*
void q_cppolargrid_draw(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGrid.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPPolarGrid*
/// @param callback void func(QCPPolarGrid* self, QCPPainter* painter)
void q_cppolargrid_on_draw(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGrid.html)
///
/// Base class method implementation
///
/// @param self QCPPolarGrid*
/// @param painter QCPPainter*
void q_cppolargrid_qbase_draw(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGrid.html)
///
/// @param self QCPPolarGrid*
/// @param painter QCPPainter*
/// @param center QPointF*
/// @param coords libqt_list /* of double */
/// @param pen QPen*
void q_cppolargrid_draw_radial_grid(void* self, void* painter, void* center, libqt_list coords, void* pen);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGrid.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPPolarGrid*
/// @param callback void func(QCPPolarGrid* self, QCPPainter* painter, QPointF* center, libqt_list /* of double */ /* of double */, QPen* pen)
void q_cppolargrid_on_draw_radial_grid(void* self, void (*callback)(void*, void*, void*, libqt_list, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGrid.html)
///
/// Base class method implementation
///
/// @param self QCPPolarGrid*
/// @param painter QCPPainter*
/// @param center QPointF*
/// @param coords libqt_list /* of double */
/// @param pen QPen*
void q_cppolargrid_qbase_draw_radial_grid(void* self, void* painter, void* center, libqt_list coords, void* pen);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGrid.html)
///
/// @param self QCPPolarGrid*
/// @param painter QCPPainter*
/// @param center QPointF*
/// @param radius double
/// @param ticksCosSin libqt_list /* of QPointF* */
/// @param pen QPen*
void q_cppolargrid_draw_angular_grid(void* self, void* painter, void* center, double radius, libqt_list ticksCosSin, void* pen);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGrid.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPPolarGrid*
/// @param callback void func(QCPPolarGrid* self, QCPPainter* painter, QPointF* center, double radius, QPointF** ticksCosSin, QPen* pen)
void q_cppolargrid_on_draw_angular_grid(void* self, void (*callback)(void*, void*, void*, double, QPointF**, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGrid.html)
///
/// Base class method implementation
///
/// @param self QCPPolarGrid*
/// @param painter QCPPainter*
/// @param center QPointF*
/// @param radius double
/// @param ticksCosSin libqt_list /* of QPointF* */
/// @param pen QPen*
void q_cppolargrid_qbase_draw_angular_grid(void* self, void* painter, void* center, double radius, libqt_list ticksCosSin, void* pen);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
/// @param c const char*
const char* q_cppolargrid_tr2(const char* s, const char* c);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
/// @param c const char*
/// @param n int
const char* q_cppolargrid_tr3(const char* s, const char* c, int n);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGrid.html)
///
/// @param self QCPPolarGrid*
/// @param painter QCPPainter*
/// @param center QPointF*
/// @param coords libqt_list /* of double */
/// @param pen QPen*
/// @param zeroPen QPen*
void q_cppolargrid_draw_radial_grid5(void* self, void* painter, void* center, libqt_list coords, void* pen, void* zeroPen);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGrid.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPPolarGrid*
/// @param callback void func(QCPPolarGrid* self, QCPPainter* painter, QPointF* center, libqt_list /* of double */ /* of double */, QPen* pen, QPen* zeroPen)
void q_cppolargrid_on_draw_radial_grid5(void* self, void (*callback)(void*, void*, void*, libqt_list, void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGrid.html)
///
/// Base class method implementation
///
/// @param self QCPPolarGrid*
/// @param painter QCPPainter*
/// @param center QPointF*
/// @param coords libqt_list /* of double */
/// @param pen QPen*
/// @param zeroPen QPen*
void q_cppolargrid_qbase_draw_radial_grid5(void* self, void* painter, void* center, libqt_list coords, void* pen, void* zeroPen);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPPolarGrid*
bool q_cppolargrid_visible(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPPolarGrid*
QCustomPlot* q_cppolargrid_parent_plot(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPPolarGrid*
QCPLayerable* q_cppolargrid_parent_layerable(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPPolarGrid*
QCPLayer* q_cppolargrid_layer(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPPolarGrid*
bool q_cppolargrid_antialiased(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPPolarGrid*
/// @param on bool
void q_cppolargrid_set_visible(void* self, bool on);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPPolarGrid*
/// @param layer QCPLayer*
bool q_cppolargrid_set_layer(void* self, void* layer);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPPolarGrid*
/// @param layerName const char*
bool q_cppolargrid_set_layer2(void* self, const char* layerName);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPPolarGrid*
/// @param enabled bool
void q_cppolargrid_set_antialiased(void* self, bool enabled);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPPolarGrid*
bool q_cppolargrid_real_visibility(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPPolarGrid*
/// @param newLayer QCPLayer*
void q_cppolargrid_layer_changed(void* self, void* newLayer);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPPolarGrid*
/// @param callback void func(QCPPolarGrid* self, QCPLayer* newLayer)
void q_cppolargrid_on_layer_changed(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#objectName)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPPolarGrid*
const char* q_cppolargrid_object_name(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setObjectName)
///
/// @param self QCPPolarGrid*
/// @param name char*
void q_cppolargrid_set_object_name(void* self, char* name);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isWidgetType)
///
/// @param self QCPPolarGrid*
bool q_cppolargrid_is_widget_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isWindowType)
///
/// @param self QCPPolarGrid*
bool q_cppolargrid_is_window_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isQuickItemType)
///
/// @param self QCPPolarGrid*
bool q_cppolargrid_is_quick_item_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#signalsBlocked)
///
/// @param self QCPPolarGrid*
bool q_cppolargrid_signals_blocked(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#blockSignals)
///
/// @param self QCPPolarGrid*
/// @param b bool
bool q_cppolargrid_block_signals(void* self, bool b);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#thread)
///
/// @param self QCPPolarGrid*
QThread* q_cppolargrid_thread(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#moveToThread)
///
/// @param self QCPPolarGrid*
/// @param thread QThread*
bool q_cppolargrid_move_to_thread(void* self, void* thread);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#startTimer)
///
/// @param self QCPPolarGrid*
/// @param interval int
int32_t q_cppolargrid_start_timer(void* self, int interval);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#killTimer)
///
/// @param self QCPPolarGrid*
/// @param id int
void q_cppolargrid_kill_timer(void* self, int id);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#killTimer)
///
/// @param self QCPPolarGrid*
/// @param id enum Qt__TimerId
void q_cppolargrid_kill_timer2(void* self, int32_t id);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#children)
///
/// @param self QCPPolarGrid*
libqt_list /* of QObject* */ q_cppolargrid_children(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setParent)
///
/// @param self QCPPolarGrid*
/// @param parent QObject*
void q_cppolargrid_set_parent(void* self, void* parent);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#installEventFilter)
///
/// @param self QCPPolarGrid*
/// @param filterObj QObject*
void q_cppolargrid_install_event_filter(void* self, void* filterObj);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#removeEventFilter)
///
/// @param self QCPPolarGrid*
/// @param obj QObject*
void q_cppolargrid_remove_event_filter(void* self, void* obj);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param method QMetaMethod*
QMetaObject__Connection* q_cppolargrid_connect(void* sender, void* signal, void* receiver, void* method);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param self QCPPolarGrid*
/// @param sender QObject*
/// @param signal const char*
/// @param member const char*
QMetaObject__Connection* q_cppolargrid_connect2(void* self, void* sender, const char* signal, const char* member);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param member QMetaMethod*
bool q_cppolargrid_disconnect(void* sender, void* signal, void* receiver, void* member);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnect)
///
/// @param param1 QMetaObject__Connection*
bool q_cppolargrid_disconnect2(void* param1);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dumpObjectTree)
///
/// @param self QCPPolarGrid*
void q_cppolargrid_dump_object_tree(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dumpObjectInfo)
///
/// @param self QCPPolarGrid*
void q_cppolargrid_dump_object_info(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setProperty)
///
/// @param self QCPPolarGrid*
/// @param name const char*
/// @param value QVariant*
bool q_cppolargrid_set_property(void* self, const char* name, void* value);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#property)
///
/// @param self QCPPolarGrid*
/// @param name const char*
QVariant* q_cppolargrid_property(void* self, const char* name);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dynamicPropertyNames)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPPolarGrid*
const char** q_cppolargrid_dynamic_property_names(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#bindingStorage)
///
/// @param self QCPPolarGrid*
QBindingStorage* q_cppolargrid_binding_storage(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#bindingStorage)
///
/// @param self QCPPolarGrid*
const QBindingStorage* q_cppolargrid_binding_storage2(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPPolarGrid*
void q_cppolargrid_destroyed(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPPolarGrid*
/// @param callback void func(QCPPolarGrid* self)
void q_cppolargrid_on_destroyed(void* self, void (*callback)(void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#parent)
///
/// @param self QCPPolarGrid*
QObject* q_cppolargrid_parent(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#inherits)
///
/// @param self QCPPolarGrid*
/// @param classname const char*
bool q_cppolargrid_inherits(void* self, const char* classname);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#deleteLater)
///
/// @param self QCPPolarGrid*
void q_cppolargrid_delete_later(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#moveToThread)
///
/// @param self QCPPolarGrid*
/// @param thread QThread*
/// @param param2 Disambiguated_t*
bool q_cppolargrid_move_to_thread2(void* self, void* thread, void* param2);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#startTimer)
///
/// @param self QCPPolarGrid*
/// @param interval int
/// @param timerType enum Qt__TimerType
int32_t q_cppolargrid_start_timer22(void* self, int interval, int32_t timerType);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param method QMetaMethod*
/// @param type enum Qt__ConnectionType
QMetaObject__Connection* q_cppolargrid_connect5(void* sender, void* signal, void* receiver, void* method, int32_t type);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param self QCPPolarGrid*
/// @param sender QObject*
/// @param signal const char*
/// @param member const char*
/// @param type enum Qt__ConnectionType
QMetaObject__Connection* q_cppolargrid_connect4(void* self, void* sender, const char* signal, const char* member, int32_t type);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPPolarGrid*
/// @param param1 QObject*
void q_cppolargrid_destroyed1(void* self, void* param1);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPPolarGrid*
/// @param callback void func(QCPPolarGrid* self, QObject* param1)
void q_cppolargrid_on_destroyed1(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarGrid*
/// @param pos QPointF*
/// @param onlySelectable bool
/// @param details QVariant*
double q_cppolargrid_select_test(void* self, void* pos, bool onlySelectable, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarGrid*
/// @param pos QPointF*
/// @param onlySelectable bool
/// @param details QVariant*
double q_cppolargrid_qbase_select_test(void* self, void* pos, bool onlySelectable, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarGrid*
/// @param callback double func(QCPPolarGrid* self, QPointF* pos, bool onlySelectable, QVariant* details)
void q_cppolargrid_on_select_test(void* self, double (*callback)(void*, void*, bool, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarGrid*
/// @param parentPlot QCustomPlot*
void q_cppolargrid_parent_plot_initialized(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarGrid*
/// @param parentPlot QCustomPlot*
void q_cppolargrid_qbase_parent_plot_initialized(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarGrid*
/// @param callback void func(QCPPolarGrid* self, QCustomPlot* parentPlot)
void q_cppolargrid_on_parent_plot_initialized(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarGrid*
///
/// @return enum QCP__Interaction
int32_t q_cppolargrid_selection_category(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarGrid*
///
/// @return enum QCP__Interaction
int32_t q_cppolargrid_qbase_selection_category(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarGrid*
/// @param callback int32_t func()
void q_cppolargrid_on_selection_category(void* self, int32_t (*callback)());

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarGrid*
QRect* q_cppolargrid_clip_rect(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarGrid*
QRect* q_cppolargrid_qbase_clip_rect(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarGrid*
/// @param callback QRect* func()
void q_cppolargrid_on_clip_rect(void* self, QRect* (*callback)());

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarGrid*
/// @param event QMouseEvent*
/// @param additive bool
/// @param details QVariant*
/// @param selectionStateChanged bool*
void q_cppolargrid_select_event(void* self, void* event, bool additive, void* details, bool* selectionStateChanged);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarGrid*
/// @param event QMouseEvent*
/// @param additive bool
/// @param details QVariant*
/// @param selectionStateChanged bool*
void q_cppolargrid_qbase_select_event(void* self, void* event, bool additive, void* details, bool* selectionStateChanged);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarGrid*
/// @param callback void func(QCPPolarGrid* self, QMouseEvent* event, bool additive, QVariant* details, bool* selectionStateChanged)
void q_cppolargrid_on_select_event(void* self, void (*callback)(void*, void*, bool, void*, bool*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarGrid*
/// @param selectionStateChanged bool*
void q_cppolargrid_deselect_event(void* self, bool* selectionStateChanged);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarGrid*
/// @param selectionStateChanged bool*
void q_cppolargrid_qbase_deselect_event(void* self, bool* selectionStateChanged);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarGrid*
/// @param callback void func(QCPPolarGrid* self, bool* selectionStateChanged)
void q_cppolargrid_on_deselect_event(void* self, void (*callback)(void*, bool*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarGrid*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cppolargrid_mouse_press_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarGrid*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cppolargrid_qbase_mouse_press_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarGrid*
/// @param callback void func(QCPPolarGrid* self, QMouseEvent* event, QVariant* details)
void q_cppolargrid_on_mouse_press_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarGrid*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cppolargrid_mouse_move_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarGrid*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cppolargrid_qbase_mouse_move_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarGrid*
/// @param callback void func(QCPPolarGrid* self, QMouseEvent* event, QPointF* startPos)
void q_cppolargrid_on_mouse_move_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarGrid*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cppolargrid_mouse_release_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarGrid*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cppolargrid_qbase_mouse_release_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarGrid*
/// @param callback void func(QCPPolarGrid* self, QMouseEvent* event, QPointF* startPos)
void q_cppolargrid_on_mouse_release_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarGrid*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cppolargrid_mouse_double_click_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarGrid*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cppolargrid_qbase_mouse_double_click_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarGrid*
/// @param callback void func(QCPPolarGrid* self, QMouseEvent* event, QVariant* details)
void q_cppolargrid_on_mouse_double_click_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarGrid*
/// @param event QWheelEvent*
void q_cppolargrid_wheel_event(void* self, void* event);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarGrid*
/// @param event QWheelEvent*
void q_cppolargrid_qbase_wheel_event(void* self, void* event);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarGrid*
/// @param callback void func(QCPPolarGrid* self, QWheelEvent* event)
void q_cppolargrid_on_wheel_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarGrid*
/// @param event QEvent*
bool q_cppolargrid_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarGrid*
/// @param event QEvent*
bool q_cppolargrid_qbase_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarGrid*
/// @param callback bool func(QCPPolarGrid* self, QEvent* event)
void q_cppolargrid_on_event(void* self, bool (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarGrid*
/// @param watched QObject*
/// @param event QEvent*
bool q_cppolargrid_event_filter(void* self, void* watched, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarGrid*
/// @param watched QObject*
/// @param event QEvent*
bool q_cppolargrid_qbase_event_filter(void* self, void* watched, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarGrid*
/// @param callback bool func(QCPPolarGrid* self, QObject* watched, QEvent* event)
void q_cppolargrid_on_event_filter(void* self, bool (*callback)(void*, void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarGrid*
/// @param event QTimerEvent*
void q_cppolargrid_timer_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarGrid*
/// @param event QTimerEvent*
void q_cppolargrid_qbase_timer_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarGrid*
/// @param callback void func(QCPPolarGrid* self, QTimerEvent* event)
void q_cppolargrid_on_timer_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarGrid*
/// @param event QChildEvent*
void q_cppolargrid_child_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarGrid*
/// @param event QChildEvent*
void q_cppolargrid_qbase_child_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarGrid*
/// @param callback void func(QCPPolarGrid* self, QChildEvent* event)
void q_cppolargrid_on_child_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarGrid*
/// @param event QEvent*
void q_cppolargrid_custom_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarGrid*
/// @param event QEvent*
void q_cppolargrid_qbase_custom_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarGrid*
/// @param callback void func(QCPPolarGrid* self, QEvent* event)
void q_cppolargrid_on_custom_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarGrid*
/// @param signal QMetaMethod*
void q_cppolargrid_connect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarGrid*
/// @param signal QMetaMethod*
void q_cppolargrid_qbase_connect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarGrid*
/// @param callback void func(QCPPolarGrid* self, QMetaMethod* signal)
void q_cppolargrid_on_connect_notify(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarGrid*
/// @param signal QMetaMethod*
void q_cppolargrid_disconnect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarGrid*
/// @param signal QMetaMethod*
void q_cppolargrid_qbase_disconnect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarGrid*
/// @param callback void func(QCPPolarGrid* self, QMetaMethod* signal)
void q_cppolargrid_on_disconnect_notify(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarGrid*
/// @param parentPlot QCustomPlot*
void q_cppolargrid_initialize_parent_plot(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarGrid*
/// @param parentPlot QCustomPlot*
void q_cppolargrid_qbase_initialize_parent_plot(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarGrid*
/// @param callback void func(QCPPolarGrid* self, QCustomPlot* parentPlot)
void q_cppolargrid_on_initialize_parent_plot(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarGrid*
/// @param parentLayerable QCPLayerable*
void q_cppolargrid_set_parent_layerable(void* self, void* parentLayerable);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarGrid*
/// @param parentLayerable QCPLayerable*
void q_cppolargrid_qbase_set_parent_layerable(void* self, void* parentLayerable);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarGrid*
/// @param callback void func(QCPPolarGrid* self, QCPLayerable* parentLayerable)
void q_cppolargrid_on_set_parent_layerable(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarGrid*
/// @param layer QCPLayer*
/// @param prepend bool
bool q_cppolargrid_move_to_layer(void* self, void* layer, bool prepend);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarGrid*
/// @param layer QCPLayer*
/// @param prepend bool
bool q_cppolargrid_qbase_move_to_layer(void* self, void* layer, bool prepend);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarGrid*
/// @param callback bool func(QCPPolarGrid* self, QCPLayer* layer, bool prepend)
void q_cppolargrid_on_move_to_layer(void* self, bool (*callback)(void*, void*, bool));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarGrid*
/// @param painter QCPPainter*
/// @param localAntialiased bool
/// @param overrideElement enum QCP__AntialiasedElement
void q_cppolargrid_apply_antialiasing_hint(void* self, void* painter, bool localAntialiased, int32_t overrideElement);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarGrid*
/// @param painter QCPPainter*
/// @param localAntialiased bool
/// @param overrideElement enum QCP__AntialiasedElement
void q_cppolargrid_qbase_apply_antialiasing_hint(void* self, void* painter, bool localAntialiased, int32_t overrideElement);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarGrid*
/// @param callback void func(QCPPolarGrid* self, QCPPainter* painter, bool localAntialiased, enum QCP__AntialiasedElement overrideElement)
void q_cppolargrid_on_apply_antialiasing_hint(void* self, void (*callback)(void*, void*, bool, int32_t));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarGrid*
QObject* q_cppolargrid_sender(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarGrid*
QObject* q_cppolargrid_qbase_sender(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarGrid*
/// @param callback QObject* func()
void q_cppolargrid_on_sender(void* self, QObject* (*callback)());

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarGrid*
int32_t q_cppolargrid_sender_signal_index(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarGrid*
int32_t q_cppolargrid_qbase_sender_signal_index(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarGrid*
/// @param callback int32_t func()
void q_cppolargrid_on_sender_signal_index(void* self, int32_t (*callback)());

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarGrid*
/// @param signal const char*
int32_t q_cppolargrid_receivers(void* self, const char* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarGrid*
/// @param signal const char*
int32_t q_cppolargrid_qbase_receivers(void* self, const char* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarGrid*
/// @param callback int32_t func(QCPPolarGrid* self, const char* signal)
void q_cppolargrid_on_receivers(void* self, int32_t (*callback)(void*, const char*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarGrid*
/// @param signal QMetaMethod*
bool q_cppolargrid_is_signal_connected(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarGrid*
/// @param signal QMetaMethod*
bool q_cppolargrid_qbase_is_signal_connected(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarGrid*
/// @param callback bool func(QCPPolarGrid* self, QMetaMethod* signal)
void q_cppolargrid_on_is_signal_connected(void* self, bool (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#objectNameChanged)
///
/// Wrapper to allow calling private signal
///
/// @param self QCPPolarGrid*
/// @param callback void func(QCPPolarGrid* self, const char* objectName)
void q_cppolargrid_on_object_name_changed(void* self, void (*callback)(void*, const char*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGrid.html)
///
/// Delete this object from C++ memory.
///
/// @param self QCPPolarGrid*
void q_cppolargrid_delete(void* self);

/// https://www.qcustomplot.com/documentation/classQCPPolarLegendItem.html

/// q_cppolarlegenditem_new constructs a new QCPPolarLegendItem object.
///
/// @param parent QCPLegend*
/// @param graph QCPPolarGraph*
QCPPolarLegendItem* q_cppolarlegenditem_new(void* parent, void* graph);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#metaObject)
///
/// @param self QCPPolarLegendItem*
const QMetaObject* q_cppolarlegenditem_meta_object(void* self);

/// @param self QCPPolarLegendItem*
/// @param param1 const char*
void* q_cppolarlegenditem_metacast(void* self, const char* param1);

/// @param self QCPPolarLegendItem*
/// @param param1 enum QMetaObject__Call
/// @param param2 int
/// @param param3 void*
int32_t q_cppolarlegenditem_metacall(void* self, int32_t param1, int param2, void* param3);

/// Allows for overriding the related default method
///
/// @param self QCPPolarLegendItem*
/// @param callback int32_t func(QCPPolarLegendItem* self, enum QMetaObject__Call param1, int param2, void* param3)
void q_cppolarlegenditem_on_metacall(void* self, int32_t (*callback)(void*, int32_t, int, void*));

/// Base class method implementation
///
/// @param self QCPPolarLegendItem*
/// @param param1 enum QMetaObject__Call
/// @param param2 int
/// @param param3 void*
int32_t q_cppolarlegenditem_qbase_metacall(void* self, int32_t param1, int param2, void* param3);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
const char* q_cppolarlegenditem_tr(const char* s);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarLegendItem.html)
///
/// @param self QCPPolarLegendItem*
QCPPolarGraph* q_cppolarlegenditem_polar_graph(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarLegendItem.html)
///
/// @param self QCPPolarLegendItem*
/// @param painter QCPPainter*
void q_cppolarlegenditem_draw(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarLegendItem.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPPolarLegendItem*
/// @param callback void func(QCPPolarLegendItem* self, QCPPainter* painter)
void q_cppolarlegenditem_on_draw(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarLegendItem.html)
///
/// Base class method implementation
///
/// @param self QCPPolarLegendItem*
/// @param painter QCPPainter*
void q_cppolarlegenditem_qbase_draw(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarLegendItem.html)
///
/// @param self QCPPolarLegendItem*
QSize* q_cppolarlegenditem_minimum_outer_size_hint(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarLegendItem.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPPolarLegendItem*
/// @param callback QSize* func()
void q_cppolarlegenditem_on_minimum_outer_size_hint(void* self, QSize* (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarLegendItem.html)
///
/// Base class method implementation
///
/// @param self QCPPolarLegendItem*
QSize* q_cppolarlegenditem_qbase_minimum_outer_size_hint(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarLegendItem.html)
///
/// @param self QCPPolarLegendItem*
QPen* q_cppolarlegenditem_get_icon_border_pen(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarLegendItem.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPPolarLegendItem*
/// @param callback QPen* func()
void q_cppolarlegenditem_on_get_icon_border_pen(void* self, QPen* (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarLegendItem.html)
///
/// Base class method implementation
///
/// @param self QCPPolarLegendItem*
QPen* q_cppolarlegenditem_qbase_get_icon_border_pen(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarLegendItem.html)
///
/// @param self QCPPolarLegendItem*
QColor* q_cppolarlegenditem_get_text_color(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarLegendItem.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPPolarLegendItem*
/// @param callback QColor* func()
void q_cppolarlegenditem_on_get_text_color(void* self, QColor* (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarLegendItem.html)
///
/// Base class method implementation
///
/// @param self QCPPolarLegendItem*
QColor* q_cppolarlegenditem_qbase_get_text_color(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarLegendItem.html)
///
/// @param self QCPPolarLegendItem*
QFont* q_cppolarlegenditem_get_font(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarLegendItem.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPPolarLegendItem*
/// @param callback QFont* func()
void q_cppolarlegenditem_on_get_font(void* self, QFont* (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarLegendItem.html)
///
/// Base class method implementation
///
/// @param self QCPPolarLegendItem*
QFont* q_cppolarlegenditem_qbase_get_font(void* self);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
/// @param c const char*
const char* q_cppolarlegenditem_tr2(const char* s, const char* c);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
/// @param c const char*
/// @param n int
const char* q_cppolarlegenditem_tr3(const char* s, const char* c, int n);

/// Inherited from QCPAbstractLegendItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// @param self QCPPolarLegendItem*
QCPLegend* q_cppolarlegenditem_parent_legend(void* self);

/// Inherited from QCPAbstractLegendItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// @param self QCPPolarLegendItem*
QFont* q_cppolarlegenditem_font(void* self);

/// Inherited from QCPAbstractLegendItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// @param self QCPPolarLegendItem*
QColor* q_cppolarlegenditem_text_color(void* self);

/// Inherited from QCPAbstractLegendItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// @param self QCPPolarLegendItem*
QFont* q_cppolarlegenditem_selected_font(void* self);

/// Inherited from QCPAbstractLegendItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// @param self QCPPolarLegendItem*
QColor* q_cppolarlegenditem_selected_text_color(void* self);

/// Inherited from QCPAbstractLegendItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// @param self QCPPolarLegendItem*
bool q_cppolarlegenditem_selectable(void* self);

/// Inherited from QCPAbstractLegendItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// @param self QCPPolarLegendItem*
bool q_cppolarlegenditem_selected(void* self);

/// Inherited from QCPAbstractLegendItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// @param self QCPPolarLegendItem*
/// @param font QFont*
void q_cppolarlegenditem_set_font(void* self, void* font);

/// Inherited from QCPAbstractLegendItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// @param self QCPPolarLegendItem*
/// @param color QColor*
void q_cppolarlegenditem_set_text_color(void* self, void* color);

/// Inherited from QCPAbstractLegendItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// @param self QCPPolarLegendItem*
/// @param font QFont*
void q_cppolarlegenditem_set_selected_font(void* self, void* font);

/// Inherited from QCPAbstractLegendItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// @param self QCPPolarLegendItem*
/// @param color QColor*
void q_cppolarlegenditem_set_selected_text_color(void* self, void* color);

/// Inherited from QCPAbstractLegendItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// @param self QCPPolarLegendItem*
/// @param selectable bool
void q_cppolarlegenditem_set_selectable(void* self, bool selectable);

/// Inherited from QCPAbstractLegendItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// @param self QCPPolarLegendItem*
/// @param selected bool
void q_cppolarlegenditem_set_selected(void* self, bool selected);

/// Inherited from QCPAbstractLegendItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// @param self QCPPolarLegendItem*
/// @param selected bool
void q_cppolarlegenditem_selection_changed(void* self, bool selected);

/// Inherited from QCPAbstractLegendItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// @param self QCPPolarLegendItem*
/// @param callback void func(QCPPolarLegendItem* self, bool selected)
void q_cppolarlegenditem_on_selection_changed(void* self, void (*callback)(void*, bool));

/// Inherited from QCPAbstractLegendItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// @param self QCPPolarLegendItem*
/// @param selectable bool
void q_cppolarlegenditem_selectable_changed(void* self, bool selectable);

/// Inherited from QCPAbstractLegendItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// @param self QCPPolarLegendItem*
/// @param callback void func(QCPPolarLegendItem* self, bool selectable)
void q_cppolarlegenditem_on_selectable_changed(void* self, void (*callback)(void*, bool));

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPPolarLegendItem*
QCPLayout* q_cppolarlegenditem_layout(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPPolarLegendItem*
QRect* q_cppolarlegenditem_rect(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPPolarLegendItem*
QRect* q_cppolarlegenditem_outer_rect(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPPolarLegendItem*
QMargins* q_cppolarlegenditem_margins(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPPolarLegendItem*
QMargins* q_cppolarlegenditem_minimum_margins(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPPolarLegendItem*
///
/// @return flag of enum QCP__MarginSide
int32_t q_cppolarlegenditem_auto_margins(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPPolarLegendItem*
QSize* q_cppolarlegenditem_minimum_size(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPPolarLegendItem*
QSize* q_cppolarlegenditem_maximum_size(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPPolarLegendItem*
///
/// @return enum QCPLayoutElement__SizeConstraintRect
int32_t q_cppolarlegenditem_size_constraint_rect(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPPolarLegendItem*
/// @param side enum QCP__MarginSide
QCPMarginGroup* q_cppolarlegenditem_margin_group(void* self, int32_t side);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPPolarLegendItem*
libqt_map /* of int32_t to QCPMarginGroup* */ q_cppolarlegenditem_margin_groups(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPPolarLegendItem*
/// @param rect QRect*
void q_cppolarlegenditem_set_outer_rect(void* self, void* rect);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPPolarLegendItem*
/// @param margins QMargins*
void q_cppolarlegenditem_set_margins(void* self, void* margins);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPPolarLegendItem*
/// @param margins QMargins*
void q_cppolarlegenditem_set_minimum_margins(void* self, void* margins);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPPolarLegendItem*
/// @param sides flag of enum QCP__MarginSide
void q_cppolarlegenditem_set_auto_margins(void* self, int32_t sides);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPPolarLegendItem*
/// @param size QSize*
void q_cppolarlegenditem_set_minimum_size(void* self, void* size);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPPolarLegendItem*
/// @param width int
/// @param height int
void q_cppolarlegenditem_set_minimum_size2(void* self, int width, int height);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPPolarLegendItem*
/// @param size QSize*
void q_cppolarlegenditem_set_maximum_size(void* self, void* size);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPPolarLegendItem*
/// @param width int
/// @param height int
void q_cppolarlegenditem_set_maximum_size2(void* self, int width, int height);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPPolarLegendItem*
/// @param constraintRect enum QCPLayoutElement__SizeConstraintRect
void q_cppolarlegenditem_set_size_constraint_rect(void* self, int32_t constraintRect);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// @param self QCPPolarLegendItem*
/// @param sides flag of enum QCP__MarginSide
/// @param group QCPMarginGroup*
void q_cppolarlegenditem_set_margin_group(void* self, int32_t sides, void* group);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPPolarLegendItem*
bool q_cppolarlegenditem_visible(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPPolarLegendItem*
QCustomPlot* q_cppolarlegenditem_parent_plot(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPPolarLegendItem*
QCPLayerable* q_cppolarlegenditem_parent_layerable(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPPolarLegendItem*
QCPLayer* q_cppolarlegenditem_layer(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPPolarLegendItem*
bool q_cppolarlegenditem_antialiased(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPPolarLegendItem*
/// @param on bool
void q_cppolarlegenditem_set_visible(void* self, bool on);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPPolarLegendItem*
/// @param layer QCPLayer*
bool q_cppolarlegenditem_set_layer(void* self, void* layer);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPPolarLegendItem*
/// @param layerName const char*
bool q_cppolarlegenditem_set_layer2(void* self, const char* layerName);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPPolarLegendItem*
/// @param enabled bool
void q_cppolarlegenditem_set_antialiased(void* self, bool enabled);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPPolarLegendItem*
bool q_cppolarlegenditem_real_visibility(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPPolarLegendItem*
/// @param newLayer QCPLayer*
void q_cppolarlegenditem_layer_changed(void* self, void* newLayer);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPPolarLegendItem*
/// @param callback void func(QCPPolarLegendItem* self, QCPLayer* newLayer)
void q_cppolarlegenditem_on_layer_changed(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#objectName)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPPolarLegendItem*
const char* q_cppolarlegenditem_object_name(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setObjectName)
///
/// @param self QCPPolarLegendItem*
/// @param name char*
void q_cppolarlegenditem_set_object_name(void* self, char* name);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isWidgetType)
///
/// @param self QCPPolarLegendItem*
bool q_cppolarlegenditem_is_widget_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isWindowType)
///
/// @param self QCPPolarLegendItem*
bool q_cppolarlegenditem_is_window_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isQuickItemType)
///
/// @param self QCPPolarLegendItem*
bool q_cppolarlegenditem_is_quick_item_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#signalsBlocked)
///
/// @param self QCPPolarLegendItem*
bool q_cppolarlegenditem_signals_blocked(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#blockSignals)
///
/// @param self QCPPolarLegendItem*
/// @param b bool
bool q_cppolarlegenditem_block_signals(void* self, bool b);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#thread)
///
/// @param self QCPPolarLegendItem*
QThread* q_cppolarlegenditem_thread(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#moveToThread)
///
/// @param self QCPPolarLegendItem*
/// @param thread QThread*
bool q_cppolarlegenditem_move_to_thread(void* self, void* thread);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#startTimer)
///
/// @param self QCPPolarLegendItem*
/// @param interval int
int32_t q_cppolarlegenditem_start_timer(void* self, int interval);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#killTimer)
///
/// @param self QCPPolarLegendItem*
/// @param id int
void q_cppolarlegenditem_kill_timer(void* self, int id);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#killTimer)
///
/// @param self QCPPolarLegendItem*
/// @param id enum Qt__TimerId
void q_cppolarlegenditem_kill_timer2(void* self, int32_t id);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#children)
///
/// @param self QCPPolarLegendItem*
libqt_list /* of QObject* */ q_cppolarlegenditem_children(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setParent)
///
/// @param self QCPPolarLegendItem*
/// @param parent QObject*
void q_cppolarlegenditem_set_parent(void* self, void* parent);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#installEventFilter)
///
/// @param self QCPPolarLegendItem*
/// @param filterObj QObject*
void q_cppolarlegenditem_install_event_filter(void* self, void* filterObj);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#removeEventFilter)
///
/// @param self QCPPolarLegendItem*
/// @param obj QObject*
void q_cppolarlegenditem_remove_event_filter(void* self, void* obj);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param method QMetaMethod*
QMetaObject__Connection* q_cppolarlegenditem_connect(void* sender, void* signal, void* receiver, void* method);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param self QCPPolarLegendItem*
/// @param sender QObject*
/// @param signal const char*
/// @param member const char*
QMetaObject__Connection* q_cppolarlegenditem_connect2(void* self, void* sender, const char* signal, const char* member);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param member QMetaMethod*
bool q_cppolarlegenditem_disconnect(void* sender, void* signal, void* receiver, void* member);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnect)
///
/// @param param1 QMetaObject__Connection*
bool q_cppolarlegenditem_disconnect2(void* param1);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dumpObjectTree)
///
/// @param self QCPPolarLegendItem*
void q_cppolarlegenditem_dump_object_tree(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dumpObjectInfo)
///
/// @param self QCPPolarLegendItem*
void q_cppolarlegenditem_dump_object_info(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setProperty)
///
/// @param self QCPPolarLegendItem*
/// @param name const char*
/// @param value QVariant*
bool q_cppolarlegenditem_set_property(void* self, const char* name, void* value);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#property)
///
/// @param self QCPPolarLegendItem*
/// @param name const char*
QVariant* q_cppolarlegenditem_property(void* self, const char* name);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dynamicPropertyNames)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPPolarLegendItem*
const char** q_cppolarlegenditem_dynamic_property_names(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#bindingStorage)
///
/// @param self QCPPolarLegendItem*
QBindingStorage* q_cppolarlegenditem_binding_storage(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#bindingStorage)
///
/// @param self QCPPolarLegendItem*
const QBindingStorage* q_cppolarlegenditem_binding_storage2(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPPolarLegendItem*
void q_cppolarlegenditem_destroyed(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPPolarLegendItem*
/// @param callback void func(QCPPolarLegendItem* self)
void q_cppolarlegenditem_on_destroyed(void* self, void (*callback)(void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#parent)
///
/// @param self QCPPolarLegendItem*
QObject* q_cppolarlegenditem_parent(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#inherits)
///
/// @param self QCPPolarLegendItem*
/// @param classname const char*
bool q_cppolarlegenditem_inherits(void* self, const char* classname);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#deleteLater)
///
/// @param self QCPPolarLegendItem*
void q_cppolarlegenditem_delete_later(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#moveToThread)
///
/// @param self QCPPolarLegendItem*
/// @param thread QThread*
/// @param param2 Disambiguated_t*
bool q_cppolarlegenditem_move_to_thread2(void* self, void* thread, void* param2);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#startTimer)
///
/// @param self QCPPolarLegendItem*
/// @param interval int
/// @param timerType enum Qt__TimerType
int32_t q_cppolarlegenditem_start_timer22(void* self, int interval, int32_t timerType);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param method QMetaMethod*
/// @param type enum Qt__ConnectionType
QMetaObject__Connection* q_cppolarlegenditem_connect5(void* sender, void* signal, void* receiver, void* method, int32_t type);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param self QCPPolarLegendItem*
/// @param sender QObject*
/// @param signal const char*
/// @param member const char*
/// @param type enum Qt__ConnectionType
QMetaObject__Connection* q_cppolarlegenditem_connect4(void* self, void* sender, const char* signal, const char* member, int32_t type);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPPolarLegendItem*
/// @param param1 QObject*
void q_cppolarlegenditem_destroyed1(void* self, void* param1);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPPolarLegendItem*
/// @param callback void func(QCPPolarLegendItem* self, QObject* param1)
void q_cppolarlegenditem_on_destroyed1(void* self, void (*callback)(void*, void*));

/// Inherited from QCPAbstractLegendItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarLegendItem*
/// @param pos QPointF*
/// @param onlySelectable bool
/// @param details QVariant*
double q_cppolarlegenditem_select_test(void* self, void* pos, bool onlySelectable, void* details);

/// Inherited from QCPAbstractLegendItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarLegendItem*
/// @param pos QPointF*
/// @param onlySelectable bool
/// @param details QVariant*
double q_cppolarlegenditem_qbase_select_test(void* self, void* pos, bool onlySelectable, void* details);

/// Inherited from QCPAbstractLegendItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarLegendItem*
/// @param callback double func(QCPPolarLegendItem* self, QPointF* pos, bool onlySelectable, QVariant* details)
void q_cppolarlegenditem_on_select_test(void* self, double (*callback)(void*, void*, bool, void*));

/// Inherited from QCPAbstractLegendItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarLegendItem*
///
/// @return enum QCP__Interaction
int32_t q_cppolarlegenditem_selection_category(void* self);

/// Inherited from QCPAbstractLegendItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarLegendItem*
///
/// @return enum QCP__Interaction
int32_t q_cppolarlegenditem_qbase_selection_category(void* self);

/// Inherited from QCPAbstractLegendItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarLegendItem*
/// @param callback int32_t func()
void q_cppolarlegenditem_on_selection_category(void* self, int32_t (*callback)());

/// Inherited from QCPAbstractLegendItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarLegendItem*
/// @param painter QCPPainter*
void q_cppolarlegenditem_apply_default_antialiasing_hint(void* self, void* painter);

/// Inherited from QCPAbstractLegendItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarLegendItem*
/// @param painter QCPPainter*
void q_cppolarlegenditem_qbase_apply_default_antialiasing_hint(void* self, void* painter);

/// Inherited from QCPAbstractLegendItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarLegendItem*
/// @param callback void func(QCPPolarLegendItem* self, QCPPainter* painter)
void q_cppolarlegenditem_on_apply_default_antialiasing_hint(void* self, void (*callback)(void*, void*));

/// Inherited from QCPAbstractLegendItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarLegendItem*
QRect* q_cppolarlegenditem_clip_rect(void* self);

/// Inherited from QCPAbstractLegendItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarLegendItem*
QRect* q_cppolarlegenditem_qbase_clip_rect(void* self);

/// Inherited from QCPAbstractLegendItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarLegendItem*
/// @param callback QRect* func()
void q_cppolarlegenditem_on_clip_rect(void* self, QRect* (*callback)());

/// Inherited from QCPAbstractLegendItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarLegendItem*
/// @param event QMouseEvent*
/// @param additive bool
/// @param details QVariant*
/// @param selectionStateChanged bool*
void q_cppolarlegenditem_select_event(void* self, void* event, bool additive, void* details, bool* selectionStateChanged);

/// Inherited from QCPAbstractLegendItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarLegendItem*
/// @param event QMouseEvent*
/// @param additive bool
/// @param details QVariant*
/// @param selectionStateChanged bool*
void q_cppolarlegenditem_qbase_select_event(void* self, void* event, bool additive, void* details, bool* selectionStateChanged);

/// Inherited from QCPAbstractLegendItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarLegendItem*
/// @param callback void func(QCPPolarLegendItem* self, QMouseEvent* event, bool additive, QVariant* details, bool* selectionStateChanged)
void q_cppolarlegenditem_on_select_event(void* self, void (*callback)(void*, void*, bool, void*, bool*));

/// Inherited from QCPAbstractLegendItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarLegendItem*
/// @param selectionStateChanged bool*
void q_cppolarlegenditem_deselect_event(void* self, bool* selectionStateChanged);

/// Inherited from QCPAbstractLegendItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarLegendItem*
/// @param selectionStateChanged bool*
void q_cppolarlegenditem_qbase_deselect_event(void* self, bool* selectionStateChanged);

/// Inherited from QCPAbstractLegendItem
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPAbstractLegendItem.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarLegendItem*
/// @param callback void func(QCPPolarLegendItem* self, bool* selectionStateChanged)
void q_cppolarlegenditem_on_deselect_event(void* self, void (*callback)(void*, bool*));

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarLegendItem*
/// @param phase enum QCPLayoutElement__UpdatePhase
void q_cppolarlegenditem_update(void* self, int32_t phase);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarLegendItem*
/// @param phase enum QCPLayoutElement__UpdatePhase
void q_cppolarlegenditem_qbase_update(void* self, int32_t phase);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarLegendItem*
/// @param callback void func(QCPPolarLegendItem* self, enum QCPLayoutElement__UpdatePhase phase)
void q_cppolarlegenditem_on_update(void* self, void (*callback)(void*, int32_t));

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarLegendItem*
QSize* q_cppolarlegenditem_maximum_outer_size_hint(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarLegendItem*
QSize* q_cppolarlegenditem_qbase_maximum_outer_size_hint(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarLegendItem*
/// @param callback QSize* func()
void q_cppolarlegenditem_on_maximum_outer_size_hint(void* self, QSize* (*callback)());

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarLegendItem*
/// @param recursive bool
libqt_list /* of QCPLayoutElement* */ q_cppolarlegenditem_elements(void* self, bool recursive);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarLegendItem*
/// @param recursive bool
libqt_list /* of QCPLayoutElement* */ q_cppolarlegenditem_qbase_elements(void* self, bool recursive);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarLegendItem*
/// @param callback QCPLayoutElement** func(QCPPolarLegendItem* self, bool recursive)
void q_cppolarlegenditem_on_elements(void* self, QCPLayoutElement** (*callback)(void*, bool));

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarLegendItem*
/// @param side enum QCP__MarginSide
int32_t q_cppolarlegenditem_calculate_auto_margin(void* self, int32_t side);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarLegendItem*
/// @param side enum QCP__MarginSide
int32_t q_cppolarlegenditem_qbase_calculate_auto_margin(void* self, int32_t side);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarLegendItem*
/// @param callback int32_t func(QCPPolarLegendItem* self, enum QCP__MarginSide side)
void q_cppolarlegenditem_on_calculate_auto_margin(void* self, int32_t (*callback)(void*, int32_t));

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarLegendItem*
void q_cppolarlegenditem_layout_changed(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarLegendItem*
void q_cppolarlegenditem_qbase_layout_changed(void* self);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarLegendItem*
/// @param callback void func()
void q_cppolarlegenditem_on_layout_changed(void* self, void (*callback)());

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarLegendItem*
/// @param parentPlot QCustomPlot*
void q_cppolarlegenditem_parent_plot_initialized(void* self, void* parentPlot);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarLegendItem*
/// @param parentPlot QCustomPlot*
void q_cppolarlegenditem_qbase_parent_plot_initialized(void* self, void* parentPlot);

/// Inherited from QCPLayoutElement
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayoutElement.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarLegendItem*
/// @param callback void func(QCPPolarLegendItem* self, QCustomPlot* parentPlot)
void q_cppolarlegenditem_on_parent_plot_initialized(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarLegendItem*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cppolarlegenditem_mouse_press_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarLegendItem*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cppolarlegenditem_qbase_mouse_press_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarLegendItem*
/// @param callback void func(QCPPolarLegendItem* self, QMouseEvent* event, QVariant* details)
void q_cppolarlegenditem_on_mouse_press_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarLegendItem*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cppolarlegenditem_mouse_move_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarLegendItem*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cppolarlegenditem_qbase_mouse_move_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarLegendItem*
/// @param callback void func(QCPPolarLegendItem* self, QMouseEvent* event, QPointF* startPos)
void q_cppolarlegenditem_on_mouse_move_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarLegendItem*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cppolarlegenditem_mouse_release_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarLegendItem*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cppolarlegenditem_qbase_mouse_release_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarLegendItem*
/// @param callback void func(QCPPolarLegendItem* self, QMouseEvent* event, QPointF* startPos)
void q_cppolarlegenditem_on_mouse_release_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarLegendItem*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cppolarlegenditem_mouse_double_click_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarLegendItem*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cppolarlegenditem_qbase_mouse_double_click_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarLegendItem*
/// @param callback void func(QCPPolarLegendItem* self, QMouseEvent* event, QVariant* details)
void q_cppolarlegenditem_on_mouse_double_click_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarLegendItem*
/// @param event QWheelEvent*
void q_cppolarlegenditem_wheel_event(void* self, void* event);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarLegendItem*
/// @param event QWheelEvent*
void q_cppolarlegenditem_qbase_wheel_event(void* self, void* event);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarLegendItem*
/// @param callback void func(QCPPolarLegendItem* self, QWheelEvent* event)
void q_cppolarlegenditem_on_wheel_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarLegendItem*
/// @param event QEvent*
bool q_cppolarlegenditem_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarLegendItem*
/// @param event QEvent*
bool q_cppolarlegenditem_qbase_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarLegendItem*
/// @param callback bool func(QCPPolarLegendItem* self, QEvent* event)
void q_cppolarlegenditem_on_event(void* self, bool (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarLegendItem*
/// @param watched QObject*
/// @param event QEvent*
bool q_cppolarlegenditem_event_filter(void* self, void* watched, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarLegendItem*
/// @param watched QObject*
/// @param event QEvent*
bool q_cppolarlegenditem_qbase_event_filter(void* self, void* watched, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarLegendItem*
/// @param callback bool func(QCPPolarLegendItem* self, QObject* watched, QEvent* event)
void q_cppolarlegenditem_on_event_filter(void* self, bool (*callback)(void*, void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarLegendItem*
/// @param event QTimerEvent*
void q_cppolarlegenditem_timer_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarLegendItem*
/// @param event QTimerEvent*
void q_cppolarlegenditem_qbase_timer_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarLegendItem*
/// @param callback void func(QCPPolarLegendItem* self, QTimerEvent* event)
void q_cppolarlegenditem_on_timer_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarLegendItem*
/// @param event QChildEvent*
void q_cppolarlegenditem_child_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarLegendItem*
/// @param event QChildEvent*
void q_cppolarlegenditem_qbase_child_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarLegendItem*
/// @param callback void func(QCPPolarLegendItem* self, QChildEvent* event)
void q_cppolarlegenditem_on_child_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarLegendItem*
/// @param event QEvent*
void q_cppolarlegenditem_custom_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarLegendItem*
/// @param event QEvent*
void q_cppolarlegenditem_qbase_custom_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarLegendItem*
/// @param callback void func(QCPPolarLegendItem* self, QEvent* event)
void q_cppolarlegenditem_on_custom_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarLegendItem*
/// @param signal QMetaMethod*
void q_cppolarlegenditem_connect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarLegendItem*
/// @param signal QMetaMethod*
void q_cppolarlegenditem_qbase_connect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarLegendItem*
/// @param callback void func(QCPPolarLegendItem* self, QMetaMethod* signal)
void q_cppolarlegenditem_on_connect_notify(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarLegendItem*
/// @param signal QMetaMethod*
void q_cppolarlegenditem_disconnect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarLegendItem*
/// @param signal QMetaMethod*
void q_cppolarlegenditem_qbase_disconnect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarLegendItem*
/// @param callback void func(QCPPolarLegendItem* self, QMetaMethod* signal)
void q_cppolarlegenditem_on_disconnect_notify(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarLegendItem*
/// @param parentPlot QCustomPlot*
void q_cppolarlegenditem_initialize_parent_plot(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarLegendItem*
/// @param parentPlot QCustomPlot*
void q_cppolarlegenditem_qbase_initialize_parent_plot(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarLegendItem*
/// @param callback void func(QCPPolarLegendItem* self, QCustomPlot* parentPlot)
void q_cppolarlegenditem_on_initialize_parent_plot(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarLegendItem*
/// @param parentLayerable QCPLayerable*
void q_cppolarlegenditem_set_parent_layerable(void* self, void* parentLayerable);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarLegendItem*
/// @param parentLayerable QCPLayerable*
void q_cppolarlegenditem_qbase_set_parent_layerable(void* self, void* parentLayerable);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarLegendItem*
/// @param callback void func(QCPPolarLegendItem* self, QCPLayerable* parentLayerable)
void q_cppolarlegenditem_on_set_parent_layerable(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarLegendItem*
/// @param layer QCPLayer*
/// @param prepend bool
bool q_cppolarlegenditem_move_to_layer(void* self, void* layer, bool prepend);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarLegendItem*
/// @param layer QCPLayer*
/// @param prepend bool
bool q_cppolarlegenditem_qbase_move_to_layer(void* self, void* layer, bool prepend);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarLegendItem*
/// @param callback bool func(QCPPolarLegendItem* self, QCPLayer* layer, bool prepend)
void q_cppolarlegenditem_on_move_to_layer(void* self, bool (*callback)(void*, void*, bool));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarLegendItem*
/// @param painter QCPPainter*
/// @param localAntialiased bool
/// @param overrideElement enum QCP__AntialiasedElement
void q_cppolarlegenditem_apply_antialiasing_hint(void* self, void* painter, bool localAntialiased, int32_t overrideElement);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarLegendItem*
/// @param painter QCPPainter*
/// @param localAntialiased bool
/// @param overrideElement enum QCP__AntialiasedElement
void q_cppolarlegenditem_qbase_apply_antialiasing_hint(void* self, void* painter, bool localAntialiased, int32_t overrideElement);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarLegendItem*
/// @param callback void func(QCPPolarLegendItem* self, QCPPainter* painter, bool localAntialiased, enum QCP__AntialiasedElement overrideElement)
void q_cppolarlegenditem_on_apply_antialiasing_hint(void* self, void (*callback)(void*, void*, bool, int32_t));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarLegendItem*
QObject* q_cppolarlegenditem_sender(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarLegendItem*
QObject* q_cppolarlegenditem_qbase_sender(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarLegendItem*
/// @param callback QObject* func()
void q_cppolarlegenditem_on_sender(void* self, QObject* (*callback)());

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarLegendItem*
int32_t q_cppolarlegenditem_sender_signal_index(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarLegendItem*
int32_t q_cppolarlegenditem_qbase_sender_signal_index(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarLegendItem*
/// @param callback int32_t func()
void q_cppolarlegenditem_on_sender_signal_index(void* self, int32_t (*callback)());

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarLegendItem*
/// @param signal const char*
int32_t q_cppolarlegenditem_receivers(void* self, const char* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarLegendItem*
/// @param signal const char*
int32_t q_cppolarlegenditem_qbase_receivers(void* self, const char* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarLegendItem*
/// @param callback int32_t func(QCPPolarLegendItem* self, const char* signal)
void q_cppolarlegenditem_on_receivers(void* self, int32_t (*callback)(void*, const char*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarLegendItem*
/// @param signal QMetaMethod*
bool q_cppolarlegenditem_is_signal_connected(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarLegendItem*
/// @param signal QMetaMethod*
bool q_cppolarlegenditem_qbase_is_signal_connected(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarLegendItem*
/// @param callback bool func(QCPPolarLegendItem* self, QMetaMethod* signal)
void q_cppolarlegenditem_on_is_signal_connected(void* self, bool (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#objectNameChanged)
///
/// Wrapper to allow calling private signal
///
/// @param self QCPPolarLegendItem*
/// @param callback void func(QCPPolarLegendItem* self, const char* objectName)
void q_cppolarlegenditem_on_object_name_changed(void* self, void (*callback)(void*, const char*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarLegendItem.html)
///
/// Delete this object from C++ memory.
///
/// @param self QCPPolarLegendItem*
void q_cppolarlegenditem_delete(void* self);

/// https://www.qcustomplot.com/documentation/classQCPPolarGraph.html

/// q_cppolargraph_new constructs a new QCPPolarGraph object.
///
/// @param keyAxis QCPPolarAxisAngular*
/// @param valueAxis QCPPolarAxisRadial*
QCPPolarGraph* q_cppolargraph_new(void* keyAxis, void* valueAxis);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#metaObject)
///
/// @param self QCPPolarGraph*
const QMetaObject* q_cppolargraph_meta_object(void* self);

/// @param self QCPPolarGraph*
/// @param param1 const char*
void* q_cppolargraph_metacast(void* self, const char* param1);

/// @param self QCPPolarGraph*
/// @param param1 enum QMetaObject__Call
/// @param param2 int
/// @param param3 void*
int32_t q_cppolargraph_metacall(void* self, int32_t param1, int param2, void* param3);

/// Allows for overriding the related default method
///
/// @param self QCPPolarGraph*
/// @param callback int32_t func(QCPPolarGraph* self, enum QMetaObject__Call param1, int param2, void* param3)
void q_cppolargraph_on_metacall(void* self, int32_t (*callback)(void*, int32_t, int, void*));

/// Base class method implementation
///
/// @param self QCPPolarGraph*
/// @param param1 enum QMetaObject__Call
/// @param param2 int
/// @param param3 void*
int32_t q_cppolargraph_qbase_metacall(void* self, int32_t param1, int param2, void* param3);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
const char* q_cppolargraph_tr(const char* s);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPPolarGraph*
const char* q_cppolargraph_name(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// @param self QCPPolarGraph*
bool q_cppolargraph_antialiased_fill(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// @param self QCPPolarGraph*
bool q_cppolargraph_antialiased_scatters(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// @param self QCPPolarGraph*
QPen* q_cppolargraph_pen(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// @param self QCPPolarGraph*
QBrush* q_cppolargraph_brush(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// @param self QCPPolarGraph*
bool q_cppolargraph_periodic(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// @param self QCPPolarGraph*
QCPPolarAxisAngular* q_cppolargraph_key_axis(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// @param self QCPPolarGraph*
QCPPolarAxisRadial* q_cppolargraph_value_axis(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// @param self QCPPolarGraph*
///
/// @return enum QCP__SelectionType
int32_t q_cppolargraph_selectable(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// @param self QCPPolarGraph*
bool q_cppolargraph_selected(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// @param self QCPPolarGraph*
QCPDataSelection* q_cppolargraph_selection(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// @param self QCPPolarGraph*
///
/// @return enum QCPPolarGraph__LineStyle
int32_t q_cppolargraph_line_style(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// @param self QCPPolarGraph*
QCPScatterStyle* q_cppolargraph_scatter_style(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// @param self QCPPolarGraph*
/// @param name const char*
void q_cppolargraph_set_name(void* self, const char* name);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// @param self QCPPolarGraph*
/// @param enabled bool
void q_cppolargraph_set_antialiased_fill(void* self, bool enabled);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// @param self QCPPolarGraph*
/// @param enabled bool
void q_cppolargraph_set_antialiased_scatters(void* self, bool enabled);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// @param self QCPPolarGraph*
/// @param pen QPen*
void q_cppolargraph_set_pen(void* self, void* pen);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// @param self QCPPolarGraph*
/// @param brush QBrush*
void q_cppolargraph_set_brush(void* self, void* brush);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// @param self QCPPolarGraph*
/// @param enabled bool
void q_cppolargraph_set_periodic(void* self, bool enabled);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// @param self QCPPolarGraph*
/// @param axis QCPPolarAxisAngular*
void q_cppolargraph_set_key_axis(void* self, void* axis);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// @param self QCPPolarGraph*
/// @param axis QCPPolarAxisRadial*
void q_cppolargraph_set_value_axis(void* self, void* axis);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// @param self QCPPolarGraph*
/// @param selectable enum QCP__SelectionType
void q_cppolargraph_set_selectable(void* self, int32_t selectable);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// @param self QCPPolarGraph*
/// @param selection QCPDataSelection*
void q_cppolargraph_set_selection(void* self, void* selection);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// @param self QCPPolarGraph*
/// @param keys libqt_list /* of double */
/// @param values libqt_list /* of double */
void q_cppolargraph_set_data2(void* self, libqt_list keys, libqt_list values);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// @param self QCPPolarGraph*
/// @param ls enum QCPPolarGraph__LineStyle
void q_cppolargraph_set_line_style(void* self, int32_t ls);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// @param self QCPPolarGraph*
/// @param style QCPScatterStyle*
void q_cppolargraph_set_scatter_style(void* self, void* style);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// @param self QCPPolarGraph*
/// @param keys libqt_list /* of double */
/// @param values libqt_list /* of double */
void q_cppolargraph_add_data(void* self, libqt_list keys, libqt_list values);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// @param self QCPPolarGraph*
/// @param key double
/// @param value double
void q_cppolargraph_add_data2(void* self, double key, double value);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// @param self QCPPolarGraph*
/// @param key double
/// @param value double
/// @param x double*
/// @param y double*
void q_cppolargraph_coords_to_pixels(void* self, double key, double value, double* x, double* y);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// @param self QCPPolarGraph*
/// @param key double
/// @param value double
const QPointF* q_cppolargraph_coords_to_pixels2(void* self, double key, double value);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// @param self QCPPolarGraph*
/// @param x double
/// @param y double
/// @param key double*
/// @param value double*
void q_cppolargraph_pixels_to_coords(void* self, double x, double y, double* key, double* value);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// @param self QCPPolarGraph*
/// @param pixelPos QPointF*
/// @param key double*
/// @param value double*
void q_cppolargraph_pixels_to_coords2(void* self, void* pixelPos, double* key, double* value);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// @param self QCPPolarGraph*
void q_cppolargraph_rescale_axes(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// @param self QCPPolarGraph*
void q_cppolargraph_rescale_key_axis(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// @param self QCPPolarGraph*
void q_cppolargraph_rescale_value_axis(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// @param self QCPPolarGraph*
/// @param legend QCPLegend*
bool q_cppolargraph_add_to_legend(void* self, void* legend);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// @param self QCPPolarGraph*
bool q_cppolargraph_add_to_legend2(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// @param self QCPPolarGraph*
/// @param legend QCPLegend*
bool q_cppolargraph_remove_from_legend(void* self, void* legend);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// @param self QCPPolarGraph*
bool q_cppolargraph_remove_from_legend2(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// @param self QCPPolarGraph*
/// @param pos QPointF*
/// @param onlySelectable bool
/// @param details QVariant*
double q_cppolargraph_select_test(void* self, void* pos, bool onlySelectable, void* details);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPPolarGraph*
/// @param callback double func(QCPPolarGraph* self, QPointF* pos, bool onlySelectable, QVariant* details)
void q_cppolargraph_on_select_test(void* self, double (*callback)(void*, void*, bool, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// Base class method implementation
///
/// @param self QCPPolarGraph*
/// @param pos QPointF*
/// @param onlySelectable bool
/// @param details QVariant*
double q_cppolargraph_qbase_select_test(void* self, void* pos, bool onlySelectable, void* details);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// @param self QCPPolarGraph*
QCPPlottableInterface1D* q_cppolargraph_interface1_d(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPPolarGraph*
/// @param callback QCPPlottableInterface1D* func()
void q_cppolargraph_on_interface1_d(void* self, QCPPlottableInterface1D* (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// Base class method implementation
///
/// @param self QCPPolarGraph*
QCPPlottableInterface1D* q_cppolargraph_qbase_interface1_d(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// @param self QCPPolarGraph*
/// @param foundRange bool*
/// @param inSignDomain enum QCP__SignDomain
QCPRange* q_cppolargraph_get_key_range(void* self, bool* foundRange, int32_t inSignDomain);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPPolarGraph*
/// @param callback QCPRange* func(QCPPolarGraph* self, bool* foundRange, enum QCP__SignDomain inSignDomain)
void q_cppolargraph_on_get_key_range(void* self, QCPRange* (*callback)(void*, bool*, int32_t));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// Base class method implementation
///
/// @param self QCPPolarGraph*
/// @param foundRange bool*
/// @param inSignDomain enum QCP__SignDomain
QCPRange* q_cppolargraph_qbase_get_key_range(void* self, bool* foundRange, int32_t inSignDomain);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// @param self QCPPolarGraph*
/// @param foundRange bool*
/// @param inSignDomain enum QCP__SignDomain
/// @param inKeyRange QCPRange*
QCPRange* q_cppolargraph_get_value_range(void* self, bool* foundRange, int32_t inSignDomain, void* inKeyRange);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPPolarGraph*
/// @param callback QCPRange* func(QCPPolarGraph* self, bool* foundRange, enum QCP__SignDomain inSignDomain, QCPRange* inKeyRange)
void q_cppolargraph_on_get_value_range(void* self, QCPRange* (*callback)(void*, bool*, int32_t, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// Base class method implementation
///
/// @param self QCPPolarGraph*
/// @param foundRange bool*
/// @param inSignDomain enum QCP__SignDomain
/// @param inKeyRange QCPRange*
QCPRange* q_cppolargraph_qbase_get_value_range(void* self, bool* foundRange, int32_t inSignDomain, void* inKeyRange);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// @param self QCPPolarGraph*
/// @param selected bool
void q_cppolargraph_selection_changed(void* self, bool selected);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// @param self QCPPolarGraph*
/// @param selection QCPDataSelection*
void q_cppolargraph_selection_changed2(void* self, void* selection);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// @param self QCPPolarGraph*
/// @param selectable enum QCP__SelectionType
void q_cppolargraph_selectable_changed(void* self, int32_t selectable);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// @param self QCPPolarGraph*
QRect* q_cppolargraph_clip_rect(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPPolarGraph*
/// @param callback QRect* func()
void q_cppolargraph_on_clip_rect(void* self, QRect* (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// Base class method implementation
///
/// @param self QCPPolarGraph*
QRect* q_cppolargraph_qbase_clip_rect(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// @param self QCPPolarGraph*
/// @param painter QCPPainter*
void q_cppolargraph_draw(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPPolarGraph*
/// @param callback void func(QCPPolarGraph* self, QCPPainter* painter)
void q_cppolargraph_on_draw(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// Base class method implementation
///
/// @param self QCPPolarGraph*
/// @param painter QCPPainter*
void q_cppolargraph_qbase_draw(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// @param self QCPPolarGraph*
///
/// @return enum QCP__Interaction
int32_t q_cppolargraph_selection_category(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPPolarGraph*
/// @param callback int32_t func()
void q_cppolargraph_on_selection_category(void* self, int32_t (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// Base class method implementation
///
/// @param self QCPPolarGraph*
///
/// @return enum QCP__Interaction
int32_t q_cppolargraph_qbase_selection_category(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// @param self QCPPolarGraph*
/// @param painter QCPPainter*
void q_cppolargraph_apply_default_antialiasing_hint(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPPolarGraph*
/// @param callback void func(QCPPolarGraph* self, QCPPainter* painter)
void q_cppolargraph_on_apply_default_antialiasing_hint(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// Base class method implementation
///
/// @param self QCPPolarGraph*
/// @param painter QCPPainter*
void q_cppolargraph_qbase_apply_default_antialiasing_hint(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// @param self QCPPolarGraph*
/// @param event QMouseEvent*
/// @param additive bool
/// @param details QVariant*
/// @param selectionStateChanged bool*
void q_cppolargraph_select_event(void* self, void* event, bool additive, void* details, bool* selectionStateChanged);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPPolarGraph*
/// @param callback void func(QCPPolarGraph* self, QMouseEvent* event, bool additive, QVariant* details, bool* selectionStateChanged)
void q_cppolargraph_on_select_event(void* self, void (*callback)(void*, void*, bool, void*, bool*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// Base class method implementation
///
/// @param self QCPPolarGraph*
/// @param event QMouseEvent*
/// @param additive bool
/// @param details QVariant*
/// @param selectionStateChanged bool*
void q_cppolargraph_qbase_select_event(void* self, void* event, bool additive, void* details, bool* selectionStateChanged);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// @param self QCPPolarGraph*
/// @param selectionStateChanged bool*
void q_cppolargraph_deselect_event(void* self, bool* selectionStateChanged);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPPolarGraph*
/// @param callback void func(QCPPolarGraph* self, bool* selectionStateChanged)
void q_cppolargraph_on_deselect_event(void* self, void (*callback)(void*, bool*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// Base class method implementation
///
/// @param self QCPPolarGraph*
/// @param selectionStateChanged bool*
void q_cppolargraph_qbase_deselect_event(void* self, bool* selectionStateChanged);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// @param self QCPPolarGraph*
/// @param painter QCPPainter*
/// @param lines libqt_list /* of QPointF* */
void q_cppolargraph_draw_line_plot(void* self, void* painter, libqt_list lines);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPPolarGraph*
/// @param callback void func(QCPPolarGraph* self, QCPPainter* painter, QPointF** lines)
void q_cppolargraph_on_draw_line_plot(void* self, void (*callback)(void*, void*, QPointF**));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// Base class method implementation
///
/// @param self QCPPolarGraph*
/// @param painter QCPPainter*
/// @param lines libqt_list /* of QPointF* */
void q_cppolargraph_qbase_draw_line_plot(void* self, void* painter, libqt_list lines);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// @param self QCPPolarGraph*
/// @param painter QCPPainter*
/// @param lines libqt_list /* of QPointF* */
void q_cppolargraph_draw_fill(void* self, void* painter, libqt_list lines);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPPolarGraph*
/// @param callback void func(QCPPolarGraph* self, QCPPainter* painter, QPointF** lines)
void q_cppolargraph_on_draw_fill(void* self, void (*callback)(void*, void*, QPointF**));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// Base class method implementation
///
/// @param self QCPPolarGraph*
/// @param painter QCPPainter*
/// @param lines libqt_list /* of QPointF* */
void q_cppolargraph_qbase_draw_fill(void* self, void* painter, libqt_list lines);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// @param self QCPPolarGraph*
/// @param painter QCPPainter*
/// @param scatters libqt_list /* of QPointF* */
/// @param style QCPScatterStyle*
void q_cppolargraph_draw_scatter_plot(void* self, void* painter, libqt_list scatters, void* style);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPPolarGraph*
/// @param callback void func(QCPPolarGraph* self, QCPPainter* painter, QPointF** scatters, QCPScatterStyle* style)
void q_cppolargraph_on_draw_scatter_plot(void* self, void (*callback)(void*, void*, QPointF**, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// Base class method implementation
///
/// @param self QCPPolarGraph*
/// @param painter QCPPainter*
/// @param scatters libqt_list /* of QPointF* */
/// @param style QCPScatterStyle*
void q_cppolargraph_qbase_draw_scatter_plot(void* self, void* painter, libqt_list scatters, void* style);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// @param self QCPPolarGraph*
/// @param painter QCPPainter*
/// @param rect QRectF*
void q_cppolargraph_draw_legend_icon(void* self, void* painter, void* rect);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPPolarGraph*
/// @param callback void func(QCPPolarGraph* self, QCPPainter* painter, QRectF* rect)
void q_cppolargraph_on_draw_legend_icon(void* self, void (*callback)(void*, void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// Base class method implementation
///
/// @param self QCPPolarGraph*
/// @param painter QCPPainter*
/// @param rect QRectF*
void q_cppolargraph_qbase_draw_legend_icon(void* self, void* painter, void* rect);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// @param self QCPPolarGraph*
/// @param painter QCPPainter*
void q_cppolargraph_apply_fill_antialiasing_hint(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPPolarGraph*
/// @param callback void func(QCPPolarGraph* self, QCPPainter* painter)
void q_cppolargraph_on_apply_fill_antialiasing_hint(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// Base class method implementation
///
/// @param self QCPPolarGraph*
/// @param painter QCPPainter*
void q_cppolargraph_qbase_apply_fill_antialiasing_hint(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// @param self QCPPolarGraph*
/// @param painter QCPPainter*
void q_cppolargraph_apply_scatters_antialiasing_hint(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPPolarGraph*
/// @param callback void func(QCPPolarGraph* self, QCPPainter* painter)
void q_cppolargraph_on_apply_scatters_antialiasing_hint(void* self, void (*callback)(void*, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// Base class method implementation
///
/// @param self QCPPolarGraph*
/// @param painter QCPPainter*
void q_cppolargraph_qbase_apply_scatters_antialiasing_hint(void* self, void* painter);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// @param self QCPPolarGraph*
int32_t q_cppolargraph_data_count(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPPolarGraph*
/// @param callback int32_t func()
void q_cppolargraph_on_data_count(void* self, int32_t (*callback)());

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// Base class method implementation
///
/// @param self QCPPolarGraph*
int32_t q_cppolargraph_qbase_data_count(void* self);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// @param self QCPPolarGraph*
/// @param selectedSegments libqt_list /* of QCPDataRange* */
/// @param unselectedSegments libqt_list /* of QCPDataRange* */
void q_cppolargraph_get_data_segments(void* self, libqt_list selectedSegments, libqt_list unselectedSegments);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPPolarGraph*
/// @param callback void func(QCPPolarGraph* self, QCPDataRange** selectedSegments, QCPDataRange** unselectedSegments)
void q_cppolargraph_on_get_data_segments(void* self, void (*callback)(void*, QCPDataRange**, QCPDataRange**));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// Base class method implementation
///
/// @param self QCPPolarGraph*
/// @param selectedSegments libqt_list /* of QCPDataRange* */
/// @param unselectedSegments libqt_list /* of QCPDataRange* */
void q_cppolargraph_qbase_get_data_segments(void* self, libqt_list selectedSegments, libqt_list unselectedSegments);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// @param self QCPPolarGraph*
/// @param painter QCPPainter*
/// @param lineData libqt_list /* of QPointF* */
void q_cppolargraph_draw_polyline(void* self, void* painter, libqt_list lineData);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPPolarGraph*
/// @param callback void func(QCPPolarGraph* self, QCPPainter* painter, QPointF** lineData)
void q_cppolargraph_on_draw_polyline(void* self, void (*callback)(void*, void*, QPointF**));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// Base class method implementation
///
/// @param self QCPPolarGraph*
/// @param painter QCPPainter*
/// @param lineData libqt_list /* of QPointF* */
void q_cppolargraph_qbase_draw_polyline(void* self, void* painter, libqt_list lineData);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// @param self QCPPolarGraph*
/// @param lines libqt_list /* of QPointF* */
/// @param dataRange QCPDataRange*
void q_cppolargraph_get_lines(void* self, libqt_list lines, void* dataRange);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPPolarGraph*
/// @param callback void func(QCPPolarGraph* self, QPointF** lines, QCPDataRange* dataRange)
void q_cppolargraph_on_get_lines(void* self, void (*callback)(void*, QPointF**, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// Base class method implementation
///
/// @param self QCPPolarGraph*
/// @param lines libqt_list /* of QPointF* */
/// @param dataRange QCPDataRange*
void q_cppolargraph_qbase_get_lines(void* self, libqt_list lines, void* dataRange);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// @param self QCPPolarGraph*
/// @param scatters libqt_list /* of QPointF* */
/// @param dataRange QCPDataRange*
void q_cppolargraph_get_scatters(void* self, libqt_list scatters, void* dataRange);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPPolarGraph*
/// @param callback void func(QCPPolarGraph* self, QPointF** scatters, QCPDataRange* dataRange)
void q_cppolargraph_on_get_scatters(void* self, void (*callback)(void*, QPointF**, void*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// Base class method implementation
///
/// @param self QCPPolarGraph*
/// @param scatters libqt_list /* of QPointF* */
/// @param dataRange QCPDataRange*
void q_cppolargraph_qbase_get_scatters(void* self, libqt_list scatters, void* dataRange);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// @param self QCPPolarGraph*
/// @param data libqt_list /* of QCPGraphData* */
libqt_list /* of QPointF* */ q_cppolargraph_data_to_lines(void* self, libqt_list data);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// Allows for overriding the related default method
///
/// @param self QCPPolarGraph*
/// @param callback QPointF** func(QCPPolarGraph* self, QCPGraphData** data)
void q_cppolargraph_on_data_to_lines(void* self, QPointF** (*callback)(void*, QCPGraphData**));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// Base class method implementation
///
/// @param self QCPPolarGraph*
/// @param data libqt_list /* of QCPGraphData* */
libqt_list /* of QPointF* */ q_cppolargraph_qbase_data_to_lines(void* self, libqt_list data);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
/// @param c const char*
const char* q_cppolargraph_tr2(const char* s, const char* c);

/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#tr)
///
/// Caller is responsible for freeing the returned memory
///
/// @param s const char*
/// @param c const char*
/// @param n int
const char* q_cppolargraph_tr3(const char* s, const char* c, int n);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// @param self QCPPolarGraph*
/// @param keys libqt_list /* of double */
/// @param values libqt_list /* of double */
/// @param alreadySorted bool
void q_cppolargraph_set_data3(void* self, libqt_list keys, libqt_list values, bool alreadySorted);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// @param self QCPPolarGraph*
/// @param keys libqt_list /* of double */
/// @param values libqt_list /* of double */
/// @param alreadySorted bool
void q_cppolargraph_add_data3(void* self, libqt_list keys, libqt_list values, bool alreadySorted);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// @param self QCPPolarGraph*
/// @param onlyEnlarge bool
void q_cppolargraph_rescale_axes1(void* self, bool onlyEnlarge);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// @param self QCPPolarGraph*
/// @param onlyEnlarge bool
void q_cppolargraph_rescale_key_axis1(void* self, bool onlyEnlarge);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// @param self QCPPolarGraph*
/// @param onlyEnlarge bool
void q_cppolargraph_rescale_value_axis1(void* self, bool onlyEnlarge);

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// @param self QCPPolarGraph*
/// @param onlyEnlarge bool
/// @param inKeyRange bool
void q_cppolargraph_rescale_value_axis2(void* self, bool onlyEnlarge, bool inKeyRange);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPPolarGraph*
bool q_cppolargraph_visible(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPPolarGraph*
QCustomPlot* q_cppolargraph_parent_plot(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPPolarGraph*
QCPLayerable* q_cppolargraph_parent_layerable(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPPolarGraph*
QCPLayer* q_cppolargraph_layer(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPPolarGraph*
bool q_cppolargraph_antialiased(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPPolarGraph*
/// @param on bool
void q_cppolargraph_set_visible(void* self, bool on);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPPolarGraph*
/// @param layer QCPLayer*
bool q_cppolargraph_set_layer(void* self, void* layer);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPPolarGraph*
/// @param layerName const char*
bool q_cppolargraph_set_layer2(void* self, const char* layerName);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPPolarGraph*
/// @param enabled bool
void q_cppolargraph_set_antialiased(void* self, bool enabled);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPPolarGraph*
bool q_cppolargraph_real_visibility(void* self);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPPolarGraph*
/// @param newLayer QCPLayer*
void q_cppolargraph_layer_changed(void* self, void* newLayer);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// @param self QCPPolarGraph*
/// @param callback void func(QCPPolarGraph* self, QCPLayer* newLayer)
void q_cppolargraph_on_layer_changed(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#objectName)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPPolarGraph*
const char* q_cppolargraph_object_name(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setObjectName)
///
/// @param self QCPPolarGraph*
/// @param name char*
void q_cppolargraph_set_object_name(void* self, char* name);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isWidgetType)
///
/// @param self QCPPolarGraph*
bool q_cppolargraph_is_widget_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isWindowType)
///
/// @param self QCPPolarGraph*
bool q_cppolargraph_is_window_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isQuickItemType)
///
/// @param self QCPPolarGraph*
bool q_cppolargraph_is_quick_item_type(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#signalsBlocked)
///
/// @param self QCPPolarGraph*
bool q_cppolargraph_signals_blocked(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#blockSignals)
///
/// @param self QCPPolarGraph*
/// @param b bool
bool q_cppolargraph_block_signals(void* self, bool b);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#thread)
///
/// @param self QCPPolarGraph*
QThread* q_cppolargraph_thread(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#moveToThread)
///
/// @param self QCPPolarGraph*
/// @param thread QThread*
bool q_cppolargraph_move_to_thread(void* self, void* thread);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#startTimer)
///
/// @param self QCPPolarGraph*
/// @param interval int
int32_t q_cppolargraph_start_timer(void* self, int interval);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#killTimer)
///
/// @param self QCPPolarGraph*
/// @param id int
void q_cppolargraph_kill_timer(void* self, int id);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#killTimer)
///
/// @param self QCPPolarGraph*
/// @param id enum Qt__TimerId
void q_cppolargraph_kill_timer2(void* self, int32_t id);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#children)
///
/// @param self QCPPolarGraph*
libqt_list /* of QObject* */ q_cppolargraph_children(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setParent)
///
/// @param self QCPPolarGraph*
/// @param parent QObject*
void q_cppolargraph_set_parent(void* self, void* parent);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#installEventFilter)
///
/// @param self QCPPolarGraph*
/// @param filterObj QObject*
void q_cppolargraph_install_event_filter(void* self, void* filterObj);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#removeEventFilter)
///
/// @param self QCPPolarGraph*
/// @param obj QObject*
void q_cppolargraph_remove_event_filter(void* self, void* obj);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param method QMetaMethod*
QMetaObject__Connection* q_cppolargraph_connect(void* sender, void* signal, void* receiver, void* method);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param self QCPPolarGraph*
/// @param sender QObject*
/// @param signal const char*
/// @param member const char*
QMetaObject__Connection* q_cppolargraph_connect2(void* self, void* sender, const char* signal, const char* member);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param member QMetaMethod*
bool q_cppolargraph_disconnect(void* sender, void* signal, void* receiver, void* member);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnect)
///
/// @param param1 QMetaObject__Connection*
bool q_cppolargraph_disconnect2(void* param1);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dumpObjectTree)
///
/// @param self QCPPolarGraph*
void q_cppolargraph_dump_object_tree(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dumpObjectInfo)
///
/// @param self QCPPolarGraph*
void q_cppolargraph_dump_object_info(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#setProperty)
///
/// @param self QCPPolarGraph*
/// @param name const char*
/// @param value QVariant*
bool q_cppolargraph_set_property(void* self, const char* name, void* value);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#property)
///
/// @param self QCPPolarGraph*
/// @param name const char*
QVariant* q_cppolargraph_property(void* self, const char* name);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#dynamicPropertyNames)
///
/// Caller is responsible for freeing the returned memory
///
/// @param self QCPPolarGraph*
const char** q_cppolargraph_dynamic_property_names(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#bindingStorage)
///
/// @param self QCPPolarGraph*
QBindingStorage* q_cppolargraph_binding_storage(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#bindingStorage)
///
/// @param self QCPPolarGraph*
const QBindingStorage* q_cppolargraph_binding_storage2(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPPolarGraph*
void q_cppolargraph_destroyed(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPPolarGraph*
/// @param callback void func(QCPPolarGraph* self)
void q_cppolargraph_on_destroyed(void* self, void (*callback)(void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#parent)
///
/// @param self QCPPolarGraph*
QObject* q_cppolargraph_parent(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#inherits)
///
/// @param self QCPPolarGraph*
/// @param classname const char*
bool q_cppolargraph_inherits(void* self, const char* classname);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#deleteLater)
///
/// @param self QCPPolarGraph*
void q_cppolargraph_delete_later(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#moveToThread)
///
/// @param self QCPPolarGraph*
/// @param thread QThread*
/// @param param2 Disambiguated_t*
bool q_cppolargraph_move_to_thread2(void* self, void* thread, void* param2);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#startTimer)
///
/// @param self QCPPolarGraph*
/// @param interval int
/// @param timerType enum Qt__TimerType
int32_t q_cppolargraph_start_timer22(void* self, int interval, int32_t timerType);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param sender QObject*
/// @param signal QMetaMethod*
/// @param receiver QObject*
/// @param method QMetaMethod*
/// @param type enum Qt__ConnectionType
QMetaObject__Connection* q_cppolargraph_connect5(void* sender, void* signal, void* receiver, void* method, int32_t type);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connect)
///
/// @param self QCPPolarGraph*
/// @param sender QObject*
/// @param signal const char*
/// @param member const char*
/// @param type enum Qt__ConnectionType
QMetaObject__Connection* q_cppolargraph_connect4(void* self, void* sender, const char* signal, const char* member, int32_t type);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPPolarGraph*
/// @param param1 QObject*
void q_cppolargraph_destroyed1(void* self, void* param1);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#destroyed)
///
/// @param self QCPPolarGraph*
/// @param callback void func(QCPPolarGraph* self, QObject* param1)
void q_cppolargraph_on_destroyed1(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarGraph*
/// @param parentPlot QCustomPlot*
void q_cppolargraph_parent_plot_initialized(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarGraph*
/// @param parentPlot QCustomPlot*
void q_cppolargraph_qbase_parent_plot_initialized(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarGraph*
/// @param callback void func(QCPPolarGraph* self, QCustomPlot* parentPlot)
void q_cppolargraph_on_parent_plot_initialized(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarGraph*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cppolargraph_mouse_press_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarGraph*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cppolargraph_qbase_mouse_press_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarGraph*
/// @param callback void func(QCPPolarGraph* self, QMouseEvent* event, QVariant* details)
void q_cppolargraph_on_mouse_press_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarGraph*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cppolargraph_mouse_move_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarGraph*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cppolargraph_qbase_mouse_move_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarGraph*
/// @param callback void func(QCPPolarGraph* self, QMouseEvent* event, QPointF* startPos)
void q_cppolargraph_on_mouse_move_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarGraph*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cppolargraph_mouse_release_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarGraph*
/// @param event QMouseEvent*
/// @param startPos QPointF*
void q_cppolargraph_qbase_mouse_release_event(void* self, void* event, void* startPos);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarGraph*
/// @param callback void func(QCPPolarGraph* self, QMouseEvent* event, QPointF* startPos)
void q_cppolargraph_on_mouse_release_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarGraph*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cppolargraph_mouse_double_click_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarGraph*
/// @param event QMouseEvent*
/// @param details QVariant*
void q_cppolargraph_qbase_mouse_double_click_event(void* self, void* event, void* details);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarGraph*
/// @param callback void func(QCPPolarGraph* self, QMouseEvent* event, QVariant* details)
void q_cppolargraph_on_mouse_double_click_event(void* self, void (*callback)(void*, void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarGraph*
/// @param event QWheelEvent*
void q_cppolargraph_wheel_event(void* self, void* event);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarGraph*
/// @param event QWheelEvent*
void q_cppolargraph_qbase_wheel_event(void* self, void* event);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarGraph*
/// @param callback void func(QCPPolarGraph* self, QWheelEvent* event)
void q_cppolargraph_on_wheel_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarGraph*
/// @param event QEvent*
bool q_cppolargraph_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarGraph*
/// @param event QEvent*
bool q_cppolargraph_qbase_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#event)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarGraph*
/// @param callback bool func(QCPPolarGraph* self, QEvent* event)
void q_cppolargraph_on_event(void* self, bool (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarGraph*
/// @param watched QObject*
/// @param event QEvent*
bool q_cppolargraph_event_filter(void* self, void* watched, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarGraph*
/// @param watched QObject*
/// @param event QEvent*
bool q_cppolargraph_qbase_event_filter(void* self, void* watched, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#eventFilter)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarGraph*
/// @param callback bool func(QCPPolarGraph* self, QObject* watched, QEvent* event)
void q_cppolargraph_on_event_filter(void* self, bool (*callback)(void*, void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarGraph*
/// @param event QTimerEvent*
void q_cppolargraph_timer_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarGraph*
/// @param event QTimerEvent*
void q_cppolargraph_qbase_timer_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#timerEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarGraph*
/// @param callback void func(QCPPolarGraph* self, QTimerEvent* event)
void q_cppolargraph_on_timer_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarGraph*
/// @param event QChildEvent*
void q_cppolargraph_child_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarGraph*
/// @param event QChildEvent*
void q_cppolargraph_qbase_child_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#childEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarGraph*
/// @param callback void func(QCPPolarGraph* self, QChildEvent* event)
void q_cppolargraph_on_child_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarGraph*
/// @param event QEvent*
void q_cppolargraph_custom_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarGraph*
/// @param event QEvent*
void q_cppolargraph_qbase_custom_event(void* self, void* event);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#customEvent)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarGraph*
/// @param callback void func(QCPPolarGraph* self, QEvent* event)
void q_cppolargraph_on_custom_event(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarGraph*
/// @param signal QMetaMethod*
void q_cppolargraph_connect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarGraph*
/// @param signal QMetaMethod*
void q_cppolargraph_qbase_connect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#connectNotify)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarGraph*
/// @param callback void func(QCPPolarGraph* self, QMetaMethod* signal)
void q_cppolargraph_on_connect_notify(void* self, void (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarGraph*
/// @param signal QMetaMethod*
void q_cppolargraph_disconnect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarGraph*
/// @param signal QMetaMethod*
void q_cppolargraph_qbase_disconnect_notify(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#disconnectNotify)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarGraph*
/// @param callback void func(QCPPolarGraph* self, QMetaMethod* signal)
void q_cppolargraph_on_disconnect_notify(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarGraph*
/// @param parentPlot QCustomPlot*
void q_cppolargraph_initialize_parent_plot(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarGraph*
/// @param parentPlot QCustomPlot*
void q_cppolargraph_qbase_initialize_parent_plot(void* self, void* parentPlot);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarGraph*
/// @param callback void func(QCPPolarGraph* self, QCustomPlot* parentPlot)
void q_cppolargraph_on_initialize_parent_plot(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarGraph*
/// @param parentLayerable QCPLayerable*
void q_cppolargraph_set_parent_layerable(void* self, void* parentLayerable);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarGraph*
/// @param parentLayerable QCPLayerable*
void q_cppolargraph_qbase_set_parent_layerable(void* self, void* parentLayerable);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarGraph*
/// @param callback void func(QCPPolarGraph* self, QCPLayerable* parentLayerable)
void q_cppolargraph_on_set_parent_layerable(void* self, void (*callback)(void*, void*));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarGraph*
/// @param layer QCPLayer*
/// @param prepend bool
bool q_cppolargraph_move_to_layer(void* self, void* layer, bool prepend);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarGraph*
/// @param layer QCPLayer*
/// @param prepend bool
bool q_cppolargraph_qbase_move_to_layer(void* self, void* layer, bool prepend);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarGraph*
/// @param callback bool func(QCPPolarGraph* self, QCPLayer* layer, bool prepend)
void q_cppolargraph_on_move_to_layer(void* self, bool (*callback)(void*, void*, bool));

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarGraph*
/// @param painter QCPPainter*
/// @param localAntialiased bool
/// @param overrideElement enum QCP__AntialiasedElement
void q_cppolargraph_apply_antialiasing_hint(void* self, void* painter, bool localAntialiased, int32_t overrideElement);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarGraph*
/// @param painter QCPPainter*
/// @param localAntialiased bool
/// @param overrideElement enum QCP__AntialiasedElement
void q_cppolargraph_qbase_apply_antialiasing_hint(void* self, void* painter, bool localAntialiased, int32_t overrideElement);

/// Inherited from QCPLayerable
///
/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPLayerable.html)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarGraph*
/// @param callback void func(QCPPolarGraph* self, QCPPainter* painter, bool localAntialiased, enum QCP__AntialiasedElement overrideElement)
void q_cppolargraph_on_apply_antialiasing_hint(void* self, void (*callback)(void*, void*, bool, int32_t));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarGraph*
QObject* q_cppolargraph_sender(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarGraph*
QObject* q_cppolargraph_qbase_sender(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#sender)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarGraph*
/// @param callback QObject* func()
void q_cppolargraph_on_sender(void* self, QObject* (*callback)());

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarGraph*
int32_t q_cppolargraph_sender_signal_index(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarGraph*
int32_t q_cppolargraph_qbase_sender_signal_index(void* self);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#senderSignalIndex)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarGraph*
/// @param callback int32_t func()
void q_cppolargraph_on_sender_signal_index(void* self, int32_t (*callback)());

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarGraph*
/// @param signal const char*
int32_t q_cppolargraph_receivers(void* self, const char* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarGraph*
/// @param signal const char*
int32_t q_cppolargraph_qbase_receivers(void* self, const char* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#receivers)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarGraph*
/// @param callback int32_t func(QCPPolarGraph* self, const char* signal)
void q_cppolargraph_on_receivers(void* self, int32_t (*callback)(void*, const char*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow calling virtual or protected method
///
/// @param self QCPPolarGraph*
/// @param signal QMetaMethod*
bool q_cppolargraph_is_signal_connected(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow calling base class virtual or protected method
///
/// @param self QCPPolarGraph*
/// @param signal QMetaMethod*
bool q_cppolargraph_qbase_is_signal_connected(void* self, void* signal);

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#isSignalConnected)
///
/// Wrapper to allow overriding base class virtual or protected method
///
/// @param self QCPPolarGraph*
/// @param callback bool func(QCPPolarGraph* self, QMetaMethod* signal)
void q_cppolargraph_on_is_signal_connected(void* self, bool (*callback)(void*, void*));

/// Inherited from QObject
///
/// [Qt documentation](https://doc.qt.io/qt-6/qobject.html#objectNameChanged)
///
/// Wrapper to allow calling private signal
///
/// @param self QCPPolarGraph*
/// @param callback void func(QCPPolarGraph* self, const char* objectName)
void q_cppolargraph_on_object_name_changed(void* self, void (*callback)(void*, const char*));

/// [Qt documentation](https://www.qcustomplot.com/documentation/classQCPPolarGraph.html)
///
/// Delete this object from C++ memory.
///
/// @param self QCPPolarGraph*
void q_cppolargraph_delete(void* self);

/// https://www.qcustomplot.com/documentation/classQCustomPlot.html#pub-types

typedef enum {
    QCP_RESOLUTIONUNIT_RUDOTSPERMETER = 0,
    QCP_RESOLUTIONUNIT_RUDOTSPERCENTIMETER = 1,
    QCP_RESOLUTIONUNIT_RUDOTSPERINCH = 2
} QCP__ResolutionUnit;

typedef enum {
    QCP_EXPORTPEN_EPNOCOSMETIC = 0,
    QCP_EXPORTPEN_EPALLOWCOSMETIC = 1
} QCP__ExportPen;

typedef enum {
    QCP_SIGNDOMAIN_SDNEGATIVE = 0,
    QCP_SIGNDOMAIN_SDBOTH = 1,
    QCP_SIGNDOMAIN_SDPOSITIVE = 2
} QCP__SignDomain;

typedef enum {
    QCP_MARGINSIDE_MSLEFT = 1,
    QCP_MARGINSIDE_MSRIGHT = 2,
    QCP_MARGINSIDE_MSTOP = 4,
    QCP_MARGINSIDE_MSBOTTOM = 8,
    QCP_MARGINSIDE_MSALL = 255,
    QCP_MARGINSIDE_MSNONE = 0
} QCP__MarginSide;

typedef enum {
    QCP_ANTIALIASEDELEMENT_AEAXES = 1,
    QCP_ANTIALIASEDELEMENT_AEGRID = 2,
    QCP_ANTIALIASEDELEMENT_AESUBGRID = 4,
    QCP_ANTIALIASEDELEMENT_AELEGEND = 8,
    QCP_ANTIALIASEDELEMENT_AELEGENDITEMS = 16,
    QCP_ANTIALIASEDELEMENT_AEPLOTTABLES = 32,
    QCP_ANTIALIASEDELEMENT_AEITEMS = 64,
    QCP_ANTIALIASEDELEMENT_AESCATTERS = 128,
    QCP_ANTIALIASEDELEMENT_AEFILLS = 256,
    QCP_ANTIALIASEDELEMENT_AEZEROLINE = 512,
    QCP_ANTIALIASEDELEMENT_AEOTHER = 32768,
    QCP_ANTIALIASEDELEMENT_AEALL = 65535,
    QCP_ANTIALIASEDELEMENT_AENONE = 0
} QCP__AntialiasedElement;

typedef enum {
    QCP_PLOTTINGHINT_PHNONE = 0,
    QCP_PLOTTINGHINT_PHFASTPOLYLINES = 1,
    QCP_PLOTTINGHINT_PHIMMEDIATEREFRESH = 2,
    QCP_PLOTTINGHINT_PHCACHELABELS = 4
} QCP__PlottingHint;

typedef enum {
    QCP_INTERACTION_INONE = 0,
    QCP_INTERACTION_IRANGEDRAG = 1,
    QCP_INTERACTION_IRANGEZOOM = 2,
    QCP_INTERACTION_IMULTISELECT = 4,
    QCP_INTERACTION_ISELECTPLOTTABLES = 8,
    QCP_INTERACTION_ISELECTAXES = 16,
    QCP_INTERACTION_ISELECTLEGEND = 32,
    QCP_INTERACTION_ISELECTITEMS = 64,
    QCP_INTERACTION_ISELECTOTHER = 128,
    QCP_INTERACTION_ISELECTPLOTTABLESBEYONDAXISRECT = 256
} QCP__Interaction;

typedef enum {
    QCP_SELECTIONRECTMODE_SRMNONE = 0,
    QCP_SELECTIONRECTMODE_SRMZOOM = 1,
    QCP_SELECTIONRECTMODE_SRMSELECT = 2,
    QCP_SELECTIONRECTMODE_SRMCUSTOM = 3
} QCP__SelectionRectMode;

typedef enum {
    QCP_SELECTIONTYPE_STNONE = 0,
    QCP_SELECTIONTYPE_STWHOLE = 1,
    QCP_SELECTIONTYPE_STSINGLEDATA = 2,
    QCP_SELECTIONTYPE_STDATARANGE = 3,
    QCP_SELECTIONTYPE_STMULTIPLEDATARANGES = 4
} QCP__SelectionType;

typedef enum {
    QCPPAINTER_PAINTERMODE_PMDEFAULT = 0,
    QCPPAINTER_PAINTERMODE_PMVECTORIZED = 1,
    QCPPAINTER_PAINTERMODE_PMNOCACHING = 2,
    QCPPAINTER_PAINTERMODE_PMNONCOSMETIC = 4
} QCPPainter__PainterMode;

typedef enum {
    QCPLAYER_LAYERMODE_LMLOGICAL = 0,
    QCPLAYER_LAYERMODE_LMBUFFERED = 1
} QCPLayer__LayerMode;

typedef enum {
    QCPLAYOUTELEMENT_UPDATEPHASE_UPPREPARATION = 0,
    QCPLAYOUTELEMENT_UPDATEPHASE_UPMARGINS = 1,
    QCPLAYOUTELEMENT_UPDATEPHASE_UPLAYOUT = 2
} QCPLayoutElement__UpdatePhase;

typedef enum {
    QCPLAYOUTELEMENT_SIZECONSTRAINTRECT_SCRINNERRECT = 0,
    QCPLAYOUTELEMENT_SIZECONSTRAINTRECT_SCROUTERRECT = 1
} QCPLayoutElement__SizeConstraintRect;

typedef enum {
    QCPLAYOUTGRID_FILLORDER_FOROWSFIRST = 0,
    QCPLAYOUTGRID_FILLORDER_FOCOLUMNSFIRST = 1
} QCPLayoutGrid__FillOrder;

typedef enum {
    QCPLAYOUTINSET_INSETPLACEMENT_IPFREE = 0,
    QCPLAYOUTINSET_INSETPLACEMENT_IPBORDERALIGNED = 1
} QCPLayoutInset__InsetPlacement;

typedef enum {
    QCPLINEENDING_ENDINGSTYLE_ESNONE = 0,
    QCPLINEENDING_ENDINGSTYLE_ESFLATARROW = 1,
    QCPLINEENDING_ENDINGSTYLE_ESSPIKEARROW = 2,
    QCPLINEENDING_ENDINGSTYLE_ESLINEARROW = 3,
    QCPLINEENDING_ENDINGSTYLE_ESDISC = 4,
    QCPLINEENDING_ENDINGSTYLE_ESSQUARE = 5,
    QCPLINEENDING_ENDINGSTYLE_ESDIAMOND = 6,
    QCPLINEENDING_ENDINGSTYLE_ESBAR = 7,
    QCPLINEENDING_ENDINGSTYLE_ESHALFBAR = 8,
    QCPLINEENDING_ENDINGSTYLE_ESSKEWEDBAR = 9
} QCPLineEnding__EndingStyle;

typedef enum {
    QCPLABELPAINTERPRIVATE_ANCHORMODE_AMRECTANGULAR = 0,
    QCPLABELPAINTERPRIVATE_ANCHORMODE_AMSKEWEDUPRIGHT = 1,
    QCPLABELPAINTERPRIVATE_ANCHORMODE_AMSKEWEDROTATED = 2
} QCPLabelPainterPrivate__AnchorMode;

typedef enum {
    QCPLABELPAINTERPRIVATE_ANCHORREFERENCETYPE_ARTNORMAL = 0,
    QCPLABELPAINTERPRIVATE_ANCHORREFERENCETYPE_ARTTANGENT = 1
} QCPLabelPainterPrivate__AnchorReferenceType;

typedef enum {
    QCPLABELPAINTERPRIVATE_ANCHORSIDE_ASLEFT = 0,
    QCPLABELPAINTERPRIVATE_ANCHORSIDE_ASRIGHT = 1,
    QCPLABELPAINTERPRIVATE_ANCHORSIDE_ASTOP = 2,
    QCPLABELPAINTERPRIVATE_ANCHORSIDE_ASBOTTOM = 3,
    QCPLABELPAINTERPRIVATE_ANCHORSIDE_ASTOPLEFT = 4,
    QCPLABELPAINTERPRIVATE_ANCHORSIDE_ASTOPRIGHT = 5,
    QCPLABELPAINTERPRIVATE_ANCHORSIDE_ASBOTTOMRIGHT = 6,
    QCPLABELPAINTERPRIVATE_ANCHORSIDE_ASBOTTOMLEFT = 7
} QCPLabelPainterPrivate__AnchorSide;

typedef enum {
    QCPAXISTICKER_TICKSTEPSTRATEGY_TSSREADABILITY = 0,
    QCPAXISTICKER_TICKSTEPSTRATEGY_TSSMEETTICKCOUNT = 1
} QCPAxisTicker__TickStepStrategy;

typedef enum {
    QCPAXISTICKERDATETIME_DATESTRATEGY_DSNONE = 0,
    QCPAXISTICKERDATETIME_DATESTRATEGY_DSUNIFORMTIMEINDAY = 1,
    QCPAXISTICKERDATETIME_DATESTRATEGY_DSUNIFORMDAYINMONTH = 2
} QCPAxisTickerDateTime__DateStrategy;

typedef enum {
    QCPAXISTICKERTIME_TIMEUNIT_TUMILLISECONDS = 0,
    QCPAXISTICKERTIME_TIMEUNIT_TUSECONDS = 1,
    QCPAXISTICKERTIME_TIMEUNIT_TUMINUTES = 2,
    QCPAXISTICKERTIME_TIMEUNIT_TUHOURS = 3,
    QCPAXISTICKERTIME_TIMEUNIT_TUDAYS = 4
} QCPAxisTickerTime__TimeUnit;

typedef enum {
    QCPAXISTICKERFIXED_SCALESTRATEGY_SSNONE = 0,
    QCPAXISTICKERFIXED_SCALESTRATEGY_SSMULTIPLES = 1,
    QCPAXISTICKERFIXED_SCALESTRATEGY_SSPOWERS = 2
} QCPAxisTickerFixed__ScaleStrategy;

typedef enum {
    QCPAXISTICKERPI_FRACTIONSTYLE_FSFLOATINGPOINT = 0,
    QCPAXISTICKERPI_FRACTIONSTYLE_FSASCIIFRACTIONS = 1,
    QCPAXISTICKERPI_FRACTIONSTYLE_FSUNICODEFRACTIONS = 2
} QCPAxisTickerPi__FractionStyle;

typedef enum {
    QCPAXIS_AXISTYPE_ATLEFT = 1,
    QCPAXIS_AXISTYPE_ATRIGHT = 2,
    QCPAXIS_AXISTYPE_ATTOP = 4,
    QCPAXIS_AXISTYPE_ATBOTTOM = 8
} QCPAxis__AxisType;

typedef enum {
    QCPAXIS_LABELSIDE_LSINSIDE = 0,
    QCPAXIS_LABELSIDE_LSOUTSIDE = 1
} QCPAxis__LabelSide;

typedef enum {
    QCPAXIS_SCALETYPE_STLINEAR = 0,
    QCPAXIS_SCALETYPE_STLOGARITHMIC = 1
} QCPAxis__ScaleType;

typedef enum {
    QCPAXIS_SELECTABLEPART_SPNONE = 0,
    QCPAXIS_SELECTABLEPART_SPAXIS = 1,
    QCPAXIS_SELECTABLEPART_SPTICKLABELS = 2,
    QCPAXIS_SELECTABLEPART_SPAXISLABEL = 4
} QCPAxis__SelectablePart;

typedef enum {
    QCPSCATTERSTYLE_SCATTERPROPERTY_SPNONE = 0,
    QCPSCATTERSTYLE_SCATTERPROPERTY_SPPEN = 1,
    QCPSCATTERSTYLE_SCATTERPROPERTY_SPBRUSH = 2,
    QCPSCATTERSTYLE_SCATTERPROPERTY_SPSIZE = 4,
    QCPSCATTERSTYLE_SCATTERPROPERTY_SPSHAPE = 8,
    QCPSCATTERSTYLE_SCATTERPROPERTY_SPALL = 255
} QCPScatterStyle__ScatterProperty;

typedef enum {
    QCPSCATTERSTYLE_SCATTERSHAPE_SSNONE = 0,
    QCPSCATTERSTYLE_SCATTERSHAPE_SSDOT = 1,
    QCPSCATTERSTYLE_SCATTERSHAPE_SSCROSS = 2,
    QCPSCATTERSTYLE_SCATTERSHAPE_SSPLUS = 3,
    QCPSCATTERSTYLE_SCATTERSHAPE_SSCIRCLE = 4,
    QCPSCATTERSTYLE_SCATTERSHAPE_SSDISC = 5,
    QCPSCATTERSTYLE_SCATTERSHAPE_SSSQUARE = 6,
    QCPSCATTERSTYLE_SCATTERSHAPE_SSDIAMOND = 7,
    QCPSCATTERSTYLE_SCATTERSHAPE_SSSTAR = 8,
    QCPSCATTERSTYLE_SCATTERSHAPE_SSTRIANGLE = 9,
    QCPSCATTERSTYLE_SCATTERSHAPE_SSTRIANGLEINVERTED = 10,
    QCPSCATTERSTYLE_SCATTERSHAPE_SSCROSSSQUARE = 11,
    QCPSCATTERSTYLE_SCATTERSHAPE_SSPLUSSQUARE = 12,
    QCPSCATTERSTYLE_SCATTERSHAPE_SSCROSSCIRCLE = 13,
    QCPSCATTERSTYLE_SCATTERSHAPE_SSPLUSCIRCLE = 14,
    QCPSCATTERSTYLE_SCATTERSHAPE_SSPEACE = 15,
    QCPSCATTERSTYLE_SCATTERSHAPE_SSPIXMAP = 16,
    QCPSCATTERSTYLE_SCATTERSHAPE_SSCUSTOM = 17
} QCPScatterStyle__ScatterShape;

typedef enum {
    QCPITEMPOSITION_POSITIONTYPE_PTABSOLUTE = 0,
    QCPITEMPOSITION_POSITIONTYPE_PTVIEWPORTRATIO = 1,
    QCPITEMPOSITION_POSITIONTYPE_PTAXISRECTRATIO = 2,
    QCPITEMPOSITION_POSITIONTYPE_PTPLOTCOORDS = 3
} QCPItemPosition__PositionType;

typedef enum {
    QCUSTOMPLOT_LAYERINSERTMODE_LIMBELOW = 0,
    QCUSTOMPLOT_LAYERINSERTMODE_LIMABOVE = 1
} QCustomPlot__LayerInsertMode;

typedef enum {
    QCUSTOMPLOT_REFRESHPRIORITY_RPIMMEDIATEREFRESH = 0,
    QCUSTOMPLOT_REFRESHPRIORITY_RPQUEUEDREFRESH = 1,
    QCUSTOMPLOT_REFRESHPRIORITY_RPREFRESHHINT = 2,
    QCUSTOMPLOT_REFRESHPRIORITY_RPQUEUEDREPLOT = 3
} QCustomPlot__RefreshPriority;

typedef enum {
    QCPCOLORGRADIENT_COLORINTERPOLATION_CIRGB = 0,
    QCPCOLORGRADIENT_COLORINTERPOLATION_CIHSV = 1
} QCPColorGradient__ColorInterpolation;

typedef enum {
    QCPCOLORGRADIENT_NANHANDLING_NHNONE = 0,
    QCPCOLORGRADIENT_NANHANDLING_NHLOWESTCOLOR = 1,
    QCPCOLORGRADIENT_NANHANDLING_NHHIGHESTCOLOR = 2,
    QCPCOLORGRADIENT_NANHANDLING_NHTRANSPARENT = 3,
    QCPCOLORGRADIENT_NANHANDLING_NHNANCOLOR = 4
} QCPColorGradient__NanHandling;

typedef enum {
    QCPCOLORGRADIENT_GRADIENTPRESET_GPGRAYSCALE = 0,
    QCPCOLORGRADIENT_GRADIENTPRESET_GPHOT = 1,
    QCPCOLORGRADIENT_GRADIENTPRESET_GPCOLD = 2,
    QCPCOLORGRADIENT_GRADIENTPRESET_GPNIGHT = 3,
    QCPCOLORGRADIENT_GRADIENTPRESET_GPCANDY = 4,
    QCPCOLORGRADIENT_GRADIENTPRESET_GPGEOGRAPHY = 5,
    QCPCOLORGRADIENT_GRADIENTPRESET_GPION = 6,
    QCPCOLORGRADIENT_GRADIENTPRESET_GPTHERMAL = 7,
    QCPCOLORGRADIENT_GRADIENTPRESET_GPPOLAR = 8,
    QCPCOLORGRADIENT_GRADIENTPRESET_GPSPECTRUM = 9,
    QCPCOLORGRADIENT_GRADIENTPRESET_GPJET = 10,
    QCPCOLORGRADIENT_GRADIENTPRESET_GPHUES = 11
} QCPColorGradient__GradientPreset;

typedef enum {
    QCPSELECTIONDECORATORBRACKET_BRACKETSTYLE_BSSQUAREBRACKET = 0,
    QCPSELECTIONDECORATORBRACKET_BRACKETSTYLE_BSHALFELLIPSE = 1,
    QCPSELECTIONDECORATORBRACKET_BRACKETSTYLE_BSELLIPSE = 2,
    QCPSELECTIONDECORATORBRACKET_BRACKETSTYLE_BSPLUS = 3,
    QCPSELECTIONDECORATORBRACKET_BRACKETSTYLE_BSUSERSTYLE = 4
} QCPSelectionDecoratorBracket__BracketStyle;

typedef enum {
    QCPLEGEND_SELECTABLEPART_SPNONE = 0,
    QCPLEGEND_SELECTABLEPART_SPLEGENDBOX = 1,
    QCPLEGEND_SELECTABLEPART_SPITEMS = 2
} QCPLegend__SelectablePart;

typedef enum {
    QCPGRAPH_LINESTYLE_LSNONE = 0,
    QCPGRAPH_LINESTYLE_LSLINE = 1,
    QCPGRAPH_LINESTYLE_LSSTEPLEFT = 2,
    QCPGRAPH_LINESTYLE_LSSTEPRIGHT = 3,
    QCPGRAPH_LINESTYLE_LSSTEPCENTER = 4,
    QCPGRAPH_LINESTYLE_LSIMPULSE = 5
} QCPGraph__LineStyle;

typedef enum {
    QCPCURVE_LINESTYLE_LSNONE = 0,
    QCPCURVE_LINESTYLE_LSLINE = 1
} QCPCurve__LineStyle;

typedef enum {
    QCPBARSGROUP_SPACINGTYPE_STABSOLUTE = 0,
    QCPBARSGROUP_SPACINGTYPE_STAXISRECTRATIO = 1,
    QCPBARSGROUP_SPACINGTYPE_STPLOTCOORDS = 2
} QCPBarsGroup__SpacingType;

typedef enum {
    QCPBARS_WIDTHTYPE_WTABSOLUTE = 0,
    QCPBARS_WIDTHTYPE_WTAXISRECTRATIO = 1,
    QCPBARS_WIDTHTYPE_WTPLOTCOORDS = 2
} QCPBars__WidthType;

typedef enum {
    QCPFINANCIAL_WIDTHTYPE_WTABSOLUTE = 0,
    QCPFINANCIAL_WIDTHTYPE_WTAXISRECTRATIO = 1,
    QCPFINANCIAL_WIDTHTYPE_WTPLOTCOORDS = 2
} QCPFinancial__WidthType;

typedef enum {
    QCPFINANCIAL_CHARTSTYLE_CSOHLC = 0,
    QCPFINANCIAL_CHARTSTYLE_CSCANDLESTICK = 1
} QCPFinancial__ChartStyle;

typedef enum {
    QCPERRORBARS_ERRORTYPE_ETKEYERROR = 0,
    QCPERRORBARS_ERRORTYPE_ETVALUEERROR = 1
} QCPErrorBars__ErrorType;

typedef enum {
    QCPITEMRECT_ANCHORINDEX_AITOP = 0,
    QCPITEMRECT_ANCHORINDEX_AITOPRIGHT = 1,
    QCPITEMRECT_ANCHORINDEX_AIRIGHT = 2,
    QCPITEMRECT_ANCHORINDEX_AIBOTTOM = 3,
    QCPITEMRECT_ANCHORINDEX_AIBOTTOMLEFT = 4,
    QCPITEMRECT_ANCHORINDEX_AILEFT = 5
} QCPItemRect__AnchorIndex;

typedef enum {
    QCPITEMTEXT_ANCHORINDEX_AITOPLEFT = 0,
    QCPITEMTEXT_ANCHORINDEX_AITOP = 1,
    QCPITEMTEXT_ANCHORINDEX_AITOPRIGHT = 2,
    QCPITEMTEXT_ANCHORINDEX_AIRIGHT = 3,
    QCPITEMTEXT_ANCHORINDEX_AIBOTTOMRIGHT = 4,
    QCPITEMTEXT_ANCHORINDEX_AIBOTTOM = 5,
    QCPITEMTEXT_ANCHORINDEX_AIBOTTOMLEFT = 6,
    QCPITEMTEXT_ANCHORINDEX_AILEFT = 7
} QCPItemText__AnchorIndex;

typedef enum {
    QCPITEMELLIPSE_ANCHORINDEX_AITOPLEFTRIM = 0,
    QCPITEMELLIPSE_ANCHORINDEX_AITOP = 1,
    QCPITEMELLIPSE_ANCHORINDEX_AITOPRIGHTRIM = 2,
    QCPITEMELLIPSE_ANCHORINDEX_AIRIGHT = 3,
    QCPITEMELLIPSE_ANCHORINDEX_AIBOTTOMRIGHTRIM = 4,
    QCPITEMELLIPSE_ANCHORINDEX_AIBOTTOM = 5,
    QCPITEMELLIPSE_ANCHORINDEX_AIBOTTOMLEFTRIM = 6,
    QCPITEMELLIPSE_ANCHORINDEX_AILEFT = 7,
    QCPITEMELLIPSE_ANCHORINDEX_AICENTER = 8
} QCPItemEllipse__AnchorIndex;

typedef enum {
    QCPITEMPIXMAP_ANCHORINDEX_AITOP = 0,
    QCPITEMPIXMAP_ANCHORINDEX_AITOPRIGHT = 1,
    QCPITEMPIXMAP_ANCHORINDEX_AIRIGHT = 2,
    QCPITEMPIXMAP_ANCHORINDEX_AIBOTTOM = 3,
    QCPITEMPIXMAP_ANCHORINDEX_AIBOTTOMLEFT = 4,
    QCPITEMPIXMAP_ANCHORINDEX_AILEFT = 5
} QCPItemPixmap__AnchorIndex;

typedef enum {
    QCPITEMTRACER_TRACERSTYLE_TSNONE = 0,
    QCPITEMTRACER_TRACERSTYLE_TSPLUS = 1,
    QCPITEMTRACER_TRACERSTYLE_TSCROSSHAIR = 2,
    QCPITEMTRACER_TRACERSTYLE_TSCIRCLE = 3,
    QCPITEMTRACER_TRACERSTYLE_TSSQUARE = 4
} QCPItemTracer__TracerStyle;

typedef enum {
    QCPITEMBRACKET_BRACKETSTYLE_BSSQUARE = 0,
    QCPITEMBRACKET_BRACKETSTYLE_BSROUND = 1,
    QCPITEMBRACKET_BRACKETSTYLE_BSCURLY = 2,
    QCPITEMBRACKET_BRACKETSTYLE_BSCALLIGRAPHIC = 3
} QCPItemBracket__BracketStyle;

typedef enum {
    QCPITEMBRACKET_ANCHORINDEX_AICENTER = 0
} QCPItemBracket__AnchorIndex;

typedef enum {
    QCPPOLARAXISRADIAL_ANGLEREFERENCE_ARABSOLUTE = 0,
    QCPPOLARAXISRADIAL_ANGLEREFERENCE_ARANGULARAXIS = 1
} QCPPolarAxisRadial__AngleReference;

typedef enum {
    QCPPOLARAXISRADIAL_SCALETYPE_STLINEAR = 0,
    QCPPOLARAXISRADIAL_SCALETYPE_STLOGARITHMIC = 1
} QCPPolarAxisRadial__ScaleType;

typedef enum {
    QCPPOLARAXISRADIAL_SELECTABLEPART_SPNONE = 0,
    QCPPOLARAXISRADIAL_SELECTABLEPART_SPAXIS = 1,
    QCPPOLARAXISRADIAL_SELECTABLEPART_SPTICKLABELS = 2,
    QCPPOLARAXISRADIAL_SELECTABLEPART_SPAXISLABEL = 4
} QCPPolarAxisRadial__SelectablePart;

typedef enum {
    QCPPOLARAXISRADIAL_LABELMODE_LMUPRIGHT = 0,
    QCPPOLARAXISRADIAL_LABELMODE_LMROTATED = 1
} QCPPolarAxisRadial__LabelMode;

typedef enum {
    QCPPOLARAXISANGULAR_SELECTABLEPART_SPNONE = 0,
    QCPPOLARAXISANGULAR_SELECTABLEPART_SPAXIS = 1,
    QCPPOLARAXISANGULAR_SELECTABLEPART_SPTICKLABELS = 2,
    QCPPOLARAXISANGULAR_SELECTABLEPART_SPAXISLABEL = 4
} QCPPolarAxisAngular__SelectablePart;

typedef enum {
    QCPPOLARAXISANGULAR_LABELMODE_LMUPRIGHT = 0,
    QCPPOLARAXISANGULAR_LABELMODE_LMROTATED = 1
} QCPPolarAxisAngular__LabelMode;

typedef enum {
    QCPPOLARGRID_GRIDTYPE_GTANGULAR = 1,
    QCPPOLARGRID_GRIDTYPE_GTRADIAL = 2,
    QCPPOLARGRID_GRIDTYPE_GTALL = 255,
    QCPPOLARGRID_GRIDTYPE_GTNONE = 0
} QCPPolarGrid__GridType;

typedef enum {
    QCPPOLARGRAPH_LINESTYLE_LSNONE = 0,
    QCPPOLARGRAPH_LINESTYLE_LSLINE = 1
} QCPPolarGraph__LineStyle;

#endif
