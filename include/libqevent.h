#pragma once
#ifndef SRCQT6C_LIBQEVENT_H
#define SRCQT6C_LIBQEVENT_H

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>

#include "libqttypedefs.h"

#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#include "qtlibc.h"

#include "libqaction.h"
#include "libqeventpoint.h"
#include "libqfile.h"
#include "libqinputdevice.h"
#include "libqnamespace.h"
#include "libqkeysequence.h"
#include "libqmimedata.h"
#include "libqobject.h"
#include "libqpoint.h"
#include "libqpointingdevice.h"
#include "libqrect.h"
#include "libqregion.h"
#include "libqscreen.h"
#include "libqsize.h"
#include <string.h>
#include "libqurl.h"
#include "libqvariant.h"
#include "libqcoreevent.h"

QInputEvent* q_inputevent_new(int64_t typeVal, void* m_dev);
QInputEvent* q_inputevent_new2(int64_t typeVal, void* m_dev, int64_t modifiers);
QInputEvent* q_inputevent_clone(void* self);
void q_inputevent_on_clone(void* self, QInputEvent* (*slot)());
QInputEvent* q_inputevent_qbase_clone(void* self);
QInputDevice* q_inputevent_device(void* self);
int64_t q_inputevent_device_type(void* self);
int64_t q_inputevent_modifiers(void* self);
void q_inputevent_set_modifiers(void* self, int64_t modifiers);
uint64_t q_inputevent_timestamp(void* self);
void q_inputevent_set_timestamp(void* self, uint64_t timestamp);
void q_inputevent_on_set_timestamp(void* self, void (*slot)(void*, uint64_t));
void q_inputevent_qbase_set_timestamp(void* self, uint64_t timestamp);
int64_t q_inputevent_type(void* self);
bool q_inputevent_spontaneous(void* self);
bool q_inputevent_is_accepted(void* self);
void q_inputevent_accept(void* self);
void q_inputevent_ignore(void* self);
bool q_inputevent_is_input_event(void* self);
bool q_inputevent_is_pointer_event(void* self);
bool q_inputevent_is_single_point_event(void* self);
int32_t q_inputevent_register_event_type();
int32_t q_inputevent_register_event_type1(int hint);
void q_inputevent_set_accepted(void* self, bool accepted);
void q_inputevent_qbase_set_accepted(void* self, bool accepted);
void q_inputevent_on_set_accepted(void* self, void (*slot)(void*, bool));
void q_inputevent_delete(void* self);

QPointerEvent* q_pointerevent_new(int64_t typeVal, void* dev);
QPointerEvent* q_pointerevent_new2(int64_t typeVal, void* dev, int64_t modifiers);
QPointerEvent* q_pointerevent_new3(int64_t typeVal, void* dev, int64_t modifiers, void* points[]);
QPointerEvent* q_pointerevent_clone(void* self);
void q_pointerevent_on_clone(void* self, QPointerEvent* (*slot)());
QPointerEvent* q_pointerevent_qbase_clone(void* self);
QPointingDevice* q_pointerevent_pointing_device(void* self);
int64_t q_pointerevent_pointer_type(void* self);
void q_pointerevent_set_timestamp(void* self, uint64_t timestamp);
void q_pointerevent_on_set_timestamp(void* self, void (*slot)(void*, uint64_t));
void q_pointerevent_qbase_set_timestamp(void* self, uint64_t timestamp);
int64_t q_pointerevent_point_count(void* self);
QEventPoint* q_pointerevent_point(void* self, int64_t i);
libqt_list /* of QEventPoint* */ q_pointerevent_points(void* self);
QEventPoint* q_pointerevent_point_by_id(void* self, int id);
bool q_pointerevent_all_points_grabbed(void* self);
bool q_pointerevent_is_begin_event(void* self);
void q_pointerevent_on_is_begin_event(void* self, bool (*slot)());
bool q_pointerevent_qbase_is_begin_event(void* self);
bool q_pointerevent_is_update_event(void* self);
void q_pointerevent_on_is_update_event(void* self, bool (*slot)());
bool q_pointerevent_qbase_is_update_event(void* self);
bool q_pointerevent_is_end_event(void* self);
void q_pointerevent_on_is_end_event(void* self, bool (*slot)());
bool q_pointerevent_qbase_is_end_event(void* self);
bool q_pointerevent_all_points_accepted(void* self);
void q_pointerevent_set_accepted(void* self, bool accepted);
void q_pointerevent_on_set_accepted(void* self, void (*slot)(void*, bool));
void q_pointerevent_qbase_set_accepted(void* self, bool accepted);
QObject* q_pointerevent_exclusive_grabber(void* self, void* point);
void q_pointerevent_set_exclusive_grabber(void* self, void* point, void* exclusiveGrabber);
void q_pointerevent_clear_passive_grabbers(void* self, void* point);
bool q_pointerevent_add_passive_grabber(void* self, void* point, void* grabber);
bool q_pointerevent_remove_passive_grabber(void* self, void* point, void* grabber);
QInputDevice* q_pointerevent_device(void* self);
int64_t q_pointerevent_device_type(void* self);
int64_t q_pointerevent_modifiers(void* self);
void q_pointerevent_set_modifiers(void* self, int64_t modifiers);
uint64_t q_pointerevent_timestamp(void* self);
int64_t q_pointerevent_type(void* self);
bool q_pointerevent_spontaneous(void* self);
bool q_pointerevent_is_accepted(void* self);
void q_pointerevent_accept(void* self);
void q_pointerevent_ignore(void* self);
bool q_pointerevent_is_input_event(void* self);
bool q_pointerevent_is_pointer_event(void* self);
bool q_pointerevent_is_single_point_event(void* self);
int32_t q_pointerevent_register_event_type();
int32_t q_pointerevent_register_event_type1(int hint);
void q_pointerevent_delete(void* self);

int64_t q_singlepointevent_button(void* self);
int64_t q_singlepointevent_buttons(void* self);
QPointF* q_singlepointevent_position(void* self);
QPointF* q_singlepointevent_scene_position(void* self);
QPointF* q_singlepointevent_global_position(void* self);
bool q_singlepointevent_is_begin_event(void* self);
bool q_singlepointevent_is_update_event(void* self);
bool q_singlepointevent_is_end_event(void* self);
QObject* q_singlepointevent_exclusive_point_grabber(void* self);
void q_singlepointevent_set_exclusive_point_grabber(void* self, void* exclusiveGrabber);
QPointingDevice* q_singlepointevent_pointing_device(void* self);
int64_t q_singlepointevent_pointer_type(void* self);
void q_singlepointevent_set_timestamp(void* self, uint64_t timestamp);
int64_t q_singlepointevent_point_count(void* self);
QEventPoint* q_singlepointevent_point(void* self, int64_t i);
libqt_list /* of QEventPoint* */ q_singlepointevent_points(void* self);
QEventPoint* q_singlepointevent_point_by_id(void* self, int id);
bool q_singlepointevent_all_points_grabbed(void* self);
bool q_singlepointevent_all_points_accepted(void* self);
void q_singlepointevent_set_accepted(void* self, bool accepted);
QObject* q_singlepointevent_exclusive_grabber(void* self, void* point);
void q_singlepointevent_set_exclusive_grabber(void* self, void* point, void* exclusiveGrabber);
void q_singlepointevent_clear_passive_grabbers(void* self, void* point);
bool q_singlepointevent_add_passive_grabber(void* self, void* point, void* grabber);
bool q_singlepointevent_remove_passive_grabber(void* self, void* point, void* grabber);
QInputDevice* q_singlepointevent_device(void* self);
int64_t q_singlepointevent_device_type(void* self);
int64_t q_singlepointevent_modifiers(void* self);
void q_singlepointevent_set_modifiers(void* self, int64_t modifiers);
uint64_t q_singlepointevent_timestamp(void* self);
int64_t q_singlepointevent_type(void* self);
bool q_singlepointevent_spontaneous(void* self);
bool q_singlepointevent_is_accepted(void* self);
void q_singlepointevent_accept(void* self);
void q_singlepointevent_ignore(void* self);
bool q_singlepointevent_is_input_event(void* self);
bool q_singlepointevent_is_pointer_event(void* self);
bool q_singlepointevent_is_single_point_event(void* self);
int32_t q_singlepointevent_register_event_type();
int32_t q_singlepointevent_register_event_type1(int hint);
void q_singlepointevent_delete(void* self);

QEnterEvent* q_enterevent_new(void* localPos, void* scenePos, void* globalPos);
QEnterEvent* q_enterevent_new2(void* localPos, void* scenePos, void* globalPos, void* device);
QEnterEvent* q_enterevent_clone(void* self);
void q_enterevent_on_clone(void* self, QEnterEvent* (*slot)());
QEnterEvent* q_enterevent_qbase_clone(void* self);
QPoint* q_enterevent_pos(void* self);
QPoint* q_enterevent_global_pos(void* self);
int32_t q_enterevent_x(void* self);
int32_t q_enterevent_y(void* self);
int32_t q_enterevent_global_x(void* self);
int32_t q_enterevent_global_y(void* self);
QPointF* q_enterevent_local_pos(void* self);
QPointF* q_enterevent_window_pos(void* self);
QPointF* q_enterevent_screen_pos(void* self);
int64_t q_enterevent_button(void* self);
int64_t q_enterevent_buttons(void* self);
QPointF* q_enterevent_position(void* self);
QPointF* q_enterevent_scene_position(void* self);
QPointF* q_enterevent_global_position(void* self);
QObject* q_enterevent_exclusive_point_grabber(void* self);
void q_enterevent_set_exclusive_point_grabber(void* self, void* exclusiveGrabber);
QPointingDevice* q_enterevent_pointing_device(void* self);
int64_t q_enterevent_pointer_type(void* self);
int64_t q_enterevent_point_count(void* self);
QEventPoint* q_enterevent_point(void* self, int64_t i);
libqt_list /* of QEventPoint* */ q_enterevent_points(void* self);
QEventPoint* q_enterevent_point_by_id(void* self, int id);
bool q_enterevent_all_points_grabbed(void* self);
bool q_enterevent_all_points_accepted(void* self);
QObject* q_enterevent_exclusive_grabber(void* self, void* point);
void q_enterevent_set_exclusive_grabber(void* self, void* point, void* exclusiveGrabber);
void q_enterevent_clear_passive_grabbers(void* self, void* point);
bool q_enterevent_add_passive_grabber(void* self, void* point, void* grabber);
bool q_enterevent_remove_passive_grabber(void* self, void* point, void* grabber);
QInputDevice* q_enterevent_device(void* self);
int64_t q_enterevent_device_type(void* self);
int64_t q_enterevent_modifiers(void* self);
void q_enterevent_set_modifiers(void* self, int64_t modifiers);
uint64_t q_enterevent_timestamp(void* self);
int64_t q_enterevent_type(void* self);
bool q_enterevent_spontaneous(void* self);
bool q_enterevent_is_accepted(void* self);
void q_enterevent_accept(void* self);
void q_enterevent_ignore(void* self);
bool q_enterevent_is_input_event(void* self);
bool q_enterevent_is_pointer_event(void* self);
bool q_enterevent_is_single_point_event(void* self);
int32_t q_enterevent_register_event_type();
int32_t q_enterevent_register_event_type1(int hint);
bool q_enterevent_is_begin_event(void* self);
bool q_enterevent_qbase_is_begin_event(void* self);
void q_enterevent_on_is_begin_event(void* self, bool (*slot)());
bool q_enterevent_is_update_event(void* self);
bool q_enterevent_qbase_is_update_event(void* self);
void q_enterevent_on_is_update_event(void* self, bool (*slot)());
bool q_enterevent_is_end_event(void* self);
bool q_enterevent_qbase_is_end_event(void* self);
void q_enterevent_on_is_end_event(void* self, bool (*slot)());
void q_enterevent_set_timestamp(void* self, uint64_t timestamp);
void q_enterevent_qbase_set_timestamp(void* self, uint64_t timestamp);
void q_enterevent_on_set_timestamp(void* self, void (*slot)(void*, uint64_t));
void q_enterevent_set_accepted(void* self, bool accepted);
void q_enterevent_qbase_set_accepted(void* self, bool accepted);
void q_enterevent_on_set_accepted(void* self, void (*slot)(void*, bool));
void q_enterevent_delete(void* self);

QMouseEvent* q_mouseevent_new(int64_t typeVal, void* localPos, int64_t button, int64_t buttons, int64_t modifiers);
QMouseEvent* q_mouseevent_new2(int64_t typeVal, void* localPos, void* globalPos, int64_t button, int64_t buttons, int64_t modifiers);
QMouseEvent* q_mouseevent_new3(int64_t typeVal, void* localPos, void* scenePos, void* globalPos, int64_t button, int64_t buttons, int64_t modifiers);
QMouseEvent* q_mouseevent_new4(int64_t typeVal, void* localPos, void* scenePos, void* globalPos, int64_t button, int64_t buttons, int64_t modifiers, int64_t source);
QMouseEvent* q_mouseevent_new5(int64_t typeVal, void* localPos, int64_t button, int64_t buttons, int64_t modifiers, void* device);
QMouseEvent* q_mouseevent_new6(int64_t typeVal, void* localPos, void* globalPos, int64_t button, int64_t buttons, int64_t modifiers, void* device);
QMouseEvent* q_mouseevent_new7(int64_t typeVal, void* localPos, void* scenePos, void* globalPos, int64_t button, int64_t buttons, int64_t modifiers, void* device);
QMouseEvent* q_mouseevent_new8(int64_t typeVal, void* localPos, void* scenePos, void* globalPos, int64_t button, int64_t buttons, int64_t modifiers, int64_t source, void* device);
QMouseEvent* q_mouseevent_clone(void* self);
void q_mouseevent_on_clone(void* self, QMouseEvent* (*slot)());
QMouseEvent* q_mouseevent_qbase_clone(void* self);
QPoint* q_mouseevent_pos(void* self);
QPoint* q_mouseevent_global_pos(void* self);
int32_t q_mouseevent_x(void* self);
int32_t q_mouseevent_y(void* self);
int32_t q_mouseevent_global_x(void* self);
int32_t q_mouseevent_global_y(void* self);
QPointF* q_mouseevent_local_pos(void* self);
QPointF* q_mouseevent_window_pos(void* self);
QPointF* q_mouseevent_screen_pos(void* self);
int64_t q_mouseevent_source(void* self);
int64_t q_mouseevent_flags(void* self);
int64_t q_mouseevent_button(void* self);
int64_t q_mouseevent_buttons(void* self);
QPointF* q_mouseevent_position(void* self);
QPointF* q_mouseevent_scene_position(void* self);
QPointF* q_mouseevent_global_position(void* self);
QObject* q_mouseevent_exclusive_point_grabber(void* self);
void q_mouseevent_set_exclusive_point_grabber(void* self, void* exclusiveGrabber);
QPointingDevice* q_mouseevent_pointing_device(void* self);
int64_t q_mouseevent_pointer_type(void* self);
int64_t q_mouseevent_point_count(void* self);
QEventPoint* q_mouseevent_point(void* self, int64_t i);
libqt_list /* of QEventPoint* */ q_mouseevent_points(void* self);
QEventPoint* q_mouseevent_point_by_id(void* self, int id);
bool q_mouseevent_all_points_grabbed(void* self);
bool q_mouseevent_all_points_accepted(void* self);
QObject* q_mouseevent_exclusive_grabber(void* self, void* point);
void q_mouseevent_set_exclusive_grabber(void* self, void* point, void* exclusiveGrabber);
void q_mouseevent_clear_passive_grabbers(void* self, void* point);
bool q_mouseevent_add_passive_grabber(void* self, void* point, void* grabber);
bool q_mouseevent_remove_passive_grabber(void* self, void* point, void* grabber);
QInputDevice* q_mouseevent_device(void* self);
int64_t q_mouseevent_device_type(void* self);
int64_t q_mouseevent_modifiers(void* self);
void q_mouseevent_set_modifiers(void* self, int64_t modifiers);
uint64_t q_mouseevent_timestamp(void* self);
int64_t q_mouseevent_type(void* self);
bool q_mouseevent_spontaneous(void* self);
bool q_mouseevent_is_accepted(void* self);
void q_mouseevent_accept(void* self);
void q_mouseevent_ignore(void* self);
bool q_mouseevent_is_input_event(void* self);
bool q_mouseevent_is_pointer_event(void* self);
bool q_mouseevent_is_single_point_event(void* self);
int32_t q_mouseevent_register_event_type();
int32_t q_mouseevent_register_event_type1(int hint);
bool q_mouseevent_is_begin_event(void* self);
bool q_mouseevent_qbase_is_begin_event(void* self);
void q_mouseevent_on_is_begin_event(void* self, bool (*slot)());
bool q_mouseevent_is_update_event(void* self);
bool q_mouseevent_qbase_is_update_event(void* self);
void q_mouseevent_on_is_update_event(void* self, bool (*slot)());
bool q_mouseevent_is_end_event(void* self);
bool q_mouseevent_qbase_is_end_event(void* self);
void q_mouseevent_on_is_end_event(void* self, bool (*slot)());
void q_mouseevent_set_timestamp(void* self, uint64_t timestamp);
void q_mouseevent_qbase_set_timestamp(void* self, uint64_t timestamp);
void q_mouseevent_on_set_timestamp(void* self, void (*slot)(void*, uint64_t));
void q_mouseevent_set_accepted(void* self, bool accepted);
void q_mouseevent_qbase_set_accepted(void* self, bool accepted);
void q_mouseevent_on_set_accepted(void* self, void (*slot)(void*, bool));
void q_mouseevent_delete(void* self);

QHoverEvent* q_hoverevent_new(int64_t typeVal, void* scenePos, void* globalPos, void* oldPos);
QHoverEvent* q_hoverevent_new2(int64_t typeVal, void* pos, void* oldPos);
QHoverEvent* q_hoverevent_new3(int64_t typeVal, void* scenePos, void* globalPos, void* oldPos, int64_t modifiers);
QHoverEvent* q_hoverevent_new4(int64_t typeVal, void* scenePos, void* globalPos, void* oldPos, int64_t modifiers, void* device);
QHoverEvent* q_hoverevent_new5(int64_t typeVal, void* pos, void* oldPos, int64_t modifiers);
QHoverEvent* q_hoverevent_new6(int64_t typeVal, void* pos, void* oldPos, int64_t modifiers, void* device);
QHoverEvent* q_hoverevent_clone(void* self);
void q_hoverevent_on_clone(void* self, QHoverEvent* (*slot)());
QHoverEvent* q_hoverevent_qbase_clone(void* self);
QPoint* q_hoverevent_pos(void* self);
QPointF* q_hoverevent_pos_f(void* self);
bool q_hoverevent_is_update_event(void* self);
void q_hoverevent_on_is_update_event(void* self, bool (*slot)());
bool q_hoverevent_qbase_is_update_event(void* self);
QPoint* q_hoverevent_old_pos(void* self);
QPointF* q_hoverevent_old_pos_f(void* self);
int64_t q_hoverevent_button(void* self);
int64_t q_hoverevent_buttons(void* self);
QPointF* q_hoverevent_position(void* self);
QPointF* q_hoverevent_scene_position(void* self);
QPointF* q_hoverevent_global_position(void* self);
QObject* q_hoverevent_exclusive_point_grabber(void* self);
void q_hoverevent_set_exclusive_point_grabber(void* self, void* exclusiveGrabber);
QPointingDevice* q_hoverevent_pointing_device(void* self);
int64_t q_hoverevent_pointer_type(void* self);
int64_t q_hoverevent_point_count(void* self);
QEventPoint* q_hoverevent_point(void* self, int64_t i);
libqt_list /* of QEventPoint* */ q_hoverevent_points(void* self);
QEventPoint* q_hoverevent_point_by_id(void* self, int id);
bool q_hoverevent_all_points_grabbed(void* self);
bool q_hoverevent_all_points_accepted(void* self);
QObject* q_hoverevent_exclusive_grabber(void* self, void* point);
void q_hoverevent_set_exclusive_grabber(void* self, void* point, void* exclusiveGrabber);
void q_hoverevent_clear_passive_grabbers(void* self, void* point);
bool q_hoverevent_add_passive_grabber(void* self, void* point, void* grabber);
bool q_hoverevent_remove_passive_grabber(void* self, void* point, void* grabber);
QInputDevice* q_hoverevent_device(void* self);
int64_t q_hoverevent_device_type(void* self);
int64_t q_hoverevent_modifiers(void* self);
void q_hoverevent_set_modifiers(void* self, int64_t modifiers);
uint64_t q_hoverevent_timestamp(void* self);
int64_t q_hoverevent_type(void* self);
bool q_hoverevent_spontaneous(void* self);
bool q_hoverevent_is_accepted(void* self);
void q_hoverevent_accept(void* self);
void q_hoverevent_ignore(void* self);
bool q_hoverevent_is_input_event(void* self);
bool q_hoverevent_is_pointer_event(void* self);
bool q_hoverevent_is_single_point_event(void* self);
int32_t q_hoverevent_register_event_type();
int32_t q_hoverevent_register_event_type1(int hint);
bool q_hoverevent_is_begin_event(void* self);
bool q_hoverevent_qbase_is_begin_event(void* self);
void q_hoverevent_on_is_begin_event(void* self, bool (*slot)());
bool q_hoverevent_is_end_event(void* self);
bool q_hoverevent_qbase_is_end_event(void* self);
void q_hoverevent_on_is_end_event(void* self, bool (*slot)());
void q_hoverevent_set_timestamp(void* self, uint64_t timestamp);
void q_hoverevent_qbase_set_timestamp(void* self, uint64_t timestamp);
void q_hoverevent_on_set_timestamp(void* self, void (*slot)(void*, uint64_t));
void q_hoverevent_set_accepted(void* self, bool accepted);
void q_hoverevent_qbase_set_accepted(void* self, bool accepted);
void q_hoverevent_on_set_accepted(void* self, void (*slot)(void*, bool));
void q_hoverevent_delete(void* self);

QWheelEvent* q_wheelevent_new(void* pos, void* globalPos, void* pixelDelta, void* angleDelta, int64_t buttons, int64_t modifiers, int64_t phase, bool inverted);
QWheelEvent* q_wheelevent_new2(void* pos, void* globalPos, void* pixelDelta, void* angleDelta, int64_t buttons, int64_t modifiers, int64_t phase, bool inverted, int64_t source);
QWheelEvent* q_wheelevent_new3(void* pos, void* globalPos, void* pixelDelta, void* angleDelta, int64_t buttons, int64_t modifiers, int64_t phase, bool inverted, int64_t source, void* device);
QWheelEvent* q_wheelevent_clone(void* self);
void q_wheelevent_on_clone(void* self, QWheelEvent* (*slot)());
QWheelEvent* q_wheelevent_qbase_clone(void* self);
QPoint* q_wheelevent_pixel_delta(void* self);
QPoint* q_wheelevent_angle_delta(void* self);
int64_t q_wheelevent_phase(void* self);
bool q_wheelevent_inverted(void* self);
bool q_wheelevent_is_inverted(void* self);
bool q_wheelevent_has_pixel_delta(void* self);
bool q_wheelevent_is_begin_event(void* self);
void q_wheelevent_on_is_begin_event(void* self, bool (*slot)());
bool q_wheelevent_qbase_is_begin_event(void* self);
bool q_wheelevent_is_update_event(void* self);
void q_wheelevent_on_is_update_event(void* self, bool (*slot)());
bool q_wheelevent_qbase_is_update_event(void* self);
bool q_wheelevent_is_end_event(void* self);
void q_wheelevent_on_is_end_event(void* self, bool (*slot)());
bool q_wheelevent_qbase_is_end_event(void* self);
int64_t q_wheelevent_source(void* self);
int64_t q_wheelevent_button(void* self);
int64_t q_wheelevent_buttons(void* self);
QPointF* q_wheelevent_position(void* self);
QPointF* q_wheelevent_scene_position(void* self);
QPointF* q_wheelevent_global_position(void* self);
QObject* q_wheelevent_exclusive_point_grabber(void* self);
void q_wheelevent_set_exclusive_point_grabber(void* self, void* exclusiveGrabber);
QPointingDevice* q_wheelevent_pointing_device(void* self);
int64_t q_wheelevent_pointer_type(void* self);
int64_t q_wheelevent_point_count(void* self);
QEventPoint* q_wheelevent_point(void* self, int64_t i);
libqt_list /* of QEventPoint* */ q_wheelevent_points(void* self);
QEventPoint* q_wheelevent_point_by_id(void* self, int id);
bool q_wheelevent_all_points_grabbed(void* self);
bool q_wheelevent_all_points_accepted(void* self);
QObject* q_wheelevent_exclusive_grabber(void* self, void* point);
void q_wheelevent_set_exclusive_grabber(void* self, void* point, void* exclusiveGrabber);
void q_wheelevent_clear_passive_grabbers(void* self, void* point);
bool q_wheelevent_add_passive_grabber(void* self, void* point, void* grabber);
bool q_wheelevent_remove_passive_grabber(void* self, void* point, void* grabber);
QInputDevice* q_wheelevent_device(void* self);
int64_t q_wheelevent_device_type(void* self);
int64_t q_wheelevent_modifiers(void* self);
void q_wheelevent_set_modifiers(void* self, int64_t modifiers);
uint64_t q_wheelevent_timestamp(void* self);
int64_t q_wheelevent_type(void* self);
bool q_wheelevent_spontaneous(void* self);
bool q_wheelevent_is_accepted(void* self);
void q_wheelevent_accept(void* self);
void q_wheelevent_ignore(void* self);
bool q_wheelevent_is_input_event(void* self);
bool q_wheelevent_is_pointer_event(void* self);
bool q_wheelevent_is_single_point_event(void* self);
int32_t q_wheelevent_register_event_type();
int32_t q_wheelevent_register_event_type1(int hint);
void q_wheelevent_set_timestamp(void* self, uint64_t timestamp);
void q_wheelevent_qbase_set_timestamp(void* self, uint64_t timestamp);
void q_wheelevent_on_set_timestamp(void* self, void (*slot)(void*, uint64_t));
void q_wheelevent_set_accepted(void* self, bool accepted);
void q_wheelevent_qbase_set_accepted(void* self, bool accepted);
void q_wheelevent_on_set_accepted(void* self, void (*slot)(void*, bool));
void q_wheelevent_delete(void* self);

QTabletEvent* q_tabletevent_new(int64_t t, void* device, void* pos, void* globalPos, double pressure, float xTilt, float yTilt, float tangentialPressure, double rotation, float z, int64_t keyState, int64_t button, int64_t buttons);
QTabletEvent* q_tabletevent_clone(void* self);
void q_tabletevent_on_clone(void* self, QTabletEvent* (*slot)());
QTabletEvent* q_tabletevent_qbase_clone(void* self);
QPoint* q_tabletevent_pos(void* self);
QPoint* q_tabletevent_global_pos(void* self);
QPointF* q_tabletevent_pos_f(void* self);
QPointF* q_tabletevent_global_pos_f(void* self);
int32_t q_tabletevent_x(void* self);
int32_t q_tabletevent_y(void* self);
int32_t q_tabletevent_global_x(void* self);
int32_t q_tabletevent_global_y(void* self);
double q_tabletevent_hi_res_global_x(void* self);
double q_tabletevent_hi_res_global_y(void* self);
long long q_tabletevent_unique_id(void* self);
double q_tabletevent_pressure(void* self);
double q_tabletevent_rotation(void* self);
double q_tabletevent_z(void* self);
double q_tabletevent_tangential_pressure(void* self);
double q_tabletevent_x_tilt(void* self);
double q_tabletevent_y_tilt(void* self);
int64_t q_tabletevent_button(void* self);
int64_t q_tabletevent_buttons(void* self);
QPointF* q_tabletevent_position(void* self);
QPointF* q_tabletevent_scene_position(void* self);
QPointF* q_tabletevent_global_position(void* self);
QObject* q_tabletevent_exclusive_point_grabber(void* self);
void q_tabletevent_set_exclusive_point_grabber(void* self, void* exclusiveGrabber);
QPointingDevice* q_tabletevent_pointing_device(void* self);
int64_t q_tabletevent_pointer_type(void* self);
int64_t q_tabletevent_point_count(void* self);
QEventPoint* q_tabletevent_point(void* self, int64_t i);
libqt_list /* of QEventPoint* */ q_tabletevent_points(void* self);
QEventPoint* q_tabletevent_point_by_id(void* self, int id);
bool q_tabletevent_all_points_grabbed(void* self);
bool q_tabletevent_all_points_accepted(void* self);
QObject* q_tabletevent_exclusive_grabber(void* self, void* point);
void q_tabletevent_set_exclusive_grabber(void* self, void* point, void* exclusiveGrabber);
void q_tabletevent_clear_passive_grabbers(void* self, void* point);
bool q_tabletevent_add_passive_grabber(void* self, void* point, void* grabber);
bool q_tabletevent_remove_passive_grabber(void* self, void* point, void* grabber);
QInputDevice* q_tabletevent_device(void* self);
int64_t q_tabletevent_device_type(void* self);
int64_t q_tabletevent_modifiers(void* self);
void q_tabletevent_set_modifiers(void* self, int64_t modifiers);
uint64_t q_tabletevent_timestamp(void* self);
int64_t q_tabletevent_type(void* self);
bool q_tabletevent_spontaneous(void* self);
bool q_tabletevent_is_accepted(void* self);
void q_tabletevent_accept(void* self);
void q_tabletevent_ignore(void* self);
bool q_tabletevent_is_input_event(void* self);
bool q_tabletevent_is_pointer_event(void* self);
bool q_tabletevent_is_single_point_event(void* self);
int32_t q_tabletevent_register_event_type();
int32_t q_tabletevent_register_event_type1(int hint);
bool q_tabletevent_is_begin_event(void* self);
bool q_tabletevent_qbase_is_begin_event(void* self);
void q_tabletevent_on_is_begin_event(void* self, bool (*slot)());
bool q_tabletevent_is_update_event(void* self);
bool q_tabletevent_qbase_is_update_event(void* self);
void q_tabletevent_on_is_update_event(void* self, bool (*slot)());
bool q_tabletevent_is_end_event(void* self);
bool q_tabletevent_qbase_is_end_event(void* self);
void q_tabletevent_on_is_end_event(void* self, bool (*slot)());
void q_tabletevent_set_timestamp(void* self, uint64_t timestamp);
void q_tabletevent_qbase_set_timestamp(void* self, uint64_t timestamp);
void q_tabletevent_on_set_timestamp(void* self, void (*slot)(void*, uint64_t));
void q_tabletevent_set_accepted(void* self, bool accepted);
void q_tabletevent_qbase_set_accepted(void* self, bool accepted);
void q_tabletevent_on_set_accepted(void* self, void (*slot)(void*, bool));
void q_tabletevent_delete(void* self);

QNativeGestureEvent* q_nativegestureevent_new(int64_t typeVal, void* dev, void* localPos, void* scenePos, void* globalPos, double value, uint64_t sequenceId, uint64_t intArgument);
QNativeGestureEvent* q_nativegestureevent_new2(int64_t typeVal, void* dev, int fingerCount, void* localPos, void* scenePos, void* globalPos, double value, void* delta);
QNativeGestureEvent* q_nativegestureevent_new3(int64_t typeVal, void* dev, int fingerCount, void* localPos, void* scenePos, void* globalPos, double value, void* delta, uint64_t sequenceId);
QNativeGestureEvent* q_nativegestureevent_clone(void* self);
void q_nativegestureevent_on_clone(void* self, QNativeGestureEvent* (*slot)());
QNativeGestureEvent* q_nativegestureevent_qbase_clone(void* self);
int64_t q_nativegestureevent_gesture_type(void* self);
int32_t q_nativegestureevent_finger_count(void* self);
double q_nativegestureevent_value(void* self);
QPointF* q_nativegestureevent_delta(void* self);
QPoint* q_nativegestureevent_pos(void* self);
QPoint* q_nativegestureevent_global_pos(void* self);
QPointF* q_nativegestureevent_local_pos(void* self);
QPointF* q_nativegestureevent_window_pos(void* self);
QPointF* q_nativegestureevent_screen_pos(void* self);
int64_t q_nativegestureevent_button(void* self);
int64_t q_nativegestureevent_buttons(void* self);
QPointF* q_nativegestureevent_position(void* self);
QPointF* q_nativegestureevent_scene_position(void* self);
QPointF* q_nativegestureevent_global_position(void* self);
QObject* q_nativegestureevent_exclusive_point_grabber(void* self);
void q_nativegestureevent_set_exclusive_point_grabber(void* self, void* exclusiveGrabber);
QPointingDevice* q_nativegestureevent_pointing_device(void* self);
int64_t q_nativegestureevent_pointer_type(void* self);
int64_t q_nativegestureevent_point_count(void* self);
QEventPoint* q_nativegestureevent_point(void* self, int64_t i);
libqt_list /* of QEventPoint* */ q_nativegestureevent_points(void* self);
QEventPoint* q_nativegestureevent_point_by_id(void* self, int id);
bool q_nativegestureevent_all_points_grabbed(void* self);
bool q_nativegestureevent_all_points_accepted(void* self);
QObject* q_nativegestureevent_exclusive_grabber(void* self, void* point);
void q_nativegestureevent_set_exclusive_grabber(void* self, void* point, void* exclusiveGrabber);
void q_nativegestureevent_clear_passive_grabbers(void* self, void* point);
bool q_nativegestureevent_add_passive_grabber(void* self, void* point, void* grabber);
bool q_nativegestureevent_remove_passive_grabber(void* self, void* point, void* grabber);
QInputDevice* q_nativegestureevent_device(void* self);
int64_t q_nativegestureevent_device_type(void* self);
int64_t q_nativegestureevent_modifiers(void* self);
void q_nativegestureevent_set_modifiers(void* self, int64_t modifiers);
uint64_t q_nativegestureevent_timestamp(void* self);
int64_t q_nativegestureevent_type(void* self);
bool q_nativegestureevent_spontaneous(void* self);
bool q_nativegestureevent_is_accepted(void* self);
void q_nativegestureevent_accept(void* self);
void q_nativegestureevent_ignore(void* self);
bool q_nativegestureevent_is_input_event(void* self);
bool q_nativegestureevent_is_pointer_event(void* self);
bool q_nativegestureevent_is_single_point_event(void* self);
int32_t q_nativegestureevent_register_event_type();
int32_t q_nativegestureevent_register_event_type1(int hint);
bool q_nativegestureevent_is_begin_event(void* self);
bool q_nativegestureevent_qbase_is_begin_event(void* self);
void q_nativegestureevent_on_is_begin_event(void* self, bool (*slot)());
bool q_nativegestureevent_is_update_event(void* self);
bool q_nativegestureevent_qbase_is_update_event(void* self);
void q_nativegestureevent_on_is_update_event(void* self, bool (*slot)());
bool q_nativegestureevent_is_end_event(void* self);
bool q_nativegestureevent_qbase_is_end_event(void* self);
void q_nativegestureevent_on_is_end_event(void* self, bool (*slot)());
void q_nativegestureevent_set_timestamp(void* self, uint64_t timestamp);
void q_nativegestureevent_qbase_set_timestamp(void* self, uint64_t timestamp);
void q_nativegestureevent_on_set_timestamp(void* self, void (*slot)(void*, uint64_t));
void q_nativegestureevent_set_accepted(void* self, bool accepted);
void q_nativegestureevent_qbase_set_accepted(void* self, bool accepted);
void q_nativegestureevent_on_set_accepted(void* self, void (*slot)(void*, bool));
void q_nativegestureevent_delete(void* self);

QKeyEvent* q_keyevent_new(int64_t typeVal, int key, int64_t modifiers);
QKeyEvent* q_keyevent_new2(int64_t typeVal, int key, int64_t modifiers, uint32_t nativeScanCode, uint32_t nativeVirtualKey, uint32_t nativeModifiers);
QKeyEvent* q_keyevent_new3(int64_t typeVal, int key, int64_t modifiers, const char* text);
QKeyEvent* q_keyevent_new4(int64_t typeVal, int key, int64_t modifiers, const char* text, bool autorep);
QKeyEvent* q_keyevent_new5(int64_t typeVal, int key, int64_t modifiers, const char* text, bool autorep, unsigned short count);
QKeyEvent* q_keyevent_new6(int64_t typeVal, int key, int64_t modifiers, uint32_t nativeScanCode, uint32_t nativeVirtualKey, uint32_t nativeModifiers, const char* text);
QKeyEvent* q_keyevent_new7(int64_t typeVal, int key, int64_t modifiers, uint32_t nativeScanCode, uint32_t nativeVirtualKey, uint32_t nativeModifiers, const char* text, bool autorep);
QKeyEvent* q_keyevent_new8(int64_t typeVal, int key, int64_t modifiers, uint32_t nativeScanCode, uint32_t nativeVirtualKey, uint32_t nativeModifiers, const char* text, bool autorep, unsigned short count);
QKeyEvent* q_keyevent_new9(int64_t typeVal, int key, int64_t modifiers, uint32_t nativeScanCode, uint32_t nativeVirtualKey, uint32_t nativeModifiers, const char* text, bool autorep, unsigned short count, void* device);
QKeyEvent* q_keyevent_clone(void* self);
void q_keyevent_on_clone(void* self, QKeyEvent* (*slot)());
QKeyEvent* q_keyevent_qbase_clone(void* self);
int32_t q_keyevent_key(void* self);
bool q_keyevent_matches(void* self, int64_t key);
int64_t q_keyevent_modifiers(void* self);
QKeyCombination* q_keyevent_key_combination(void* self);
const char* q_keyevent_text(void* self);
bool q_keyevent_is_auto_repeat(void* self);
int32_t q_keyevent_count(void* self);
uint32_t q_keyevent_native_scan_code(void* self);
uint32_t q_keyevent_native_virtual_key(void* self);
uint32_t q_keyevent_native_modifiers(void* self);
QInputDevice* q_keyevent_device(void* self);
int64_t q_keyevent_device_type(void* self);
void q_keyevent_set_modifiers(void* self, int64_t modifiers);
uint64_t q_keyevent_timestamp(void* self);
int64_t q_keyevent_type(void* self);
bool q_keyevent_spontaneous(void* self);
bool q_keyevent_is_accepted(void* self);
void q_keyevent_accept(void* self);
void q_keyevent_ignore(void* self);
bool q_keyevent_is_input_event(void* self);
bool q_keyevent_is_pointer_event(void* self);
bool q_keyevent_is_single_point_event(void* self);
int32_t q_keyevent_register_event_type();
int32_t q_keyevent_register_event_type1(int hint);
void q_keyevent_set_timestamp(void* self, uint64_t timestamp);
void q_keyevent_qbase_set_timestamp(void* self, uint64_t timestamp);
void q_keyevent_on_set_timestamp(void* self, void (*slot)(void*, uint64_t));
void q_keyevent_set_accepted(void* self, bool accepted);
void q_keyevent_qbase_set_accepted(void* self, bool accepted);
void q_keyevent_on_set_accepted(void* self, void (*slot)(void*, bool));
void q_keyevent_delete(void* self);

QFocusEvent* q_focusevent_new(int64_t typeVal);
QFocusEvent* q_focusevent_new2(int64_t typeVal, int64_t reason);
QFocusEvent* q_focusevent_clone(void* self);
void q_focusevent_on_clone(void* self, QFocusEvent* (*slot)());
QFocusEvent* q_focusevent_qbase_clone(void* self);
bool q_focusevent_got_focus(void* self);
bool q_focusevent_lost_focus(void* self);
int64_t q_focusevent_reason(void* self);
int64_t q_focusevent_type(void* self);
bool q_focusevent_spontaneous(void* self);
bool q_focusevent_is_accepted(void* self);
void q_focusevent_accept(void* self);
void q_focusevent_ignore(void* self);
bool q_focusevent_is_input_event(void* self);
bool q_focusevent_is_pointer_event(void* self);
bool q_focusevent_is_single_point_event(void* self);
int32_t q_focusevent_register_event_type();
int32_t q_focusevent_register_event_type1(int hint);
void q_focusevent_set_accepted(void* self, bool accepted);
void q_focusevent_qbase_set_accepted(void* self, bool accepted);
void q_focusevent_on_set_accepted(void* self, void (*slot)(void*, bool));
void q_focusevent_delete(void* self);

QPaintEvent* q_paintevent_new(void* paintRegion);
QPaintEvent* q_paintevent_new2(void* paintRect);
QPaintEvent* q_paintevent_clone(void* self);
void q_paintevent_on_clone(void* self, QPaintEvent* (*slot)());
QPaintEvent* q_paintevent_qbase_clone(void* self);
QRect* q_paintevent_rect(void* self);
QRegion* q_paintevent_region(void* self);
int64_t q_paintevent_type(void* self);
bool q_paintevent_spontaneous(void* self);
bool q_paintevent_is_accepted(void* self);
void q_paintevent_accept(void* self);
void q_paintevent_ignore(void* self);
bool q_paintevent_is_input_event(void* self);
bool q_paintevent_is_pointer_event(void* self);
bool q_paintevent_is_single_point_event(void* self);
int32_t q_paintevent_register_event_type();
int32_t q_paintevent_register_event_type1(int hint);
void q_paintevent_set_accepted(void* self, bool accepted);
void q_paintevent_qbase_set_accepted(void* self, bool accepted);
void q_paintevent_on_set_accepted(void* self, void (*slot)(void*, bool));
void q_paintevent_delete(void* self);

QMoveEvent* q_moveevent_new(void* pos, void* oldPos);
QMoveEvent* q_moveevent_clone(void* self);
void q_moveevent_on_clone(void* self, QMoveEvent* (*slot)());
QMoveEvent* q_moveevent_qbase_clone(void* self);
QPoint* q_moveevent_pos(void* self);
QPoint* q_moveevent_old_pos(void* self);
int64_t q_moveevent_type(void* self);
bool q_moveevent_spontaneous(void* self);
bool q_moveevent_is_accepted(void* self);
void q_moveevent_accept(void* self);
void q_moveevent_ignore(void* self);
bool q_moveevent_is_input_event(void* self);
bool q_moveevent_is_pointer_event(void* self);
bool q_moveevent_is_single_point_event(void* self);
int32_t q_moveevent_register_event_type();
int32_t q_moveevent_register_event_type1(int hint);
void q_moveevent_set_accepted(void* self, bool accepted);
void q_moveevent_qbase_set_accepted(void* self, bool accepted);
void q_moveevent_on_set_accepted(void* self, void (*slot)(void*, bool));
void q_moveevent_delete(void* self);

QExposeEvent* q_exposeevent_new(void* m_region);
QExposeEvent* q_exposeevent_clone(void* self);
void q_exposeevent_on_clone(void* self, QExposeEvent* (*slot)());
QExposeEvent* q_exposeevent_qbase_clone(void* self);
QRegion* q_exposeevent_region(void* self);
int64_t q_exposeevent_type(void* self);
bool q_exposeevent_spontaneous(void* self);
bool q_exposeevent_is_accepted(void* self);
void q_exposeevent_accept(void* self);
void q_exposeevent_ignore(void* self);
bool q_exposeevent_is_input_event(void* self);
bool q_exposeevent_is_pointer_event(void* self);
bool q_exposeevent_is_single_point_event(void* self);
int32_t q_exposeevent_register_event_type();
int32_t q_exposeevent_register_event_type1(int hint);
void q_exposeevent_set_accepted(void* self, bool accepted);
void q_exposeevent_qbase_set_accepted(void* self, bool accepted);
void q_exposeevent_on_set_accepted(void* self, void (*slot)(void*, bool));
void q_exposeevent_delete(void* self);

QPlatformSurfaceEvent* q_platformsurfaceevent_new(int64_t surfaceEventType);
QPlatformSurfaceEvent* q_platformsurfaceevent_clone(void* self);
void q_platformsurfaceevent_on_clone(void* self, QPlatformSurfaceEvent* (*slot)());
QPlatformSurfaceEvent* q_platformsurfaceevent_qbase_clone(void* self);
int64_t q_platformsurfaceevent_surface_event_type(void* self);
int64_t q_platformsurfaceevent_type(void* self);
bool q_platformsurfaceevent_spontaneous(void* self);
bool q_platformsurfaceevent_is_accepted(void* self);
void q_platformsurfaceevent_accept(void* self);
void q_platformsurfaceevent_ignore(void* self);
bool q_platformsurfaceevent_is_input_event(void* self);
bool q_platformsurfaceevent_is_pointer_event(void* self);
bool q_platformsurfaceevent_is_single_point_event(void* self);
int32_t q_platformsurfaceevent_register_event_type();
int32_t q_platformsurfaceevent_register_event_type1(int hint);
void q_platformsurfaceevent_set_accepted(void* self, bool accepted);
void q_platformsurfaceevent_qbase_set_accepted(void* self, bool accepted);
void q_platformsurfaceevent_on_set_accepted(void* self, void (*slot)(void*, bool));
void q_platformsurfaceevent_delete(void* self);

QResizeEvent* q_resizeevent_new(void* size, void* oldSize);
QResizeEvent* q_resizeevent_clone(void* self);
void q_resizeevent_on_clone(void* self, QResizeEvent* (*slot)());
QResizeEvent* q_resizeevent_qbase_clone(void* self);
QSize* q_resizeevent_size(void* self);
QSize* q_resizeevent_old_size(void* self);
int64_t q_resizeevent_type(void* self);
bool q_resizeevent_spontaneous(void* self);
bool q_resizeevent_is_accepted(void* self);
void q_resizeevent_accept(void* self);
void q_resizeevent_ignore(void* self);
bool q_resizeevent_is_input_event(void* self);
bool q_resizeevent_is_pointer_event(void* self);
bool q_resizeevent_is_single_point_event(void* self);
int32_t q_resizeevent_register_event_type();
int32_t q_resizeevent_register_event_type1(int hint);
void q_resizeevent_set_accepted(void* self, bool accepted);
void q_resizeevent_qbase_set_accepted(void* self, bool accepted);
void q_resizeevent_on_set_accepted(void* self, void (*slot)(void*, bool));
void q_resizeevent_delete(void* self);

QCloseEvent* q_closeevent_new();
QCloseEvent* q_closeevent_clone(void* self);
void q_closeevent_on_clone(void* self, QCloseEvent* (*slot)());
QCloseEvent* q_closeevent_qbase_clone(void* self);
int64_t q_closeevent_type(void* self);
bool q_closeevent_spontaneous(void* self);
bool q_closeevent_is_accepted(void* self);
void q_closeevent_accept(void* self);
void q_closeevent_ignore(void* self);
bool q_closeevent_is_input_event(void* self);
bool q_closeevent_is_pointer_event(void* self);
bool q_closeevent_is_single_point_event(void* self);
int32_t q_closeevent_register_event_type();
int32_t q_closeevent_register_event_type1(int hint);
void q_closeevent_set_accepted(void* self, bool accepted);
void q_closeevent_qbase_set_accepted(void* self, bool accepted);
void q_closeevent_on_set_accepted(void* self, void (*slot)(void*, bool));
void q_closeevent_delete(void* self);

QIconDragEvent* q_icondragevent_new();
QIconDragEvent* q_icondragevent_clone(void* self);
void q_icondragevent_on_clone(void* self, QIconDragEvent* (*slot)());
QIconDragEvent* q_icondragevent_qbase_clone(void* self);
int64_t q_icondragevent_type(void* self);
bool q_icondragevent_spontaneous(void* self);
bool q_icondragevent_is_accepted(void* self);
void q_icondragevent_accept(void* self);
void q_icondragevent_ignore(void* self);
bool q_icondragevent_is_input_event(void* self);
bool q_icondragevent_is_pointer_event(void* self);
bool q_icondragevent_is_single_point_event(void* self);
int32_t q_icondragevent_register_event_type();
int32_t q_icondragevent_register_event_type1(int hint);
void q_icondragevent_set_accepted(void* self, bool accepted);
void q_icondragevent_qbase_set_accepted(void* self, bool accepted);
void q_icondragevent_on_set_accepted(void* self, void (*slot)(void*, bool));
void q_icondragevent_delete(void* self);

QShowEvent* q_showevent_new();
QShowEvent* q_showevent_clone(void* self);
void q_showevent_on_clone(void* self, QShowEvent* (*slot)());
QShowEvent* q_showevent_qbase_clone(void* self);
int64_t q_showevent_type(void* self);
bool q_showevent_spontaneous(void* self);
bool q_showevent_is_accepted(void* self);
void q_showevent_accept(void* self);
void q_showevent_ignore(void* self);
bool q_showevent_is_input_event(void* self);
bool q_showevent_is_pointer_event(void* self);
bool q_showevent_is_single_point_event(void* self);
int32_t q_showevent_register_event_type();
int32_t q_showevent_register_event_type1(int hint);
void q_showevent_set_accepted(void* self, bool accepted);
void q_showevent_qbase_set_accepted(void* self, bool accepted);
void q_showevent_on_set_accepted(void* self, void (*slot)(void*, bool));
void q_showevent_delete(void* self);

QHideEvent* q_hideevent_new();
QHideEvent* q_hideevent_clone(void* self);
void q_hideevent_on_clone(void* self, QHideEvent* (*slot)());
QHideEvent* q_hideevent_qbase_clone(void* self);
int64_t q_hideevent_type(void* self);
bool q_hideevent_spontaneous(void* self);
bool q_hideevent_is_accepted(void* self);
void q_hideevent_accept(void* self);
void q_hideevent_ignore(void* self);
bool q_hideevent_is_input_event(void* self);
bool q_hideevent_is_pointer_event(void* self);
bool q_hideevent_is_single_point_event(void* self);
int32_t q_hideevent_register_event_type();
int32_t q_hideevent_register_event_type1(int hint);
void q_hideevent_set_accepted(void* self, bool accepted);
void q_hideevent_qbase_set_accepted(void* self, bool accepted);
void q_hideevent_on_set_accepted(void* self, void (*slot)(void*, bool));
void q_hideevent_delete(void* self);

QContextMenuEvent* q_contextmenuevent_new(int64_t reason, void* pos, void* globalPos);
QContextMenuEvent* q_contextmenuevent_new2(int64_t reason, void* pos);
QContextMenuEvent* q_contextmenuevent_new3(int64_t reason, void* pos, void* globalPos, int64_t modifiers);
QContextMenuEvent* q_contextmenuevent_clone(void* self);
void q_contextmenuevent_on_clone(void* self, QContextMenuEvent* (*slot)());
QContextMenuEvent* q_contextmenuevent_qbase_clone(void* self);
int32_t q_contextmenuevent_x(void* self);
int32_t q_contextmenuevent_y(void* self);
int32_t q_contextmenuevent_global_x(void* self);
int32_t q_contextmenuevent_global_y(void* self);
QPoint* q_contextmenuevent_pos(void* self);
QPoint* q_contextmenuevent_global_pos(void* self);
int64_t q_contextmenuevent_reason(void* self);
QInputDevice* q_contextmenuevent_device(void* self);
int64_t q_contextmenuevent_device_type(void* self);
int64_t q_contextmenuevent_modifiers(void* self);
void q_contextmenuevent_set_modifiers(void* self, int64_t modifiers);
uint64_t q_contextmenuevent_timestamp(void* self);
int64_t q_contextmenuevent_type(void* self);
bool q_contextmenuevent_spontaneous(void* self);
bool q_contextmenuevent_is_accepted(void* self);
void q_contextmenuevent_accept(void* self);
void q_contextmenuevent_ignore(void* self);
bool q_contextmenuevent_is_input_event(void* self);
bool q_contextmenuevent_is_pointer_event(void* self);
bool q_contextmenuevent_is_single_point_event(void* self);
int32_t q_contextmenuevent_register_event_type();
int32_t q_contextmenuevent_register_event_type1(int hint);
void q_contextmenuevent_set_timestamp(void* self, uint64_t timestamp);
void q_contextmenuevent_qbase_set_timestamp(void* self, uint64_t timestamp);
void q_contextmenuevent_on_set_timestamp(void* self, void (*slot)(void*, uint64_t));
void q_contextmenuevent_set_accepted(void* self, bool accepted);
void q_contextmenuevent_qbase_set_accepted(void* self, bool accepted);
void q_contextmenuevent_on_set_accepted(void* self, void (*slot)(void*, bool));
void q_contextmenuevent_delete(void* self);

QInputMethodEvent* q_inputmethodevent_new();
QInputMethodEvent* q_inputmethodevent_new2(const char* preeditText, void* attributes[]);
QInputMethodEvent* q_inputmethodevent_clone(void* self);
void q_inputmethodevent_on_clone(void* self, QInputMethodEvent* (*slot)());
QInputMethodEvent* q_inputmethodevent_qbase_clone(void* self);
void q_inputmethodevent_set_commit_string(void* self, const char* commitString);
libqt_list /* of QInputMethodEvent__Attribute* */ q_inputmethodevent_attributes(void* self);
const char* q_inputmethodevent_preedit_string(void* self);
const char* q_inputmethodevent_commit_string(void* self);
int32_t q_inputmethodevent_replacement_start(void* self);
int32_t q_inputmethodevent_replacement_length(void* self);
void q_inputmethodevent_set_commit_string2(void* self, const char* commitString, int replaceFrom);
void q_inputmethodevent_set_commit_string3(void* self, const char* commitString, int replaceFrom, int replaceLength);
int64_t q_inputmethodevent_type(void* self);
bool q_inputmethodevent_spontaneous(void* self);
bool q_inputmethodevent_is_accepted(void* self);
void q_inputmethodevent_accept(void* self);
void q_inputmethodevent_ignore(void* self);
bool q_inputmethodevent_is_input_event(void* self);
bool q_inputmethodevent_is_pointer_event(void* self);
bool q_inputmethodevent_is_single_point_event(void* self);
int32_t q_inputmethodevent_register_event_type();
int32_t q_inputmethodevent_register_event_type1(int hint);
void q_inputmethodevent_set_accepted(void* self, bool accepted);
void q_inputmethodevent_qbase_set_accepted(void* self, bool accepted);
void q_inputmethodevent_on_set_accepted(void* self, void (*slot)(void*, bool));
void q_inputmethodevent_delete(void* self);

QInputMethodQueryEvent* q_inputmethodqueryevent_new(int64_t queries);
QInputMethodQueryEvent* q_inputmethodqueryevent_clone(void* self);
void q_inputmethodqueryevent_on_clone(void* self, QInputMethodQueryEvent* (*slot)());
QInputMethodQueryEvent* q_inputmethodqueryevent_qbase_clone(void* self);
int64_t q_inputmethodqueryevent_queries(void* self);
void q_inputmethodqueryevent_set_value(void* self, int64_t query, void* value);
QVariant* q_inputmethodqueryevent_value(void* self, int64_t query);
int64_t q_inputmethodqueryevent_type(void* self);
bool q_inputmethodqueryevent_spontaneous(void* self);
bool q_inputmethodqueryevent_is_accepted(void* self);
void q_inputmethodqueryevent_accept(void* self);
void q_inputmethodqueryevent_ignore(void* self);
bool q_inputmethodqueryevent_is_input_event(void* self);
bool q_inputmethodqueryevent_is_pointer_event(void* self);
bool q_inputmethodqueryevent_is_single_point_event(void* self);
int32_t q_inputmethodqueryevent_register_event_type();
int32_t q_inputmethodqueryevent_register_event_type1(int hint);
void q_inputmethodqueryevent_set_accepted(void* self, bool accepted);
void q_inputmethodqueryevent_qbase_set_accepted(void* self, bool accepted);
void q_inputmethodqueryevent_on_set_accepted(void* self, void (*slot)(void*, bool));
void q_inputmethodqueryevent_delete(void* self);

QDropEvent* q_dropevent_new(void* pos, int64_t actions, void* data, int64_t buttons, int64_t modifiers);
QDropEvent* q_dropevent_new2(void* pos, int64_t actions, void* data, int64_t buttons, int64_t modifiers, int64_t typeVal);
QDropEvent* q_dropevent_clone(void* self);
void q_dropevent_on_clone(void* self, QDropEvent* (*slot)());
QDropEvent* q_dropevent_qbase_clone(void* self);
QPoint* q_dropevent_pos(void* self);
QPointF* q_dropevent_pos_f(void* self);
int64_t q_dropevent_mouse_buttons(void* self);
int64_t q_dropevent_keyboard_modifiers(void* self);
QPointF* q_dropevent_position(void* self);
int64_t q_dropevent_buttons(void* self);
int64_t q_dropevent_modifiers(void* self);
int64_t q_dropevent_possible_actions(void* self);
int64_t q_dropevent_proposed_action(void* self);
void q_dropevent_accept_proposed_action(void* self);
int64_t q_dropevent_drop_action(void* self);
void q_dropevent_set_drop_action(void* self, int64_t action);
QObject* q_dropevent_source(void* self);
QMimeData* q_dropevent_mime_data(void* self);
int64_t q_dropevent_type(void* self);
bool q_dropevent_spontaneous(void* self);
bool q_dropevent_is_accepted(void* self);
void q_dropevent_accept(void* self);
void q_dropevent_ignore(void* self);
bool q_dropevent_is_input_event(void* self);
bool q_dropevent_is_pointer_event(void* self);
bool q_dropevent_is_single_point_event(void* self);
int32_t q_dropevent_register_event_type();
int32_t q_dropevent_register_event_type1(int hint);
void q_dropevent_set_accepted(void* self, bool accepted);
void q_dropevent_qbase_set_accepted(void* self, bool accepted);
void q_dropevent_on_set_accepted(void* self, void (*slot)(void*, bool));
void q_dropevent_delete(void* self);

QDragMoveEvent* q_dragmoveevent_new(void* pos, int64_t actions, void* data, int64_t buttons, int64_t modifiers);
QDragMoveEvent* q_dragmoveevent_new2(void* pos, int64_t actions, void* data, int64_t buttons, int64_t modifiers, int64_t typeVal);
QDragMoveEvent* q_dragmoveevent_clone(void* self);
void q_dragmoveevent_on_clone(void* self, QDragMoveEvent* (*slot)());
QDragMoveEvent* q_dragmoveevent_qbase_clone(void* self);
QRect* q_dragmoveevent_answer_rect(void* self);
void q_dragmoveevent_accept(void* self);
void q_dragmoveevent_ignore(void* self);
void q_dragmoveevent_accept_with_q_rect(void* self, void* r);
void q_dragmoveevent_ignore_with_q_rect(void* self, void* r);
QPoint* q_dragmoveevent_pos(void* self);
QPointF* q_dragmoveevent_pos_f(void* self);
int64_t q_dragmoveevent_mouse_buttons(void* self);
int64_t q_dragmoveevent_keyboard_modifiers(void* self);
QPointF* q_dragmoveevent_position(void* self);
int64_t q_dragmoveevent_buttons(void* self);
int64_t q_dragmoveevent_modifiers(void* self);
int64_t q_dragmoveevent_possible_actions(void* self);
int64_t q_dragmoveevent_proposed_action(void* self);
void q_dragmoveevent_accept_proposed_action(void* self);
int64_t q_dragmoveevent_drop_action(void* self);
void q_dragmoveevent_set_drop_action(void* self, int64_t action);
QObject* q_dragmoveevent_source(void* self);
QMimeData* q_dragmoveevent_mime_data(void* self);
int64_t q_dragmoveevent_type(void* self);
bool q_dragmoveevent_spontaneous(void* self);
bool q_dragmoveevent_is_accepted(void* self);
bool q_dragmoveevent_is_input_event(void* self);
bool q_dragmoveevent_is_pointer_event(void* self);
bool q_dragmoveevent_is_single_point_event(void* self);
int32_t q_dragmoveevent_register_event_type();
int32_t q_dragmoveevent_register_event_type1(int hint);
void q_dragmoveevent_set_accepted(void* self, bool accepted);
void q_dragmoveevent_qbase_set_accepted(void* self, bool accepted);
void q_dragmoveevent_on_set_accepted(void* self, void (*slot)(void*, bool));
void q_dragmoveevent_delete(void* self);

QDragEnterEvent* q_dragenterevent_new(void* pos, int64_t actions, void* data, int64_t buttons, int64_t modifiers);
QDragEnterEvent* q_dragenterevent_clone(void* self);
void q_dragenterevent_on_clone(void* self, QDragEnterEvent* (*slot)());
QDragEnterEvent* q_dragenterevent_qbase_clone(void* self);
QRect* q_dragenterevent_answer_rect(void* self);
void q_dragenterevent_accept(void* self);
void q_dragenterevent_ignore(void* self);
void q_dragenterevent_accept_with_q_rect(void* self, void* r);
void q_dragenterevent_ignore_with_q_rect(void* self, void* r);
QPoint* q_dragenterevent_pos(void* self);
QPointF* q_dragenterevent_pos_f(void* self);
int64_t q_dragenterevent_mouse_buttons(void* self);
int64_t q_dragenterevent_keyboard_modifiers(void* self);
QPointF* q_dragenterevent_position(void* self);
int64_t q_dragenterevent_buttons(void* self);
int64_t q_dragenterevent_modifiers(void* self);
int64_t q_dragenterevent_possible_actions(void* self);
int64_t q_dragenterevent_proposed_action(void* self);
void q_dragenterevent_accept_proposed_action(void* self);
int64_t q_dragenterevent_drop_action(void* self);
void q_dragenterevent_set_drop_action(void* self, int64_t action);
QObject* q_dragenterevent_source(void* self);
QMimeData* q_dragenterevent_mime_data(void* self);
int64_t q_dragenterevent_type(void* self);
bool q_dragenterevent_spontaneous(void* self);
bool q_dragenterevent_is_accepted(void* self);
bool q_dragenterevent_is_input_event(void* self);
bool q_dragenterevent_is_pointer_event(void* self);
bool q_dragenterevent_is_single_point_event(void* self);
int32_t q_dragenterevent_register_event_type();
int32_t q_dragenterevent_register_event_type1(int hint);
void q_dragenterevent_set_accepted(void* self, bool accepted);
void q_dragenterevent_qbase_set_accepted(void* self, bool accepted);
void q_dragenterevent_on_set_accepted(void* self, void (*slot)(void*, bool));
void q_dragenterevent_delete(void* self);

QDragLeaveEvent* q_dragleaveevent_new();
QDragLeaveEvent* q_dragleaveevent_clone(void* self);
void q_dragleaveevent_on_clone(void* self, QDragLeaveEvent* (*slot)());
QDragLeaveEvent* q_dragleaveevent_qbase_clone(void* self);
int64_t q_dragleaveevent_type(void* self);
bool q_dragleaveevent_spontaneous(void* self);
bool q_dragleaveevent_is_accepted(void* self);
void q_dragleaveevent_accept(void* self);
void q_dragleaveevent_ignore(void* self);
bool q_dragleaveevent_is_input_event(void* self);
bool q_dragleaveevent_is_pointer_event(void* self);
bool q_dragleaveevent_is_single_point_event(void* self);
int32_t q_dragleaveevent_register_event_type();
int32_t q_dragleaveevent_register_event_type1(int hint);
void q_dragleaveevent_set_accepted(void* self, bool accepted);
void q_dragleaveevent_qbase_set_accepted(void* self, bool accepted);
void q_dragleaveevent_on_set_accepted(void* self, void (*slot)(void*, bool));
void q_dragleaveevent_delete(void* self);

QHelpEvent* q_helpevent_new(int64_t typeVal, void* pos, void* globalPos);
QHelpEvent* q_helpevent_clone(void* self);
void q_helpevent_on_clone(void* self, QHelpEvent* (*slot)());
QHelpEvent* q_helpevent_qbase_clone(void* self);
int32_t q_helpevent_x(void* self);
int32_t q_helpevent_y(void* self);
int32_t q_helpevent_global_x(void* self);
int32_t q_helpevent_global_y(void* self);
QPoint* q_helpevent_pos(void* self);
QPoint* q_helpevent_global_pos(void* self);
int64_t q_helpevent_type(void* self);
bool q_helpevent_spontaneous(void* self);
bool q_helpevent_is_accepted(void* self);
void q_helpevent_accept(void* self);
void q_helpevent_ignore(void* self);
bool q_helpevent_is_input_event(void* self);
bool q_helpevent_is_pointer_event(void* self);
bool q_helpevent_is_single_point_event(void* self);
int32_t q_helpevent_register_event_type();
int32_t q_helpevent_register_event_type1(int hint);
void q_helpevent_set_accepted(void* self, bool accepted);
void q_helpevent_qbase_set_accepted(void* self, bool accepted);
void q_helpevent_on_set_accepted(void* self, void (*slot)(void*, bool));
void q_helpevent_delete(void* self);

QStatusTipEvent* q_statustipevent_new(const char* tip);
QStatusTipEvent* q_statustipevent_clone(void* self);
void q_statustipevent_on_clone(void* self, QStatusTipEvent* (*slot)());
QStatusTipEvent* q_statustipevent_qbase_clone(void* self);
const char* q_statustipevent_tip(void* self);
int64_t q_statustipevent_type(void* self);
bool q_statustipevent_spontaneous(void* self);
bool q_statustipevent_is_accepted(void* self);
void q_statustipevent_accept(void* self);
void q_statustipevent_ignore(void* self);
bool q_statustipevent_is_input_event(void* self);
bool q_statustipevent_is_pointer_event(void* self);
bool q_statustipevent_is_single_point_event(void* self);
int32_t q_statustipevent_register_event_type();
int32_t q_statustipevent_register_event_type1(int hint);
void q_statustipevent_set_accepted(void* self, bool accepted);
void q_statustipevent_qbase_set_accepted(void* self, bool accepted);
void q_statustipevent_on_set_accepted(void* self, void (*slot)(void*, bool));
void q_statustipevent_delete(void* self);

QWhatsThisClickedEvent* q_whatsthisclickedevent_new(const char* href);
QWhatsThisClickedEvent* q_whatsthisclickedevent_clone(void* self);
void q_whatsthisclickedevent_on_clone(void* self, QWhatsThisClickedEvent* (*slot)());
QWhatsThisClickedEvent* q_whatsthisclickedevent_qbase_clone(void* self);
const char* q_whatsthisclickedevent_href(void* self);
int64_t q_whatsthisclickedevent_type(void* self);
bool q_whatsthisclickedevent_spontaneous(void* self);
bool q_whatsthisclickedevent_is_accepted(void* self);
void q_whatsthisclickedevent_accept(void* self);
void q_whatsthisclickedevent_ignore(void* self);
bool q_whatsthisclickedevent_is_input_event(void* self);
bool q_whatsthisclickedevent_is_pointer_event(void* self);
bool q_whatsthisclickedevent_is_single_point_event(void* self);
int32_t q_whatsthisclickedevent_register_event_type();
int32_t q_whatsthisclickedevent_register_event_type1(int hint);
void q_whatsthisclickedevent_set_accepted(void* self, bool accepted);
void q_whatsthisclickedevent_qbase_set_accepted(void* self, bool accepted);
void q_whatsthisclickedevent_on_set_accepted(void* self, void (*slot)(void*, bool));
void q_whatsthisclickedevent_delete(void* self);

QActionEvent* q_actionevent_new(int typeVal, void* action);
QActionEvent* q_actionevent_new2(int typeVal, void* action, void* before);
QActionEvent* q_actionevent_clone(void* self);
void q_actionevent_on_clone(void* self, QActionEvent* (*slot)());
QActionEvent* q_actionevent_qbase_clone(void* self);
QAction* q_actionevent_action(void* self);
QAction* q_actionevent_before(void* self);
int64_t q_actionevent_type(void* self);
bool q_actionevent_spontaneous(void* self);
bool q_actionevent_is_accepted(void* self);
void q_actionevent_accept(void* self);
void q_actionevent_ignore(void* self);
bool q_actionevent_is_input_event(void* self);
bool q_actionevent_is_pointer_event(void* self);
bool q_actionevent_is_single_point_event(void* self);
int32_t q_actionevent_register_event_type();
int32_t q_actionevent_register_event_type1(int hint);
void q_actionevent_set_accepted(void* self, bool accepted);
void q_actionevent_qbase_set_accepted(void* self, bool accepted);
void q_actionevent_on_set_accepted(void* self, void (*slot)(void*, bool));
void q_actionevent_delete(void* self);

QFileOpenEvent* q_fileopenevent_new(const char* file);
QFileOpenEvent* q_fileopenevent_new2(void* url);
QFileOpenEvent* q_fileopenevent_clone(void* self);
void q_fileopenevent_on_clone(void* self, QFileOpenEvent* (*slot)());
QFileOpenEvent* q_fileopenevent_qbase_clone(void* self);
const char* q_fileopenevent_file(void* self);
QUrl* q_fileopenevent_url(void* self);
bool q_fileopenevent_open_file(void* self, void* file, int64_t flags);
int64_t q_fileopenevent_type(void* self);
bool q_fileopenevent_spontaneous(void* self);
bool q_fileopenevent_is_accepted(void* self);
void q_fileopenevent_accept(void* self);
void q_fileopenevent_ignore(void* self);
bool q_fileopenevent_is_input_event(void* self);
bool q_fileopenevent_is_pointer_event(void* self);
bool q_fileopenevent_is_single_point_event(void* self);
int32_t q_fileopenevent_register_event_type();
int32_t q_fileopenevent_register_event_type1(int hint);
void q_fileopenevent_set_accepted(void* self, bool accepted);
void q_fileopenevent_qbase_set_accepted(void* self, bool accepted);
void q_fileopenevent_on_set_accepted(void* self, void (*slot)(void*, bool));
void q_fileopenevent_delete(void* self);

QToolBarChangeEvent* q_toolbarchangeevent_new(bool t);
QToolBarChangeEvent* q_toolbarchangeevent_clone(void* self);
void q_toolbarchangeevent_on_clone(void* self, QToolBarChangeEvent* (*slot)());
QToolBarChangeEvent* q_toolbarchangeevent_qbase_clone(void* self);
bool q_toolbarchangeevent_toggle(void* self);
int64_t q_toolbarchangeevent_type(void* self);
bool q_toolbarchangeevent_spontaneous(void* self);
bool q_toolbarchangeevent_is_accepted(void* self);
void q_toolbarchangeevent_accept(void* self);
void q_toolbarchangeevent_ignore(void* self);
bool q_toolbarchangeevent_is_input_event(void* self);
bool q_toolbarchangeevent_is_pointer_event(void* self);
bool q_toolbarchangeevent_is_single_point_event(void* self);
int32_t q_toolbarchangeevent_register_event_type();
int32_t q_toolbarchangeevent_register_event_type1(int hint);
void q_toolbarchangeevent_set_accepted(void* self, bool accepted);
void q_toolbarchangeevent_qbase_set_accepted(void* self, bool accepted);
void q_toolbarchangeevent_on_set_accepted(void* self, void (*slot)(void*, bool));
void q_toolbarchangeevent_delete(void* self);

QShortcutEvent* q_shortcutevent_new(void* key, int id);
QShortcutEvent* q_shortcutevent_new2(void* key, int id, bool ambiguous);
QShortcutEvent* q_shortcutevent_clone(void* self);
void q_shortcutevent_on_clone(void* self, QShortcutEvent* (*slot)());
QShortcutEvent* q_shortcutevent_qbase_clone(void* self);
QKeySequence* q_shortcutevent_key(void* self);
int32_t q_shortcutevent_shortcut_id(void* self);
bool q_shortcutevent_is_ambiguous(void* self);
int64_t q_shortcutevent_type(void* self);
bool q_shortcutevent_spontaneous(void* self);
bool q_shortcutevent_is_accepted(void* self);
void q_shortcutevent_accept(void* self);
void q_shortcutevent_ignore(void* self);
bool q_shortcutevent_is_input_event(void* self);
bool q_shortcutevent_is_pointer_event(void* self);
bool q_shortcutevent_is_single_point_event(void* self);
int32_t q_shortcutevent_register_event_type();
int32_t q_shortcutevent_register_event_type1(int hint);
void q_shortcutevent_set_accepted(void* self, bool accepted);
void q_shortcutevent_qbase_set_accepted(void* self, bool accepted);
void q_shortcutevent_on_set_accepted(void* self, void (*slot)(void*, bool));
void q_shortcutevent_delete(void* self);

QWindowStateChangeEvent* q_windowstatechangeevent_new(int64_t oldState);
QWindowStateChangeEvent* q_windowstatechangeevent_new2(int64_t oldState, bool isOverride);
QWindowStateChangeEvent* q_windowstatechangeevent_clone(void* self);
void q_windowstatechangeevent_on_clone(void* self, QWindowStateChangeEvent* (*slot)());
QWindowStateChangeEvent* q_windowstatechangeevent_qbase_clone(void* self);
int64_t q_windowstatechangeevent_old_state(void* self);
bool q_windowstatechangeevent_is_override(void* self);
int64_t q_windowstatechangeevent_type(void* self);
bool q_windowstatechangeevent_spontaneous(void* self);
bool q_windowstatechangeevent_is_accepted(void* self);
void q_windowstatechangeevent_accept(void* self);
void q_windowstatechangeevent_ignore(void* self);
bool q_windowstatechangeevent_is_input_event(void* self);
bool q_windowstatechangeevent_is_pointer_event(void* self);
bool q_windowstatechangeevent_is_single_point_event(void* self);
int32_t q_windowstatechangeevent_register_event_type();
int32_t q_windowstatechangeevent_register_event_type1(int hint);
void q_windowstatechangeevent_set_accepted(void* self, bool accepted);
void q_windowstatechangeevent_qbase_set_accepted(void* self, bool accepted);
void q_windowstatechangeevent_on_set_accepted(void* self, void (*slot)(void*, bool));
void q_windowstatechangeevent_delete(void* self);

QTouchEvent* q_touchevent_new(int64_t eventType);
QTouchEvent* q_touchevent_new2(int64_t eventType, void* device, int64_t modifiers, int64_t touchPointStates);
QTouchEvent* q_touchevent_new3(int64_t eventType, void* device);
QTouchEvent* q_touchevent_new4(int64_t eventType, void* device, int64_t modifiers);
QTouchEvent* q_touchevent_new5(int64_t eventType, void* device, int64_t modifiers, void* touchPoints[]);
QTouchEvent* q_touchevent_new6(int64_t eventType, void* device, int64_t modifiers, int64_t touchPointStates, void* touchPoints[]);
QTouchEvent* q_touchevent_clone(void* self);
void q_touchevent_on_clone(void* self, QTouchEvent* (*slot)());
QTouchEvent* q_touchevent_qbase_clone(void* self);
QObject* q_touchevent_target(void* self);
int64_t q_touchevent_touch_point_states(void* self);
libqt_list /* of QEventPoint* */ q_touchevent_touch_points(void* self);
bool q_touchevent_is_begin_event(void* self);
void q_touchevent_on_is_begin_event(void* self, bool (*slot)());
bool q_touchevent_qbase_is_begin_event(void* self);
bool q_touchevent_is_update_event(void* self);
void q_touchevent_on_is_update_event(void* self, bool (*slot)());
bool q_touchevent_qbase_is_update_event(void* self);
bool q_touchevent_is_end_event(void* self);
void q_touchevent_on_is_end_event(void* self, bool (*slot)());
bool q_touchevent_qbase_is_end_event(void* self);
QPointingDevice* q_touchevent_pointing_device(void* self);
int64_t q_touchevent_pointer_type(void* self);
int64_t q_touchevent_point_count(void* self);
QEventPoint* q_touchevent_point(void* self, int64_t i);
libqt_list /* of QEventPoint* */ q_touchevent_points(void* self);
QEventPoint* q_touchevent_point_by_id(void* self, int id);
bool q_touchevent_all_points_grabbed(void* self);
bool q_touchevent_all_points_accepted(void* self);
QObject* q_touchevent_exclusive_grabber(void* self, void* point);
void q_touchevent_set_exclusive_grabber(void* self, void* point, void* exclusiveGrabber);
void q_touchevent_clear_passive_grabbers(void* self, void* point);
bool q_touchevent_add_passive_grabber(void* self, void* point, void* grabber);
bool q_touchevent_remove_passive_grabber(void* self, void* point, void* grabber);
QInputDevice* q_touchevent_device(void* self);
int64_t q_touchevent_device_type(void* self);
int64_t q_touchevent_modifiers(void* self);
void q_touchevent_set_modifiers(void* self, int64_t modifiers);
uint64_t q_touchevent_timestamp(void* self);
int64_t q_touchevent_type(void* self);
bool q_touchevent_spontaneous(void* self);
bool q_touchevent_is_accepted(void* self);
void q_touchevent_accept(void* self);
void q_touchevent_ignore(void* self);
bool q_touchevent_is_input_event(void* self);
bool q_touchevent_is_pointer_event(void* self);
bool q_touchevent_is_single_point_event(void* self);
int32_t q_touchevent_register_event_type();
int32_t q_touchevent_register_event_type1(int hint);
void q_touchevent_set_timestamp(void* self, uint64_t timestamp);
void q_touchevent_qbase_set_timestamp(void* self, uint64_t timestamp);
void q_touchevent_on_set_timestamp(void* self, void (*slot)(void*, uint64_t));
void q_touchevent_set_accepted(void* self, bool accepted);
void q_touchevent_qbase_set_accepted(void* self, bool accepted);
void q_touchevent_on_set_accepted(void* self, void (*slot)(void*, bool));
void q_touchevent_delete(void* self);

QScrollPrepareEvent* q_scrollprepareevent_new(void* startPos);
QScrollPrepareEvent* q_scrollprepareevent_clone(void* self);
void q_scrollprepareevent_on_clone(void* self, QScrollPrepareEvent* (*slot)());
QScrollPrepareEvent* q_scrollprepareevent_qbase_clone(void* self);
QPointF* q_scrollprepareevent_start_pos(void* self);
QSizeF* q_scrollprepareevent_viewport_size(void* self);
QRectF* q_scrollprepareevent_content_pos_range(void* self);
QPointF* q_scrollprepareevent_content_pos(void* self);
void q_scrollprepareevent_set_viewport_size(void* self, void* size);
void q_scrollprepareevent_set_content_pos_range(void* self, void* rect);
void q_scrollprepareevent_set_content_pos(void* self, void* pos);
int64_t q_scrollprepareevent_type(void* self);
bool q_scrollprepareevent_spontaneous(void* self);
bool q_scrollprepareevent_is_accepted(void* self);
void q_scrollprepareevent_accept(void* self);
void q_scrollprepareevent_ignore(void* self);
bool q_scrollprepareevent_is_input_event(void* self);
bool q_scrollprepareevent_is_pointer_event(void* self);
bool q_scrollprepareevent_is_single_point_event(void* self);
int32_t q_scrollprepareevent_register_event_type();
int32_t q_scrollprepareevent_register_event_type1(int hint);
void q_scrollprepareevent_set_accepted(void* self, bool accepted);
void q_scrollprepareevent_qbase_set_accepted(void* self, bool accepted);
void q_scrollprepareevent_on_set_accepted(void* self, void (*slot)(void*, bool));
void q_scrollprepareevent_delete(void* self);

QScrollEvent* q_scrollevent_new(void* contentPos, void* overshoot, int64_t scrollState);
QScrollEvent* q_scrollevent_clone(void* self);
void q_scrollevent_on_clone(void* self, QScrollEvent* (*slot)());
QScrollEvent* q_scrollevent_qbase_clone(void* self);
QPointF* q_scrollevent_content_pos(void* self);
QPointF* q_scrollevent_overshoot_distance(void* self);
int64_t q_scrollevent_scroll_state(void* self);
int64_t q_scrollevent_type(void* self);
bool q_scrollevent_spontaneous(void* self);
bool q_scrollevent_is_accepted(void* self);
void q_scrollevent_accept(void* self);
void q_scrollevent_ignore(void* self);
bool q_scrollevent_is_input_event(void* self);
bool q_scrollevent_is_pointer_event(void* self);
bool q_scrollevent_is_single_point_event(void* self);
int32_t q_scrollevent_register_event_type();
int32_t q_scrollevent_register_event_type1(int hint);
void q_scrollevent_set_accepted(void* self, bool accepted);
void q_scrollevent_qbase_set_accepted(void* self, bool accepted);
void q_scrollevent_on_set_accepted(void* self, void (*slot)(void*, bool));
void q_scrollevent_delete(void* self);

QScreenOrientationChangeEvent* q_screenorientationchangeevent_new(void* screen, int64_t orientation);
QScreenOrientationChangeEvent* q_screenorientationchangeevent_clone(void* self);
void q_screenorientationchangeevent_on_clone(void* self, QScreenOrientationChangeEvent* (*slot)());
QScreenOrientationChangeEvent* q_screenorientationchangeevent_qbase_clone(void* self);
QScreen* q_screenorientationchangeevent_screen(void* self);
int64_t q_screenorientationchangeevent_orientation(void* self);
int64_t q_screenorientationchangeevent_type(void* self);
bool q_screenorientationchangeevent_spontaneous(void* self);
bool q_screenorientationchangeevent_is_accepted(void* self);
void q_screenorientationchangeevent_accept(void* self);
void q_screenorientationchangeevent_ignore(void* self);
bool q_screenorientationchangeevent_is_input_event(void* self);
bool q_screenorientationchangeevent_is_pointer_event(void* self);
bool q_screenorientationchangeevent_is_single_point_event(void* self);
int32_t q_screenorientationchangeevent_register_event_type();
int32_t q_screenorientationchangeevent_register_event_type1(int hint);
void q_screenorientationchangeevent_set_accepted(void* self, bool accepted);
void q_screenorientationchangeevent_qbase_set_accepted(void* self, bool accepted);
void q_screenorientationchangeevent_on_set_accepted(void* self, void (*slot)(void*, bool));
void q_screenorientationchangeevent_delete(void* self);

QApplicationStateChangeEvent* q_applicationstatechangeevent_new(int64_t state);
QApplicationStateChangeEvent* q_applicationstatechangeevent_clone(void* self);
void q_applicationstatechangeevent_on_clone(void* self, QApplicationStateChangeEvent* (*slot)());
QApplicationStateChangeEvent* q_applicationstatechangeevent_qbase_clone(void* self);
int64_t q_applicationstatechangeevent_application_state(void* self);
int64_t q_applicationstatechangeevent_type(void* self);
bool q_applicationstatechangeevent_spontaneous(void* self);
bool q_applicationstatechangeevent_is_accepted(void* self);
void q_applicationstatechangeevent_accept(void* self);
void q_applicationstatechangeevent_ignore(void* self);
bool q_applicationstatechangeevent_is_input_event(void* self);
bool q_applicationstatechangeevent_is_pointer_event(void* self);
bool q_applicationstatechangeevent_is_single_point_event(void* self);
int32_t q_applicationstatechangeevent_register_event_type();
int32_t q_applicationstatechangeevent_register_event_type1(int hint);
void q_applicationstatechangeevent_set_accepted(void* self, bool accepted);
void q_applicationstatechangeevent_qbase_set_accepted(void* self, bool accepted);
void q_applicationstatechangeevent_on_set_accepted(void* self, void (*slot)(void*, bool));
void q_applicationstatechangeevent_delete(void* self);

QInputMethodEvent__Attribute* q_inputmethodevent__attribute_new(int64_t typ, int s, int l, void* val);
QInputMethodEvent__Attribute* q_inputmethodevent__attribute_new2(int64_t typ, int s, int l);
QInputMethodEvent__Attribute* q_inputmethodevent__attribute_new3(void* param1);
void q_inputmethodevent__attribute_operator_assign(void* self, void* param1);
void q_inputmethodevent__attribute_delete(void* self);

/// https://doc.qt.io/qt-6/qevent.html#types

typedef enum {
    QWHEELEVENT__DEFAULTDELTASPERSTEP = 120
} QWheelEvent__;

typedef enum {
    QPLATFORMSURFACEEVENT_SURFACEEVENTTYPE_SURFACECREATED = 0,
    QPLATFORMSURFACEEVENT_SURFACEEVENTTYPE_SURFACEABOUTTOBEDESTROYED = 1
} QPlatformSurfaceEvent__SurfaceEventType;

typedef enum {
    QCONTEXTMENUEVENT_REASON_MOUSE = 0,
    QCONTEXTMENUEVENT_REASON_KEYBOARD = 1,
    QCONTEXTMENUEVENT_REASON_OTHER = 2
} QContextMenuEvent__Reason;

typedef enum {
    QINPUTMETHODEVENT_ATTRIBUTETYPE_TEXTFORMAT = 0,
    QINPUTMETHODEVENT_ATTRIBUTETYPE_CURSOR = 1,
    QINPUTMETHODEVENT_ATTRIBUTETYPE_LANGUAGE = 2,
    QINPUTMETHODEVENT_ATTRIBUTETYPE_RUBY = 3,
    QINPUTMETHODEVENT_ATTRIBUTETYPE_SELECTION = 4
} QInputMethodEvent__AttributeType;

typedef enum {
    QSCROLLEVENT_SCROLLSTATE_SCROLLSTARTED = 0,
    QSCROLLEVENT_SCROLLSTATE_SCROLLUPDATED = 1,
    QSCROLLEVENT_SCROLLSTATE_SCROLLFINISHED = 2
} QScrollEvent__ScrollState;

#endif
